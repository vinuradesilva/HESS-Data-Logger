
DataLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1f4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e0  0800e308  0800e308  0000f308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ece8  0800ece8  000101ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ece8  0800ece8  0000fce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ecf0  0800ecf0  000101ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ecf0  0800ecf0  0000fcf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ecf4  0800ecf4  0000fcf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800ecf8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002760  200001ec  0800eee4  000101ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000294c  0800eee4  0001094c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016557  00000000  00000000  00010215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ee  00000000  00000000  0002676c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b0  00000000  00000000  0002a060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a6  00000000  00000000  0002b710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af2f  00000000  00000000  0002c8b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d07b  00000000  00000000  000477e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000976d4  00000000  00000000  00064860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fbf34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007214  00000000  00000000  000fbf78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0010318c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e2ec 	.word	0x0800e2ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800e2ec 	.word	0x0800e2ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__gesf2>:
 8000ca4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ca8:	e006      	b.n	8000cb8 <__cmpsf2+0x4>
 8000caa:	bf00      	nop

08000cac <__lesf2>:
 8000cac:	f04f 0c01 	mov.w	ip, #1
 8000cb0:	e002      	b.n	8000cb8 <__cmpsf2+0x4>
 8000cb2:	bf00      	nop

08000cb4 <__cmpsf2>:
 8000cb4:	f04f 0c01 	mov.w	ip, #1
 8000cb8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cbc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc8:	bf18      	it	ne
 8000cca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cce:	d011      	beq.n	8000cf4 <__cmpsf2+0x40>
 8000cd0:	b001      	add	sp, #4
 8000cd2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cd6:	bf18      	it	ne
 8000cd8:	ea90 0f01 	teqne	r0, r1
 8000cdc:	bf58      	it	pl
 8000cde:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ce2:	bf88      	it	hi
 8000ce4:	17c8      	asrhi	r0, r1, #31
 8000ce6:	bf38      	it	cc
 8000ce8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cec:	bf18      	it	ne
 8000cee:	f040 0001 	orrne.w	r0, r0, #1
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	d102      	bne.n	8000d00 <__cmpsf2+0x4c>
 8000cfa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cfe:	d105      	bne.n	8000d0c <__cmpsf2+0x58>
 8000d00:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d04:	d1e4      	bne.n	8000cd0 <__cmpsf2+0x1c>
 8000d06:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d0a:	d0e1      	beq.n	8000cd0 <__cmpsf2+0x1c>
 8000d0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <__aeabi_cfrcmple>:
 8000d14:	4684      	mov	ip, r0
 8000d16:	4608      	mov	r0, r1
 8000d18:	4661      	mov	r1, ip
 8000d1a:	e7ff      	b.n	8000d1c <__aeabi_cfcmpeq>

08000d1c <__aeabi_cfcmpeq>:
 8000d1c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d1e:	f7ff ffc9 	bl	8000cb4 <__cmpsf2>
 8000d22:	2800      	cmp	r0, #0
 8000d24:	bf48      	it	mi
 8000d26:	f110 0f00 	cmnmi.w	r0, #0
 8000d2a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d2c <__aeabi_fcmpeq>:
 8000d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d30:	f7ff fff4 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d34:	bf0c      	ite	eq
 8000d36:	2001      	moveq	r0, #1
 8000d38:	2000      	movne	r0, #0
 8000d3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3e:	bf00      	nop

08000d40 <__aeabi_fcmplt>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff ffea 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d48:	bf34      	ite	cc
 8000d4a:	2001      	movcc	r0, #1
 8000d4c:	2000      	movcs	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <__aeabi_fcmple>:
 8000d54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d58:	f7ff ffe0 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d5c:	bf94      	ite	ls
 8000d5e:	2001      	movls	r0, #1
 8000d60:	2000      	movhi	r0, #0
 8000d62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d66:	bf00      	nop

08000d68 <__aeabi_fcmpge>:
 8000d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d6c:	f7ff ffd2 	bl	8000d14 <__aeabi_cfrcmple>
 8000d70:	bf94      	ite	ls
 8000d72:	2001      	movls	r0, #1
 8000d74:	2000      	movhi	r0, #0
 8000d76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7a:	bf00      	nop

08000d7c <__aeabi_fcmpgt>:
 8000d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d80:	f7ff ffc8 	bl	8000d14 <__aeabi_cfrcmple>
 8000d84:	bf34      	ite	cc
 8000d86:	2001      	movcc	r0, #1
 8000d88:	2000      	movcs	r0, #0
 8000d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8e:	bf00      	nop

08000d90 <__aeabi_f2uiz>:
 8000d90:	0042      	lsls	r2, r0, #1
 8000d92:	d20e      	bcs.n	8000db2 <__aeabi_f2uiz+0x22>
 8000d94:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d98:	d30b      	bcc.n	8000db2 <__aeabi_f2uiz+0x22>
 8000d9a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d9e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000da2:	d409      	bmi.n	8000db8 <__aeabi_f2uiz+0x28>
 8000da4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000da8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000dac:	fa23 f002 	lsr.w	r0, r3, r2
 8000db0:	4770      	bx	lr
 8000db2:	f04f 0000 	mov.w	r0, #0
 8000db6:	4770      	bx	lr
 8000db8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000dbc:	d101      	bne.n	8000dc2 <__aeabi_f2uiz+0x32>
 8000dbe:	0242      	lsls	r2, r0, #9
 8000dc0:	d102      	bne.n	8000dc8 <__aeabi_f2uiz+0x38>
 8000dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc6:	4770      	bx	lr
 8000dc8:	f04f 0000 	mov.w	r0, #0
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <bcd2bin>:
#include "ds1307.h"

extern I2C_HandleTypeDef hi2c1;


uint8_t bcd2bin(uint8_t data){
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	71fb      	strb	r3, [r7, #7]
 return ((data>>4)*10)+(data&0x0F);
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	091b      	lsrs	r3, r3, #4
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	461a      	mov	r2, r3
 8000de2:	0092      	lsls	r2, r2, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	f003 030f 	and.w	r3, r3, #15
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	4413      	add	r3, r2
 8000df4:	b2db      	uxtb	r3, r3
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <rtc_write>:
	
	return data;
}

void rtc_write(uint8_t address,uint8_t data)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af04      	add	r7, sp, #16
 8000e06:	4603      	mov	r3, r0
 8000e08:	460a      	mov	r2, r1
 8000e0a:	71fb      	strb	r3, [r7, #7]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,address,I2C_MEMADD_SIZE_8BIT,&data,1,100)!=HAL_OK){
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	2364      	movs	r3, #100	@ 0x64
 8000e16:	9302      	str	r3, [sp, #8]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	9301      	str	r3, [sp, #4]
 8000e1c:	1dbb      	adds	r3, r7, #6
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2301      	movs	r3, #1
 8000e22:	f64f 71d0 	movw	r1, #65488	@ 0xffd0
 8000e26:	4807      	ldr	r0, [pc, #28]	@ (8000e44 <rtc_write+0x44>)
 8000e28:	f004 f890 	bl	8004f4c <HAL_I2C_Mem_Write>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <rtc_write+0x3a>
		Error_Handler(__FILE__,__LINE__);
 8000e32:	211c      	movs	r1, #28
 8000e34:	4804      	ldr	r0, [pc, #16]	@ (8000e48 <rtc_write+0x48>)
 8000e36:	f001 fb71 	bl	800251c <Error_Handler>
	}
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20002388 	.word	0x20002388
 8000e48:	0800e308 	.word	0x0800e308

08000e4c <rtc_init>:

void rtc_init(uint8_t rs,uint8_t sqwe,uint8_t out)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
 8000e56:	460b      	mov	r3, r1
 8000e58:	71bb      	strb	r3, [r7, #6]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	717b      	strb	r3, [r7, #5]
	rs&=3;
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	71fb      	strb	r3, [r7, #7]
	if (sqwe) rs|=0x10;
 8000e66:	79bb      	ldrb	r3, [r7, #6]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <rtc_init+0x28>
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f043 0310 	orr.w	r3, r3, #16
 8000e72:	71fb      	strb	r3, [r7, #7]
	if (out) rs|=0x80;
 8000e74:	797b      	ldrb	r3, [r7, #5]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <rtc_init+0x36>
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e80:	71fb      	strb	r3, [r7, #7]
	
	rtc_write(0x07,rs);
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	4619      	mov	r1, r3
 8000e86:	2007      	movs	r0, #7
 8000e88:	f7ff ffba 	bl	8000e00 <rtc_write>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <rtc_get_time>:

void rtc_get_time(uint8_t *hour,uint8_t *min,uint8_t *sec)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	@ 0x28
 8000e98:	af04      	add	r7, sp, #16
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
	uint8_t data[3];
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 8000ea0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ea4:	9302      	str	r3, [sp, #8]
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f64f 71d0 	movw	r1, #65488	@ 0xffd0
 8000eb8:	4812      	ldr	r0, [pc, #72]	@ (8000f04 <rtc_get_time+0x70>)
 8000eba:	f004 f941 	bl	8005140 <HAL_I2C_Mem_Read>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <rtc_get_time+0x38>
		Error_Handler(__FILE__,__LINE__);
 8000ec4:	212d      	movs	r1, #45	@ 0x2d
 8000ec6:	4810      	ldr	r0, [pc, #64]	@ (8000f08 <rtc_get_time+0x74>)
 8000ec8:	f001 fb28 	bl	800251c <Error_Handler>
	}	

	*sec=bcd2bin(data[0]);
 8000ecc:	7d3b      	ldrb	r3, [r7, #20]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff7e 	bl	8000dd0 <bcd2bin>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	701a      	strb	r2, [r3, #0]
	*min=bcd2bin(data[1]);
 8000edc:	7d7b      	ldrb	r3, [r7, #21]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ff76 	bl	8000dd0 <bcd2bin>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	701a      	strb	r2, [r3, #0]
	*hour=bcd2bin(data[2]);
 8000eec:	7dbb      	ldrb	r3, [r7, #22]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff6e 	bl	8000dd0 <bcd2bin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	701a      	strb	r2, [r3, #0]
}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20002388 	.word	0x20002388
 8000f08:	0800e308 	.word	0x0800e308

08000f0c <rtc_get_date>:
		Error_Handler(__FILE__,__LINE__);
	}
}

void rtc_get_date(uint8_t *week_day,uint8_t *day,uint8_t *month,uint8_t *year)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	@ 0x28
 8000f10:	af04      	add	r7, sp, #16
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
 8000f18:	603b      	str	r3, [r7, #0]
	uint8_t data[4]={0,0,0,0};
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x03,I2C_MEMADD_SIZE_8BIT,data,4,1000)!=HAL_OK){
 8000f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f22:	9302      	str	r3, [sp, #8]
 8000f24:	2304      	movs	r3, #4
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	f64f 71d0 	movw	r1, #65488	@ 0xffd0
 8000f36:	4814      	ldr	r0, [pc, #80]	@ (8000f88 <rtc_get_date+0x7c>)
 8000f38:	f004 f902 	bl	8005140 <HAL_I2C_Mem_Read>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <rtc_get_date+0x3e>
		Error_Handler(__FILE__,__LINE__);
 8000f42:	2141      	movs	r1, #65	@ 0x41
 8000f44:	4811      	ldr	r0, [pc, #68]	@ (8000f8c <rtc_get_date+0x80>)
 8000f46:	f001 fae9 	bl	800251c <Error_Handler>
	}
	
	*week_day=data[0];
 8000f4a:	7d3a      	ldrb	r2, [r7, #20]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	701a      	strb	r2, [r3, #0]
	*day=bcd2bin(data[1]);
 8000f50:	7d7b      	ldrb	r3, [r7, #21]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff3c 	bl	8000dd0 <bcd2bin>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	701a      	strb	r2, [r3, #0]
	*month=bcd2bin(data[2]);
 8000f60:	7dbb      	ldrb	r3, [r7, #22]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff34 	bl	8000dd0 <bcd2bin>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	701a      	strb	r2, [r3, #0]
	*year=bcd2bin(data[3]);
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff2c 	bl	8000dd0 <bcd2bin>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	701a      	strb	r2, [r3, #0]
}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20002388 	.word	0x20002388
 8000f8c:	0800e308 	.word	0x0800e308

08000f90 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f9a:	4804      	ldr	r0, [pc, #16]	@ (8000fac <SELECT+0x1c>)
 8000f9c:	f003 fe3e 	bl	8004c1c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f001 fe85 	bl	8002cb0 <HAL_Delay>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40010800 	.word	0x40010800

08000fb0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fba:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <DESELECT+0x1c>)
 8000fbc:	f003 fe2e 	bl	8004c1c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f001 fe75 	bl	8002cb0 <HAL_Delay>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40010800 	.word	0x40010800

08000fd0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000fda:	bf00      	nop
 8000fdc:	4b08      	ldr	r3, [pc, #32]	@ (8001000 <SPI_TxByte+0x30>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d1f8      	bne.n	8000fdc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000fea:	1df9      	adds	r1, r7, #7
 8000fec:	2364      	movs	r3, #100	@ 0x64
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4803      	ldr	r0, [pc, #12]	@ (8001000 <SPI_TxByte+0x30>)
 8000ff2:	f005 fc03 	bl	80067fc <HAL_SPI_Transmit>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200023dc 	.word	0x200023dc

08001004 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001010:	bf00      	nop
 8001012:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <SPI_TxBuffer+0x30>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b02      	cmp	r3, #2
 800101e:	d1f8      	bne.n	8001012 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001020:	887a      	ldrh	r2, [r7, #2]
 8001022:	2364      	movs	r3, #100	@ 0x64
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4803      	ldr	r0, [pc, #12]	@ (8001034 <SPI_TxBuffer+0x30>)
 8001028:	f005 fbe8 	bl	80067fc <HAL_SPI_Transmit>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200023dc 	.word	0x200023dc

08001038 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800103e:	23ff      	movs	r3, #255	@ 0xff
 8001040:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001042:	bf00      	nop
 8001044:	4b09      	ldr	r3, [pc, #36]	@ (800106c <SPI_RxByte+0x34>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b02      	cmp	r3, #2
 8001050:	d1f8      	bne.n	8001044 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001052:	1dba      	adds	r2, r7, #6
 8001054:	1df9      	adds	r1, r7, #7
 8001056:	2364      	movs	r3, #100	@ 0x64
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	4803      	ldr	r0, [pc, #12]	@ (800106c <SPI_RxByte+0x34>)
 800105e:	f005 fd11 	bl	8006a84 <HAL_SPI_TransmitReceive>

	return data;
 8001062:	79bb      	ldrb	r3, [r7, #6]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200023dc 	.word	0x200023dc

08001070 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001078:	f7ff ffde 	bl	8001038 <SPI_RxByte>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	701a      	strb	r2, [r3, #0]
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001092:	4b0a      	ldr	r3, [pc, #40]	@ (80010bc <SD_ReadyWait+0x30>)
 8001094:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001098:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800109a:	f7ff ffcd 	bl	8001038 <SPI_RxByte>
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2bff      	cmp	r3, #255	@ 0xff
 80010a6:	d003      	beq.n	80010b0 <SD_ReadyWait+0x24>
 80010a8:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <SD_ReadyWait+0x30>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1f4      	bne.n	800109a <SD_ReadyWait+0xe>

	return res;
 80010b0:	79fb      	ldrb	r3, [r7, #7]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000020a 	.word	0x2000020a

080010c0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80010c6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80010ca:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80010cc:	f7ff ff70 	bl	8000fb0 <DESELECT>
	for(int i = 0; i < 10; i++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	e005      	b.n	80010e2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80010d6:	20ff      	movs	r0, #255	@ 0xff
 80010d8:	f7ff ff7a 	bl	8000fd0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	3301      	adds	r3, #1
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	2b09      	cmp	r3, #9
 80010e6:	ddf6      	ble.n	80010d6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80010e8:	f7ff ff52 	bl	8000f90 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80010ec:	2340      	movs	r3, #64	@ 0x40
 80010ee:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001100:	2395      	movs	r3, #149	@ 0x95
 8001102:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001104:	463b      	mov	r3, r7
 8001106:	2106      	movs	r1, #6
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff7b 	bl	8001004 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800110e:	e002      	b.n	8001116 <SD_PowerOn+0x56>
	{
		cnt--;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3b01      	subs	r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001116:	f7ff ff8f 	bl	8001038 <SPI_RxByte>
 800111a:	4603      	mov	r3, r0
 800111c:	2b01      	cmp	r3, #1
 800111e:	d002      	beq.n	8001126 <SD_PowerOn+0x66>
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f4      	bne.n	8001110 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001126:	f7ff ff43 	bl	8000fb0 <DESELECT>
	SPI_TxByte(0XFF);
 800112a:	20ff      	movs	r0, #255	@ 0xff
 800112c:	f7ff ff50 	bl	8000fd0 <SPI_TxByte>

	PowerFlag = 1;
 8001130:	4b03      	ldr	r3, [pc, #12]	@ (8001140 <SD_PowerOn+0x80>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000020d 	.word	0x2000020d

08001144 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001148:	4b03      	ldr	r3, [pc, #12]	@ (8001158 <SD_PowerOff+0x14>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	2000020d 	.word	0x2000020d

0800115c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001160:	4b02      	ldr	r3, [pc, #8]	@ (800116c <SD_CheckPower+0x10>)
 8001162:	781b      	ldrb	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	2000020d 	.word	0x2000020d

08001170 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800117a:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <SD_RxDataBlock+0x58>)
 800117c:	22c8      	movs	r2, #200	@ 0xc8
 800117e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001180:	f7ff ff5a 	bl	8001038 <SPI_RxByte>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	2bff      	cmp	r3, #255	@ 0xff
 800118c:	d103      	bne.n	8001196 <SD_RxDataBlock+0x26>
 800118e:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <SD_RxDataBlock+0x58>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f4      	bne.n	8001180 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	2bfe      	cmp	r3, #254	@ 0xfe
 800119a:	d001      	beq.n	80011a0 <SD_RxDataBlock+0x30>
 800119c:	2300      	movs	r3, #0
 800119e:	e00f      	b.n	80011c0 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ff62 	bl	8001070 <SPI_RxBytePtr>
	} while(len--);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	1e5a      	subs	r2, r3, #1
 80011b0:	603a      	str	r2, [r7, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f4      	bne.n	80011a0 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80011b6:	f7ff ff3f 	bl	8001038 <SPI_RxByte>
	SPI_RxByte();
 80011ba:	f7ff ff3d 	bl	8001038 <SPI_RxByte>

	return TRUE;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000208 	.word	0x20000208

080011cc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80011dc:	f7ff ff56 	bl	800108c <SD_ReadyWait>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2bff      	cmp	r3, #255	@ 0xff
 80011e4:	d001      	beq.n	80011ea <SD_TxDataBlock+0x1e>
 80011e6:	2300      	movs	r3, #0
 80011e8:	e02f      	b.n	800124a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80011ea:	78fb      	ldrb	r3, [r7, #3]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff feef 	bl	8000fd0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	2bfd      	cmp	r3, #253	@ 0xfd
 80011f6:	d020      	beq.n	800123a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80011f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff01 	bl	8001004 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001202:	f7ff ff19 	bl	8001038 <SPI_RxByte>
		SPI_RxByte();
 8001206:	f7ff ff17 	bl	8001038 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800120a:	e00b      	b.n	8001224 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800120c:	f7ff ff14 	bl	8001038 <SPI_RxByte>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	f003 031f 	and.w	r3, r3, #31
 800121a:	2b05      	cmp	r3, #5
 800121c:	d006      	beq.n	800122c <SD_TxDataBlock+0x60>
			i++;
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	3301      	adds	r3, #1
 8001222:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001224:	7bbb      	ldrb	r3, [r7, #14]
 8001226:	2b40      	cmp	r3, #64	@ 0x40
 8001228:	d9f0      	bls.n	800120c <SD_TxDataBlock+0x40>
 800122a:	e000      	b.n	800122e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800122c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800122e:	bf00      	nop
 8001230:	f7ff ff02 	bl	8001038 <SPI_RxByte>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0fa      	beq.n	8001230 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	f003 031f 	and.w	r3, r3, #31
 8001240:	2b05      	cmp	r3, #5
 8001242:	d101      	bne.n	8001248 <SD_TxDataBlock+0x7c>
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	6039      	str	r1, [r7, #0]
 800125c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800125e:	f7ff ff15 	bl	800108c <SD_ReadyWait>
 8001262:	4603      	mov	r3, r0
 8001264:	2bff      	cmp	r3, #255	@ 0xff
 8001266:	d001      	beq.n	800126c <SD_SendCmd+0x1a>
 8001268:	23ff      	movs	r3, #255	@ 0xff
 800126a:	e042      	b.n	80012f2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff feae 	bl	8000fd0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	0e1b      	lsrs	r3, r3, #24
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fea8 	bl	8000fd0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	0c1b      	lsrs	r3, r3, #16
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fea2 	bl	8000fd0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	0a1b      	lsrs	r3, r3, #8
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fe9c 	bl	8000fd0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fe97 	bl	8000fd0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b40      	cmp	r3, #64	@ 0x40
 80012a6:	d102      	bne.n	80012ae <SD_SendCmd+0x5c>
 80012a8:	2395      	movs	r3, #149	@ 0x95
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e007      	b.n	80012be <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b48      	cmp	r3, #72	@ 0x48
 80012b2:	d102      	bne.n	80012ba <SD_SendCmd+0x68>
 80012b4:	2387      	movs	r3, #135	@ 0x87
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e001      	b.n	80012be <SD_SendCmd+0x6c>
	else crc = 1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fe85 	bl	8000fd0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b4c      	cmp	r3, #76	@ 0x4c
 80012ca:	d101      	bne.n	80012d0 <SD_SendCmd+0x7e>
 80012cc:	f7ff feb4 	bl	8001038 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80012d0:	230a      	movs	r3, #10
 80012d2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80012d4:	f7ff feb0 	bl	8001038 <SPI_RxByte>
 80012d8:	4603      	mov	r3, r0
 80012da:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80012dc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	da05      	bge.n	80012f0 <SD_SendCmd+0x9e>
 80012e4:	7bbb      	ldrb	r3, [r7, #14]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	73bb      	strb	r3, [r7, #14]
 80012ea:	7bbb      	ldrb	r3, [r7, #14]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f1      	bne.n	80012d4 <SD_SendCmd+0x82>

	return res;
 80012f0:	7b7b      	ldrb	r3, [r7, #13]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SD_disk_initialize+0x14>
 800130c:	2301      	movs	r3, #1
 800130e:	e0d1      	b.n	80014b4 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001310:	4b6a      	ldr	r3, [pc, #424]	@ (80014bc <SD_disk_initialize+0x1c0>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <SD_disk_initialize+0x2a>
 800131e:	4b67      	ldr	r3, [pc, #412]	@ (80014bc <SD_disk_initialize+0x1c0>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	e0c6      	b.n	80014b4 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001326:	f7ff fecb 	bl	80010c0 <SD_PowerOn>

	/* slave select */
	SELECT();
 800132a:	f7ff fe31 	bl	8000f90 <SELECT>

	/* check disk type */
	type = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001332:	2100      	movs	r1, #0
 8001334:	2040      	movs	r0, #64	@ 0x40
 8001336:	f7ff ff8c 	bl	8001252 <SD_SendCmd>
 800133a:	4603      	mov	r3, r0
 800133c:	2b01      	cmp	r3, #1
 800133e:	f040 80a1 	bne.w	8001484 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001342:	4b5f      	ldr	r3, [pc, #380]	@ (80014c0 <SD_disk_initialize+0x1c4>)
 8001344:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001348:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800134a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800134e:	2048      	movs	r0, #72	@ 0x48
 8001350:	f7ff ff7f 	bl	8001252 <SD_SendCmd>
 8001354:	4603      	mov	r3, r0
 8001356:	2b01      	cmp	r3, #1
 8001358:	d155      	bne.n	8001406 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800135a:	2300      	movs	r3, #0
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	e00c      	b.n	800137a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001360:	7bfc      	ldrb	r4, [r7, #15]
 8001362:	f7ff fe69 	bl	8001038 <SPI_RxByte>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	f104 0310 	add.w	r3, r4, #16
 800136e:	443b      	add	r3, r7
 8001370:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	3301      	adds	r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	2b03      	cmp	r3, #3
 800137e:	d9ef      	bls.n	8001360 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001380:	7abb      	ldrb	r3, [r7, #10]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d17e      	bne.n	8001484 <SD_disk_initialize+0x188>
 8001386:	7afb      	ldrb	r3, [r7, #11]
 8001388:	2baa      	cmp	r3, #170	@ 0xaa
 800138a:	d17b      	bne.n	8001484 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800138c:	2100      	movs	r1, #0
 800138e:	2077      	movs	r0, #119	@ 0x77
 8001390:	f7ff ff5f 	bl	8001252 <SD_SendCmd>
 8001394:	4603      	mov	r3, r0
 8001396:	2b01      	cmp	r3, #1
 8001398:	d807      	bhi.n	80013aa <SD_disk_initialize+0xae>
 800139a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800139e:	2069      	movs	r0, #105	@ 0x69
 80013a0:	f7ff ff57 	bl	8001252 <SD_SendCmd>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d004      	beq.n	80013b4 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80013aa:	4b45      	ldr	r3, [pc, #276]	@ (80014c0 <SD_disk_initialize+0x1c4>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1ec      	bne.n	800138c <SD_disk_initialize+0x90>
 80013b2:	e000      	b.n	80013b6 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80013b4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80013b6:	4b42      	ldr	r3, [pc, #264]	@ (80014c0 <SD_disk_initialize+0x1c4>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d062      	beq.n	8001484 <SD_disk_initialize+0x188>
 80013be:	2100      	movs	r1, #0
 80013c0:	207a      	movs	r0, #122	@ 0x7a
 80013c2:	f7ff ff46 	bl	8001252 <SD_SendCmd>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d15b      	bne.n	8001484 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	e00c      	b.n	80013ec <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80013d2:	7bfc      	ldrb	r4, [r7, #15]
 80013d4:	f7ff fe30 	bl	8001038 <SPI_RxByte>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	f104 0310 	add.w	r3, r4, #16
 80013e0:	443b      	add	r3, r7
 80013e2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	3301      	adds	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d9ef      	bls.n	80013d2 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80013f2:	7a3b      	ldrb	r3, [r7, #8]
 80013f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SD_disk_initialize+0x104>
 80013fc:	230c      	movs	r3, #12
 80013fe:	e000      	b.n	8001402 <SD_disk_initialize+0x106>
 8001400:	2304      	movs	r3, #4
 8001402:	73bb      	strb	r3, [r7, #14]
 8001404:	e03e      	b.n	8001484 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001406:	2100      	movs	r1, #0
 8001408:	2077      	movs	r0, #119	@ 0x77
 800140a:	f7ff ff22 	bl	8001252 <SD_SendCmd>
 800140e:	4603      	mov	r3, r0
 8001410:	2b01      	cmp	r3, #1
 8001412:	d808      	bhi.n	8001426 <SD_disk_initialize+0x12a>
 8001414:	2100      	movs	r1, #0
 8001416:	2069      	movs	r0, #105	@ 0x69
 8001418:	f7ff ff1b 	bl	8001252 <SD_SendCmd>
 800141c:	4603      	mov	r3, r0
 800141e:	2b01      	cmp	r3, #1
 8001420:	d801      	bhi.n	8001426 <SD_disk_initialize+0x12a>
 8001422:	2302      	movs	r3, #2
 8001424:	e000      	b.n	8001428 <SD_disk_initialize+0x12c>
 8001426:	2301      	movs	r3, #1
 8001428:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800142a:	7bbb      	ldrb	r3, [r7, #14]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d10e      	bne.n	800144e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001430:	2100      	movs	r1, #0
 8001432:	2077      	movs	r0, #119	@ 0x77
 8001434:	f7ff ff0d 	bl	8001252 <SD_SendCmd>
 8001438:	4603      	mov	r3, r0
 800143a:	2b01      	cmp	r3, #1
 800143c:	d80e      	bhi.n	800145c <SD_disk_initialize+0x160>
 800143e:	2100      	movs	r1, #0
 8001440:	2069      	movs	r0, #105	@ 0x69
 8001442:	f7ff ff06 	bl	8001252 <SD_SendCmd>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d107      	bne.n	800145c <SD_disk_initialize+0x160>
 800144c:	e00c      	b.n	8001468 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800144e:	2100      	movs	r1, #0
 8001450:	2041      	movs	r0, #65	@ 0x41
 8001452:	f7ff fefe 	bl	8001252 <SD_SendCmd>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d004      	beq.n	8001466 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800145c:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <SD_disk_initialize+0x1c4>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1e2      	bne.n	800142a <SD_disk_initialize+0x12e>
 8001464:	e000      	b.n	8001468 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001466:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001468:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <SD_disk_initialize+0x1c4>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d007      	beq.n	8001480 <SD_disk_initialize+0x184>
 8001470:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001474:	2050      	movs	r0, #80	@ 0x50
 8001476:	f7ff feec 	bl	8001252 <SD_SendCmd>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SD_disk_initialize+0x188>
 8001480:	2300      	movs	r3, #0
 8001482:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001484:	4a0f      	ldr	r2, [pc, #60]	@ (80014c4 <SD_disk_initialize+0x1c8>)
 8001486:	7bbb      	ldrb	r3, [r7, #14]
 8001488:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800148a:	f7ff fd91 	bl	8000fb0 <DESELECT>
	SPI_RxByte();
 800148e:	f7ff fdd3 	bl	8001038 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001492:	7bbb      	ldrb	r3, [r7, #14]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d008      	beq.n	80014aa <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001498:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <SD_disk_initialize+0x1c0>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <SD_disk_initialize+0x1c0>)
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e001      	b.n	80014ae <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80014aa:	f7ff fe4b 	bl	8001144 <SD_PowerOff>
	}

	return Stat;
 80014ae:	4b03      	ldr	r3, [pc, #12]	@ (80014bc <SD_disk_initialize+0x1c0>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd90      	pop	{r4, r7, pc}
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000208 	.word	0x20000208
 80014c4:	2000020c 	.word	0x2000020c

080014c8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SD_disk_status+0x14>
 80014d8:	2301      	movs	r3, #1
 80014da:	e002      	b.n	80014e2 <SD_disk_status+0x1a>
	return Stat;
 80014dc:	4b03      	ldr	r3, [pc, #12]	@ (80014ec <SD_disk_status+0x24>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b2db      	uxtb	r3, r3
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	20000000 	.word	0x20000000

080014f0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	4603      	mov	r3, r0
 80014fe:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <SD_disk_read+0x1c>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <SD_disk_read+0x20>
 800150c:	2304      	movs	r3, #4
 800150e:	e051      	b.n	80015b4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001510:	4b2a      	ldr	r3, [pc, #168]	@ (80015bc <SD_disk_read+0xcc>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SD_disk_read+0x32>
 800151e:	2303      	movs	r3, #3
 8001520:	e048      	b.n	80015b4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001522:	4b27      	ldr	r3, [pc, #156]	@ (80015c0 <SD_disk_read+0xd0>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <SD_disk_read+0x44>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	025b      	lsls	r3, r3, #9
 8001532:	607b      	str	r3, [r7, #4]

	SELECT();
 8001534:	f7ff fd2c 	bl	8000f90 <SELECT>

	if (count == 1)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d111      	bne.n	8001562 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	2051      	movs	r0, #81	@ 0x51
 8001542:	f7ff fe86 	bl	8001252 <SD_SendCmd>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d129      	bne.n	80015a0 <SD_disk_read+0xb0>
 800154c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001550:	68b8      	ldr	r0, [r7, #8]
 8001552:	f7ff fe0d 	bl	8001170 <SD_RxDataBlock>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d021      	beq.n	80015a0 <SD_disk_read+0xb0>
 800155c:	2300      	movs	r3, #0
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	e01e      	b.n	80015a0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	2052      	movs	r0, #82	@ 0x52
 8001566:	f7ff fe74 	bl	8001252 <SD_SendCmd>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d117      	bne.n	80015a0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001570:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001574:	68b8      	ldr	r0, [r7, #8]
 8001576:	f7ff fdfb 	bl	8001170 <SD_RxDataBlock>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00a      	beq.n	8001596 <SD_disk_read+0xa6>
				buff += 512;
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001586:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	3b01      	subs	r3, #1
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1ed      	bne.n	8001570 <SD_disk_read+0x80>
 8001594:	e000      	b.n	8001598 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001596:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001598:	2100      	movs	r1, #0
 800159a:	204c      	movs	r0, #76	@ 0x4c
 800159c:	f7ff fe59 	bl	8001252 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80015a0:	f7ff fd06 	bl	8000fb0 <DESELECT>
	SPI_RxByte();
 80015a4:	f7ff fd48 	bl	8001038 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bf14      	ite	ne
 80015ae:	2301      	movne	r3, #1
 80015b0:	2300      	moveq	r3, #0
 80015b2:	b2db      	uxtb	r3, r3
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000000 	.word	0x20000000
 80015c0:	2000020c 	.word	0x2000020c

080015c4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <SD_disk_write+0x1c>
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <SD_disk_write+0x20>
 80015e0:	2304      	movs	r3, #4
 80015e2:	e06b      	b.n	80016bc <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80015e4:	4b37      	ldr	r3, [pc, #220]	@ (80016c4 <SD_disk_write+0x100>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <SD_disk_write+0x32>
 80015f2:	2303      	movs	r3, #3
 80015f4:	e062      	b.n	80016bc <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80015f6:	4b33      	ldr	r3, [pc, #204]	@ (80016c4 <SD_disk_write+0x100>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <SD_disk_write+0x44>
 8001604:	2302      	movs	r3, #2
 8001606:	e059      	b.n	80016bc <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001608:	4b2f      	ldr	r3, [pc, #188]	@ (80016c8 <SD_disk_write+0x104>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <SD_disk_write+0x56>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	025b      	lsls	r3, r3, #9
 8001618:	607b      	str	r3, [r7, #4]

	SELECT();
 800161a:	f7ff fcb9 	bl	8000f90 <SELECT>

	if (count == 1)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d110      	bne.n	8001646 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	2058      	movs	r0, #88	@ 0x58
 8001628:	f7ff fe13 	bl	8001252 <SD_SendCmd>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d13a      	bne.n	80016a8 <SD_disk_write+0xe4>
 8001632:	21fe      	movs	r1, #254	@ 0xfe
 8001634:	68b8      	ldr	r0, [r7, #8]
 8001636:	f7ff fdc9 	bl	80011cc <SD_TxDataBlock>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d033      	beq.n	80016a8 <SD_disk_write+0xe4>
			count = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	e030      	b.n	80016a8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001646:	4b20      	ldr	r3, [pc, #128]	@ (80016c8 <SD_disk_write+0x104>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001652:	2100      	movs	r1, #0
 8001654:	2077      	movs	r0, #119	@ 0x77
 8001656:	f7ff fdfc 	bl	8001252 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800165a:	6839      	ldr	r1, [r7, #0]
 800165c:	2057      	movs	r0, #87	@ 0x57
 800165e:	f7ff fdf8 	bl	8001252 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	2059      	movs	r0, #89	@ 0x59
 8001666:	f7ff fdf4 	bl	8001252 <SD_SendCmd>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d11b      	bne.n	80016a8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001670:	21fc      	movs	r1, #252	@ 0xfc
 8001672:	68b8      	ldr	r0, [r7, #8]
 8001674:	f7ff fdaa 	bl	80011cc <SD_TxDataBlock>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00a      	beq.n	8001694 <SD_disk_write+0xd0>
				buff += 512;
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001684:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	3b01      	subs	r3, #1
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1ee      	bne.n	8001670 <SD_disk_write+0xac>
 8001692:	e000      	b.n	8001696 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001694:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001696:	21fd      	movs	r1, #253	@ 0xfd
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff fd97 	bl	80011cc <SD_TxDataBlock>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <SD_disk_write+0xe4>
			{
				count = 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80016a8:	f7ff fc82 	bl	8000fb0 <DESELECT>
	SPI_RxByte();
 80016ac:	f7ff fcc4 	bl	8001038 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf14      	ite	ne
 80016b6:	2301      	movne	r3, #1
 80016b8:	2300      	moveq	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000000 	.word	0x20000000
 80016c8:	2000020c 	.word	0x2000020c

080016cc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b08b      	sub	sp, #44	@ 0x2c
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	603a      	str	r2, [r7, #0]
 80016d6:	71fb      	strb	r3, [r7, #7]
 80016d8:	460b      	mov	r3, r1
 80016da:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <SD_disk_ioctl+0x1e>
 80016e6:	2304      	movs	r3, #4
 80016e8:	e113      	b.n	8001912 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80016f0:	79bb      	ldrb	r3, [r7, #6]
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	d124      	bne.n	8001740 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d012      	beq.n	8001724 <SD_disk_ioctl+0x58>
 80016fe:	2b02      	cmp	r3, #2
 8001700:	dc1a      	bgt.n	8001738 <SD_disk_ioctl+0x6c>
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <SD_disk_ioctl+0x40>
 8001706:	2b01      	cmp	r3, #1
 8001708:	d006      	beq.n	8001718 <SD_disk_ioctl+0x4c>
 800170a:	e015      	b.n	8001738 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800170c:	f7ff fd1a 	bl	8001144 <SD_PowerOff>
			res = RES_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001716:	e0fa      	b.n	800190e <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001718:	f7ff fcd2 	bl	80010c0 <SD_PowerOn>
			res = RES_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001722:	e0f4      	b.n	800190e <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001724:	6a3b      	ldr	r3, [r7, #32]
 8001726:	1c5c      	adds	r4, r3, #1
 8001728:	f7ff fd18 	bl	800115c <SD_CheckPower>
 800172c:	4603      	mov	r3, r0
 800172e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001730:	2300      	movs	r3, #0
 8001732:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001736:	e0ea      	b.n	800190e <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001738:	2304      	movs	r3, #4
 800173a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800173e:	e0e6      	b.n	800190e <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001740:	4b76      	ldr	r3, [pc, #472]	@ (800191c <SD_disk_ioctl+0x250>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SD_disk_ioctl+0x86>
 800174e:	2303      	movs	r3, #3
 8001750:	e0df      	b.n	8001912 <SD_disk_ioctl+0x246>

		SELECT();
 8001752:	f7ff fc1d 	bl	8000f90 <SELECT>

		switch (ctrl)
 8001756:	79bb      	ldrb	r3, [r7, #6]
 8001758:	2b0d      	cmp	r3, #13
 800175a:	f200 80c9 	bhi.w	80018f0 <SD_disk_ioctl+0x224>
 800175e:	a201      	add	r2, pc, #4	@ (adr r2, 8001764 <SD_disk_ioctl+0x98>)
 8001760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001764:	0800185b 	.word	0x0800185b
 8001768:	0800179d 	.word	0x0800179d
 800176c:	0800184b 	.word	0x0800184b
 8001770:	080018f1 	.word	0x080018f1
 8001774:	080018f1 	.word	0x080018f1
 8001778:	080018f1 	.word	0x080018f1
 800177c:	080018f1 	.word	0x080018f1
 8001780:	080018f1 	.word	0x080018f1
 8001784:	080018f1 	.word	0x080018f1
 8001788:	080018f1 	.word	0x080018f1
 800178c:	080018f1 	.word	0x080018f1
 8001790:	0800186d 	.word	0x0800186d
 8001794:	08001891 	.word	0x08001891
 8001798:	080018b5 	.word	0x080018b5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800179c:	2100      	movs	r1, #0
 800179e:	2049      	movs	r0, #73	@ 0x49
 80017a0:	f7ff fd57 	bl	8001252 <SD_SendCmd>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f040 80a6 	bne.w	80018f8 <SD_disk_ioctl+0x22c>
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	2110      	movs	r1, #16
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fcdc 	bl	8001170 <SD_RxDataBlock>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 809c 	beq.w	80018f8 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80017c0:	7b3b      	ldrb	r3, [r7, #12]
 80017c2:	099b      	lsrs	r3, r3, #6
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d10d      	bne.n	80017e6 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80017ca:	7d7b      	ldrb	r3, [r7, #21]
 80017cc:	461a      	mov	r2, r3
 80017ce:	7d3b      	ldrb	r3, [r7, #20]
 80017d0:	021b      	lsls	r3, r3, #8
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	3301      	adds	r3, #1
 80017da:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80017dc:	8bfb      	ldrh	r3, [r7, #30]
 80017de:	029a      	lsls	r2, r3, #10
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	e02d      	b.n	8001842 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80017e6:	7c7b      	ldrb	r3, [r7, #17]
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	7dbb      	ldrb	r3, [r7, #22]
 80017f0:	09db      	lsrs	r3, r3, #7
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	7d7b      	ldrb	r3, [r7, #21]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	f003 0306 	and.w	r3, r3, #6
 8001802:	b2db      	uxtb	r3, r3
 8001804:	4413      	add	r3, r2
 8001806:	b2db      	uxtb	r3, r3
 8001808:	3302      	adds	r3, #2
 800180a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800180e:	7d3b      	ldrb	r3, [r7, #20]
 8001810:	099b      	lsrs	r3, r3, #6
 8001812:	b2db      	uxtb	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	7cfb      	ldrb	r3, [r7, #19]
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	b29b      	uxth	r3, r3
 800181c:	4413      	add	r3, r2
 800181e:	b29a      	uxth	r2, r3
 8001820:	7cbb      	ldrb	r3, [r7, #18]
 8001822:	029b      	lsls	r3, r3, #10
 8001824:	b29b      	uxth	r3, r3
 8001826:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800182a:	b29b      	uxth	r3, r3
 800182c:	4413      	add	r3, r2
 800182e:	b29b      	uxth	r3, r3
 8001830:	3301      	adds	r3, #1
 8001832:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001834:	8bfa      	ldrh	r2, [r7, #30]
 8001836:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800183a:	3b09      	subs	r3, #9
 800183c:	409a      	lsls	r2, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001848:	e056      	b.n	80018f8 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001850:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001858:	e055      	b.n	8001906 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800185a:	f7ff fc17 	bl	800108c <SD_ReadyWait>
 800185e:	4603      	mov	r3, r0
 8001860:	2bff      	cmp	r3, #255	@ 0xff
 8001862:	d14b      	bne.n	80018fc <SD_disk_ioctl+0x230>
 8001864:	2300      	movs	r3, #0
 8001866:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800186a:	e047      	b.n	80018fc <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800186c:	2100      	movs	r1, #0
 800186e:	2049      	movs	r0, #73	@ 0x49
 8001870:	f7ff fcef 	bl	8001252 <SD_SendCmd>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d142      	bne.n	8001900 <SD_disk_ioctl+0x234>
 800187a:	2110      	movs	r1, #16
 800187c:	6a38      	ldr	r0, [r7, #32]
 800187e:	f7ff fc77 	bl	8001170 <SD_RxDataBlock>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d03b      	beq.n	8001900 <SD_disk_ioctl+0x234>
 8001888:	2300      	movs	r3, #0
 800188a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800188e:	e037      	b.n	8001900 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001890:	2100      	movs	r1, #0
 8001892:	204a      	movs	r0, #74	@ 0x4a
 8001894:	f7ff fcdd 	bl	8001252 <SD_SendCmd>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d132      	bne.n	8001904 <SD_disk_ioctl+0x238>
 800189e:	2110      	movs	r1, #16
 80018a0:	6a38      	ldr	r0, [r7, #32]
 80018a2:	f7ff fc65 	bl	8001170 <SD_RxDataBlock>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d02b      	beq.n	8001904 <SD_disk_ioctl+0x238>
 80018ac:	2300      	movs	r3, #0
 80018ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80018b2:	e027      	b.n	8001904 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80018b4:	2100      	movs	r1, #0
 80018b6:	207a      	movs	r0, #122	@ 0x7a
 80018b8:	f7ff fccb 	bl	8001252 <SD_SendCmd>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d116      	bne.n	80018f0 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80018c8:	e00b      	b.n	80018e2 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 80018ca:	6a3c      	ldr	r4, [r7, #32]
 80018cc:	1c63      	adds	r3, r4, #1
 80018ce:	623b      	str	r3, [r7, #32]
 80018d0:	f7ff fbb2 	bl	8001038 <SPI_RxByte>
 80018d4:	4603      	mov	r3, r0
 80018d6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80018d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018dc:	3301      	adds	r3, #1
 80018de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80018e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d9ef      	bls.n	80018ca <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 80018f0:	2304      	movs	r3, #4
 80018f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80018f6:	e006      	b.n	8001906 <SD_disk_ioctl+0x23a>
			break;
 80018f8:	bf00      	nop
 80018fa:	e004      	b.n	8001906 <SD_disk_ioctl+0x23a>
			break;
 80018fc:	bf00      	nop
 80018fe:	e002      	b.n	8001906 <SD_disk_ioctl+0x23a>
			break;
 8001900:	bf00      	nop
 8001902:	e000      	b.n	8001906 <SD_disk_ioctl+0x23a>
			break;
 8001904:	bf00      	nop
		}

		DESELECT();
 8001906:	f7ff fb53 	bl	8000fb0 <DESELECT>
		SPI_RxByte();
 800190a:	f7ff fb95 	bl	8001038 <SPI_RxByte>
	}

	return res;
 800190e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001912:	4618      	mov	r0, r3
 8001914:	372c      	adds	r7, #44	@ 0x2c
 8001916:	46bd      	mov	sp, r7
 8001918:	bd90      	pop	{r4, r7, pc}
 800191a:	bf00      	nop
 800191c:	20000000 	.word	0x20000000

08001920 <get_time>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_time(){
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	rtc_get_time(&hour, &min, &sec);
 8001924:	4a06      	ldr	r2, [pc, #24]	@ (8001940 <get_time+0x20>)
 8001926:	4907      	ldr	r1, [pc, #28]	@ (8001944 <get_time+0x24>)
 8001928:	4807      	ldr	r0, [pc, #28]	@ (8001948 <get_time+0x28>)
 800192a:	f7ff fab3 	bl	8000e94 <rtc_get_time>
	rtc_get_date(&week_day, &day, &month, &year);
 800192e:	4b07      	ldr	r3, [pc, #28]	@ (800194c <get_time+0x2c>)
 8001930:	4a07      	ldr	r2, [pc, #28]	@ (8001950 <get_time+0x30>)
 8001932:	4908      	ldr	r1, [pc, #32]	@ (8001954 <get_time+0x34>)
 8001934:	4808      	ldr	r0, [pc, #32]	@ (8001958 <get_time+0x38>)
 8001936:	f7ff fae9 	bl	8000f0c <rtc_get_date>
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20002564 	.word	0x20002564
 8001944:	20002565 	.word	0x20002565
 8001948:	20002566 	.word	0x20002566
 800194c:	2000256a 	.word	0x2000256a
 8001950:	20002569 	.word	0x20002569
 8001954:	20002568 	.word	0x20002568
 8001958:	20002567 	.word	0x20002567

0800195c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 10; i++) {
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	e00a      	b.n	8001980 <HAL_ADC_ConvCpltCallback+0x24>
		adc[i] = buf[i];
 800196a:	4a0a      	ldr	r2, [pc, #40]	@ (8001994 <HAL_ADC_ConvCpltCallback+0x38>)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001972:	4909      	ldr	r1, [pc, #36]	@ (8001998 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3301      	adds	r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b09      	cmp	r3, #9
 8001984:	ddf1      	ble.n	800196a <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	200024c4 	.word	0x200024c4
 8001998:	200024ec 	.word	0x200024ec

0800199c <save_data_to_csv>:

void save_data_to_csv()
{
 800199c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019a0:	b0d3      	sub	sp, #332	@ 0x14c
 80019a2:	af2c      	add	r7, sp, #176	@ 0xb0
	get_time();
 80019a4:	f7ff ffbc 	bl	8001920 <get_time>

    // Mount the filesystem
    f_mount(&fs, "", 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	4992      	ldr	r1, [pc, #584]	@ (8001bf4 <save_data_to_csv+0x258>)
 80019ac:	4892      	ldr	r0, [pc, #584]	@ (8001bf8 <save_data_to_csv+0x25c>)
 80019ae:	f008 fb91 	bl	800a0d4 <f_mount>

    // Open the CSV file
    if (f_open(&fil, "data.csv", FA_OPEN_ALWAYS | FA_WRITE | FA_READ) == FR_OK)
 80019b2:	2213      	movs	r2, #19
 80019b4:	4991      	ldr	r1, [pc, #580]	@ (8001bfc <save_data_to_csv+0x260>)
 80019b6:	4892      	ldr	r0, [pc, #584]	@ (8001c00 <save_data_to_csv+0x264>)
 80019b8:	f008 fbd6 	bl	800a168 <f_open>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f040 810e 	bne.w	8001be0 <save_data_to_csv+0x244>
    {
        // Move the file pointer to the end
        f_lseek(&fil, fil.fsize);
 80019c4:	4b8e      	ldr	r3, [pc, #568]	@ (8001c00 <save_data_to_csv+0x264>)
 80019c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4619      	mov	r1, r3
 80019ce:	488c      	ldr	r0, [pc, #560]	@ (8001c00 <save_data_to_csv+0x264>)
 80019d0:	f009 fa10 	bl	800adf4 <f_lseek>

        // Format the battery values into a CSV format with 2 decimal places
        sprintf(buffer, "%02d-%02d-%02d %02d:%02d:%02d,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n", year + 2000, month, day, hour, min, sec, bat1, bat2, bat3, bat4, bat5, bat6, bat7, bat8, bat9, bat10, bat11, bat12, bat13, bat14, bat15, bat16, bat17, bat18, bat19, bat20);
 80019d4:	4b8b      	ldr	r3, [pc, #556]	@ (8001c04 <save_data_to_csv+0x268>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	f503 66fa 	add.w	r6, r3, #2000	@ 0x7d0
 80019dc:	4b8a      	ldr	r3, [pc, #552]	@ (8001c08 <save_data_to_csv+0x26c>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80019e4:	4b89      	ldr	r3, [pc, #548]	@ (8001c0c <save_data_to_csv+0x270>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80019ec:	4b88      	ldr	r3, [pc, #544]	@ (8001c10 <save_data_to_csv+0x274>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80019f4:	4b87      	ldr	r3, [pc, #540]	@ (8001c14 <save_data_to_csv+0x278>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80019fc:	4b86      	ldr	r3, [pc, #536]	@ (8001c18 <save_data_to_csv+0x27c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001a04:	4b85      	ldr	r3, [pc, #532]	@ (8001c1c <save_data_to_csv+0x280>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fd0d 	bl	8000428 <__aeabi_f2d>
 8001a0e:	e9c7 011e 	strd	r0, r1, [r7, #120]	@ 0x78
 8001a12:	4b83      	ldr	r3, [pc, #524]	@ (8001c20 <save_data_to_csv+0x284>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fd06 	bl	8000428 <__aeabi_f2d>
 8001a1c:	e9c7 011c 	strd	r0, r1, [r7, #112]	@ 0x70
 8001a20:	4b80      	ldr	r3, [pc, #512]	@ (8001c24 <save_data_to_csv+0x288>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fcff 	bl	8000428 <__aeabi_f2d>
 8001a2a:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
 8001a2e:	4b7e      	ldr	r3, [pc, #504]	@ (8001c28 <save_data_to_csv+0x28c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fcf8 	bl	8000428 <__aeabi_f2d>
 8001a38:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
 8001a3c:	4b7b      	ldr	r3, [pc, #492]	@ (8001c2c <save_data_to_csv+0x290>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fcf1 	bl	8000428 <__aeabi_f2d>
 8001a46:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
 8001a4a:	4b79      	ldr	r3, [pc, #484]	@ (8001c30 <save_data_to_csv+0x294>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fcea 	bl	8000428 <__aeabi_f2d>
 8001a54:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 8001a58:	4b76      	ldr	r3, [pc, #472]	@ (8001c34 <save_data_to_csv+0x298>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fce3 	bl	8000428 <__aeabi_f2d>
 8001a62:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 8001a66:	4b74      	ldr	r3, [pc, #464]	@ (8001c38 <save_data_to_csv+0x29c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fcdc 	bl	8000428 <__aeabi_f2d>
 8001a70:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8001a74:	4b71      	ldr	r3, [pc, #452]	@ (8001c3c <save_data_to_csv+0x2a0>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fcd5 	bl	8000428 <__aeabi_f2d>
 8001a7e:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8001a82:	4b6f      	ldr	r3, [pc, #444]	@ (8001c40 <save_data_to_csv+0x2a4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fcce 	bl	8000428 <__aeabi_f2d>
 8001a8c:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8001a90:	4b6c      	ldr	r3, [pc, #432]	@ (8001c44 <save_data_to_csv+0x2a8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fcc7 	bl	8000428 <__aeabi_f2d>
 8001a9a:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001a9e:	4b6a      	ldr	r3, [pc, #424]	@ (8001c48 <save_data_to_csv+0x2ac>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fcc0 	bl	8000428 <__aeabi_f2d>
 8001aa8:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001aac:	4b67      	ldr	r3, [pc, #412]	@ (8001c4c <save_data_to_csv+0x2b0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fcb9 	bl	8000428 <__aeabi_f2d>
 8001ab6:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001aba:	4b65      	ldr	r3, [pc, #404]	@ (8001c50 <save_data_to_csv+0x2b4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fcb2 	bl	8000428 <__aeabi_f2d>
 8001ac4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001ac8:	4b62      	ldr	r3, [pc, #392]	@ (8001c54 <save_data_to_csv+0x2b8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fcab 	bl	8000428 <__aeabi_f2d>
 8001ad2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ad6:	4b60      	ldr	r3, [pc, #384]	@ (8001c58 <save_data_to_csv+0x2bc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fca4 	bl	8000428 <__aeabi_f2d>
 8001ae0:	e9c7 0100 	strd	r0, r1, [r7]
 8001ae4:	4b5d      	ldr	r3, [pc, #372]	@ (8001c5c <save_data_to_csv+0x2c0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fc9d 	bl	8000428 <__aeabi_f2d>
 8001aee:	4682      	mov	sl, r0
 8001af0:	468b      	mov	fp, r1
 8001af2:	4b5b      	ldr	r3, [pc, #364]	@ (8001c60 <save_data_to_csv+0x2c4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fc96 	bl	8000428 <__aeabi_f2d>
 8001afc:	4680      	mov	r8, r0
 8001afe:	4689      	mov	r9, r1
 8001b00:	4b58      	ldr	r3, [pc, #352]	@ (8001c64 <save_data_to_csv+0x2c8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fc8f 	bl	8000428 <__aeabi_f2d>
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	460d      	mov	r5, r1
 8001b0e:	4b56      	ldr	r3, [pc, #344]	@ (8001c68 <save_data_to_csv+0x2cc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fc88 	bl	8000428 <__aeabi_f2d>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	e9cd 232a 	strd	r2, r3, [sp, #168]	@ 0xa8
 8001b20:	e9cd 4528 	strd	r4, r5, [sp, #160]	@ 0xa0
 8001b24:	e9cd 8926 	strd	r8, r9, [sp, #152]	@ 0x98
 8001b28:	e9cd ab24 	strd	sl, fp, [sp, #144]	@ 0x90
 8001b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b30:	e9cd 2322 	strd	r2, r3, [sp, #136]	@ 0x88
 8001b34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b38:	e9cd 2320 	strd	r2, r3, [sp, #128]	@ 0x80
 8001b3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b40:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8001b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b48:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8001b4c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b50:	e9cd 231a 	strd	r2, r3, [sp, #104]	@ 0x68
 8001b54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b58:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
 8001b5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001b60:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8001b64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001b68:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8001b6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001b70:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8001b74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8001b7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001b80:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8001b84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001b88:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8001b8c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001b90:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001b94:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001b98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001b9c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001ba0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001ba4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001ba8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001bac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001bb0:	9203      	str	r2, [sp, #12]
 8001bb2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001bb6:	9202      	str	r2, [sp, #8]
 8001bb8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001bbc:	9201      	str	r2, [sp, #4]
 8001bbe:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001bc2:	9200      	str	r2, [sp, #0]
 8001bc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bc8:	4632      	mov	r2, r6
 8001bca:	4928      	ldr	r1, [pc, #160]	@ (8001c6c <save_data_to_csv+0x2d0>)
 8001bcc:	4828      	ldr	r0, [pc, #160]	@ (8001c70 <save_data_to_csv+0x2d4>)
 8001bce:	f00a fa59 	bl	800c084 <siprintf>


        // Write the formatted string to the file
        f_puts(buffer, &fil);
 8001bd2:	490b      	ldr	r1, [pc, #44]	@ (8001c00 <save_data_to_csv+0x264>)
 8001bd4:	4826      	ldr	r0, [pc, #152]	@ (8001c70 <save_data_to_csv+0x2d4>)
 8001bd6:	f009 fc3b 	bl	800b450 <f_puts>

        // Close the file
        f_close(&fil);
 8001bda:	4809      	ldr	r0, [pc, #36]	@ (8001c00 <save_data_to_csv+0x264>)
 8001bdc:	f009 f8df 	bl	800ad9e <f_close>
    else{
//    	Error_Handler();
    }

    // Unmount the filesystem
    f_mount(NULL, "", 1);
 8001be0:	2201      	movs	r2, #1
 8001be2:	4904      	ldr	r1, [pc, #16]	@ (8001bf4 <save_data_to_csv+0x258>)
 8001be4:	2000      	movs	r0, #0
 8001be6:	f008 fa75 	bl	800a0d4 <f_mount>
}
 8001bea:	bf00      	nop
 8001bec:	379c      	adds	r7, #156	@ 0x9c
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bf4:	0800e320 	.word	0x0800e320
 8001bf8:	20000210 	.word	0x20000210
 8001bfc:	0800e324 	.word	0x0800e324
 8001c00:	20001240 	.word	0x20001240
 8001c04:	2000256a 	.word	0x2000256a
 8001c08:	20002569 	.word	0x20002569
 8001c0c:	20002568 	.word	0x20002568
 8001c10:	20002566 	.word	0x20002566
 8001c14:	20002565 	.word	0x20002565
 8001c18:	20002564 	.word	0x20002564
 8001c1c:	20002514 	.word	0x20002514
 8001c20:	20002518 	.word	0x20002518
 8001c24:	2000251c 	.word	0x2000251c
 8001c28:	20002520 	.word	0x20002520
 8001c2c:	20002524 	.word	0x20002524
 8001c30:	20002528 	.word	0x20002528
 8001c34:	2000252c 	.word	0x2000252c
 8001c38:	20002530 	.word	0x20002530
 8001c3c:	20002534 	.word	0x20002534
 8001c40:	20002538 	.word	0x20002538
 8001c44:	2000253c 	.word	0x2000253c
 8001c48:	20002540 	.word	0x20002540
 8001c4c:	20002544 	.word	0x20002544
 8001c50:	20002548 	.word	0x20002548
 8001c54:	2000254c 	.word	0x2000254c
 8001c58:	20002550 	.word	0x20002550
 8001c5c:	20002554 	.word	0x20002554
 8001c60:	20002558 	.word	0x20002558
 8001c64:	2000255c 	.word	0x2000255c
 8001c68:	20002560 	.word	0x20002560
 8001c6c:	0800e330 	.word	0x0800e330
 8001c70:	2000226c 	.word	0x2000226c

08001c74 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001c7e:	4a10      	ldr	r2, [pc, #64]	@ (8001cc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001c80:	2100      	movs	r1, #0
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f001 ffbc 	bl	8003c00 <HAL_CAN_GetRxMessage>

	if(RxData[5] == 1){
 8001c88:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f84b 	bl	8000d2c <__aeabi_fcmpeq>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
		dataReceived = 1;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
	}

	if(RxData[5] == 2){
 8001ca2:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff f83e 	bl	8000d2c <__aeabi_fcmpeq>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
		dataReceived == 2;
	}
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200025a4 	.word	0x200025a4
 8001cc0:	20002584 	.word	0x20002584
 8001cc4:	200025c0 	.word	0x200025c0

08001cc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a60      	ldr	r2, [pc, #384]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	f040 80b9 	bne.w	8001e4e <HAL_TIM_PeriodElapsedCallback+0x186>
		HAL_ADC_Start_DMA(&hadc1, buf, 12);
 8001cdc:	220c      	movs	r2, #12
 8001cde:	495f      	ldr	r1, [pc, #380]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001ce0:	485f      	ldr	r0, [pc, #380]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001ce2:	f001 f8e1 	bl	8002ea8 <HAL_ADC_Start_DMA>

		bat1 = adc[0];		//A5
 8001ce6:	4b5f      	ldr	r3, [pc, #380]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe ff82 	bl	8000bf4 <__aeabi_ui2f>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4a5d      	ldr	r2, [pc, #372]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001cf4:	6013      	str	r3, [r2, #0]
		bat2 = adc[1];		//A6
 8001cf6:	4b5b      	ldr	r3, [pc, #364]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe ff7a 	bl	8000bf4 <__aeabi_ui2f>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4a5a      	ldr	r2, [pc, #360]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001d04:	6013      	str	r3, [r2, #0]
		bat3 = adc[2];		//A7
 8001d06:	4b57      	ldr	r3, [pc, #348]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe ff72 	bl	8000bf4 <__aeabi_ui2f>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4a57      	ldr	r2, [pc, #348]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001d14:	6013      	str	r3, [r2, #0]
		bat4 = adc[3];		//B0
 8001d16:	4b53      	ldr	r3, [pc, #332]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe ff6a 	bl	8000bf4 <__aeabi_ui2f>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4a54      	ldr	r2, [pc, #336]	@ (8001e74 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001d24:	6013      	str	r3, [r2, #0]
		bat5 = adc[4];		//B1
 8001d26:	4b4f      	ldr	r3, [pc, #316]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe ff62 	bl	8000bf4 <__aeabi_ui2f>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4a51      	ldr	r2, [pc, #324]	@ (8001e78 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001d34:	6013      	str	r3, [r2, #0]
		bat6 = adc[5];		//A0
 8001d36:	4b4b      	ldr	r3, [pc, #300]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe ff5a 	bl	8000bf4 <__aeabi_ui2f>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4a4e      	ldr	r2, [pc, #312]	@ (8001e7c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001d44:	6013      	str	r3, [r2, #0]
		bat7 = adc[6];		//A1
 8001d46:	4b47      	ldr	r3, [pc, #284]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe ff52 	bl	8000bf4 <__aeabi_ui2f>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4a4b      	ldr	r2, [pc, #300]	@ (8001e80 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001d54:	6013      	str	r3, [r2, #0]
		bat8 = adc[7];		//A2
 8001d56:	4b43      	ldr	r3, [pc, #268]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe ff4a 	bl	8000bf4 <__aeabi_ui2f>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4a48      	ldr	r2, [pc, #288]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001d64:	6013      	str	r3, [r2, #0]
		bat9 = adc[8];		//A3
 8001d66:	4b3f      	ldr	r3, [pc, #252]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001d68:	6a1b      	ldr	r3, [r3, #32]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe ff42 	bl	8000bf4 <__aeabi_ui2f>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4a45      	ldr	r2, [pc, #276]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001d74:	6013      	str	r3, [r2, #0]
		bat10 = adc[9];		//A4
 8001d76:	4b3b      	ldr	r3, [pc, #236]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe ff3a 	bl	8000bf4 <__aeabi_ui2f>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4a42      	ldr	r2, [pc, #264]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001d84:	6013      	str	r3, [r2, #0]

		//Activate notificatio
		HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001d86:	2102      	movs	r1, #2
 8001d88:	4841      	ldr	r0, [pc, #260]	@ (8001e90 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001d8a:	f002 f87f 	bl	8003e8c <HAL_CAN_ActivateNotification>

		TxHeader.DLC = 1;
 8001d8e:	4b41      	ldr	r3, [pc, #260]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	611a      	str	r2, [r3, #16]
		TxHeader.IDE = CAN_ID_STD;
 8001d94:	4b3f      	ldr	r3, [pc, #252]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
		TxHeader.RTR = CAN_RTR_DATA;
 8001d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
		TxHeader.StdId = 0x446;
 8001da0:	4b3c      	ldr	r3, [pc, #240]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001da2:	f240 4246 	movw	r2, #1094	@ 0x446
 8001da6:	601a      	str	r2, [r3, #0]
		TxHeader.TransmitGlobalTime = DISABLE;
 8001da8:	4b3a      	ldr	r3, [pc, #232]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	751a      	strb	r2, [r3, #20]

		TxData[0] = 1;
 8001dae:	4b3a      	ldr	r3, [pc, #232]	@ (8001e98 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001db0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001db4:	601a      	str	r2, [r3, #0]

		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001db6:	4b39      	ldr	r3, [pc, #228]	@ (8001e9c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001db8:	4a37      	ldr	r2, [pc, #220]	@ (8001e98 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001dba:	4936      	ldr	r1, [pc, #216]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001dbc:	4834      	ldr	r0, [pc, #208]	@ (8001e90 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001dbe:	f001 fe35 	bl	8003a2c <HAL_CAN_AddTxMessage>

		if (dataReceived == 1){
 8001dc2:	4b37      	ldr	r3, [pc, #220]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d113      	bne.n	8001df2 <HAL_TIM_PeriodElapsedCallback+0x12a>
			bat11 = RxData[0];
 8001dca:	4b36      	ldr	r3, [pc, #216]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a36      	ldr	r2, [pc, #216]	@ (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001dd0:	6013      	str	r3, [r2, #0]
			bat12 = RxData[1];
 8001dd2:	4b34      	ldr	r3, [pc, #208]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	4a35      	ldr	r2, [pc, #212]	@ (8001eac <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001dd8:	6013      	str	r3, [r2, #0]
			bat13 = RxData[2];
 8001dda:	4b32      	ldr	r3, [pc, #200]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	4a34      	ldr	r2, [pc, #208]	@ (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001de0:	6013      	str	r3, [r2, #0]
			bat14 = RxData[3];
 8001de2:	4b30      	ldr	r3, [pc, #192]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	4a33      	ldr	r2, [pc, #204]	@ (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001de8:	6013      	str	r3, [r2, #0]
			bat15 = RxData[4];
 8001dea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	4a32      	ldr	r2, [pc, #200]	@ (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001df0:	6013      	str	r3, [r2, #0]
		}

		dataReceived = 0;
 8001df2:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

		HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001df8:	2102      	movs	r1, #2
 8001dfa:	4825      	ldr	r0, [pc, #148]	@ (8001e90 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001dfc:	f002 f846 	bl	8003e8c <HAL_CAN_ActivateNotification>

		TxData[0] = 2;
 8001e00:	4b25      	ldr	r3, [pc, #148]	@ (8001e98 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001e02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e06:	601a      	str	r2, [r3, #0]

		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001e08:	4b24      	ldr	r3, [pc, #144]	@ (8001e9c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001e0a:	4a23      	ldr	r2, [pc, #140]	@ (8001e98 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001e0c:	4921      	ldr	r1, [pc, #132]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001e0e:	4820      	ldr	r0, [pc, #128]	@ (8001e90 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001e10:	f001 fe0c 	bl	8003a2c <HAL_CAN_AddTxMessage>

		if (dataReceived == 2){
 8001e14:	4b22      	ldr	r3, [pc, #136]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d113      	bne.n	8001e44 <HAL_TIM_PeriodElapsedCallback+0x17c>
			bat16 = RxData[0];
 8001e1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a26      	ldr	r2, [pc, #152]	@ (8001ebc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001e22:	6013      	str	r3, [r2, #0]
			bat17 = RxData[1];
 8001e24:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4a25      	ldr	r2, [pc, #148]	@ (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001e2a:	6013      	str	r3, [r2, #0]
			bat18 = RxData[2];
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	4a24      	ldr	r2, [pc, #144]	@ (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001e32:	6013      	str	r3, [r2, #0]
			bat19 = RxData[3];
 8001e34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4a23      	ldr	r2, [pc, #140]	@ (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001e3a:	6013      	str	r3, [r2, #0]
			bat20 = RxData[4];
 8001e3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	4a22      	ldr	r2, [pc, #136]	@ (8001ecc <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001e42:	6013      	str	r3, [r2, #0]
		}

		dataReceived = 0;
 8001e44:	4b16      	ldr	r3, [pc, #88]	@ (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]

		save_data_to_csv();
 8001e4a:	f7ff fda7 	bl	800199c <save_data_to_csv>
//		sprintf(buffer, "%02d : %02d", hour, min);
//		SSD1306_Puts(buffer, &Font_11x18, 1);
//
//		SSD1306_UpdateScreen();
//	}
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40000400 	.word	0x40000400
 8001e5c:	200024c4 	.word	0x200024c4
 8001e60:	200022ec 	.word	0x200022ec
 8001e64:	200024ec 	.word	0x200024ec
 8001e68:	20002514 	.word	0x20002514
 8001e6c:	20002518 	.word	0x20002518
 8001e70:	2000251c 	.word	0x2000251c
 8001e74:	20002520 	.word	0x20002520
 8001e78:	20002524 	.word	0x20002524
 8001e7c:	20002528 	.word	0x20002528
 8001e80:	2000252c 	.word	0x2000252c
 8001e84:	20002530 	.word	0x20002530
 8001e88:	20002534 	.word	0x20002534
 8001e8c:	20002538 	.word	0x20002538
 8001e90:	20002360 	.word	0x20002360
 8001e94:	2000256c 	.word	0x2000256c
 8001e98:	200025a0 	.word	0x200025a0
 8001e9c:	200025bc 	.word	0x200025bc
 8001ea0:	200025c0 	.word	0x200025c0
 8001ea4:	200025a4 	.word	0x200025a4
 8001ea8:	2000253c 	.word	0x2000253c
 8001eac:	20002540 	.word	0x20002540
 8001eb0:	20002544 	.word	0x20002544
 8001eb4:	20002548 	.word	0x20002548
 8001eb8:	2000254c 	.word	0x2000254c
 8001ebc:	20002550 	.word	0x20002550
 8001ec0:	20002554 	.word	0x20002554
 8001ec4:	20002558 	.word	0x20002558
 8001ec8:	2000255c 	.word	0x2000255c
 8001ecc:	20002560 	.word	0x20002560

08001ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed4:	f000 fe8a 	bl	8002bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ed8:	f000 f828 	bl	8001f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001edc:	f000 faa4 	bl	8002428 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ee0:	f000 fa84 	bl	80023ec <MX_DMA_Init>
  MX_TIM3_Init();
 8001ee4:	f000 fa34 	bl	8002350 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001ee8:	f000 f870 	bl	8001fcc <MX_ADC1_Init>
  MX_SPI2_Init();
 8001eec:	f000 f9ac 	bl	8002248 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001ef0:	f005 fc1c 	bl	800772c <MX_FATFS_Init>
  MX_TIM2_Init();
 8001ef4:	f000 f9de 	bl	80022b4 <MX_TIM2_Init>
  MX_CAN_Init();
 8001ef8:	f000 f926 	bl	8002148 <MX_CAN_Init>
  MX_I2C1_Init();
 8001efc:	f000 f976 	bl	80021ec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001f00:	4807      	ldr	r0, [pc, #28]	@ (8001f20 <main+0x50>)
 8001f02:	f005 f871 	bl	8006fe8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001f06:	4807      	ldr	r0, [pc, #28]	@ (8001f24 <main+0x54>)
 8001f08:	f005 f86e 	bl	8006fe8 <HAL_TIM_Base_Start_IT>

  rtc_init(3, 1, 1);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2101      	movs	r1, #1
 8001f10:	2003      	movs	r0, #3
 8001f12:	f7fe ff9b 	bl	8000e4c <rtc_init>
//  SSD1306_Init();

  HAL_CAN_Start(&hcan);
 8001f16:	4804      	ldr	r0, [pc, #16]	@ (8001f28 <main+0x58>)
 8001f18:	f001 fd44 	bl	80039a4 <HAL_CAN_Start>
//  f_close(&fil);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <main+0x4c>
 8001f20:	2000247c 	.word	0x2000247c
 8001f24:	20002434 	.word	0x20002434
 8001f28:	20002360 	.word	0x20002360

08001f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b094      	sub	sp, #80	@ 0x50
 8001f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f36:	2228      	movs	r2, #40	@ 0x28
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f00a f905 	bl	800c14a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f60:	2301      	movs	r3, #1
 8001f62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f64:	2310      	movs	r3, #16
 8001f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f6c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 ff0d 	bl	8005d90 <HAL_RCC_OscConfig>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001f7c:	f000 face 	bl	800251c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f80:	230f      	movs	r3, #15
 8001f82:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f90:	2300      	movs	r3, #0
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 f97a 	bl	8006294 <HAL_RCC_ClockConfig>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001fa6:	f000 fab9 	bl	800251c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001faa:	2302      	movs	r3, #2
 8001fac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f004 fae7 	bl	8006588 <HAL_RCCEx_PeriphCLKConfig>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001fc0:	f000 faac 	bl	800251c <Error_Handler>
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	3750      	adds	r7, #80	@ 0x50
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001fdc:	4b58      	ldr	r3, [pc, #352]	@ (8002140 <MX_ADC1_Init+0x174>)
 8001fde:	4a59      	ldr	r2, [pc, #356]	@ (8002144 <MX_ADC1_Init+0x178>)
 8001fe0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001fe2:	4b57      	ldr	r3, [pc, #348]	@ (8002140 <MX_ADC1_Init+0x174>)
 8001fe4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fe8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fea:	4b55      	ldr	r3, [pc, #340]	@ (8002140 <MX_ADC1_Init+0x174>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ff0:	4b53      	ldr	r3, [pc, #332]	@ (8002140 <MX_ADC1_Init+0x174>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ff6:	4b52      	ldr	r3, [pc, #328]	@ (8002140 <MX_ADC1_Init+0x174>)
 8001ff8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001ffc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ffe:	4b50      	ldr	r3, [pc, #320]	@ (8002140 <MX_ADC1_Init+0x174>)
 8002000:	2200      	movs	r2, #0
 8002002:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 10;
 8002004:	4b4e      	ldr	r3, [pc, #312]	@ (8002140 <MX_ADC1_Init+0x174>)
 8002006:	220a      	movs	r2, #10
 8002008:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800200a:	484d      	ldr	r0, [pc, #308]	@ (8002140 <MX_ADC1_Init+0x174>)
 800200c:	f000 fe74 	bl	8002cf8 <HAL_ADC_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8002016:	f000 fa81 	bl	800251c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800201e:	2301      	movs	r3, #1
 8002020:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	4619      	mov	r1, r3
 800202a:	4845      	ldr	r0, [pc, #276]	@ (8002140 <MX_ADC1_Init+0x174>)
 800202c:	f001 f8f4 	bl	8003218 <HAL_ADC_ConfigChannel>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002036:	f000 fa71 	bl	800251c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800203a:	2301      	movs	r3, #1
 800203c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800203e:	2302      	movs	r3, #2
 8002040:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	4619      	mov	r1, r3
 8002046:	483e      	ldr	r0, [pc, #248]	@ (8002140 <MX_ADC1_Init+0x174>)
 8002048:	f001 f8e6 	bl	8003218 <HAL_ADC_ConfigChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8002052:	f000 fa63 	bl	800251c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002056:	2302      	movs	r3, #2
 8002058:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800205a:	2303      	movs	r3, #3
 800205c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	4619      	mov	r1, r3
 8002062:	4837      	ldr	r0, [pc, #220]	@ (8002140 <MX_ADC1_Init+0x174>)
 8002064:	f001 f8d8 	bl	8003218 <HAL_ADC_ConfigChannel>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800206e:	f000 fa55 	bl	800251c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002072:	2303      	movs	r3, #3
 8002074:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002076:	2304      	movs	r3, #4
 8002078:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	4619      	mov	r1, r3
 800207e:	4830      	ldr	r0, [pc, #192]	@ (8002140 <MX_ADC1_Init+0x174>)
 8002080:	f001 f8ca 	bl	8003218 <HAL_ADC_ConfigChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800208a:	f000 fa47 	bl	800251c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800208e:	2304      	movs	r3, #4
 8002090:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002092:	2305      	movs	r3, #5
 8002094:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	4619      	mov	r1, r3
 800209a:	4829      	ldr	r0, [pc, #164]	@ (8002140 <MX_ADC1_Init+0x174>)
 800209c:	f001 f8bc 	bl	8003218 <HAL_ADC_ConfigChannel>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80020a6:	f000 fa39 	bl	800251c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80020aa:	2305      	movs	r3, #5
 80020ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80020ae:	2306      	movs	r3, #6
 80020b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	4619      	mov	r1, r3
 80020b6:	4822      	ldr	r0, [pc, #136]	@ (8002140 <MX_ADC1_Init+0x174>)
 80020b8:	f001 f8ae 	bl	8003218 <HAL_ADC_ConfigChannel>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80020c2:	f000 fa2b 	bl	800251c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80020c6:	2306      	movs	r3, #6
 80020c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80020ca:	2307      	movs	r3, #7
 80020cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	4619      	mov	r1, r3
 80020d2:	481b      	ldr	r0, [pc, #108]	@ (8002140 <MX_ADC1_Init+0x174>)
 80020d4:	f001 f8a0 	bl	8003218 <HAL_ADC_ConfigChannel>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80020de:	f000 fa1d 	bl	800251c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80020e2:	2307      	movs	r3, #7
 80020e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80020e6:	2308      	movs	r3, #8
 80020e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	4619      	mov	r1, r3
 80020ee:	4814      	ldr	r0, [pc, #80]	@ (8002140 <MX_ADC1_Init+0x174>)
 80020f0:	f001 f892 	bl	8003218 <HAL_ADC_ConfigChannel>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80020fa:	f000 fa0f 	bl	800251c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80020fe:	2308      	movs	r3, #8
 8002100:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8002102:	2309      	movs	r3, #9
 8002104:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	4619      	mov	r1, r3
 800210a:	480d      	ldr	r0, [pc, #52]	@ (8002140 <MX_ADC1_Init+0x174>)
 800210c:	f001 f884 	bl	8003218 <HAL_ADC_ConfigChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8002116:	f000 fa01 	bl	800251c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800211a:	2309      	movs	r3, #9
 800211c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800211e:	230a      	movs	r3, #10
 8002120:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	4619      	mov	r1, r3
 8002126:	4806      	ldr	r0, [pc, #24]	@ (8002140 <MX_ADC1_Init+0x174>)
 8002128:	f001 f876 	bl	8003218 <HAL_ADC_ConfigChannel>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 8002132:	f000 f9f3 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200022ec 	.word	0x200022ec
 8002144:	40012400 	.word	0x40012400

08002148 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	@ 0x28
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800214e:	4b25      	ldr	r3, [pc, #148]	@ (80021e4 <MX_CAN_Init+0x9c>)
 8002150:	4a25      	ldr	r2, [pc, #148]	@ (80021e8 <MX_CAN_Init+0xa0>)
 8002152:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8002154:	4b23      	ldr	r3, [pc, #140]	@ (80021e4 <MX_CAN_Init+0x9c>)
 8002156:	2202      	movs	r2, #2
 8002158:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800215a:	4b22      	ldr	r3, [pc, #136]	@ (80021e4 <MX_CAN_Init+0x9c>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002160:	4b20      	ldr	r3, [pc, #128]	@ (80021e4 <MX_CAN_Init+0x9c>)
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8002166:	4b1f      	ldr	r3, [pc, #124]	@ (80021e4 <MX_CAN_Init+0x9c>)
 8002168:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800216c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800216e:	4b1d      	ldr	r3, [pc, #116]	@ (80021e4 <MX_CAN_Init+0x9c>)
 8002170:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002174:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002176:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <MX_CAN_Init+0x9c>)
 8002178:	2200      	movs	r2, #0
 800217a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800217c:	4b19      	ldr	r3, [pc, #100]	@ (80021e4 <MX_CAN_Init+0x9c>)
 800217e:	2200      	movs	r2, #0
 8002180:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002182:	4b18      	ldr	r3, [pc, #96]	@ (80021e4 <MX_CAN_Init+0x9c>)
 8002184:	2200      	movs	r2, #0
 8002186:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002188:	4b16      	ldr	r3, [pc, #88]	@ (80021e4 <MX_CAN_Init+0x9c>)
 800218a:	2200      	movs	r2, #0
 800218c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800218e:	4b15      	ldr	r3, [pc, #84]	@ (80021e4 <MX_CAN_Init+0x9c>)
 8002190:	2200      	movs	r2, #0
 8002192:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002194:	4b13      	ldr	r3, [pc, #76]	@ (80021e4 <MX_CAN_Init+0x9c>)
 8002196:	2200      	movs	r2, #0
 8002198:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800219a:	4812      	ldr	r0, [pc, #72]	@ (80021e4 <MX_CAN_Init+0x9c>)
 800219c:	f001 fa3e 	bl	800361c <HAL_CAN_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80021a6:	f000 f9b9 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80021aa:	2301      	movs	r3, #1
 80021ac:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 80021ae:	230a      	movs	r3, #10
 80021b0:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0; //DATA WILL BE RECEIVED BY THIS
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5;
 80021b6:	f242 0360 	movw	r3, #8288	@ 0x2060
 80021ba:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 80021bc:	2300      	movs	r3, #0
 80021be:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 80021c0:	f242 0360 	movw	r3, #8288	@ 0x2060
 80021c4:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK ;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80021ce:	2301      	movs	r3, #1
 80021d0:	61fb      	str	r3, [r7, #28]

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80021d2:	463b      	mov	r3, r7
 80021d4:	4619      	mov	r1, r3
 80021d6:	4803      	ldr	r0, [pc, #12]	@ (80021e4 <MX_CAN_Init+0x9c>)
 80021d8:	f001 fb1b 	bl	8003812 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 80021dc:	bf00      	nop
 80021de:	3728      	adds	r7, #40	@ 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	20002360 	.word	0x20002360
 80021e8:	40006400 	.word	0x40006400

080021ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <MX_I2C1_Init+0x50>)
 80021f2:	4a13      	ldr	r2, [pc, #76]	@ (8002240 <MX_I2C1_Init+0x54>)
 80021f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021f6:	4b11      	ldr	r3, [pc, #68]	@ (800223c <MX_I2C1_Init+0x50>)
 80021f8:	4a12      	ldr	r2, [pc, #72]	@ (8002244 <MX_I2C1_Init+0x58>)
 80021fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	@ (800223c <MX_I2C1_Init+0x50>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002202:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <MX_I2C1_Init+0x50>)
 8002204:	2200      	movs	r2, #0
 8002206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002208:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <MX_I2C1_Init+0x50>)
 800220a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800220e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002210:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <MX_I2C1_Init+0x50>)
 8002212:	2200      	movs	r2, #0
 8002214:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <MX_I2C1_Init+0x50>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800221c:	4b07      	ldr	r3, [pc, #28]	@ (800223c <MX_I2C1_Init+0x50>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <MX_I2C1_Init+0x50>)
 8002224:	2200      	movs	r2, #0
 8002226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002228:	4804      	ldr	r0, [pc, #16]	@ (800223c <MX_I2C1_Init+0x50>)
 800222a:	f002 fd4b 	bl	8004cc4 <HAL_I2C_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002234:	f000 f972 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20002388 	.word	0x20002388
 8002240:	40005400 	.word	0x40005400
 8002244:	000186a0 	.word	0x000186a0

08002248 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800224c:	4b17      	ldr	r3, [pc, #92]	@ (80022ac <MX_SPI2_Init+0x64>)
 800224e:	4a18      	ldr	r2, [pc, #96]	@ (80022b0 <MX_SPI2_Init+0x68>)
 8002250:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002252:	4b16      	ldr	r3, [pc, #88]	@ (80022ac <MX_SPI2_Init+0x64>)
 8002254:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002258:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800225a:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <MX_SPI2_Init+0x64>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002260:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <MX_SPI2_Init+0x64>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002266:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <MX_SPI2_Init+0x64>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800226c:	4b0f      	ldr	r3, [pc, #60]	@ (80022ac <MX_SPI2_Init+0x64>)
 800226e:	2200      	movs	r2, #0
 8002270:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002272:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <MX_SPI2_Init+0x64>)
 8002274:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002278:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800227a:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <MX_SPI2_Init+0x64>)
 800227c:	2210      	movs	r2, #16
 800227e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002280:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <MX_SPI2_Init+0x64>)
 8002282:	2200      	movs	r2, #0
 8002284:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002286:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <MX_SPI2_Init+0x64>)
 8002288:	2200      	movs	r2, #0
 800228a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800228c:	4b07      	ldr	r3, [pc, #28]	@ (80022ac <MX_SPI2_Init+0x64>)
 800228e:	2200      	movs	r2, #0
 8002290:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002292:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <MX_SPI2_Init+0x64>)
 8002294:	220a      	movs	r2, #10
 8002296:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002298:	4804      	ldr	r0, [pc, #16]	@ (80022ac <MX_SPI2_Init+0x64>)
 800229a:	f004 fa2b 	bl	80066f4 <HAL_SPI_Init>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80022a4:	f000 f93a 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	200023dc 	.word	0x200023dc
 80022b0:	40003800 	.word	0x40003800

080022b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ba:	f107 0308 	add.w	r3, r7, #8
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c8:	463b      	mov	r3, r7
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022d0:	4b1e      	ldr	r3, [pc, #120]	@ (800234c <MX_TIM2_Init+0x98>)
 80022d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80022d8:	4b1c      	ldr	r3, [pc, #112]	@ (800234c <MX_TIM2_Init+0x98>)
 80022da:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80022de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e0:	4b1a      	ldr	r3, [pc, #104]	@ (800234c <MX_TIM2_Init+0x98>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80022e6:	4b19      	ldr	r3, [pc, #100]	@ (800234c <MX_TIM2_Init+0x98>)
 80022e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ee:	4b17      	ldr	r3, [pc, #92]	@ (800234c <MX_TIM2_Init+0x98>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f4:	4b15      	ldr	r3, [pc, #84]	@ (800234c <MX_TIM2_Init+0x98>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022fa:	4814      	ldr	r0, [pc, #80]	@ (800234c <MX_TIM2_Init+0x98>)
 80022fc:	f004 fe25 	bl	8006f4a <HAL_TIM_Base_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002306:	f000 f909 	bl	800251c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800230a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800230e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002310:	f107 0308 	add.w	r3, r7, #8
 8002314:	4619      	mov	r1, r3
 8002316:	480d      	ldr	r0, [pc, #52]	@ (800234c <MX_TIM2_Init+0x98>)
 8002318:	f004 ffa8 	bl	800726c <HAL_TIM_ConfigClockSource>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002322:	f000 f8fb 	bl	800251c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800232e:	463b      	mov	r3, r7
 8002330:	4619      	mov	r1, r3
 8002332:	4806      	ldr	r0, [pc, #24]	@ (800234c <MX_TIM2_Init+0x98>)
 8002334:	f005 f98a 	bl	800764c <HAL_TIMEx_MasterConfigSynchronization>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800233e:	f000 f8ed 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002342:	bf00      	nop
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20002434 	.word	0x20002434

08002350 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002364:	463b      	mov	r3, r7
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800236c:	4b1d      	ldr	r3, [pc, #116]	@ (80023e4 <MX_TIM3_Init+0x94>)
 800236e:	4a1e      	ldr	r2, [pc, #120]	@ (80023e8 <MX_TIM3_Init+0x98>)
 8002370:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 8002372:	4b1c      	ldr	r3, [pc, #112]	@ (80023e4 <MX_TIM3_Init+0x94>)
 8002374:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002378:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237a:	4b1a      	ldr	r3, [pc, #104]	@ (80023e4 <MX_TIM3_Init+0x94>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8002380:	4b18      	ldr	r3, [pc, #96]	@ (80023e4 <MX_TIM3_Init+0x94>)
 8002382:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002386:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002388:	4b16      	ldr	r3, [pc, #88]	@ (80023e4 <MX_TIM3_Init+0x94>)
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238e:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <MX_TIM3_Init+0x94>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002394:	4813      	ldr	r0, [pc, #76]	@ (80023e4 <MX_TIM3_Init+0x94>)
 8002396:	f004 fdd8 	bl	8006f4a <HAL_TIM_Base_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80023a0:	f000 f8bc 	bl	800251c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023aa:	f107 0308 	add.w	r3, r7, #8
 80023ae:	4619      	mov	r1, r3
 80023b0:	480c      	ldr	r0, [pc, #48]	@ (80023e4 <MX_TIM3_Init+0x94>)
 80023b2:	f004 ff5b 	bl	800726c <HAL_TIM_ConfigClockSource>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80023bc:	f000 f8ae 	bl	800251c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c0:	2300      	movs	r3, #0
 80023c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023c8:	463b      	mov	r3, r7
 80023ca:	4619      	mov	r1, r3
 80023cc:	4805      	ldr	r0, [pc, #20]	@ (80023e4 <MX_TIM3_Init+0x94>)
 80023ce:	f005 f93d 	bl	800764c <HAL_TIMEx_MasterConfigSynchronization>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80023d8:	f000 f8a0 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023dc:	bf00      	nop
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	2000247c 	.word	0x2000247c
 80023e8:	40000400 	.word	0x40000400

080023ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002424 <MX_DMA_Init+0x38>)
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002424 <MX_DMA_Init+0x38>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6153      	str	r3, [r2, #20]
 80023fe:	4b09      	ldr	r3, [pc, #36]	@ (8002424 <MX_DMA_Init+0x38>)
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2100      	movs	r1, #0
 800240e:	200b      	movs	r0, #11
 8002410:	f002 f85b 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002414:	200b      	movs	r0, #11
 8002416:	f002 f874 	bl	8004502 <HAL_NVIC_EnableIRQ>

}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000

08002428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b088      	sub	sp, #32
 800242c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242e:	f107 0310 	add.w	r3, r7, #16
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800243c:	4b33      	ldr	r3, [pc, #204]	@ (800250c <MX_GPIO_Init+0xe4>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	4a32      	ldr	r2, [pc, #200]	@ (800250c <MX_GPIO_Init+0xe4>)
 8002442:	f043 0310 	orr.w	r3, r3, #16
 8002446:	6193      	str	r3, [r2, #24]
 8002448:	4b30      	ldr	r3, [pc, #192]	@ (800250c <MX_GPIO_Init+0xe4>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002454:	4b2d      	ldr	r3, [pc, #180]	@ (800250c <MX_GPIO_Init+0xe4>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	4a2c      	ldr	r2, [pc, #176]	@ (800250c <MX_GPIO_Init+0xe4>)
 800245a:	f043 0304 	orr.w	r3, r3, #4
 800245e:	6193      	str	r3, [r2, #24]
 8002460:	4b2a      	ldr	r3, [pc, #168]	@ (800250c <MX_GPIO_Init+0xe4>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800246c:	4b27      	ldr	r3, [pc, #156]	@ (800250c <MX_GPIO_Init+0xe4>)
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	4a26      	ldr	r2, [pc, #152]	@ (800250c <MX_GPIO_Init+0xe4>)
 8002472:	f043 0308 	orr.w	r3, r3, #8
 8002476:	6193      	str	r3, [r2, #24]
 8002478:	4b24      	ldr	r3, [pc, #144]	@ (800250c <MX_GPIO_Init+0xe4>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002484:	2200      	movs	r2, #0
 8002486:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800248a:	4821      	ldr	r0, [pc, #132]	@ (8002510 <MX_GPIO_Init+0xe8>)
 800248c:	f002 fbc6 	bl	8004c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002490:	2200      	movs	r2, #0
 8002492:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002496:	481f      	ldr	r0, [pc, #124]	@ (8002514 <MX_GPIO_Init+0xec>)
 8002498:	f002 fbc0 	bl	8004c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800249c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a2:	2301      	movs	r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024aa:	2302      	movs	r3, #2
 80024ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ae:	f107 0310 	add.w	r3, r7, #16
 80024b2:	4619      	mov	r1, r3
 80024b4:	4816      	ldr	r0, [pc, #88]	@ (8002510 <MX_GPIO_Init+0xe8>)
 80024b6:	f002 fa2d 	bl	8004914 <HAL_GPIO_Init>

  /*Configure GPIO pin : Push_Button_Pin */
  GPIO_InitStruct.Pin = Push_Button_Pin;
 80024ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024c0:	4b15      	ldr	r3, [pc, #84]	@ (8002518 <MX_GPIO_Init+0xf0>)
 80024c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024c4:	2302      	movs	r3, #2
 80024c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Push_Button_GPIO_Port, &GPIO_InitStruct);
 80024c8:	f107 0310 	add.w	r3, r7, #16
 80024cc:	4619      	mov	r1, r3
 80024ce:	4811      	ldr	r0, [pc, #68]	@ (8002514 <MX_GPIO_Init+0xec>)
 80024d0:	f002 fa20 	bl	8004914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024da:	2301      	movs	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e2:	2302      	movs	r3, #2
 80024e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e6:	f107 0310 	add.w	r3, r7, #16
 80024ea:	4619      	mov	r1, r3
 80024ec:	4809      	ldr	r0, [pc, #36]	@ (8002514 <MX_GPIO_Init+0xec>)
 80024ee:	f002 fa11 	bl	8004914 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80024f2:	2200      	movs	r2, #0
 80024f4:	2100      	movs	r1, #0
 80024f6:	2017      	movs	r0, #23
 80024f8:	f001 ffe7 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80024fc:	2017      	movs	r0, #23
 80024fe:	f002 f800 	bl	8004502 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002502:	bf00      	nop
 8002504:	3720      	adds	r7, #32
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000
 8002510:	40011000 	.word	0x40011000
 8002514:	40010800 	.word	0x40010800
 8002518:	10110000 	.word	0x10110000

0800251c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002520:	b672      	cpsid	i
}
 8002522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002524:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002528:	4803      	ldr	r0, [pc, #12]	@ (8002538 <Error_Handler+0x1c>)
 800252a:	f002 fb8f 	bl	8004c4c <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800252e:	2064      	movs	r0, #100	@ 0x64
 8002530:	f000 fbbe 	bl	8002cb0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002534:	bf00      	nop
 8002536:	e7f5      	b.n	8002524 <Error_Handler+0x8>
 8002538:	40011000 	.word	0x40011000

0800253c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002542:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <HAL_MspInit+0x5c>)
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	4a14      	ldr	r2, [pc, #80]	@ (8002598 <HAL_MspInit+0x5c>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6193      	str	r3, [r2, #24]
 800254e:	4b12      	ldr	r3, [pc, #72]	@ (8002598 <HAL_MspInit+0x5c>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	4b0f      	ldr	r3, [pc, #60]	@ (8002598 <HAL_MspInit+0x5c>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	4a0e      	ldr	r2, [pc, #56]	@ (8002598 <HAL_MspInit+0x5c>)
 8002560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002564:	61d3      	str	r3, [r2, #28]
 8002566:	4b0c      	ldr	r3, [pc, #48]	@ (8002598 <HAL_MspInit+0x5c>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002572:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <HAL_MspInit+0x60>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	4a04      	ldr	r2, [pc, #16]	@ (800259c <HAL_MspInit+0x60>)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	40021000 	.word	0x40021000
 800259c:	40010000 	.word	0x40010000

080025a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	@ 0x28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0318 	add.w	r3, r7, #24
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a37      	ldr	r2, [pc, #220]	@ (8002698 <HAL_ADC_MspInit+0xf8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d167      	bne.n	8002690 <HAL_ADC_MspInit+0xf0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025c0:	4b36      	ldr	r3, [pc, #216]	@ (800269c <HAL_ADC_MspInit+0xfc>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	4a35      	ldr	r2, [pc, #212]	@ (800269c <HAL_ADC_MspInit+0xfc>)
 80025c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025ca:	6193      	str	r3, [r2, #24]
 80025cc:	4b33      	ldr	r3, [pc, #204]	@ (800269c <HAL_ADC_MspInit+0xfc>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d8:	4b30      	ldr	r3, [pc, #192]	@ (800269c <HAL_ADC_MspInit+0xfc>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	4a2f      	ldr	r2, [pc, #188]	@ (800269c <HAL_ADC_MspInit+0xfc>)
 80025de:	f043 0304 	orr.w	r3, r3, #4
 80025e2:	6193      	str	r3, [r2, #24]
 80025e4:	4b2d      	ldr	r3, [pc, #180]	@ (800269c <HAL_ADC_MspInit+0xfc>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f0:	4b2a      	ldr	r3, [pc, #168]	@ (800269c <HAL_ADC_MspInit+0xfc>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	4a29      	ldr	r2, [pc, #164]	@ (800269c <HAL_ADC_MspInit+0xfc>)
 80025f6:	f043 0308 	orr.w	r3, r3, #8
 80025fa:	6193      	str	r3, [r2, #24]
 80025fc:	4b27      	ldr	r3, [pc, #156]	@ (800269c <HAL_ADC_MspInit+0xfc>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002608:	23ff      	movs	r3, #255	@ 0xff
 800260a:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800260c:	2303      	movs	r3, #3
 800260e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002610:	f107 0318 	add.w	r3, r7, #24
 8002614:	4619      	mov	r1, r3
 8002616:	4822      	ldr	r0, [pc, #136]	@ (80026a0 <HAL_ADC_MspInit+0x100>)
 8002618:	f002 f97c 	bl	8004914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800261c:	2303      	movs	r3, #3
 800261e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002620:	2303      	movs	r3, #3
 8002622:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002624:	f107 0318 	add.w	r3, r7, #24
 8002628:	4619      	mov	r1, r3
 800262a:	481e      	ldr	r0, [pc, #120]	@ (80026a4 <HAL_ADC_MspInit+0x104>)
 800262c:	f002 f972 	bl	8004914 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002630:	4b1d      	ldr	r3, [pc, #116]	@ (80026a8 <HAL_ADC_MspInit+0x108>)
 8002632:	4a1e      	ldr	r2, [pc, #120]	@ (80026ac <HAL_ADC_MspInit+0x10c>)
 8002634:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002636:	4b1c      	ldr	r3, [pc, #112]	@ (80026a8 <HAL_ADC_MspInit+0x108>)
 8002638:	2200      	movs	r2, #0
 800263a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800263c:	4b1a      	ldr	r3, [pc, #104]	@ (80026a8 <HAL_ADC_MspInit+0x108>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002642:	4b19      	ldr	r3, [pc, #100]	@ (80026a8 <HAL_ADC_MspInit+0x108>)
 8002644:	2280      	movs	r2, #128	@ 0x80
 8002646:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002648:	4b17      	ldr	r3, [pc, #92]	@ (80026a8 <HAL_ADC_MspInit+0x108>)
 800264a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800264e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002650:	4b15      	ldr	r3, [pc, #84]	@ (80026a8 <HAL_ADC_MspInit+0x108>)
 8002652:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002656:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002658:	4b13      	ldr	r3, [pc, #76]	@ (80026a8 <HAL_ADC_MspInit+0x108>)
 800265a:	2200      	movs	r2, #0
 800265c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800265e:	4b12      	ldr	r3, [pc, #72]	@ (80026a8 <HAL_ADC_MspInit+0x108>)
 8002660:	2200      	movs	r2, #0
 8002662:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002664:	4810      	ldr	r0, [pc, #64]	@ (80026a8 <HAL_ADC_MspInit+0x108>)
 8002666:	f001 ff67 	bl	8004538 <HAL_DMA_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8002670:	f7ff ff54 	bl	800251c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a0c      	ldr	r2, [pc, #48]	@ (80026a8 <HAL_ADC_MspInit+0x108>)
 8002678:	621a      	str	r2, [r3, #32]
 800267a:	4a0b      	ldr	r2, [pc, #44]	@ (80026a8 <HAL_ADC_MspInit+0x108>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002680:	2200      	movs	r2, #0
 8002682:	2100      	movs	r1, #0
 8002684:	2012      	movs	r0, #18
 8002686:	f001 ff20 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800268a:	2012      	movs	r0, #18
 800268c:	f001 ff39 	bl	8004502 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002690:	bf00      	nop
 8002692:	3728      	adds	r7, #40	@ 0x28
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40012400 	.word	0x40012400
 800269c:	40021000 	.word	0x40021000
 80026a0:	40010800 	.word	0x40010800
 80026a4:	40010c00 	.word	0x40010c00
 80026a8:	2000231c 	.word	0x2000231c
 80026ac:	40020008 	.word	0x40020008

080026b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08a      	sub	sp, #40	@ 0x28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 0314 	add.w	r3, r7, #20
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a29      	ldr	r2, [pc, #164]	@ (8002770 <HAL_CAN_MspInit+0xc0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d14b      	bne.n	8002768 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80026d0:	4b28      	ldr	r3, [pc, #160]	@ (8002774 <HAL_CAN_MspInit+0xc4>)
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	4a27      	ldr	r2, [pc, #156]	@ (8002774 <HAL_CAN_MspInit+0xc4>)
 80026d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026da:	61d3      	str	r3, [r2, #28]
 80026dc:	4b25      	ldr	r3, [pc, #148]	@ (8002774 <HAL_CAN_MspInit+0xc4>)
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e8:	4b22      	ldr	r3, [pc, #136]	@ (8002774 <HAL_CAN_MspInit+0xc4>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	4a21      	ldr	r2, [pc, #132]	@ (8002774 <HAL_CAN_MspInit+0xc4>)
 80026ee:	f043 0308 	orr.w	r3, r3, #8
 80026f2:	6193      	str	r3, [r2, #24]
 80026f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002774 <HAL_CAN_MspInit+0xc4>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002700:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270e:	f107 0314 	add.w	r3, r7, #20
 8002712:	4619      	mov	r1, r3
 8002714:	4818      	ldr	r0, [pc, #96]	@ (8002778 <HAL_CAN_MspInit+0xc8>)
 8002716:	f002 f8fd 	bl	8004914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800271a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800271e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002724:	2303      	movs	r3, #3
 8002726:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	4619      	mov	r1, r3
 800272e:	4812      	ldr	r0, [pc, #72]	@ (8002778 <HAL_CAN_MspInit+0xc8>)
 8002730:	f002 f8f0 	bl	8004914 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002734:	4b11      	ldr	r3, [pc, #68]	@ (800277c <HAL_CAN_MspInit+0xcc>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	627b      	str	r3, [r7, #36]	@ 0x24
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8002740:	627b      	str	r3, [r7, #36]	@ 0x24
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24
 8002752:	4a0a      	ldr	r2, [pc, #40]	@ (800277c <HAL_CAN_MspInit+0xcc>)
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002758:	2200      	movs	r2, #0
 800275a:	2100      	movs	r1, #0
 800275c:	2014      	movs	r0, #20
 800275e:	f001 feb4 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002762:	2014      	movs	r0, #20
 8002764:	f001 fecd 	bl	8004502 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8002768:	bf00      	nop
 800276a:	3728      	adds	r7, #40	@ 0x28
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40006400 	.word	0x40006400
 8002774:	40021000 	.word	0x40021000
 8002778:	40010c00 	.word	0x40010c00
 800277c:	40010000 	.word	0x40010000

08002780 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0310 	add.w	r3, r7, #16
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a15      	ldr	r2, [pc, #84]	@ (80027f0 <HAL_I2C_MspInit+0x70>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d123      	bne.n	80027e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a0:	4b14      	ldr	r3, [pc, #80]	@ (80027f4 <HAL_I2C_MspInit+0x74>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	4a13      	ldr	r2, [pc, #76]	@ (80027f4 <HAL_I2C_MspInit+0x74>)
 80027a6:	f043 0308 	orr.w	r3, r3, #8
 80027aa:	6193      	str	r3, [r2, #24]
 80027ac:	4b11      	ldr	r3, [pc, #68]	@ (80027f4 <HAL_I2C_MspInit+0x74>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027b8:	23c0      	movs	r3, #192	@ 0xc0
 80027ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027bc:	2312      	movs	r3, #18
 80027be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027c0:	2303      	movs	r3, #3
 80027c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c4:	f107 0310 	add.w	r3, r7, #16
 80027c8:	4619      	mov	r1, r3
 80027ca:	480b      	ldr	r0, [pc, #44]	@ (80027f8 <HAL_I2C_MspInit+0x78>)
 80027cc:	f002 f8a2 	bl	8004914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027d0:	4b08      	ldr	r3, [pc, #32]	@ (80027f4 <HAL_I2C_MspInit+0x74>)
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	4a07      	ldr	r2, [pc, #28]	@ (80027f4 <HAL_I2C_MspInit+0x74>)
 80027d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027da:	61d3      	str	r3, [r2, #28]
 80027dc:	4b05      	ldr	r3, [pc, #20]	@ (80027f4 <HAL_I2C_MspInit+0x74>)
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80027e8:	bf00      	nop
 80027ea:	3720      	adds	r7, #32
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40005400 	.word	0x40005400
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40010c00 	.word	0x40010c00

080027fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 0310 	add.w	r3, r7, #16
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1c      	ldr	r2, [pc, #112]	@ (8002888 <HAL_SPI_MspInit+0x8c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d131      	bne.n	8002880 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800281c:	4b1b      	ldr	r3, [pc, #108]	@ (800288c <HAL_SPI_MspInit+0x90>)
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	4a1a      	ldr	r2, [pc, #104]	@ (800288c <HAL_SPI_MspInit+0x90>)
 8002822:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002826:	61d3      	str	r3, [r2, #28]
 8002828:	4b18      	ldr	r3, [pc, #96]	@ (800288c <HAL_SPI_MspInit+0x90>)
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002834:	4b15      	ldr	r3, [pc, #84]	@ (800288c <HAL_SPI_MspInit+0x90>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	4a14      	ldr	r2, [pc, #80]	@ (800288c <HAL_SPI_MspInit+0x90>)
 800283a:	f043 0308 	orr.w	r3, r3, #8
 800283e:	6193      	str	r3, [r2, #24]
 8002840:	4b12      	ldr	r3, [pc, #72]	@ (800288c <HAL_SPI_MspInit+0x90>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800284c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002850:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002852:	2302      	movs	r3, #2
 8002854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002856:	2303      	movs	r3, #3
 8002858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285a:	f107 0310 	add.w	r3, r7, #16
 800285e:	4619      	mov	r1, r3
 8002860:	480b      	ldr	r0, [pc, #44]	@ (8002890 <HAL_SPI_MspInit+0x94>)
 8002862:	f002 f857 	bl	8004914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002866:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800286a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002874:	f107 0310 	add.w	r3, r7, #16
 8002878:	4619      	mov	r1, r3
 800287a:	4805      	ldr	r0, [pc, #20]	@ (8002890 <HAL_SPI_MspInit+0x94>)
 800287c:	f002 f84a 	bl	8004914 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002880:	bf00      	nop
 8002882:	3720      	adds	r7, #32
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40003800 	.word	0x40003800
 800288c:	40021000 	.word	0x40021000
 8002890:	40010c00 	.word	0x40010c00

08002894 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a4:	d114      	bne.n	80028d0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028a6:	4b19      	ldr	r3, [pc, #100]	@ (800290c <HAL_TIM_Base_MspInit+0x78>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4a18      	ldr	r2, [pc, #96]	@ (800290c <HAL_TIM_Base_MspInit+0x78>)
 80028ac:	f043 0301 	orr.w	r3, r3, #1
 80028b0:	61d3      	str	r3, [r2, #28]
 80028b2:	4b16      	ldr	r3, [pc, #88]	@ (800290c <HAL_TIM_Base_MspInit+0x78>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	201c      	movs	r0, #28
 80028c4:	f001 fe01 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028c8:	201c      	movs	r0, #28
 80028ca:	f001 fe1a 	bl	8004502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028ce:	e018      	b.n	8002902 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0e      	ldr	r2, [pc, #56]	@ (8002910 <HAL_TIM_Base_MspInit+0x7c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d113      	bne.n	8002902 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028da:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <HAL_TIM_Base_MspInit+0x78>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	4a0b      	ldr	r2, [pc, #44]	@ (800290c <HAL_TIM_Base_MspInit+0x78>)
 80028e0:	f043 0302 	orr.w	r3, r3, #2
 80028e4:	61d3      	str	r3, [r2, #28]
 80028e6:	4b09      	ldr	r3, [pc, #36]	@ (800290c <HAL_TIM_Base_MspInit+0x78>)
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2100      	movs	r1, #0
 80028f6:	201d      	movs	r0, #29
 80028f8:	f001 fde7 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028fc:	201d      	movs	r0, #29
 80028fe:	f001 fe00 	bl	8004502 <HAL_NVIC_EnableIRQ>
}
 8002902:	bf00      	nop
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40021000 	.word	0x40021000
 8002910:	40000400 	.word	0x40000400

08002914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002918:	bf00      	nop
 800291a:	e7fd      	b.n	8002918 <NMI_Handler+0x4>

0800291c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002920:	bf00      	nop
 8002922:	e7fd      	b.n	8002920 <HardFault_Handler+0x4>

08002924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002928:	bf00      	nop
 800292a:	e7fd      	b.n	8002928 <MemManage_Handler+0x4>

0800292c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002930:	bf00      	nop
 8002932:	e7fd      	b.n	8002930 <BusFault_Handler+0x4>

08002934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <UsageFault_Handler+0x4>

0800293c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	if(Timer1 > 0)
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <SysTick_Handler+0x34>)
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <SysTick_Handler+0x18>
		Timer1--;
 800296c:	4b09      	ldr	r3, [pc, #36]	@ (8002994 <SysTick_Handler+0x34>)
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	4b07      	ldr	r3, [pc, #28]	@ (8002994 <SysTick_Handler+0x34>)
 8002976:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8002978:	4b07      	ldr	r3, [pc, #28]	@ (8002998 <SysTick_Handler+0x38>)
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <SysTick_Handler+0x2c>
		Timer2--;
 8002980:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <SysTick_Handler+0x38>)
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	4b03      	ldr	r3, [pc, #12]	@ (8002998 <SysTick_Handler+0x38>)
 800298a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800298c:	f000 f974 	bl	8002c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000208 	.word	0x20000208
 8002998:	2000020a 	.word	0x2000020a

0800299c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029a0:	4802      	ldr	r0, [pc, #8]	@ (80029ac <DMA1_Channel1_IRQHandler+0x10>)
 80029a2:	f001 fe83 	bl	80046ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	2000231c 	.word	0x2000231c

080029b0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80029b4:	4802      	ldr	r0, [pc, #8]	@ (80029c0 <ADC1_2_IRQHandler+0x10>)
 80029b6:	f000 fb55 	bl	8003064 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	200022ec 	.word	0x200022ec

080029c4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80029c8:	4802      	ldr	r0, [pc, #8]	@ (80029d4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80029ca:	f001 fa84 	bl	8003ed6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20002360 	.word	0x20002360

080029d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Push_Button_Pin);
 80029dc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80029e0:	f002 f94e 	bl	8004c80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80029e4:	bf00      	nop
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029ec:	4802      	ldr	r0, [pc, #8]	@ (80029f8 <TIM2_IRQHandler+0x10>)
 80029ee:	f004 fb4d 	bl	800708c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20002434 	.word	0x20002434

080029fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a00:	4802      	ldr	r0, [pc, #8]	@ (8002a0c <TIM3_IRQHandler+0x10>)
 8002a02:	f004 fb43 	bl	800708c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	2000247c 	.word	0x2000247c

08002a10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return 1;
 8002a14:	2301      	movs	r3, #1
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <_kill>:

int _kill(int pid, int sig)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a28:	f009 fbe2 	bl	800c1f0 <__errno>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2216      	movs	r2, #22
 8002a30:	601a      	str	r2, [r3, #0]
  return -1;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <_exit>:

void _exit (int status)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a46:	f04f 31ff 	mov.w	r1, #4294967295
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff ffe7 	bl	8002a1e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <_exit+0x12>

08002a54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	e00a      	b.n	8002a7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a66:	f3af 8000 	nop.w
 8002a6a:	4601      	mov	r1, r0
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	60ba      	str	r2, [r7, #8]
 8002a72:	b2ca      	uxtb	r2, r1
 8002a74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	dbf0      	blt.n	8002a66 <_read+0x12>
  }

  return len;
 8002a84:	687b      	ldr	r3, [r7, #4]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	e009      	b.n	8002ab4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	60ba      	str	r2, [r7, #8]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	dbf1      	blt.n	8002aa0 <_write+0x12>
  }
  return len;
 8002abc:	687b      	ldr	r3, [r7, #4]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <_close>:

int _close(int file)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002aec:	605a      	str	r2, [r3, #4]
  return 0;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr

08002afa <_isatty>:

int _isatty(int file)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b02:	2301      	movs	r3, #1
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b085      	sub	sp, #20
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
	...

08002b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b30:	4a14      	ldr	r2, [pc, #80]	@ (8002b84 <_sbrk+0x5c>)
 8002b32:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <_sbrk+0x60>)
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b3c:	4b13      	ldr	r3, [pc, #76]	@ (8002b8c <_sbrk+0x64>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b44:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <_sbrk+0x64>)
 8002b46:	4a12      	ldr	r2, [pc, #72]	@ (8002b90 <_sbrk+0x68>)
 8002b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b4a:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <_sbrk+0x64>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d207      	bcs.n	8002b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b58:	f009 fb4a 	bl	800c1f0 <__errno>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	220c      	movs	r2, #12
 8002b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	e009      	b.n	8002b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b68:	4b08      	ldr	r3, [pc, #32]	@ (8002b8c <_sbrk+0x64>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b6e:	4b07      	ldr	r3, [pc, #28]	@ (8002b8c <_sbrk+0x64>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4413      	add	r3, r2
 8002b76:	4a05      	ldr	r2, [pc, #20]	@ (8002b8c <_sbrk+0x64>)
 8002b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20005000 	.word	0x20005000
 8002b88:	00000400 	.word	0x00000400
 8002b8c:	200025c4 	.word	0x200025c4
 8002b90:	20002950 	.word	0x20002950

08002b94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ba0:	f7ff fff8 	bl	8002b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ba4:	480b      	ldr	r0, [pc, #44]	@ (8002bd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002ba6:	490c      	ldr	r1, [pc, #48]	@ (8002bd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8002bdc <LoopFillZerobss+0x16>)
  movs r3, #0
 8002baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bac:	e002      	b.n	8002bb4 <LoopCopyDataInit>

08002bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bb2:	3304      	adds	r3, #4

08002bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb8:	d3f9      	bcc.n	8002bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bba:	4a09      	ldr	r2, [pc, #36]	@ (8002be0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002bbc:	4c09      	ldr	r4, [pc, #36]	@ (8002be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bc0:	e001      	b.n	8002bc6 <LoopFillZerobss>

08002bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bc4:	3204      	adds	r2, #4

08002bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc8:	d3fb      	bcc.n	8002bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bca:	f009 fb17 	bl	800c1fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bce:	f7ff f97f 	bl	8001ed0 <main>
  bx lr
 8002bd2:	4770      	bx	lr
  ldr r0, =_sdata
 8002bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002bdc:	0800ecf8 	.word	0x0800ecf8
  ldr r2, =_sbss
 8002be0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002be4:	2000294c 	.word	0x2000294c

08002be8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002be8:	e7fe      	b.n	8002be8 <CAN1_RX1_IRQHandler>
	...

08002bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf0:	4b08      	ldr	r3, [pc, #32]	@ (8002c14 <HAL_Init+0x28>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a07      	ldr	r2, [pc, #28]	@ (8002c14 <HAL_Init+0x28>)
 8002bf6:	f043 0310 	orr.w	r3, r3, #16
 8002bfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bfc:	2003      	movs	r0, #3
 8002bfe:	f001 fc59 	bl	80044b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c02:	200f      	movs	r0, #15
 8002c04:	f000 f808 	bl	8002c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c08:	f7ff fc98 	bl	800253c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40022000 	.word	0x40022000

08002c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c20:	4b12      	ldr	r3, [pc, #72]	@ (8002c6c <HAL_InitTick+0x54>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <HAL_InitTick+0x58>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c36:	4618      	mov	r0, r3
 8002c38:	f001 fc71 	bl	800451e <HAL_SYSTICK_Config>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e00e      	b.n	8002c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b0f      	cmp	r3, #15
 8002c4a:	d80a      	bhi.n	8002c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295
 8002c54:	f001 fc39 	bl	80044ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c58:	4a06      	ldr	r2, [pc, #24]	@ (8002c74 <HAL_InitTick+0x5c>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e000      	b.n	8002c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000004 	.word	0x20000004
 8002c70:	2000000c 	.word	0x2000000c
 8002c74:	20000008 	.word	0x20000008

08002c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c7c:	4b05      	ldr	r3, [pc, #20]	@ (8002c94 <HAL_IncTick+0x1c>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <HAL_IncTick+0x20>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4413      	add	r3, r2
 8002c88:	4a03      	ldr	r2, [pc, #12]	@ (8002c98 <HAL_IncTick+0x20>)
 8002c8a:	6013      	str	r3, [r2, #0]
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	2000000c 	.word	0x2000000c
 8002c98:	200025c8 	.word	0x200025c8

08002c9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ca0:	4b02      	ldr	r3, [pc, #8]	@ (8002cac <HAL_GetTick+0x10>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	200025c8 	.word	0x200025c8

08002cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cb8:	f7ff fff0 	bl	8002c9c <HAL_GetTick>
 8002cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d005      	beq.n	8002cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cca:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf4 <HAL_Delay+0x44>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cd6:	bf00      	nop
 8002cd8:	f7ff ffe0 	bl	8002c9c <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d8f7      	bhi.n	8002cd8 <HAL_Delay+0x28>
  {
  }
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	2000000c 	.word	0x2000000c

08002cf8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e0be      	b.n	8002e98 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d109      	bne.n	8002d3c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff fc32 	bl	80025a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 fbbd 	bl	80034bc <ADC_ConversionStop_Disable>
 8002d42:	4603      	mov	r3, r0
 8002d44:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f040 8099 	bne.w	8002e86 <HAL_ADC_Init+0x18e>
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 8095 	bne.w	8002e86 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d60:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d64:	f023 0302 	bic.w	r3, r3, #2
 8002d68:	f043 0202 	orr.w	r2, r3, #2
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d78:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	7b1b      	ldrb	r3, [r3, #12]
 8002d7e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d80:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d90:	d003      	beq.n	8002d9a <HAL_ADC_Init+0xa2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d102      	bne.n	8002da0 <HAL_ADC_Init+0xa8>
 8002d9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d9e:	e000      	b.n	8002da2 <HAL_ADC_Init+0xaa>
 8002da0:	2300      	movs	r3, #0
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	7d1b      	ldrb	r3, [r3, #20]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d119      	bne.n	8002de4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	7b1b      	ldrb	r3, [r3, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d109      	bne.n	8002dcc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	035a      	lsls	r2, r3, #13
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	e00b      	b.n	8002de4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd0:	f043 0220 	orr.w	r2, r3, #32
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ddc:	f043 0201 	orr.w	r2, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	4b28      	ldr	r3, [pc, #160]	@ (8002ea0 <HAL_ADC_Init+0x1a8>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e14:	d003      	beq.n	8002e1e <HAL_ADC_Init+0x126>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d104      	bne.n	8002e28 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	051b      	lsls	r3, r3, #20
 8002e26:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	4b18      	ldr	r3, [pc, #96]	@ (8002ea4 <HAL_ADC_Init+0x1ac>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d10b      	bne.n	8002e64 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e56:	f023 0303 	bic.w	r3, r3, #3
 8002e5a:	f043 0201 	orr.w	r2, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e62:	e018      	b.n	8002e96 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	f023 0312 	bic.w	r3, r3, #18
 8002e6c:	f043 0210 	orr.w	r2, r3, #16
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e84:	e007      	b.n	8002e96 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8a:	f043 0210 	orr.w	r2, r3, #16
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	ffe1f7fd 	.word	0xffe1f7fd
 8002ea4:	ff1f0efe 	.word	0xff1f0efe

08002ea8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a64      	ldr	r2, [pc, #400]	@ (8003050 <HAL_ADC_Start_DMA+0x1a8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_ADC_Start_DMA+0x24>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a63      	ldr	r2, [pc, #396]	@ (8003054 <HAL_ADC_Start_DMA+0x1ac>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d106      	bne.n	8002eda <HAL_ADC_Start_DMA+0x32>
 8002ecc:	4b60      	ldr	r3, [pc, #384]	@ (8003050 <HAL_ADC_Start_DMA+0x1a8>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f040 80b3 	bne.w	8003040 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADC_Start_DMA+0x40>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e0ae      	b.n	8003046 <HAL_ADC_Start_DMA+0x19e>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fa89 	bl	8003408 <ADC_Enable>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f040 809a 	bne.w	8003036 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f06:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f0a:	f023 0301 	bic.w	r3, r3, #1
 8002f0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a4e      	ldr	r2, [pc, #312]	@ (8003054 <HAL_ADC_Start_DMA+0x1ac>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d105      	bne.n	8002f2c <HAL_ADC_Start_DMA+0x84>
 8002f20:	4b4b      	ldr	r3, [pc, #300]	@ (8003050 <HAL_ADC_Start_DMA+0x1a8>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d115      	bne.n	8002f58 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f30:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d026      	beq.n	8002f94 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f4e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f56:	e01d      	b.n	8002f94 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a39      	ldr	r2, [pc, #228]	@ (8003050 <HAL_ADC_Start_DMA+0x1a8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d004      	beq.n	8002f78 <HAL_ADC_Start_DMA+0xd0>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a38      	ldr	r2, [pc, #224]	@ (8003054 <HAL_ADC_Start_DMA+0x1ac>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d10d      	bne.n	8002f94 <HAL_ADC_Start_DMA+0xec>
 8002f78:	4b35      	ldr	r3, [pc, #212]	@ (8003050 <HAL_ADC_Start_DMA+0x1a8>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d007      	beq.n	8002f94 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f88:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f8c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d006      	beq.n	8002fae <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa4:	f023 0206 	bic.w	r2, r3, #6
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002fac:	e002      	b.n	8002fb4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	4a25      	ldr	r2, [pc, #148]	@ (8003058 <HAL_ADC_Start_DMA+0x1b0>)
 8002fc2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	4a24      	ldr	r2, [pc, #144]	@ (800305c <HAL_ADC_Start_DMA+0x1b4>)
 8002fca:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4a23      	ldr	r2, [pc, #140]	@ (8003060 <HAL_ADC_Start_DMA+0x1b8>)
 8002fd2:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0202 	mvn.w	r2, #2
 8002fdc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fec:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a18      	ldr	r0, [r3, #32]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	334c      	adds	r3, #76	@ 0x4c
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f001 faf5 	bl	80045ec <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800300c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003010:	d108      	bne.n	8003024 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003020:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003022:	e00f      	b.n	8003044 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003032:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003034:	e006      	b.n	8003044 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800303e:	e001      	b.n	8003044 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003044:	7dfb      	ldrb	r3, [r7, #23]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40012400 	.word	0x40012400
 8003054:	40012800 	.word	0x40012800
 8003058:	0800353f 	.word	0x0800353f
 800305c:	080035bb 	.word	0x080035bb
 8003060:	080035d7 	.word	0x080035d7

08003064 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b00      	cmp	r3, #0
 8003084:	d03e      	beq.n	8003104 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d039      	beq.n	8003104 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	d105      	bne.n	80030a8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80030b2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80030b6:	d11d      	bne.n	80030f4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d119      	bne.n	80030f4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685a      	ldr	r2, [r3, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0220 	bic.w	r2, r2, #32
 80030ce:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ec:	f043 0201 	orr.w	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7fe fc31 	bl	800195c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f06f 0212 	mvn.w	r2, #18
 8003102:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800310a:	2b00      	cmp	r3, #0
 800310c:	d04d      	beq.n	80031aa <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d048      	beq.n	80031aa <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	d105      	bne.n	8003130 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003128:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800313a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800313e:	d012      	beq.n	8003166 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800314a:	2b00      	cmp	r3, #0
 800314c:	d125      	bne.n	800319a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003158:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800315c:	d11d      	bne.n	800319a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003162:	2b00      	cmp	r3, #0
 8003164:	d119      	bne.n	800319a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003174:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d105      	bne.n	800319a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003192:	f043 0201 	orr.w	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fa35 	bl	800360a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 020c 	mvn.w	r2, #12
 80031a8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d012      	beq.n	80031da <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00d      	beq.n	80031da <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f812 	bl	80031f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0201 	mvn.w	r2, #1
 80031d8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80031da:	bf00      	nop
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr

08003206 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr

08003218 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x20>
 8003234:	2302      	movs	r3, #2
 8003236:	e0dc      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x1da>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	2b06      	cmp	r3, #6
 8003246:	d81c      	bhi.n	8003282 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	3b05      	subs	r3, #5
 800325a:	221f      	movs	r2, #31
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	4019      	ands	r1, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	3b05      	subs	r3, #5
 8003274:	fa00 f203 	lsl.w	r2, r0, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003280:	e03c      	b.n	80032fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b0c      	cmp	r3, #12
 8003288:	d81c      	bhi.n	80032c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	3b23      	subs	r3, #35	@ 0x23
 800329c:	221f      	movs	r2, #31
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	4019      	ands	r1, r3
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	3b23      	subs	r3, #35	@ 0x23
 80032b6:	fa00 f203 	lsl.w	r2, r0, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80032c2:	e01b      	b.n	80032fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	3b41      	subs	r3, #65	@ 0x41
 80032d6:	221f      	movs	r2, #31
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	4019      	ands	r1, r3
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	3b41      	subs	r3, #65	@ 0x41
 80032f0:	fa00 f203 	lsl.w	r2, r0, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b09      	cmp	r3, #9
 8003302:	d91c      	bls.n	800333e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68d9      	ldr	r1, [r3, #12]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4613      	mov	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4413      	add	r3, r2
 8003314:	3b1e      	subs	r3, #30
 8003316:	2207      	movs	r2, #7
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	4019      	ands	r1, r3
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	6898      	ldr	r0, [r3, #8]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4413      	add	r3, r2
 800332e:	3b1e      	subs	r3, #30
 8003330:	fa00 f203 	lsl.w	r2, r0, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	60da      	str	r2, [r3, #12]
 800333c:	e019      	b.n	8003372 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6919      	ldr	r1, [r3, #16]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	2207      	movs	r2, #7
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	4019      	ands	r1, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	6898      	ldr	r0, [r3, #8]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	4413      	add	r3, r2
 8003366:	fa00 f203 	lsl.w	r2, r0, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b10      	cmp	r3, #16
 8003378:	d003      	beq.n	8003382 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800337e:	2b11      	cmp	r3, #17
 8003380:	d132      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1d      	ldr	r2, [pc, #116]	@ (80033fc <HAL_ADC_ConfigChannel+0x1e4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d125      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d126      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80033a8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	d11a      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033b2:	4b13      	ldr	r3, [pc, #76]	@ (8003400 <HAL_ADC_ConfigChannel+0x1e8>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a13      	ldr	r2, [pc, #76]	@ (8003404 <HAL_ADC_ConfigChannel+0x1ec>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	0c9a      	lsrs	r2, r3, #18
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033c8:	e002      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	3b01      	subs	r3, #1
 80033ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f9      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x1b2>
 80033d6:	e007      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033dc:	f043 0220 	orr.w	r2, r3, #32
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	40012400 	.word	0x40012400
 8003400:	20000004 	.word	0x20000004
 8003404:	431bde83 	.word	0x431bde83

08003408 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b01      	cmp	r3, #1
 8003424:	d040      	beq.n	80034a8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0201 	orr.w	r2, r2, #1
 8003434:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003436:	4b1f      	ldr	r3, [pc, #124]	@ (80034b4 <ADC_Enable+0xac>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a1f      	ldr	r2, [pc, #124]	@ (80034b8 <ADC_Enable+0xb0>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	0c9b      	lsrs	r3, r3, #18
 8003442:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003444:	e002      	b.n	800344c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3b01      	subs	r3, #1
 800344a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f9      	bne.n	8003446 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003452:	f7ff fc23 	bl	8002c9c <HAL_GetTick>
 8003456:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003458:	e01f      	b.n	800349a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800345a:	f7ff fc1f 	bl	8002c9c <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d918      	bls.n	800349a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b01      	cmp	r3, #1
 8003474:	d011      	beq.n	800349a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347a:	f043 0210 	orr.w	r2, r3, #16
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e007      	b.n	80034aa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d1d8      	bne.n	800345a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000004 	.word	0x20000004
 80034b8:	431bde83 	.word	0x431bde83

080034bc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d12e      	bne.n	8003534 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0201 	bic.w	r2, r2, #1
 80034e4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034e6:	f7ff fbd9 	bl	8002c9c <HAL_GetTick>
 80034ea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034ec:	e01b      	b.n	8003526 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034ee:	f7ff fbd5 	bl	8002c9c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d914      	bls.n	8003526 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b01      	cmp	r3, #1
 8003508:	d10d      	bne.n	8003526 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800350e:	f043 0210 	orr.w	r2, r3, #16
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	f043 0201 	orr.w	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e007      	b.n	8003536 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b01      	cmp	r3, #1
 8003532:	d0dc      	beq.n	80034ee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003550:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003554:	2b00      	cmp	r3, #0
 8003556:	d127      	bne.n	80035a8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800356e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003572:	d115      	bne.n	80035a0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003578:	2b00      	cmp	r3, #0
 800357a:	d111      	bne.n	80035a0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003580:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d105      	bne.n	80035a0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003598:	f043 0201 	orr.w	r2, r3, #1
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f7fe f9db 	bl	800195c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80035a6:	e004      	b.n	80035b2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
}
 80035b2:	bf00      	nop
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f7ff fe0a 	bl	80031e2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f4:	f043 0204 	orr.w	r2, r3, #4
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7ff fe02 	bl	8003206 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003602:	bf00      	nop
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0ed      	b.n	800380a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d102      	bne.n	8003640 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff f838 	bl	80026b0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0201 	orr.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003650:	f7ff fb24 	bl	8002c9c <HAL_GetTick>
 8003654:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003656:	e012      	b.n	800367e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003658:	f7ff fb20 	bl	8002c9c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b0a      	cmp	r3, #10
 8003664:	d90b      	bls.n	800367e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2205      	movs	r2, #5
 8003676:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e0c5      	b.n	800380a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0e5      	beq.n	8003658 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0202 	bic.w	r2, r2, #2
 800369a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800369c:	f7ff fafe 	bl	8002c9c <HAL_GetTick>
 80036a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036a2:	e012      	b.n	80036ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036a4:	f7ff fafa 	bl	8002c9c <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b0a      	cmp	r3, #10
 80036b0:	d90b      	bls.n	80036ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2205      	movs	r2, #5
 80036c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e09f      	b.n	800380a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e5      	bne.n	80036a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	7e1b      	ldrb	r3, [r3, #24]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d108      	bne.n	80036f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	e007      	b.n	8003702 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003700:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7e5b      	ldrb	r3, [r3, #25]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d108      	bne.n	800371c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e007      	b.n	800372c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800372a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	7e9b      	ldrb	r3, [r3, #26]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d108      	bne.n	8003746 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0220 	orr.w	r2, r2, #32
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	e007      	b.n	8003756 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0220 	bic.w	r2, r2, #32
 8003754:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	7edb      	ldrb	r3, [r3, #27]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d108      	bne.n	8003770 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0210 	bic.w	r2, r2, #16
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	e007      	b.n	8003780 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0210 	orr.w	r2, r2, #16
 800377e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	7f1b      	ldrb	r3, [r3, #28]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d108      	bne.n	800379a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0208 	orr.w	r2, r2, #8
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e007      	b.n	80037aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0208 	bic.w	r2, r2, #8
 80037a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	7f5b      	ldrb	r3, [r3, #29]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d108      	bne.n	80037c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0204 	orr.w	r2, r2, #4
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	e007      	b.n	80037d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0204 	bic.w	r2, r2, #4
 80037d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	ea42 0103 	orr.w	r1, r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	1e5a      	subs	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003812:	b480      	push	{r7}
 8003814:	b087      	sub	sp, #28
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003828:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800382a:	7cfb      	ldrb	r3, [r7, #19]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d003      	beq.n	8003838 <HAL_CAN_ConfigFilter+0x26>
 8003830:	7cfb      	ldrb	r3, [r7, #19]
 8003832:	2b02      	cmp	r3, #2
 8003834:	f040 80aa 	bne.w	800398c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800383e:	f043 0201 	orr.w	r2, r3, #1
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	2201      	movs	r2, #1
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	43db      	mvns	r3, r3
 8003862:	401a      	ands	r2, r3
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d123      	bne.n	80038ba <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	43db      	mvns	r3, r3
 800387c:	401a      	ands	r2, r3
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003894:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	3248      	adds	r2, #72	@ 0x48
 800389a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038b0:	6979      	ldr	r1, [r7, #20]
 80038b2:	3348      	adds	r3, #72	@ 0x48
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	440b      	add	r3, r1
 80038b8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d122      	bne.n	8003908 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80038e2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3248      	adds	r2, #72	@ 0x48
 80038e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038fe:	6979      	ldr	r1, [r7, #20]
 8003900:	3348      	adds	r3, #72	@ 0x48
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	440b      	add	r3, r1
 8003906:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d109      	bne.n	8003924 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	43db      	mvns	r3, r3
 800391a:	401a      	ands	r2, r3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003922:	e007      	b.n	8003934 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	431a      	orrs	r2, r3
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	43db      	mvns	r3, r3
 8003946:	401a      	ands	r2, r3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800394e:	e007      	b.n	8003960 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	431a      	orrs	r2, r3
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d107      	bne.n	8003978 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	431a      	orrs	r2, r3
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800397e:	f023 0201 	bic.w	r2, r3, #1
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	e006      	b.n	800399a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
  }
}
 800399a:	4618      	mov	r0, r3
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d12e      	bne.n	8003a16 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039d0:	f7ff f964 	bl	8002c9c <HAL_GetTick>
 80039d4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80039d6:	e012      	b.n	80039fe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039d8:	f7ff f960 	bl	8002c9c <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b0a      	cmp	r3, #10
 80039e4:	d90b      	bls.n	80039fe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2205      	movs	r2, #5
 80039f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e012      	b.n	8003a24 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e5      	bne.n	80039d8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e006      	b.n	8003a24 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
  }
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const float aData[], uint32_t *pTxMailbox)
{
 8003a2c:	b590      	push	{r4, r7, lr}
 8003a2e:	b089      	sub	sp, #36	@ 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a40:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a4a:	7ffb      	ldrb	r3, [r7, #31]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d003      	beq.n	8003a58 <HAL_CAN_AddTxMessage+0x2c>
 8003a50:	7ffb      	ldrb	r3, [r7, #31]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	f040 80c9 	bne.w	8003bea <HAL_CAN_AddTxMessage+0x1be>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d105      	bne.n	8003a78 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80b1 	beq.w	8003bda <HAL_CAN_AddTxMessage+0x1ae>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	0e1b      	lsrs	r3, r3, #24
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003a82:	2201      	movs	r2, #1
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	409a      	lsls	r2, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10d      	bne.n	8003ab0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003a9e:	68f9      	ldr	r1, [r7, #12]
 8003aa0:	6809      	ldr	r1, [r1, #0]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	3318      	adds	r3, #24
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	440b      	add	r3, r1
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e00f      	b.n	8003ad0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003aba:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ac0:	68f9      	ldr	r1, [r7, #12]
 8003ac2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003ac4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	3318      	adds	r3, #24
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	440b      	add	r3, r1
 8003ace:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6819      	ldr	r1, [r3, #0]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	3318      	adds	r3, #24
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	440b      	add	r3, r1
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	7d1b      	ldrb	r3, [r3, #20]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d111      	bne.n	8003b10 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	3318      	adds	r3, #24
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	4413      	add	r3, r2
 8003af8:	3304      	adds	r3, #4
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	6811      	ldr	r1, [r2, #0]
 8003b00:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	3318      	adds	r3, #24
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	440b      	add	r3, r1
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	331c      	adds	r3, #28
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd f93a 	bl	8000d90 <__aeabi_f2uiz>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	061c      	lsls	r4, r3, #24
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3318      	adds	r3, #24
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fd f932 	bl	8000d90 <__aeabi_f2uiz>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	041b      	lsls	r3, r3, #16
 8003b30:	431c      	orrs	r4, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3314      	adds	r3, #20
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fd f929 	bl	8000d90 <__aeabi_f2uiz>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	431c      	orrs	r4, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3310      	adds	r3, #16
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fd f920 	bl	8000d90 <__aeabi_f2uiz>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6819      	ldr	r1, [r3, #0]
 8003b56:	4322      	orrs	r2, r4
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	440b      	add	r3, r1
 8003b5e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003b62:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	330c      	adds	r3, #12
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fd f910 	bl	8000d90 <__aeabi_f2uiz>
 8003b70:	4603      	mov	r3, r0
 8003b72:	061c      	lsls	r4, r3, #24
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3308      	adds	r3, #8
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd f908 	bl	8000d90 <__aeabi_f2uiz>
 8003b80:	4603      	mov	r3, r0
 8003b82:	041b      	lsls	r3, r3, #16
 8003b84:	431c      	orrs	r4, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fd f8ff 	bl	8000d90 <__aeabi_f2uiz>
 8003b92:	4603      	mov	r3, r0
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	431c      	orrs	r4, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fd f8f7 	bl	8000d90 <__aeabi_f2uiz>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6819      	ldr	r1, [r3, #0]
 8003ba8:	4322      	orrs	r2, r4
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	440b      	add	r3, r1
 8003bb0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003bb4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	3318      	adds	r3, #24
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	4413      	add	r3, r2
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	6811      	ldr	r1, [r2, #0]
 8003bc8:	f043 0201 	orr.w	r2, r3, #1
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	3318      	adds	r3, #24
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	440b      	add	r3, r1
 8003bd4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e00e      	b.n	8003bf8 <HAL_CAN_AddTxMessage+0x1cc>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bde:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e006      	b.n	8003bf8 <HAL_CAN_AddTxMessage+0x1cc>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
  }
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3724      	adds	r7, #36	@ 0x24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd90      	pop	{r4, r7, pc}

08003c00 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, float aData[])
{
 8003c00:	b590      	push	{r4, r7, lr}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c14:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d003      	beq.n	8003c24 <HAL_CAN_GetRxMessage+0x24>
 8003c1c:	7dfb      	ldrb	r3, [r7, #23]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	f040 8129 	bne.w	8003e76 <HAL_CAN_GetRxMessage+0x276>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10e      	bne.n	8003c48 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d116      	bne.n	8003c66 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e11d      	b.n	8003e84 <HAL_CAN_GetRxMessage+0x284>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d107      	bne.n	8003c66 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e10e      	b.n	8003e84 <HAL_CAN_GetRxMessage+0x284>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	331b      	adds	r3, #27
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	4413      	add	r3, r2
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0204 	and.w	r2, r3, #4
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10c      	bne.n	8003c9e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	331b      	adds	r3, #27
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	4413      	add	r3, r2
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	0d5b      	lsrs	r3, r3, #21
 8003c94:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	e00b      	b.n	8003cb6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	331b      	adds	r3, #27
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	4413      	add	r3, r2
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	08db      	lsrs	r3, r3, #3
 8003cae:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	331b      	adds	r3, #27
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	4413      	add	r3, r2
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0202 	and.w	r2, r3, #2
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	331b      	adds	r3, #27
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3304      	adds	r3, #4
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2208      	movs	r2, #8
 8003ce8:	611a      	str	r2, [r3, #16]
 8003cea:	e00b      	b.n	8003d04 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	331b      	adds	r3, #27
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 020f 	and.w	r2, r3, #15
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	331b      	adds	r3, #27
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	4413      	add	r3, r2
 8003d10:	3304      	adds	r3, #4
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	0a1b      	lsrs	r3, r3, #8
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	331b      	adds	r3, #27
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	4413      	add	r3, r2
 8003d28:	3304      	adds	r3, #4
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fc ff54 	bl	8000bf4 <__aeabi_ui2f>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	601a      	str	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	0a1b      	lsrs	r3, r3, #8
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	1d1c      	adds	r4, r3, #4
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	f7fc ff42 	bl	8000bf4 <__aeabi_ui2f>
 8003d70:	4603      	mov	r3, r0
 8003d72:	6023      	str	r3, [r4, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	f103 0408 	add.w	r4, r3, #8
 8003d8e:	4610      	mov	r0, r2
 8003d90:	f7fc ff30 	bl	8000bf4 <__aeabi_ui2f>
 8003d94:	4603      	mov	r3, r0
 8003d96:	6023      	str	r3, [r4, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	0e1b      	lsrs	r3, r3, #24
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	f103 040c 	add.w	r4, r3, #12
 8003db2:	4610      	mov	r0, r2
 8003db4:	f7fc ff1e 	bl	8000bf4 <__aeabi_ui2f>
 8003db8:	4603      	mov	r3, r0
 8003dba:	6023      	str	r3, [r4, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	f103 0410 	add.w	r4, r3, #16
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	f7fc ff0d 	bl	8000bf4 <__aeabi_ui2f>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	6023      	str	r3, [r4, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	0a1b      	lsrs	r3, r3, #8
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	f103 0414 	add.w	r4, r3, #20
 8003df8:	4610      	mov	r0, r2
 8003dfa:	f7fc fefb 	bl	8000bf4 <__aeabi_ui2f>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	6023      	str	r3, [r4, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	0c1b      	lsrs	r3, r3, #16
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f103 0418 	add.w	r4, r3, #24
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	f7fc fee9 	bl	8000bf4 <__aeabi_ui2f>
 8003e22:	4603      	mov	r3, r0
 8003e24:	6023      	str	r3, [r4, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	0e1b      	lsrs	r3, r3, #24
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	f103 041c 	add.w	r4, r3, #28
 8003e40:	4610      	mov	r0, r2
 8003e42:	f7fc fed7 	bl	8000bf4 <__aeabi_ui2f>
 8003e46:	4603      	mov	r3, r0
 8003e48:	6023      	str	r3, [r4, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d108      	bne.n	8003e62 <HAL_CAN_GetRxMessage+0x262>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0220 	orr.w	r2, r2, #32
 8003e5e:	60da      	str	r2, [r3, #12]
 8003e60:	e007      	b.n	8003e72 <HAL_CAN_GetRxMessage+0x272>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0220 	orr.w	r2, r2, #32
 8003e70:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e006      	b.n	8003e84 <HAL_CAN_GetRxMessage+0x284>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
  }
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd90      	pop	{r4, r7, pc}

08003e8c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e9c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d002      	beq.n	8003eaa <HAL_CAN_ActivateNotification+0x1e>
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d109      	bne.n	8003ebe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6959      	ldr	r1, [r3, #20]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	e006      	b.n	8003ecc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
  }
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b08a      	sub	sp, #40	@ 0x28
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d07c      	beq.n	8004016 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d023      	beq.n	8003f6e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f983 	bl	8004244 <HAL_CAN_TxMailbox0CompleteCallback>
 8003f3e:	e016      	b.n	8003f6e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d004      	beq.n	8003f54 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f52:	e00c      	b.n	8003f6e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d004      	beq.n	8003f68 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f66:	e002      	b.n	8003f6e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f986 	bl	800427a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d024      	beq.n	8003fc2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f962 	bl	8004256 <HAL_CAN_TxMailbox1CompleteCallback>
 8003f92:	e016      	b.n	8003fc2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d004      	beq.n	8003fa8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa6:	e00c      	b.n	8003fc2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fba:	e002      	b.n	8003fc2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f965 	bl	800428c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d024      	beq.n	8004016 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003fd4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f941 	bl	8004268 <HAL_CAN_TxMailbox2CompleteCallback>
 8003fe6:	e016      	b.n	8004016 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d004      	beq.n	8003ffc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ffa:	e00c      	b.n	8004016 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d004      	beq.n	8004010 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800400c:	627b      	str	r3, [r7, #36]	@ 0x24
 800400e:	e002      	b.n	8004016 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f944 	bl	800429e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00c      	beq.n	800403a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	2b00      	cmp	r3, #0
 8004028:	d007      	beq.n	800403a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004030:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2210      	movs	r2, #16
 8004038:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00b      	beq.n	800405c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d006      	beq.n	800405c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2208      	movs	r2, #8
 8004054:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f92a 	bl	80042b0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7fd fdfd 	bl	8001c74 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00c      	beq.n	800409e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	d007      	beq.n	800409e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004094:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2210      	movs	r2, #16
 800409c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00b      	beq.n	80040c0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d006      	beq.n	80040c0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2208      	movs	r2, #8
 80040b8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f90a 	bl	80042d4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f8f2 	bl	80042c2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00b      	beq.n	8004100 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d006      	beq.n	8004100 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2210      	movs	r2, #16
 80040f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8f3 	bl	80042e6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00b      	beq.n	8004122 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d006      	beq.n	8004122 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2208      	movs	r2, #8
 800411a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f8eb 	bl	80042f8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d07b      	beq.n	8004224 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d072      	beq.n	800421c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004158:	2b00      	cmp	r3, #0
 800415a:	d008      	beq.n	800416e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	f043 0302 	orr.w	r3, r3, #2
 800416c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004184:	f043 0304 	orr.w	r3, r3, #4
 8004188:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004190:	2b00      	cmp	r3, #0
 8004192:	d043      	beq.n	800421c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800419a:	2b00      	cmp	r3, #0
 800419c:	d03e      	beq.n	800421c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041a4:	2b60      	cmp	r3, #96	@ 0x60
 80041a6:	d02b      	beq.n	8004200 <HAL_CAN_IRQHandler+0x32a>
 80041a8:	2b60      	cmp	r3, #96	@ 0x60
 80041aa:	d82e      	bhi.n	800420a <HAL_CAN_IRQHandler+0x334>
 80041ac:	2b50      	cmp	r3, #80	@ 0x50
 80041ae:	d022      	beq.n	80041f6 <HAL_CAN_IRQHandler+0x320>
 80041b0:	2b50      	cmp	r3, #80	@ 0x50
 80041b2:	d82a      	bhi.n	800420a <HAL_CAN_IRQHandler+0x334>
 80041b4:	2b40      	cmp	r3, #64	@ 0x40
 80041b6:	d019      	beq.n	80041ec <HAL_CAN_IRQHandler+0x316>
 80041b8:	2b40      	cmp	r3, #64	@ 0x40
 80041ba:	d826      	bhi.n	800420a <HAL_CAN_IRQHandler+0x334>
 80041bc:	2b30      	cmp	r3, #48	@ 0x30
 80041be:	d010      	beq.n	80041e2 <HAL_CAN_IRQHandler+0x30c>
 80041c0:	2b30      	cmp	r3, #48	@ 0x30
 80041c2:	d822      	bhi.n	800420a <HAL_CAN_IRQHandler+0x334>
 80041c4:	2b10      	cmp	r3, #16
 80041c6:	d002      	beq.n	80041ce <HAL_CAN_IRQHandler+0x2f8>
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	d005      	beq.n	80041d8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80041cc:	e01d      	b.n	800420a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	f043 0308 	orr.w	r3, r3, #8
 80041d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041d6:	e019      	b.n	800420c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	f043 0310 	orr.w	r3, r3, #16
 80041de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041e0:	e014      	b.n	800420c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	f043 0320 	orr.w	r3, r3, #32
 80041e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041ea:	e00f      	b.n	800420c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041f4:	e00a      	b.n	800420c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80041fe:	e005      	b.n	800420c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004202:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004206:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004208:	e000      	b.n	800420c <HAL_CAN_IRQHandler+0x336>
            break;
 800420a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800421a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2204      	movs	r2, #4
 8004222:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f867 	bl	800430a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800423c:	bf00      	nop
 800423e:	3728      	adds	r7, #40	@ 0x28
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr

08004256 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr

08004268 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr

0800427a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr

0800429e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr

080042b0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr

080042c2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr

080042d4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr

080042e6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr

080042f8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr

0800430a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800432c:	4b0c      	ldr	r3, [pc, #48]	@ (8004360 <__NVIC_SetPriorityGrouping+0x44>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004338:	4013      	ands	r3, r2
 800433a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004344:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800434c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800434e:	4a04      	ldr	r2, [pc, #16]	@ (8004360 <__NVIC_SetPriorityGrouping+0x44>)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	60d3      	str	r3, [r2, #12]
}
 8004354:	bf00      	nop
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	e000ed00 	.word	0xe000ed00

08004364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004368:	4b04      	ldr	r3, [pc, #16]	@ (800437c <__NVIC_GetPriorityGrouping+0x18>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	0a1b      	lsrs	r3, r3, #8
 800436e:	f003 0307 	and.w	r3, r3, #7
}
 8004372:	4618      	mov	r0, r3
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	e000ed00 	.word	0xe000ed00

08004380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800438a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438e:	2b00      	cmp	r3, #0
 8004390:	db0b      	blt.n	80043aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004392:	79fb      	ldrb	r3, [r7, #7]
 8004394:	f003 021f 	and.w	r2, r3, #31
 8004398:	4906      	ldr	r1, [pc, #24]	@ (80043b4 <__NVIC_EnableIRQ+0x34>)
 800439a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	2001      	movs	r0, #1
 80043a2:	fa00 f202 	lsl.w	r2, r0, r2
 80043a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr
 80043b4:	e000e100 	.word	0xe000e100

080043b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	6039      	str	r1, [r7, #0]
 80043c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	db0a      	blt.n	80043e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	490c      	ldr	r1, [pc, #48]	@ (8004404 <__NVIC_SetPriority+0x4c>)
 80043d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d6:	0112      	lsls	r2, r2, #4
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	440b      	add	r3, r1
 80043dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043e0:	e00a      	b.n	80043f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	4908      	ldr	r1, [pc, #32]	@ (8004408 <__NVIC_SetPriority+0x50>)
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	3b04      	subs	r3, #4
 80043f0:	0112      	lsls	r2, r2, #4
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	440b      	add	r3, r1
 80043f6:	761a      	strb	r2, [r3, #24]
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	e000e100 	.word	0xe000e100
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800440c:	b480      	push	{r7}
 800440e:	b089      	sub	sp, #36	@ 0x24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f1c3 0307 	rsb	r3, r3, #7
 8004426:	2b04      	cmp	r3, #4
 8004428:	bf28      	it	cs
 800442a:	2304      	movcs	r3, #4
 800442c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	3304      	adds	r3, #4
 8004432:	2b06      	cmp	r3, #6
 8004434:	d902      	bls.n	800443c <NVIC_EncodePriority+0x30>
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	3b03      	subs	r3, #3
 800443a:	e000      	b.n	800443e <NVIC_EncodePriority+0x32>
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004440:	f04f 32ff 	mov.w	r2, #4294967295
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	43da      	mvns	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	401a      	ands	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004454:	f04f 31ff 	mov.w	r1, #4294967295
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	fa01 f303 	lsl.w	r3, r1, r3
 800445e:	43d9      	mvns	r1, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004464:	4313      	orrs	r3, r2
         );
}
 8004466:	4618      	mov	r0, r3
 8004468:	3724      	adds	r7, #36	@ 0x24
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3b01      	subs	r3, #1
 800447c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004480:	d301      	bcc.n	8004486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004482:	2301      	movs	r3, #1
 8004484:	e00f      	b.n	80044a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004486:	4a0a      	ldr	r2, [pc, #40]	@ (80044b0 <SysTick_Config+0x40>)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3b01      	subs	r3, #1
 800448c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800448e:	210f      	movs	r1, #15
 8004490:	f04f 30ff 	mov.w	r0, #4294967295
 8004494:	f7ff ff90 	bl	80043b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004498:	4b05      	ldr	r3, [pc, #20]	@ (80044b0 <SysTick_Config+0x40>)
 800449a:	2200      	movs	r2, #0
 800449c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800449e:	4b04      	ldr	r3, [pc, #16]	@ (80044b0 <SysTick_Config+0x40>)
 80044a0:	2207      	movs	r2, #7
 80044a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	e000e010 	.word	0xe000e010

080044b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff ff2d 	bl	800431c <__NVIC_SetPriorityGrouping>
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b086      	sub	sp, #24
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	4603      	mov	r3, r0
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
 80044d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044dc:	f7ff ff42 	bl	8004364 <__NVIC_GetPriorityGrouping>
 80044e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	6978      	ldr	r0, [r7, #20]
 80044e8:	f7ff ff90 	bl	800440c <NVIC_EncodePriority>
 80044ec:	4602      	mov	r2, r0
 80044ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044f2:	4611      	mov	r1, r2
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff ff5f 	bl	80043b8 <__NVIC_SetPriority>
}
 80044fa:	bf00      	nop
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	4603      	mov	r3, r0
 800450a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800450c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff ff35 	bl	8004380 <__NVIC_EnableIRQ>
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff ffa2 	bl	8004470 <SysTick_Config>
 800452c:	4603      	mov	r3, r0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e043      	b.n	80045d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	4b22      	ldr	r3, [pc, #136]	@ (80045e0 <HAL_DMA_Init+0xa8>)
 8004556:	4413      	add	r3, r2
 8004558:	4a22      	ldr	r2, [pc, #136]	@ (80045e4 <HAL_DMA_Init+0xac>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	009a      	lsls	r2, r3, #2
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a1f      	ldr	r2, [pc, #124]	@ (80045e8 <HAL_DMA_Init+0xb0>)
 800456a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004582:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004586:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004590:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800459c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	bc80      	pop	{r7}
 80045de:	4770      	bx	lr
 80045e0:	bffdfff8 	.word	0xbffdfff8
 80045e4:	cccccccd 	.word	0xcccccccd
 80045e8:	40020000 	.word	0x40020000

080045ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_DMA_Start_IT+0x20>
 8004608:	2302      	movs	r3, #2
 800460a:	e04b      	b.n	80046a4 <HAL_DMA_Start_IT+0xb8>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b01      	cmp	r3, #1
 800461e:	d13a      	bne.n	8004696 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f937 	bl	80048b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d008      	beq.n	8004664 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 020e 	orr.w	r2, r2, #14
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	e00f      	b.n	8004684 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0204 	bic.w	r2, r2, #4
 8004672:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 020a 	orr.w	r2, r2, #10
 8004682:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	e005      	b.n	80046a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800469e:	2302      	movs	r3, #2
 80046a0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c8:	2204      	movs	r2, #4
 80046ca:	409a      	lsls	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4013      	ands	r3, r2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d04f      	beq.n	8004774 <HAL_DMA_IRQHandler+0xc8>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d04a      	beq.n	8004774 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d107      	bne.n	80046fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0204 	bic.w	r2, r2, #4
 80046fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a66      	ldr	r2, [pc, #408]	@ (800489c <HAL_DMA_IRQHandler+0x1f0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d029      	beq.n	800475a <HAL_DMA_IRQHandler+0xae>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a65      	ldr	r2, [pc, #404]	@ (80048a0 <HAL_DMA_IRQHandler+0x1f4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d022      	beq.n	8004756 <HAL_DMA_IRQHandler+0xaa>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a63      	ldr	r2, [pc, #396]	@ (80048a4 <HAL_DMA_IRQHandler+0x1f8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d01a      	beq.n	8004750 <HAL_DMA_IRQHandler+0xa4>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a62      	ldr	r2, [pc, #392]	@ (80048a8 <HAL_DMA_IRQHandler+0x1fc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d012      	beq.n	800474a <HAL_DMA_IRQHandler+0x9e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a60      	ldr	r2, [pc, #384]	@ (80048ac <HAL_DMA_IRQHandler+0x200>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00a      	beq.n	8004744 <HAL_DMA_IRQHandler+0x98>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a5f      	ldr	r2, [pc, #380]	@ (80048b0 <HAL_DMA_IRQHandler+0x204>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d102      	bne.n	800473e <HAL_DMA_IRQHandler+0x92>
 8004738:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800473c:	e00e      	b.n	800475c <HAL_DMA_IRQHandler+0xb0>
 800473e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004742:	e00b      	b.n	800475c <HAL_DMA_IRQHandler+0xb0>
 8004744:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004748:	e008      	b.n	800475c <HAL_DMA_IRQHandler+0xb0>
 800474a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800474e:	e005      	b.n	800475c <HAL_DMA_IRQHandler+0xb0>
 8004750:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004754:	e002      	b.n	800475c <HAL_DMA_IRQHandler+0xb0>
 8004756:	2340      	movs	r3, #64	@ 0x40
 8004758:	e000      	b.n	800475c <HAL_DMA_IRQHandler+0xb0>
 800475a:	2304      	movs	r3, #4
 800475c:	4a55      	ldr	r2, [pc, #340]	@ (80048b4 <HAL_DMA_IRQHandler+0x208>)
 800475e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8094 	beq.w	8004892 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004772:	e08e      	b.n	8004892 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004778:	2202      	movs	r2, #2
 800477a:	409a      	lsls	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4013      	ands	r3, r2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d056      	beq.n	8004832 <HAL_DMA_IRQHandler+0x186>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d051      	beq.n	8004832 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0320 	and.w	r3, r3, #32
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10b      	bne.n	80047b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 020a 	bic.w	r2, r2, #10
 80047aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a38      	ldr	r2, [pc, #224]	@ (800489c <HAL_DMA_IRQHandler+0x1f0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d029      	beq.n	8004812 <HAL_DMA_IRQHandler+0x166>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a37      	ldr	r2, [pc, #220]	@ (80048a0 <HAL_DMA_IRQHandler+0x1f4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d022      	beq.n	800480e <HAL_DMA_IRQHandler+0x162>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a35      	ldr	r2, [pc, #212]	@ (80048a4 <HAL_DMA_IRQHandler+0x1f8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d01a      	beq.n	8004808 <HAL_DMA_IRQHandler+0x15c>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a34      	ldr	r2, [pc, #208]	@ (80048a8 <HAL_DMA_IRQHandler+0x1fc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d012      	beq.n	8004802 <HAL_DMA_IRQHandler+0x156>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a32      	ldr	r2, [pc, #200]	@ (80048ac <HAL_DMA_IRQHandler+0x200>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d00a      	beq.n	80047fc <HAL_DMA_IRQHandler+0x150>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a31      	ldr	r2, [pc, #196]	@ (80048b0 <HAL_DMA_IRQHandler+0x204>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d102      	bne.n	80047f6 <HAL_DMA_IRQHandler+0x14a>
 80047f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80047f4:	e00e      	b.n	8004814 <HAL_DMA_IRQHandler+0x168>
 80047f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047fa:	e00b      	b.n	8004814 <HAL_DMA_IRQHandler+0x168>
 80047fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004800:	e008      	b.n	8004814 <HAL_DMA_IRQHandler+0x168>
 8004802:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004806:	e005      	b.n	8004814 <HAL_DMA_IRQHandler+0x168>
 8004808:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800480c:	e002      	b.n	8004814 <HAL_DMA_IRQHandler+0x168>
 800480e:	2320      	movs	r3, #32
 8004810:	e000      	b.n	8004814 <HAL_DMA_IRQHandler+0x168>
 8004812:	2302      	movs	r3, #2
 8004814:	4a27      	ldr	r2, [pc, #156]	@ (80048b4 <HAL_DMA_IRQHandler+0x208>)
 8004816:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004824:	2b00      	cmp	r3, #0
 8004826:	d034      	beq.n	8004892 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004830:	e02f      	b.n	8004892 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	2208      	movs	r2, #8
 8004838:	409a      	lsls	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4013      	ands	r3, r2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d028      	beq.n	8004894 <HAL_DMA_IRQHandler+0x1e8>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d023      	beq.n	8004894 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 020e 	bic.w	r2, r2, #14
 800485a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004864:	2101      	movs	r1, #1
 8004866:	fa01 f202 	lsl.w	r2, r1, r2
 800486a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004886:	2b00      	cmp	r3, #0
 8004888:	d004      	beq.n	8004894 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	4798      	blx	r3
    }
  }
  return;
 8004892:	bf00      	nop
 8004894:	bf00      	nop
}
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40020008 	.word	0x40020008
 80048a0:	4002001c 	.word	0x4002001c
 80048a4:	40020030 	.word	0x40020030
 80048a8:	40020044 	.word	0x40020044
 80048ac:	40020058 	.word	0x40020058
 80048b0:	4002006c 	.word	0x4002006c
 80048b4:	40020000 	.word	0x40020000

080048b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
 80048c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ce:	2101      	movs	r1, #1
 80048d0:	fa01 f202 	lsl.w	r2, r1, r2
 80048d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b10      	cmp	r3, #16
 80048e4:	d108      	bne.n	80048f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048f6:	e007      	b.n	8004908 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	60da      	str	r2, [r3, #12]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	bc80      	pop	{r7}
 8004910:	4770      	bx	lr
	...

08004914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004914:	b480      	push	{r7}
 8004916:	b08b      	sub	sp, #44	@ 0x2c
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800491e:	2300      	movs	r3, #0
 8004920:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004922:	2300      	movs	r3, #0
 8004924:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004926:	e169      	b.n	8004bfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004928:	2201      	movs	r2, #1
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	4013      	ands	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	429a      	cmp	r2, r3
 8004942:	f040 8158 	bne.w	8004bf6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	4a9a      	ldr	r2, [pc, #616]	@ (8004bb4 <HAL_GPIO_Init+0x2a0>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d05e      	beq.n	8004a0e <HAL_GPIO_Init+0xfa>
 8004950:	4a98      	ldr	r2, [pc, #608]	@ (8004bb4 <HAL_GPIO_Init+0x2a0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d875      	bhi.n	8004a42 <HAL_GPIO_Init+0x12e>
 8004956:	4a98      	ldr	r2, [pc, #608]	@ (8004bb8 <HAL_GPIO_Init+0x2a4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d058      	beq.n	8004a0e <HAL_GPIO_Init+0xfa>
 800495c:	4a96      	ldr	r2, [pc, #600]	@ (8004bb8 <HAL_GPIO_Init+0x2a4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d86f      	bhi.n	8004a42 <HAL_GPIO_Init+0x12e>
 8004962:	4a96      	ldr	r2, [pc, #600]	@ (8004bbc <HAL_GPIO_Init+0x2a8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d052      	beq.n	8004a0e <HAL_GPIO_Init+0xfa>
 8004968:	4a94      	ldr	r2, [pc, #592]	@ (8004bbc <HAL_GPIO_Init+0x2a8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d869      	bhi.n	8004a42 <HAL_GPIO_Init+0x12e>
 800496e:	4a94      	ldr	r2, [pc, #592]	@ (8004bc0 <HAL_GPIO_Init+0x2ac>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d04c      	beq.n	8004a0e <HAL_GPIO_Init+0xfa>
 8004974:	4a92      	ldr	r2, [pc, #584]	@ (8004bc0 <HAL_GPIO_Init+0x2ac>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d863      	bhi.n	8004a42 <HAL_GPIO_Init+0x12e>
 800497a:	4a92      	ldr	r2, [pc, #584]	@ (8004bc4 <HAL_GPIO_Init+0x2b0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d046      	beq.n	8004a0e <HAL_GPIO_Init+0xfa>
 8004980:	4a90      	ldr	r2, [pc, #576]	@ (8004bc4 <HAL_GPIO_Init+0x2b0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d85d      	bhi.n	8004a42 <HAL_GPIO_Init+0x12e>
 8004986:	2b12      	cmp	r3, #18
 8004988:	d82a      	bhi.n	80049e0 <HAL_GPIO_Init+0xcc>
 800498a:	2b12      	cmp	r3, #18
 800498c:	d859      	bhi.n	8004a42 <HAL_GPIO_Init+0x12e>
 800498e:	a201      	add	r2, pc, #4	@ (adr r2, 8004994 <HAL_GPIO_Init+0x80>)
 8004990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004994:	08004a0f 	.word	0x08004a0f
 8004998:	080049e9 	.word	0x080049e9
 800499c:	080049fb 	.word	0x080049fb
 80049a0:	08004a3d 	.word	0x08004a3d
 80049a4:	08004a43 	.word	0x08004a43
 80049a8:	08004a43 	.word	0x08004a43
 80049ac:	08004a43 	.word	0x08004a43
 80049b0:	08004a43 	.word	0x08004a43
 80049b4:	08004a43 	.word	0x08004a43
 80049b8:	08004a43 	.word	0x08004a43
 80049bc:	08004a43 	.word	0x08004a43
 80049c0:	08004a43 	.word	0x08004a43
 80049c4:	08004a43 	.word	0x08004a43
 80049c8:	08004a43 	.word	0x08004a43
 80049cc:	08004a43 	.word	0x08004a43
 80049d0:	08004a43 	.word	0x08004a43
 80049d4:	08004a43 	.word	0x08004a43
 80049d8:	080049f1 	.word	0x080049f1
 80049dc:	08004a05 	.word	0x08004a05
 80049e0:	4a79      	ldr	r2, [pc, #484]	@ (8004bc8 <HAL_GPIO_Init+0x2b4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80049e6:	e02c      	b.n	8004a42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	623b      	str	r3, [r7, #32]
          break;
 80049ee:	e029      	b.n	8004a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	3304      	adds	r3, #4
 80049f6:	623b      	str	r3, [r7, #32]
          break;
 80049f8:	e024      	b.n	8004a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	3308      	adds	r3, #8
 8004a00:	623b      	str	r3, [r7, #32]
          break;
 8004a02:	e01f      	b.n	8004a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	623b      	str	r3, [r7, #32]
          break;
 8004a0c:	e01a      	b.n	8004a44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d102      	bne.n	8004a1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004a16:	2304      	movs	r3, #4
 8004a18:	623b      	str	r3, [r7, #32]
          break;
 8004a1a:	e013      	b.n	8004a44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d105      	bne.n	8004a30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a24:	2308      	movs	r3, #8
 8004a26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	611a      	str	r2, [r3, #16]
          break;
 8004a2e:	e009      	b.n	8004a44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004a30:	2308      	movs	r3, #8
 8004a32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	69fa      	ldr	r2, [r7, #28]
 8004a38:	615a      	str	r2, [r3, #20]
          break;
 8004a3a:	e003      	b.n	8004a44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	623b      	str	r3, [r7, #32]
          break;
 8004a40:	e000      	b.n	8004a44 <HAL_GPIO_Init+0x130>
          break;
 8004a42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	2bff      	cmp	r3, #255	@ 0xff
 8004a48:	d801      	bhi.n	8004a4e <HAL_GPIO_Init+0x13a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	e001      	b.n	8004a52 <HAL_GPIO_Init+0x13e>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3304      	adds	r3, #4
 8004a52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2bff      	cmp	r3, #255	@ 0xff
 8004a58:	d802      	bhi.n	8004a60 <HAL_GPIO_Init+0x14c>
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	e002      	b.n	8004a66 <HAL_GPIO_Init+0x152>
 8004a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a62:	3b08      	subs	r3, #8
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	210f      	movs	r1, #15
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	fa01 f303 	lsl.w	r3, r1, r3
 8004a74:	43db      	mvns	r3, r3
 8004a76:	401a      	ands	r2, r3
 8004a78:	6a39      	ldr	r1, [r7, #32]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a80:	431a      	orrs	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 80b1 	beq.w	8004bf6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004a94:	4b4d      	ldr	r3, [pc, #308]	@ (8004bcc <HAL_GPIO_Init+0x2b8>)
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	4a4c      	ldr	r2, [pc, #304]	@ (8004bcc <HAL_GPIO_Init+0x2b8>)
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	6193      	str	r3, [r2, #24]
 8004aa0:	4b4a      	ldr	r3, [pc, #296]	@ (8004bcc <HAL_GPIO_Init+0x2b8>)
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004aac:	4a48      	ldr	r2, [pc, #288]	@ (8004bd0 <HAL_GPIO_Init+0x2bc>)
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	089b      	lsrs	r3, r3, #2
 8004ab2:	3302      	adds	r3, #2
 8004ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	220f      	movs	r2, #15
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4013      	ands	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a40      	ldr	r2, [pc, #256]	@ (8004bd4 <HAL_GPIO_Init+0x2c0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d013      	beq.n	8004b00 <HAL_GPIO_Init+0x1ec>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a3f      	ldr	r2, [pc, #252]	@ (8004bd8 <HAL_GPIO_Init+0x2c4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00d      	beq.n	8004afc <HAL_GPIO_Init+0x1e8>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a3e      	ldr	r2, [pc, #248]	@ (8004bdc <HAL_GPIO_Init+0x2c8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d007      	beq.n	8004af8 <HAL_GPIO_Init+0x1e4>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a3d      	ldr	r2, [pc, #244]	@ (8004be0 <HAL_GPIO_Init+0x2cc>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d101      	bne.n	8004af4 <HAL_GPIO_Init+0x1e0>
 8004af0:	2303      	movs	r3, #3
 8004af2:	e006      	b.n	8004b02 <HAL_GPIO_Init+0x1ee>
 8004af4:	2304      	movs	r3, #4
 8004af6:	e004      	b.n	8004b02 <HAL_GPIO_Init+0x1ee>
 8004af8:	2302      	movs	r3, #2
 8004afa:	e002      	b.n	8004b02 <HAL_GPIO_Init+0x1ee>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <HAL_GPIO_Init+0x1ee>
 8004b00:	2300      	movs	r3, #0
 8004b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b04:	f002 0203 	and.w	r2, r2, #3
 8004b08:	0092      	lsls	r2, r2, #2
 8004b0a:	4093      	lsls	r3, r2
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004b12:	492f      	ldr	r1, [pc, #188]	@ (8004bd0 <HAL_GPIO_Init+0x2bc>)
 8004b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b16:	089b      	lsrs	r3, r3, #2
 8004b18:	3302      	adds	r3, #2
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d006      	beq.n	8004b3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8004be4 <HAL_GPIO_Init+0x2d0>)
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	492c      	ldr	r1, [pc, #176]	@ (8004be4 <HAL_GPIO_Init+0x2d0>)
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	608b      	str	r3, [r1, #8]
 8004b38:	e006      	b.n	8004b48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004be4 <HAL_GPIO_Init+0x2d0>)
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	43db      	mvns	r3, r3
 8004b42:	4928      	ldr	r1, [pc, #160]	@ (8004be4 <HAL_GPIO_Init+0x2d0>)
 8004b44:	4013      	ands	r3, r2
 8004b46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d006      	beq.n	8004b62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004b54:	4b23      	ldr	r3, [pc, #140]	@ (8004be4 <HAL_GPIO_Init+0x2d0>)
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	4922      	ldr	r1, [pc, #136]	@ (8004be4 <HAL_GPIO_Init+0x2d0>)
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60cb      	str	r3, [r1, #12]
 8004b60:	e006      	b.n	8004b70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004b62:	4b20      	ldr	r3, [pc, #128]	@ (8004be4 <HAL_GPIO_Init+0x2d0>)
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	491e      	ldr	r1, [pc, #120]	@ (8004be4 <HAL_GPIO_Init+0x2d0>)
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d006      	beq.n	8004b8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004b7c:	4b19      	ldr	r3, [pc, #100]	@ (8004be4 <HAL_GPIO_Init+0x2d0>)
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	4918      	ldr	r1, [pc, #96]	@ (8004be4 <HAL_GPIO_Init+0x2d0>)
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	604b      	str	r3, [r1, #4]
 8004b88:	e006      	b.n	8004b98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004b8a:	4b16      	ldr	r3, [pc, #88]	@ (8004be4 <HAL_GPIO_Init+0x2d0>)
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	43db      	mvns	r3, r3
 8004b92:	4914      	ldr	r1, [pc, #80]	@ (8004be4 <HAL_GPIO_Init+0x2d0>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d021      	beq.n	8004be8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8004be4 <HAL_GPIO_Init+0x2d0>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	490e      	ldr	r1, [pc, #56]	@ (8004be4 <HAL_GPIO_Init+0x2d0>)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	600b      	str	r3, [r1, #0]
 8004bb0:	e021      	b.n	8004bf6 <HAL_GPIO_Init+0x2e2>
 8004bb2:	bf00      	nop
 8004bb4:	10320000 	.word	0x10320000
 8004bb8:	10310000 	.word	0x10310000
 8004bbc:	10220000 	.word	0x10220000
 8004bc0:	10210000 	.word	0x10210000
 8004bc4:	10120000 	.word	0x10120000
 8004bc8:	10110000 	.word	0x10110000
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	40010000 	.word	0x40010000
 8004bd4:	40010800 	.word	0x40010800
 8004bd8:	40010c00 	.word	0x40010c00
 8004bdc:	40011000 	.word	0x40011000
 8004be0:	40011400 	.word	0x40011400
 8004be4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004be8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <HAL_GPIO_Init+0x304>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	4909      	ldr	r1, [pc, #36]	@ (8004c18 <HAL_GPIO_Init+0x304>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	fa22 f303 	lsr.w	r3, r2, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f47f ae8e 	bne.w	8004928 <HAL_GPIO_Init+0x14>
  }
}
 8004c0c:	bf00      	nop
 8004c0e:	bf00      	nop
 8004c10:	372c      	adds	r7, #44	@ 0x2c
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr
 8004c18:	40010400 	.word	0x40010400

08004c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	807b      	strh	r3, [r7, #2]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c2c:	787b      	ldrb	r3, [r7, #1]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c32:	887a      	ldrh	r2, [r7, #2]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004c38:	e003      	b.n	8004c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c3a:	887b      	ldrh	r3, [r7, #2]
 8004c3c:	041a      	lsls	r2, r3, #16
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	611a      	str	r2, [r3, #16]
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr

08004c4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c5e:	887a      	ldrh	r2, [r7, #2]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4013      	ands	r3, r2
 8004c64:	041a      	lsls	r2, r3, #16
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	43d9      	mvns	r1, r3
 8004c6a:	887b      	ldrh	r3, [r7, #2]
 8004c6c:	400b      	ands	r3, r1
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	611a      	str	r2, [r3, #16]
}
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr
	...

08004c80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c8a:	4b08      	ldr	r3, [pc, #32]	@ (8004cac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c8c:	695a      	ldr	r2, [r3, #20]
 8004c8e:	88fb      	ldrh	r3, [r7, #6]
 8004c90:	4013      	ands	r3, r2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d006      	beq.n	8004ca4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c96:	4a05      	ldr	r2, [pc, #20]	@ (8004cac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c98:	88fb      	ldrh	r3, [r7, #6]
 8004c9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c9c:	88fb      	ldrh	r3, [r7, #6]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 f806 	bl	8004cb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ca4:	bf00      	nop
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40010400 	.word	0x40010400

08004cb0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e12b      	b.n	8004f2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fd fd48 	bl	8002780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2224      	movs	r2, #36	@ 0x24
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0201 	bic.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d28:	f001 fbfc 	bl	8006524 <HAL_RCC_GetPCLK1Freq>
 8004d2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	4a81      	ldr	r2, [pc, #516]	@ (8004f38 <HAL_I2C_Init+0x274>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d807      	bhi.n	8004d48 <HAL_I2C_Init+0x84>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4a80      	ldr	r2, [pc, #512]	@ (8004f3c <HAL_I2C_Init+0x278>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	bf94      	ite	ls
 8004d40:	2301      	movls	r3, #1
 8004d42:	2300      	movhi	r3, #0
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	e006      	b.n	8004d56 <HAL_I2C_Init+0x92>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4a7d      	ldr	r2, [pc, #500]	@ (8004f40 <HAL_I2C_Init+0x27c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	bf94      	ite	ls
 8004d50:	2301      	movls	r3, #1
 8004d52:	2300      	movhi	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e0e7      	b.n	8004f2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4a78      	ldr	r2, [pc, #480]	@ (8004f44 <HAL_I2C_Init+0x280>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	0c9b      	lsrs	r3, r3, #18
 8004d68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	4a6a      	ldr	r2, [pc, #424]	@ (8004f38 <HAL_I2C_Init+0x274>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d802      	bhi.n	8004d98 <HAL_I2C_Init+0xd4>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	3301      	adds	r3, #1
 8004d96:	e009      	b.n	8004dac <HAL_I2C_Init+0xe8>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d9e:	fb02 f303 	mul.w	r3, r2, r3
 8004da2:	4a69      	ldr	r2, [pc, #420]	@ (8004f48 <HAL_I2C_Init+0x284>)
 8004da4:	fba2 2303 	umull	r2, r3, r2, r3
 8004da8:	099b      	lsrs	r3, r3, #6
 8004daa:	3301      	adds	r3, #1
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6812      	ldr	r2, [r2, #0]
 8004db0:	430b      	orrs	r3, r1
 8004db2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004dbe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	495c      	ldr	r1, [pc, #368]	@ (8004f38 <HAL_I2C_Init+0x274>)
 8004dc8:	428b      	cmp	r3, r1
 8004dca:	d819      	bhi.n	8004e00 <HAL_I2C_Init+0x13c>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	1e59      	subs	r1, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dda:	1c59      	adds	r1, r3, #1
 8004ddc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004de0:	400b      	ands	r3, r1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <HAL_I2C_Init+0x138>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	1e59      	subs	r1, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004df4:	3301      	adds	r3, #1
 8004df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dfa:	e051      	b.n	8004ea0 <HAL_I2C_Init+0x1dc>
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	e04f      	b.n	8004ea0 <HAL_I2C_Init+0x1dc>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d111      	bne.n	8004e2c <HAL_I2C_Init+0x168>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	1e58      	subs	r0, r3, #1
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6859      	ldr	r1, [r3, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	440b      	add	r3, r1
 8004e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	bf0c      	ite	eq
 8004e24:	2301      	moveq	r3, #1
 8004e26:	2300      	movne	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	e012      	b.n	8004e52 <HAL_I2C_Init+0x18e>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	1e58      	subs	r0, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6859      	ldr	r1, [r3, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	0099      	lsls	r1, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e42:	3301      	adds	r3, #1
 8004e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	bf0c      	ite	eq
 8004e4c:	2301      	moveq	r3, #1
 8004e4e:	2300      	movne	r3, #0
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_I2C_Init+0x196>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e022      	b.n	8004ea0 <HAL_I2C_Init+0x1dc>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10e      	bne.n	8004e80 <HAL_I2C_Init+0x1bc>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1e58      	subs	r0, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6859      	ldr	r1, [r3, #4]
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	440b      	add	r3, r1
 8004e70:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e74:	3301      	adds	r3, #1
 8004e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e7e:	e00f      	b.n	8004ea0 <HAL_I2C_Init+0x1dc>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	1e58      	subs	r0, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6859      	ldr	r1, [r3, #4]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	0099      	lsls	r1, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e96:	3301      	adds	r3, #1
 8004e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	6809      	ldr	r1, [r1, #0]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69da      	ldr	r2, [r3, #28]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004ece:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6911      	ldr	r1, [r2, #16]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	68d2      	ldr	r2, [r2, #12]
 8004eda:	4311      	orrs	r1, r2
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695a      	ldr	r2, [r3, #20]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0201 	orr.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	000186a0 	.word	0x000186a0
 8004f3c:	001e847f 	.word	0x001e847f
 8004f40:	003d08ff 	.word	0x003d08ff
 8004f44:	431bde83 	.word	0x431bde83
 8004f48:	10624dd3 	.word	0x10624dd3

08004f4c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b088      	sub	sp, #32
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	4608      	mov	r0, r1
 8004f56:	4611      	mov	r1, r2
 8004f58:	461a      	mov	r2, r3
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	817b      	strh	r3, [r7, #10]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	813b      	strh	r3, [r7, #8]
 8004f62:	4613      	mov	r3, r2
 8004f64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f66:	f7fd fe99 	bl	8002c9c <HAL_GetTick>
 8004f6a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b20      	cmp	r3, #32
 8004f76:	f040 80d9 	bne.w	800512c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	2319      	movs	r3, #25
 8004f80:	2201      	movs	r2, #1
 8004f82:	496d      	ldr	r1, [pc, #436]	@ (8005138 <HAL_I2C_Mem_Write+0x1ec>)
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 fccd 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f90:	2302      	movs	r3, #2
 8004f92:	e0cc      	b.n	800512e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <HAL_I2C_Mem_Write+0x56>
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	e0c5      	b.n	800512e <HAL_I2C_Mem_Write+0x1e2>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d007      	beq.n	8004fc8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2221      	movs	r2, #33	@ 0x21
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2240      	movs	r2, #64	@ 0x40
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a3a      	ldr	r2, [r7, #32]
 8004ff2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4a4d      	ldr	r2, [pc, #308]	@ (800513c <HAL_I2C_Mem_Write+0x1f0>)
 8005008:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800500a:	88f8      	ldrh	r0, [r7, #6]
 800500c:	893a      	ldrh	r2, [r7, #8]
 800500e:	8979      	ldrh	r1, [r7, #10]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	9301      	str	r3, [sp, #4]
 8005014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	4603      	mov	r3, r0
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 fb04 	bl	8005628 <I2C_RequestMemoryWrite>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d052      	beq.n	80050cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e081      	b.n	800512e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 fd92 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00d      	beq.n	8005056 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503e:	2b04      	cmp	r3, #4
 8005040:	d107      	bne.n	8005052 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005050:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e06b      	b.n	800512e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505a:	781a      	ldrb	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800507c:	b29b      	uxth	r3, r3
 800507e:	3b01      	subs	r3, #1
 8005080:	b29a      	uxth	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b04      	cmp	r3, #4
 8005092:	d11b      	bne.n	80050cc <HAL_I2C_Mem_Write+0x180>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005098:	2b00      	cmp	r3, #0
 800509a:	d017      	beq.n	80050cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a0:	781a      	ldrb	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1aa      	bne.n	800502a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 fd85 	bl	8005be8 <I2C_WaitOnBTFFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00d      	beq.n	8005100 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d107      	bne.n	80050fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e016      	b.n	800512e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800510e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	e000      	b.n	800512e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800512c:	2302      	movs	r3, #2
  }
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	00100002 	.word	0x00100002
 800513c:	ffff0000 	.word	0xffff0000

08005140 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08c      	sub	sp, #48	@ 0x30
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	4608      	mov	r0, r1
 800514a:	4611      	mov	r1, r2
 800514c:	461a      	mov	r2, r3
 800514e:	4603      	mov	r3, r0
 8005150:	817b      	strh	r3, [r7, #10]
 8005152:	460b      	mov	r3, r1
 8005154:	813b      	strh	r3, [r7, #8]
 8005156:	4613      	mov	r3, r2
 8005158:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800515e:	f7fd fd9d 	bl	8002c9c <HAL_GetTick>
 8005162:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b20      	cmp	r3, #32
 800516e:	f040 8250 	bne.w	8005612 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	2319      	movs	r3, #25
 8005178:	2201      	movs	r2, #1
 800517a:	4982      	ldr	r1, [pc, #520]	@ (8005384 <HAL_I2C_Mem_Read+0x244>)
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 fbd1 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005188:	2302      	movs	r3, #2
 800518a:	e243      	b.n	8005614 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_I2C_Mem_Read+0x5a>
 8005196:	2302      	movs	r3, #2
 8005198:	e23c      	b.n	8005614 <HAL_I2C_Mem_Read+0x4d4>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d007      	beq.n	80051c0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2222      	movs	r2, #34	@ 0x22
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2240      	movs	r2, #64	@ 0x40
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80051f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4a62      	ldr	r2, [pc, #392]	@ (8005388 <HAL_I2C_Mem_Read+0x248>)
 8005200:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005202:	88f8      	ldrh	r0, [r7, #6]
 8005204:	893a      	ldrh	r2, [r7, #8]
 8005206:	8979      	ldrh	r1, [r7, #10]
 8005208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	4603      	mov	r3, r0
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 fa9e 	bl	8005754 <I2C_RequestMemoryRead>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e1f8      	b.n	8005614 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005226:	2b00      	cmp	r3, #0
 8005228:	d113      	bne.n	8005252 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800522a:	2300      	movs	r3, #0
 800522c:	61fb      	str	r3, [r7, #28]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	61fb      	str	r3, [r7, #28]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	61fb      	str	r3, [r7, #28]
 800523e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	e1cc      	b.n	80055ec <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005256:	2b01      	cmp	r3, #1
 8005258:	d11e      	bne.n	8005298 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005268:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800526a:	b672      	cpsid	i
}
 800526c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800526e:	2300      	movs	r3, #0
 8005270:	61bb      	str	r3, [r7, #24]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	61bb      	str	r3, [r7, #24]
 8005282:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005292:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005294:	b662      	cpsie	i
}
 8005296:	e035      	b.n	8005304 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800529c:	2b02      	cmp	r3, #2
 800529e:	d11e      	bne.n	80052de <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80052b0:	b672      	cpsid	i
}
 80052b2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b4:	2300      	movs	r3, #0
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80052da:	b662      	cpsie	i
}
 80052dc:	e012      	b.n	8005304 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052ec:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ee:	2300      	movs	r3, #0
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	613b      	str	r3, [r7, #16]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	613b      	str	r3, [r7, #16]
 8005302:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005304:	e172      	b.n	80055ec <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800530a:	2b03      	cmp	r3, #3
 800530c:	f200 811f 	bhi.w	800554e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005314:	2b01      	cmp	r3, #1
 8005316:	d123      	bne.n	8005360 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800531a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 fcab 	bl	8005c78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e173      	b.n	8005614 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691a      	ldr	r2, [r3, #16]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005354:	b29b      	uxth	r3, r3
 8005356:	3b01      	subs	r3, #1
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800535e:	e145      	b.n	80055ec <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005364:	2b02      	cmp	r3, #2
 8005366:	d152      	bne.n	800540e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536e:	2200      	movs	r2, #0
 8005370:	4906      	ldr	r1, [pc, #24]	@ (800538c <HAL_I2C_Mem_Read+0x24c>)
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 fad6 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d008      	beq.n	8005390 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e148      	b.n	8005614 <HAL_I2C_Mem_Read+0x4d4>
 8005382:	bf00      	nop
 8005384:	00100002 	.word	0x00100002
 8005388:	ffff0000 	.word	0xffff0000
 800538c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005390:	b672      	cpsid	i
}
 8005392:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80053d6:	b662      	cpsie	i
}
 80053d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800540c:	e0ee      	b.n	80055ec <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005414:	2200      	movs	r2, #0
 8005416:	4981      	ldr	r1, [pc, #516]	@ (800561c <HAL_I2C_Mem_Read+0x4dc>)
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 fa83 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e0f5      	b.n	8005614 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005436:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005438:	b672      	cpsid	i
}
 800543a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800546e:	4b6c      	ldr	r3, [pc, #432]	@ (8005620 <HAL_I2C_Mem_Read+0x4e0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	08db      	lsrs	r3, r3, #3
 8005474:	4a6b      	ldr	r2, [pc, #428]	@ (8005624 <HAL_I2C_Mem_Read+0x4e4>)
 8005476:	fba2 2303 	umull	r2, r3, r2, r3
 800547a:	0a1a      	lsrs	r2, r3, #8
 800547c:	4613      	mov	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	00da      	lsls	r2, r3, #3
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	3b01      	subs	r3, #1
 800548c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d118      	bne.n	80054c6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ae:	f043 0220 	orr.w	r2, r3, #32
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80054b6:	b662      	cpsie	i
}
 80054b8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e0a6      	b.n	8005614 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d1d9      	bne.n	8005488 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800550c:	b29b      	uxth	r3, r3
 800550e:	3b01      	subs	r3, #1
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005516:	b662      	cpsie	i
}
 8005518:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	691a      	ldr	r2, [r3, #16]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005524:	b2d2      	uxtb	r2, r2
 8005526:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800554c:	e04e      	b.n	80055ec <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800554e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005550:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fb90 	bl	8005c78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e058      	b.n	8005614 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800557e:	3b01      	subs	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d124      	bne.n	80055ec <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d107      	bne.n	80055ba <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055b8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c4:	b2d2      	uxtb	r2, r2
 80055c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	f47f ae88 	bne.w	8005306 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	e000      	b.n	8005614 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8005612:	2302      	movs	r3, #2
  }
}
 8005614:	4618      	mov	r0, r3
 8005616:	3728      	adds	r7, #40	@ 0x28
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	00010004 	.word	0x00010004
 8005620:	20000004 	.word	0x20000004
 8005624:	14f8b589 	.word	0x14f8b589

08005628 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af02      	add	r7, sp, #8
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	4608      	mov	r0, r1
 8005632:	4611      	mov	r1, r2
 8005634:	461a      	mov	r2, r3
 8005636:	4603      	mov	r3, r0
 8005638:	817b      	strh	r3, [r7, #10]
 800563a:	460b      	mov	r3, r1
 800563c:	813b      	strh	r3, [r7, #8]
 800563e:	4613      	mov	r3, r2
 8005640:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005650:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	2200      	movs	r2, #0
 800565a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 f960 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00d      	beq.n	8005686 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005674:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005678:	d103      	bne.n	8005682 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005680:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e05f      	b.n	8005746 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005686:	897b      	ldrh	r3, [r7, #10]
 8005688:	b2db      	uxtb	r3, r3
 800568a:	461a      	mov	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005694:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005698:	6a3a      	ldr	r2, [r7, #32]
 800569a:	492d      	ldr	r1, [pc, #180]	@ (8005750 <I2C_RequestMemoryWrite+0x128>)
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f9bb 	bl	8005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e04c      	b.n	8005746 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c4:	6a39      	ldr	r1, [r7, #32]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 fa46 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00d      	beq.n	80056ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d107      	bne.n	80056ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e02b      	b.n	8005746 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056ee:	88fb      	ldrh	r3, [r7, #6]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d105      	bne.n	8005700 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056f4:	893b      	ldrh	r3, [r7, #8]
 80056f6:	b2da      	uxtb	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	611a      	str	r2, [r3, #16]
 80056fe:	e021      	b.n	8005744 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005700:	893b      	ldrh	r3, [r7, #8]
 8005702:	0a1b      	lsrs	r3, r3, #8
 8005704:	b29b      	uxth	r3, r3
 8005706:	b2da      	uxtb	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800570e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005710:	6a39      	ldr	r1, [r7, #32]
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 fa20 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00d      	beq.n	800573a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005722:	2b04      	cmp	r3, #4
 8005724:	d107      	bne.n	8005736 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005734:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e005      	b.n	8005746 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800573a:	893b      	ldrh	r3, [r7, #8]
 800573c:	b2da      	uxtb	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	00010002 	.word	0x00010002

08005754 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af02      	add	r7, sp, #8
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	4608      	mov	r0, r1
 800575e:	4611      	mov	r1, r2
 8005760:	461a      	mov	r2, r3
 8005762:	4603      	mov	r3, r0
 8005764:	817b      	strh	r3, [r7, #10]
 8005766:	460b      	mov	r3, r1
 8005768:	813b      	strh	r3, [r7, #8]
 800576a:	4613      	mov	r3, r2
 800576c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800577c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800578c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	2200      	movs	r2, #0
 8005796:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 f8c2 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00d      	beq.n	80057c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057b4:	d103      	bne.n	80057be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e0aa      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057c2:	897b      	ldrh	r3, [r7, #10]
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80057d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	6a3a      	ldr	r2, [r7, #32]
 80057d6:	4952      	ldr	r1, [pc, #328]	@ (8005920 <I2C_RequestMemoryRead+0x1cc>)
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 f91d 	bl	8005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e097      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005800:	6a39      	ldr	r1, [r7, #32]
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 f9a8 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00d      	beq.n	800582a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005812:	2b04      	cmp	r3, #4
 8005814:	d107      	bne.n	8005826 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005824:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e076      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800582a:	88fb      	ldrh	r3, [r7, #6]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d105      	bne.n	800583c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005830:	893b      	ldrh	r3, [r7, #8]
 8005832:	b2da      	uxtb	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	611a      	str	r2, [r3, #16]
 800583a:	e021      	b.n	8005880 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800583c:	893b      	ldrh	r3, [r7, #8]
 800583e:	0a1b      	lsrs	r3, r3, #8
 8005840:	b29b      	uxth	r3, r3
 8005842:	b2da      	uxtb	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800584a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800584c:	6a39      	ldr	r1, [r7, #32]
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 f982 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00d      	beq.n	8005876 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585e:	2b04      	cmp	r3, #4
 8005860:	d107      	bne.n	8005872 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005870:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e050      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005876:	893b      	ldrh	r3, [r7, #8]
 8005878:	b2da      	uxtb	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005882:	6a39      	ldr	r1, [r7, #32]
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 f967 	bl	8005b58 <I2C_WaitOnTXEFlagUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00d      	beq.n	80058ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005894:	2b04      	cmp	r3, #4
 8005896:	d107      	bne.n	80058a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e035      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 f82b 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00d      	beq.n	80058f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058e2:	d103      	bne.n	80058ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e013      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058f0:	897b      	ldrh	r3, [r7, #10]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005902:	6a3a      	ldr	r2, [r7, #32]
 8005904:	4906      	ldr	r1, [pc, #24]	@ (8005920 <I2C_RequestMemoryRead+0x1cc>)
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 f886 	bl	8005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	00010002 	.word	0x00010002

08005924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	4613      	mov	r3, r2
 8005932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005934:	e048      	b.n	80059c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593c:	d044      	beq.n	80059c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800593e:	f7fd f9ad 	bl	8002c9c <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d302      	bcc.n	8005954 <I2C_WaitOnFlagUntilTimeout+0x30>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d139      	bne.n	80059c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	0c1b      	lsrs	r3, r3, #16
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b01      	cmp	r3, #1
 800595c:	d10d      	bne.n	800597a <I2C_WaitOnFlagUntilTimeout+0x56>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	43da      	mvns	r2, r3
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4013      	ands	r3, r2
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	bf0c      	ite	eq
 8005970:	2301      	moveq	r3, #1
 8005972:	2300      	movne	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	461a      	mov	r2, r3
 8005978:	e00c      	b.n	8005994 <I2C_WaitOnFlagUntilTimeout+0x70>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	43da      	mvns	r2, r3
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4013      	ands	r3, r2
 8005986:	b29b      	uxth	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	bf0c      	ite	eq
 800598c:	2301      	moveq	r3, #1
 800598e:	2300      	movne	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	429a      	cmp	r2, r3
 8005998:	d116      	bne.n	80059c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b4:	f043 0220 	orr.w	r2, r3, #32
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e023      	b.n	8005a10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	0c1b      	lsrs	r3, r3, #16
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d10d      	bne.n	80059ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	43da      	mvns	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	4013      	ands	r3, r2
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	bf0c      	ite	eq
 80059e4:	2301      	moveq	r3, #1
 80059e6:	2300      	movne	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	e00c      	b.n	8005a08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	43da      	mvns	r2, r3
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	4013      	ands	r3, r2
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	bf0c      	ite	eq
 8005a00:	2301      	moveq	r3, #1
 8005a02:	2300      	movne	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	461a      	mov	r2, r3
 8005a08:	79fb      	ldrb	r3, [r7, #7]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d093      	beq.n	8005936 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a26:	e071      	b.n	8005b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a36:	d123      	bne.n	8005a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6c:	f043 0204 	orr.w	r2, r3, #4
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e067      	b.n	8005b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a86:	d041      	beq.n	8005b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a88:	f7fd f908 	bl	8002c9c <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d302      	bcc.n	8005a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d136      	bne.n	8005b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	0c1b      	lsrs	r3, r3, #16
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d10c      	bne.n	8005ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	43da      	mvns	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	bf14      	ite	ne
 8005aba:	2301      	movne	r3, #1
 8005abc:	2300      	moveq	r3, #0
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	e00b      	b.n	8005ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	43da      	mvns	r2, r3
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	4013      	ands	r3, r2
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	bf14      	ite	ne
 8005ad4:	2301      	movne	r3, #1
 8005ad6:	2300      	moveq	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d016      	beq.n	8005b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af8:	f043 0220 	orr.w	r2, r3, #32
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e021      	b.n	8005b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	0c1b      	lsrs	r3, r3, #16
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d10c      	bne.n	8005b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	43da      	mvns	r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	4013      	ands	r3, r2
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	bf14      	ite	ne
 8005b28:	2301      	movne	r3, #1
 8005b2a:	2300      	moveq	r3, #0
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	e00b      	b.n	8005b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	43da      	mvns	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bf14      	ite	ne
 8005b42:	2301      	movne	r3, #1
 8005b44:	2300      	moveq	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f47f af6d 	bne.w	8005a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b64:	e034      	b.n	8005bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 f8e3 	bl	8005d32 <I2C_IsAcknowledgeFailed>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e034      	b.n	8005be0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7c:	d028      	beq.n	8005bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b7e:	f7fd f88d 	bl	8002c9c <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d302      	bcc.n	8005b94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d11d      	bne.n	8005bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9e:	2b80      	cmp	r3, #128	@ 0x80
 8005ba0:	d016      	beq.n	8005bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbc:	f043 0220 	orr.w	r2, r3, #32
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e007      	b.n	8005be0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bda:	2b80      	cmp	r3, #128	@ 0x80
 8005bdc:	d1c3      	bne.n	8005b66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005bf4:	e034      	b.n	8005c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 f89b 	bl	8005d32 <I2C_IsAcknowledgeFailed>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e034      	b.n	8005c70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d028      	beq.n	8005c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c0e:	f7fd f845 	bl	8002c9c <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d302      	bcc.n	8005c24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d11d      	bne.n	8005c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	f003 0304 	and.w	r3, r3, #4
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d016      	beq.n	8005c60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4c:	f043 0220 	orr.w	r2, r3, #32
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e007      	b.n	8005c70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d1c3      	bne.n	8005bf6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c84:	e049      	b.n	8005d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	f003 0310 	and.w	r3, r3, #16
 8005c90:	2b10      	cmp	r3, #16
 8005c92:	d119      	bne.n	8005cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0210 	mvn.w	r2, #16
 8005c9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e030      	b.n	8005d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cc8:	f7fc ffe8 	bl	8002c9c <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d302      	bcc.n	8005cde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d11d      	bne.n	8005d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce8:	2b40      	cmp	r3, #64	@ 0x40
 8005cea:	d016      	beq.n	8005d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d06:	f043 0220 	orr.w	r2, r3, #32
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e007      	b.n	8005d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d24:	2b40      	cmp	r3, #64	@ 0x40
 8005d26:	d1ae      	bne.n	8005c86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b083      	sub	sp, #12
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d48:	d11b      	bne.n	8005d82 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d52:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6e:	f043 0204 	orr.w	r2, r3, #4
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bc80      	pop	{r7}
 8005d8c:	4770      	bx	lr
	...

08005d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e272      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 8087 	beq.w	8005ebe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005db0:	4b92      	ldr	r3, [pc, #584]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f003 030c 	and.w	r3, r3, #12
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d00c      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005dbc:	4b8f      	ldr	r3, [pc, #572]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f003 030c 	and.w	r3, r3, #12
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d112      	bne.n	8005dee <HAL_RCC_OscConfig+0x5e>
 8005dc8:	4b8c      	ldr	r3, [pc, #560]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd4:	d10b      	bne.n	8005dee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd6:	4b89      	ldr	r3, [pc, #548]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d06c      	beq.n	8005ebc <HAL_RCC_OscConfig+0x12c>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d168      	bne.n	8005ebc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e24c      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df6:	d106      	bne.n	8005e06 <HAL_RCC_OscConfig+0x76>
 8005df8:	4b80      	ldr	r3, [pc, #512]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a7f      	ldr	r2, [pc, #508]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e02:	6013      	str	r3, [r2, #0]
 8005e04:	e02e      	b.n	8005e64 <HAL_RCC_OscConfig+0xd4>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10c      	bne.n	8005e28 <HAL_RCC_OscConfig+0x98>
 8005e0e:	4b7b      	ldr	r3, [pc, #492]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a7a      	ldr	r2, [pc, #488]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	4b78      	ldr	r3, [pc, #480]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a77      	ldr	r2, [pc, #476]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e01d      	b.n	8005e64 <HAL_RCC_OscConfig+0xd4>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e30:	d10c      	bne.n	8005e4c <HAL_RCC_OscConfig+0xbc>
 8005e32:	4b72      	ldr	r3, [pc, #456]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a71      	ldr	r2, [pc, #452]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	4b6f      	ldr	r3, [pc, #444]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a6e      	ldr	r2, [pc, #440]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e00b      	b.n	8005e64 <HAL_RCC_OscConfig+0xd4>
 8005e4c:	4b6b      	ldr	r3, [pc, #428]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a6a      	ldr	r2, [pc, #424]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	4b68      	ldr	r3, [pc, #416]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a67      	ldr	r2, [pc, #412]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d013      	beq.n	8005e94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6c:	f7fc ff16 	bl	8002c9c <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e74:	f7fc ff12 	bl	8002c9c <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b64      	cmp	r3, #100	@ 0x64
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e200      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e86:	4b5d      	ldr	r3, [pc, #372]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0f0      	beq.n	8005e74 <HAL_RCC_OscConfig+0xe4>
 8005e92:	e014      	b.n	8005ebe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e94:	f7fc ff02 	bl	8002c9c <HAL_GetTick>
 8005e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e9c:	f7fc fefe 	bl	8002c9c <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b64      	cmp	r3, #100	@ 0x64
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e1ec      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eae:	4b53      	ldr	r3, [pc, #332]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1f0      	bne.n	8005e9c <HAL_RCC_OscConfig+0x10c>
 8005eba:	e000      	b.n	8005ebe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d063      	beq.n	8005f92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005eca:	4b4c      	ldr	r3, [pc, #304]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f003 030c 	and.w	r3, r3, #12
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00b      	beq.n	8005eee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005ed6:	4b49      	ldr	r3, [pc, #292]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f003 030c 	and.w	r3, r3, #12
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d11c      	bne.n	8005f1c <HAL_RCC_OscConfig+0x18c>
 8005ee2:	4b46      	ldr	r3, [pc, #280]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d116      	bne.n	8005f1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eee:	4b43      	ldr	r3, [pc, #268]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <HAL_RCC_OscConfig+0x176>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d001      	beq.n	8005f06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e1c0      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f06:	4b3d      	ldr	r3, [pc, #244]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	4939      	ldr	r1, [pc, #228]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f1a:	e03a      	b.n	8005f92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d020      	beq.n	8005f66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f24:	4b36      	ldr	r3, [pc, #216]	@ (8006000 <HAL_RCC_OscConfig+0x270>)
 8005f26:	2201      	movs	r2, #1
 8005f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f2a:	f7fc feb7 	bl	8002c9c <HAL_GetTick>
 8005f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f30:	e008      	b.n	8005f44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f32:	f7fc feb3 	bl	8002c9c <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e1a1      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f44:	4b2d      	ldr	r3, [pc, #180]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0f0      	beq.n	8005f32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f50:	4b2a      	ldr	r3, [pc, #168]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	4927      	ldr	r1, [pc, #156]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	600b      	str	r3, [r1, #0]
 8005f64:	e015      	b.n	8005f92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f66:	4b26      	ldr	r3, [pc, #152]	@ (8006000 <HAL_RCC_OscConfig+0x270>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f6c:	f7fc fe96 	bl	8002c9c <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f74:	f7fc fe92 	bl	8002c9c <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e180      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f86:	4b1d      	ldr	r3, [pc, #116]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1f0      	bne.n	8005f74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0308 	and.w	r3, r3, #8
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d03a      	beq.n	8006014 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d019      	beq.n	8005fda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fa6:	4b17      	ldr	r3, [pc, #92]	@ (8006004 <HAL_RCC_OscConfig+0x274>)
 8005fa8:	2201      	movs	r2, #1
 8005faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fac:	f7fc fe76 	bl	8002c9c <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fb4:	f7fc fe72 	bl	8002c9c <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e160      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005ffc <HAL_RCC_OscConfig+0x26c>)
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0f0      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005fd2:	2001      	movs	r0, #1
 8005fd4:	f000 faba 	bl	800654c <RCC_Delay>
 8005fd8:	e01c      	b.n	8006014 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fda:	4b0a      	ldr	r3, [pc, #40]	@ (8006004 <HAL_RCC_OscConfig+0x274>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe0:	f7fc fe5c 	bl	8002c9c <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fe6:	e00f      	b.n	8006008 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fe8:	f7fc fe58 	bl	8002c9c <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d908      	bls.n	8006008 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e146      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
 8005ffa:	bf00      	nop
 8005ffc:	40021000 	.word	0x40021000
 8006000:	42420000 	.word	0x42420000
 8006004:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006008:	4b92      	ldr	r3, [pc, #584]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 800600a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e9      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80a6 	beq.w	800616e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006022:	2300      	movs	r3, #0
 8006024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006026:	4b8b      	ldr	r3, [pc, #556]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10d      	bne.n	800604e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006032:	4b88      	ldr	r3, [pc, #544]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	4a87      	ldr	r2, [pc, #540]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800603c:	61d3      	str	r3, [r2, #28]
 800603e:	4b85      	ldr	r3, [pc, #532]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006046:	60bb      	str	r3, [r7, #8]
 8006048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800604a:	2301      	movs	r3, #1
 800604c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800604e:	4b82      	ldr	r3, [pc, #520]	@ (8006258 <HAL_RCC_OscConfig+0x4c8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006056:	2b00      	cmp	r3, #0
 8006058:	d118      	bne.n	800608c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800605a:	4b7f      	ldr	r3, [pc, #508]	@ (8006258 <HAL_RCC_OscConfig+0x4c8>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a7e      	ldr	r2, [pc, #504]	@ (8006258 <HAL_RCC_OscConfig+0x4c8>)
 8006060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006066:	f7fc fe19 	bl	8002c9c <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800606c:	e008      	b.n	8006080 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606e:	f7fc fe15 	bl	8002c9c <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b64      	cmp	r3, #100	@ 0x64
 800607a:	d901      	bls.n	8006080 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e103      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006080:	4b75      	ldr	r3, [pc, #468]	@ (8006258 <HAL_RCC_OscConfig+0x4c8>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006088:	2b00      	cmp	r3, #0
 800608a:	d0f0      	beq.n	800606e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d106      	bne.n	80060a2 <HAL_RCC_OscConfig+0x312>
 8006094:	4b6f      	ldr	r3, [pc, #444]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	4a6e      	ldr	r2, [pc, #440]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	6213      	str	r3, [r2, #32]
 80060a0:	e02d      	b.n	80060fe <HAL_RCC_OscConfig+0x36e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10c      	bne.n	80060c4 <HAL_RCC_OscConfig+0x334>
 80060aa:	4b6a      	ldr	r3, [pc, #424]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	4a69      	ldr	r2, [pc, #420]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	6213      	str	r3, [r2, #32]
 80060b6:	4b67      	ldr	r3, [pc, #412]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	4a66      	ldr	r2, [pc, #408]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060bc:	f023 0304 	bic.w	r3, r3, #4
 80060c0:	6213      	str	r3, [r2, #32]
 80060c2:	e01c      	b.n	80060fe <HAL_RCC_OscConfig+0x36e>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	2b05      	cmp	r3, #5
 80060ca:	d10c      	bne.n	80060e6 <HAL_RCC_OscConfig+0x356>
 80060cc:	4b61      	ldr	r3, [pc, #388]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	4a60      	ldr	r2, [pc, #384]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060d2:	f043 0304 	orr.w	r3, r3, #4
 80060d6:	6213      	str	r3, [r2, #32]
 80060d8:	4b5e      	ldr	r3, [pc, #376]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	4a5d      	ldr	r2, [pc, #372]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060de:	f043 0301 	orr.w	r3, r3, #1
 80060e2:	6213      	str	r3, [r2, #32]
 80060e4:	e00b      	b.n	80060fe <HAL_RCC_OscConfig+0x36e>
 80060e6:	4b5b      	ldr	r3, [pc, #364]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	4a5a      	ldr	r2, [pc, #360]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	6213      	str	r3, [r2, #32]
 80060f2:	4b58      	ldr	r3, [pc, #352]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	4a57      	ldr	r2, [pc, #348]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80060f8:	f023 0304 	bic.w	r3, r3, #4
 80060fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d015      	beq.n	8006132 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006106:	f7fc fdc9 	bl	8002c9c <HAL_GetTick>
 800610a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800610c:	e00a      	b.n	8006124 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800610e:	f7fc fdc5 	bl	8002c9c <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800611c:	4293      	cmp	r3, r2
 800611e:	d901      	bls.n	8006124 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e0b1      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006124:	4b4b      	ldr	r3, [pc, #300]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0ee      	beq.n	800610e <HAL_RCC_OscConfig+0x37e>
 8006130:	e014      	b.n	800615c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006132:	f7fc fdb3 	bl	8002c9c <HAL_GetTick>
 8006136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006138:	e00a      	b.n	8006150 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800613a:	f7fc fdaf 	bl	8002c9c <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006148:	4293      	cmp	r3, r2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e09b      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006150:	4b40      	ldr	r3, [pc, #256]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1ee      	bne.n	800613a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800615c:	7dfb      	ldrb	r3, [r7, #23]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d105      	bne.n	800616e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006162:	4b3c      	ldr	r3, [pc, #240]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	4a3b      	ldr	r2, [pc, #236]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 8006168:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800616c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 8087 	beq.w	8006286 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006178:	4b36      	ldr	r3, [pc, #216]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f003 030c 	and.w	r3, r3, #12
 8006180:	2b08      	cmp	r3, #8
 8006182:	d061      	beq.n	8006248 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d146      	bne.n	800621a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800618c:	4b33      	ldr	r3, [pc, #204]	@ (800625c <HAL_RCC_OscConfig+0x4cc>)
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006192:	f7fc fd83 	bl	8002c9c <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800619a:	f7fc fd7f 	bl	8002c9c <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e06d      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061ac:	4b29      	ldr	r3, [pc, #164]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1f0      	bne.n	800619a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061c0:	d108      	bne.n	80061d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80061c2:	4b24      	ldr	r3, [pc, #144]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	4921      	ldr	r1, [pc, #132]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061d4:	4b1f      	ldr	r3, [pc, #124]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a19      	ldr	r1, [r3, #32]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	430b      	orrs	r3, r1
 80061e6:	491b      	ldr	r1, [pc, #108]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061ec:	4b1b      	ldr	r3, [pc, #108]	@ (800625c <HAL_RCC_OscConfig+0x4cc>)
 80061ee:	2201      	movs	r2, #1
 80061f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f2:	f7fc fd53 	bl	8002c9c <HAL_GetTick>
 80061f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061f8:	e008      	b.n	800620c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061fa:	f7fc fd4f 	bl	8002c9c <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b02      	cmp	r3, #2
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e03d      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800620c:	4b11      	ldr	r3, [pc, #68]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0f0      	beq.n	80061fa <HAL_RCC_OscConfig+0x46a>
 8006218:	e035      	b.n	8006286 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800621a:	4b10      	ldr	r3, [pc, #64]	@ (800625c <HAL_RCC_OscConfig+0x4cc>)
 800621c:	2200      	movs	r2, #0
 800621e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006220:	f7fc fd3c 	bl	8002c9c <HAL_GetTick>
 8006224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006226:	e008      	b.n	800623a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006228:	f7fc fd38 	bl	8002c9c <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e026      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800623a:	4b06      	ldr	r3, [pc, #24]	@ (8006254 <HAL_RCC_OscConfig+0x4c4>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1f0      	bne.n	8006228 <HAL_RCC_OscConfig+0x498>
 8006246:	e01e      	b.n	8006286 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d107      	bne.n	8006260 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e019      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
 8006254:	40021000 	.word	0x40021000
 8006258:	40007000 	.word	0x40007000
 800625c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006260:	4b0b      	ldr	r3, [pc, #44]	@ (8006290 <HAL_RCC_OscConfig+0x500>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a1b      	ldr	r3, [r3, #32]
 8006270:	429a      	cmp	r2, r3
 8006272:	d106      	bne.n	8006282 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800627e:	429a      	cmp	r2, r3
 8006280:	d001      	beq.n	8006286 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40021000 	.word	0x40021000

08006294 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e0d0      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062a8:	4b6a      	ldr	r3, [pc, #424]	@ (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d910      	bls.n	80062d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062b6:	4b67      	ldr	r3, [pc, #412]	@ (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f023 0207 	bic.w	r2, r3, #7
 80062be:	4965      	ldr	r1, [pc, #404]	@ (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062c6:	4b63      	ldr	r3, [pc, #396]	@ (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d001      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e0b8      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d020      	beq.n	8006326 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062f0:	4b59      	ldr	r3, [pc, #356]	@ (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	4a58      	ldr	r2, [pc, #352]	@ (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 80062f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80062fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0308 	and.w	r3, r3, #8
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006308:	4b53      	ldr	r3, [pc, #332]	@ (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	4a52      	ldr	r2, [pc, #328]	@ (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 800630e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006312:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006314:	4b50      	ldr	r3, [pc, #320]	@ (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	494d      	ldr	r1, [pc, #308]	@ (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006322:	4313      	orrs	r3, r2
 8006324:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d040      	beq.n	80063b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d107      	bne.n	800634a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800633a:	4b47      	ldr	r3, [pc, #284]	@ (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d115      	bne.n	8006372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e07f      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d107      	bne.n	8006362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006352:	4b41      	ldr	r3, [pc, #260]	@ (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d109      	bne.n	8006372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e073      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006362:	4b3d      	ldr	r3, [pc, #244]	@ (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e06b      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006372:	4b39      	ldr	r3, [pc, #228]	@ (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f023 0203 	bic.w	r2, r3, #3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	4936      	ldr	r1, [pc, #216]	@ (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006380:	4313      	orrs	r3, r2
 8006382:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006384:	f7fc fc8a 	bl	8002c9c <HAL_GetTick>
 8006388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800638a:	e00a      	b.n	80063a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800638c:	f7fc fc86 	bl	8002c9c <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800639a:	4293      	cmp	r3, r2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e053      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063a2:	4b2d      	ldr	r3, [pc, #180]	@ (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f003 020c 	and.w	r2, r3, #12
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d1eb      	bne.n	800638c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063b4:	4b27      	ldr	r3, [pc, #156]	@ (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0307 	and.w	r3, r3, #7
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d210      	bcs.n	80063e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063c2:	4b24      	ldr	r3, [pc, #144]	@ (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f023 0207 	bic.w	r2, r3, #7
 80063ca:	4922      	ldr	r1, [pc, #136]	@ (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063d2:	4b20      	ldr	r3, [pc, #128]	@ (8006454 <HAL_RCC_ClockConfig+0x1c0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d001      	beq.n	80063e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e032      	b.n	800644a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d008      	beq.n	8006402 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063f0:	4b19      	ldr	r3, [pc, #100]	@ (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	4916      	ldr	r1, [pc, #88]	@ (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0308 	and.w	r3, r3, #8
 800640a:	2b00      	cmp	r3, #0
 800640c:	d009      	beq.n	8006422 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800640e:	4b12      	ldr	r3, [pc, #72]	@ (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	490e      	ldr	r1, [pc, #56]	@ (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 800641e:	4313      	orrs	r3, r2
 8006420:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006422:	f000 f821 	bl	8006468 <HAL_RCC_GetSysClockFreq>
 8006426:	4602      	mov	r2, r0
 8006428:	4b0b      	ldr	r3, [pc, #44]	@ (8006458 <HAL_RCC_ClockConfig+0x1c4>)
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	091b      	lsrs	r3, r3, #4
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	490a      	ldr	r1, [pc, #40]	@ (800645c <HAL_RCC_ClockConfig+0x1c8>)
 8006434:	5ccb      	ldrb	r3, [r1, r3]
 8006436:	fa22 f303 	lsr.w	r3, r2, r3
 800643a:	4a09      	ldr	r2, [pc, #36]	@ (8006460 <HAL_RCC_ClockConfig+0x1cc>)
 800643c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800643e:	4b09      	ldr	r3, [pc, #36]	@ (8006464 <HAL_RCC_ClockConfig+0x1d0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	f7fc fbe8 	bl	8002c18 <HAL_InitTick>

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	40022000 	.word	0x40022000
 8006458:	40021000 	.word	0x40021000
 800645c:	0800e3fc 	.word	0x0800e3fc
 8006460:	20000004 	.word	0x20000004
 8006464:	20000008 	.word	0x20000008

08006468 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	2300      	movs	r3, #0
 8006474:	60bb      	str	r3, [r7, #8]
 8006476:	2300      	movs	r3, #0
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	2300      	movs	r3, #0
 800647c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006482:	4b1e      	ldr	r3, [pc, #120]	@ (80064fc <HAL_RCC_GetSysClockFreq+0x94>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f003 030c 	and.w	r3, r3, #12
 800648e:	2b04      	cmp	r3, #4
 8006490:	d002      	beq.n	8006498 <HAL_RCC_GetSysClockFreq+0x30>
 8006492:	2b08      	cmp	r3, #8
 8006494:	d003      	beq.n	800649e <HAL_RCC_GetSysClockFreq+0x36>
 8006496:	e027      	b.n	80064e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006498:	4b19      	ldr	r3, [pc, #100]	@ (8006500 <HAL_RCC_GetSysClockFreq+0x98>)
 800649a:	613b      	str	r3, [r7, #16]
      break;
 800649c:	e027      	b.n	80064ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	0c9b      	lsrs	r3, r3, #18
 80064a2:	f003 030f 	and.w	r3, r3, #15
 80064a6:	4a17      	ldr	r2, [pc, #92]	@ (8006504 <HAL_RCC_GetSysClockFreq+0x9c>)
 80064a8:	5cd3      	ldrb	r3, [r2, r3]
 80064aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d010      	beq.n	80064d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80064b6:	4b11      	ldr	r3, [pc, #68]	@ (80064fc <HAL_RCC_GetSysClockFreq+0x94>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	0c5b      	lsrs	r3, r3, #17
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	4a11      	ldr	r2, [pc, #68]	@ (8006508 <HAL_RCC_GetSysClockFreq+0xa0>)
 80064c2:	5cd3      	ldrb	r3, [r2, r3]
 80064c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a0d      	ldr	r2, [pc, #52]	@ (8006500 <HAL_RCC_GetSysClockFreq+0x98>)
 80064ca:	fb03 f202 	mul.w	r2, r3, r2
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	e004      	b.n	80064e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a0c      	ldr	r2, [pc, #48]	@ (800650c <HAL_RCC_GetSysClockFreq+0xa4>)
 80064dc:	fb02 f303 	mul.w	r3, r2, r3
 80064e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	613b      	str	r3, [r7, #16]
      break;
 80064e6:	e002      	b.n	80064ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80064e8:	4b05      	ldr	r3, [pc, #20]	@ (8006500 <HAL_RCC_GetSysClockFreq+0x98>)
 80064ea:	613b      	str	r3, [r7, #16]
      break;
 80064ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064ee:	693b      	ldr	r3, [r7, #16]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bc80      	pop	{r7}
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40021000 	.word	0x40021000
 8006500:	007a1200 	.word	0x007a1200
 8006504:	0800e414 	.word	0x0800e414
 8006508:	0800e424 	.word	0x0800e424
 800650c:	003d0900 	.word	0x003d0900

08006510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006514:	4b02      	ldr	r3, [pc, #8]	@ (8006520 <HAL_RCC_GetHCLKFreq+0x10>)
 8006516:	681b      	ldr	r3, [r3, #0]
}
 8006518:	4618      	mov	r0, r3
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr
 8006520:	20000004 	.word	0x20000004

08006524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006528:	f7ff fff2 	bl	8006510 <HAL_RCC_GetHCLKFreq>
 800652c:	4602      	mov	r2, r0
 800652e:	4b05      	ldr	r3, [pc, #20]	@ (8006544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	0a1b      	lsrs	r3, r3, #8
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	4903      	ldr	r1, [pc, #12]	@ (8006548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800653a:	5ccb      	ldrb	r3, [r1, r3]
 800653c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006540:	4618      	mov	r0, r3
 8006542:	bd80      	pop	{r7, pc}
 8006544:	40021000 	.word	0x40021000
 8006548:	0800e40c 	.word	0x0800e40c

0800654c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006554:	4b0a      	ldr	r3, [pc, #40]	@ (8006580 <RCC_Delay+0x34>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a0a      	ldr	r2, [pc, #40]	@ (8006584 <RCC_Delay+0x38>)
 800655a:	fba2 2303 	umull	r2, r3, r2, r3
 800655e:	0a5b      	lsrs	r3, r3, #9
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	fb02 f303 	mul.w	r3, r2, r3
 8006566:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006568:	bf00      	nop
  }
  while (Delay --);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	1e5a      	subs	r2, r3, #1
 800656e:	60fa      	str	r2, [r7, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1f9      	bne.n	8006568 <RCC_Delay+0x1c>
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	bc80      	pop	{r7}
 800657e:	4770      	bx	lr
 8006580:	20000004 	.word	0x20000004
 8006584:	10624dd3 	.word	0x10624dd3

08006588 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	2300      	movs	r3, #0
 8006596:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d07d      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80065a4:	2300      	movs	r3, #0
 80065a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065a8:	4b4f      	ldr	r3, [pc, #316]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10d      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065b4:	4b4c      	ldr	r3, [pc, #304]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	4a4b      	ldr	r2, [pc, #300]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065be:	61d3      	str	r3, [r2, #28]
 80065c0:	4b49      	ldr	r3, [pc, #292]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065c8:	60bb      	str	r3, [r7, #8]
 80065ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065cc:	2301      	movs	r3, #1
 80065ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d0:	4b46      	ldr	r3, [pc, #280]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d118      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065dc:	4b43      	ldr	r3, [pc, #268]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a42      	ldr	r2, [pc, #264]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065e8:	f7fc fb58 	bl	8002c9c <HAL_GetTick>
 80065ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ee:	e008      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f0:	f7fc fb54 	bl	8002c9c <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b64      	cmp	r3, #100	@ 0x64
 80065fc:	d901      	bls.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e06d      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006602:	4b3a      	ldr	r3, [pc, #232]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0f0      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800660e:	4b36      	ldr	r3, [pc, #216]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006616:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d02e      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	429a      	cmp	r2, r3
 800662a:	d027      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800662c:	4b2e      	ldr	r3, [pc, #184]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006634:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006636:	4b2e      	ldr	r3, [pc, #184]	@ (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006638:	2201      	movs	r2, #1
 800663a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800663c:	4b2c      	ldr	r3, [pc, #176]	@ (80066f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800663e:	2200      	movs	r2, #0
 8006640:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006642:	4a29      	ldr	r2, [pc, #164]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d014      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006652:	f7fc fb23 	bl	8002c9c <HAL_GetTick>
 8006656:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006658:	e00a      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800665a:	f7fc fb1f 	bl	8002c9c <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006668:	4293      	cmp	r3, r2
 800666a:	d901      	bls.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e036      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006670:	4b1d      	ldr	r3, [pc, #116]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0ee      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800667c:	4b1a      	ldr	r3, [pc, #104]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	4917      	ldr	r1, [pc, #92]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800668a:	4313      	orrs	r3, r2
 800668c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800668e:	7dfb      	ldrb	r3, [r7, #23]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d105      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006694:	4b14      	ldr	r3, [pc, #80]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	4a13      	ldr	r2, [pc, #76]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800669a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800669e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d008      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066ac:	4b0e      	ldr	r3, [pc, #56]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	490b      	ldr	r1, [pc, #44]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0310 	and.w	r3, r3, #16
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d008      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066ca:	4b07      	ldr	r3, [pc, #28]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	4904      	ldr	r1, [pc, #16]	@ (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	40021000 	.word	0x40021000
 80066ec:	40007000 	.word	0x40007000
 80066f0:	42420440 	.word	0x42420440

080066f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e076      	b.n	80067f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670a:	2b00      	cmp	r3, #0
 800670c:	d108      	bne.n	8006720 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006716:	d009      	beq.n	800672c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	61da      	str	r2, [r3, #28]
 800671e:	e005      	b.n	800672c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7fc f858 	bl	80027fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006762:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006774:	431a      	orrs	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800677e:	431a      	orrs	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	431a      	orrs	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800679c:	431a      	orrs	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067a6:	431a      	orrs	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067b0:	ea42 0103 	orr.w	r1, r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	0c1a      	lsrs	r2, r3, #16
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f002 0204 	and.w	r2, r2, #4
 80067d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69da      	ldr	r2, [r3, #28]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	4613      	mov	r3, r2
 800680a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800680c:	f7fc fa46 	bl	8002c9c <HAL_GetTick>
 8006810:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006812:	88fb      	ldrh	r3, [r7, #6]
 8006814:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b01      	cmp	r3, #1
 8006820:	d001      	beq.n	8006826 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006822:	2302      	movs	r3, #2
 8006824:	e12a      	b.n	8006a7c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <HAL_SPI_Transmit+0x36>
 800682c:	88fb      	ldrh	r3, [r7, #6]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e122      	b.n	8006a7c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_SPI_Transmit+0x48>
 8006840:	2302      	movs	r3, #2
 8006842:	e11b      	b.n	8006a7c <HAL_SPI_Transmit+0x280>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2203      	movs	r2, #3
 8006850:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	88fa      	ldrh	r2, [r7, #6]
 8006864:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	88fa      	ldrh	r2, [r7, #6]
 800686a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006892:	d10f      	bne.n	80068b4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068be:	2b40      	cmp	r3, #64	@ 0x40
 80068c0:	d007      	beq.n	80068d2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068da:	d152      	bne.n	8006982 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <HAL_SPI_Transmit+0xee>
 80068e4:	8b7b      	ldrh	r3, [r7, #26]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d145      	bne.n	8006976 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ee:	881a      	ldrh	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068fa:	1c9a      	adds	r2, r3, #2
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006904:	b29b      	uxth	r3, r3
 8006906:	3b01      	subs	r3, #1
 8006908:	b29a      	uxth	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800690e:	e032      	b.n	8006976 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b02      	cmp	r3, #2
 800691c:	d112      	bne.n	8006944 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006922:	881a      	ldrh	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800692e:	1c9a      	adds	r2, r3, #2
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006942:	e018      	b.n	8006976 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006944:	f7fc f9aa 	bl	8002c9c <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	429a      	cmp	r2, r3
 8006952:	d803      	bhi.n	800695c <HAL_SPI_Transmit+0x160>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695a:	d102      	bne.n	8006962 <HAL_SPI_Transmit+0x166>
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e082      	b.n	8006a7c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800697a:	b29b      	uxth	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1c7      	bne.n	8006910 <HAL_SPI_Transmit+0x114>
 8006980:	e053      	b.n	8006a2a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <HAL_SPI_Transmit+0x194>
 800698a:	8b7b      	ldrh	r3, [r7, #26]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d147      	bne.n	8006a20 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	330c      	adds	r3, #12
 800699a:	7812      	ldrb	r2, [r2, #0]
 800699c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80069b6:	e033      	b.n	8006a20 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d113      	bne.n	80069ee <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	330c      	adds	r3, #12
 80069d0:	7812      	ldrb	r2, [r2, #0]
 80069d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	86da      	strh	r2, [r3, #54]	@ 0x36
 80069ec:	e018      	b.n	8006a20 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069ee:	f7fc f955 	bl	8002c9c <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d803      	bhi.n	8006a06 <HAL_SPI_Transmit+0x20a>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a04:	d102      	bne.n	8006a0c <HAL_SPI_Transmit+0x210>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d109      	bne.n	8006a20 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e02d      	b.n	8006a7c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1c6      	bne.n	80069b8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a2a:	69fa      	ldr	r2, [r7, #28]
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 fa5a 	bl	8006ee8 <SPI_EndRxTxTransaction>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d002      	beq.n	8006a40 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10a      	bne.n	8006a5e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a48:	2300      	movs	r3, #0
 8006a4a:	617b      	str	r3, [r7, #20]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
  }
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3720      	adds	r7, #32
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	@ 0x28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
 8006a90:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a92:	2301      	movs	r3, #1
 8006a94:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a96:	f7fc f901 	bl	8002c9c <HAL_GetTick>
 8006a9a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006aa2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006aaa:	887b      	ldrh	r3, [r7, #2]
 8006aac:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006aae:	7ffb      	ldrb	r3, [r7, #31]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d00c      	beq.n	8006ace <HAL_SPI_TransmitReceive+0x4a>
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006aba:	d106      	bne.n	8006aca <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d102      	bne.n	8006aca <HAL_SPI_TransmitReceive+0x46>
 8006ac4:	7ffb      	ldrb	r3, [r7, #31]
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d001      	beq.n	8006ace <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006aca:	2302      	movs	r3, #2
 8006acc:	e17f      	b.n	8006dce <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d005      	beq.n	8006ae0 <HAL_SPI_TransmitReceive+0x5c>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <HAL_SPI_TransmitReceive+0x5c>
 8006ada:	887b      	ldrh	r3, [r7, #2]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d101      	bne.n	8006ae4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e174      	b.n	8006dce <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d101      	bne.n	8006af2 <HAL_SPI_TransmitReceive+0x6e>
 8006aee:	2302      	movs	r3, #2
 8006af0:	e16d      	b.n	8006dce <HAL_SPI_TransmitReceive+0x34a>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d003      	beq.n	8006b0e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2205      	movs	r2, #5
 8006b0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	887a      	ldrh	r2, [r7, #2]
 8006b1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	887a      	ldrh	r2, [r7, #2]
 8006b24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	887a      	ldrh	r2, [r7, #2]
 8006b30:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	887a      	ldrh	r2, [r7, #2]
 8006b36:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b4e:	2b40      	cmp	r3, #64	@ 0x40
 8006b50:	d007      	beq.n	8006b62 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b6a:	d17e      	bne.n	8006c6a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <HAL_SPI_TransmitReceive+0xf6>
 8006b74:	8afb      	ldrh	r3, [r7, #22]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d16c      	bne.n	8006c54 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b7e:	881a      	ldrh	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b8a:	1c9a      	adds	r2, r3, #2
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b9e:	e059      	b.n	8006c54 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d11b      	bne.n	8006be6 <HAL_SPI_TransmitReceive+0x162>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d016      	beq.n	8006be6 <HAL_SPI_TransmitReceive+0x162>
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d113      	bne.n	8006be6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc2:	881a      	ldrh	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bce:	1c9a      	adds	r2, r3, #2
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d119      	bne.n	8006c28 <HAL_SPI_TransmitReceive+0x1a4>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d014      	beq.n	8006c28 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c08:	b292      	uxth	r2, r2
 8006c0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c10:	1c9a      	adds	r2, r3, #2
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c24:	2301      	movs	r3, #1
 8006c26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c28:	f7fc f838 	bl	8002c9c <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d80d      	bhi.n	8006c54 <HAL_SPI_TransmitReceive+0x1d0>
 8006c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3e:	d009      	beq.n	8006c54 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e0bc      	b.n	8006dce <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1a0      	bne.n	8006ba0 <HAL_SPI_TransmitReceive+0x11c>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d19b      	bne.n	8006ba0 <HAL_SPI_TransmitReceive+0x11c>
 8006c68:	e082      	b.n	8006d70 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <HAL_SPI_TransmitReceive+0x1f4>
 8006c72:	8afb      	ldrh	r3, [r7, #22]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d171      	bne.n	8006d5c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	330c      	adds	r3, #12
 8006c82:	7812      	ldrb	r2, [r2, #0]
 8006c84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c9e:	e05d      	b.n	8006d5c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d11c      	bne.n	8006ce8 <HAL_SPI_TransmitReceive+0x264>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d017      	beq.n	8006ce8 <HAL_SPI_TransmitReceive+0x264>
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d114      	bne.n	8006ce8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	330c      	adds	r3, #12
 8006cc8:	7812      	ldrb	r2, [r2, #0]
 8006cca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d119      	bne.n	8006d2a <HAL_SPI_TransmitReceive+0x2a6>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d014      	beq.n	8006d2a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68da      	ldr	r2, [r3, #12]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d0a:	b2d2      	uxtb	r2, r2
 8006d0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d26:	2301      	movs	r3, #1
 8006d28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d2a:	f7fb ffb7 	bl	8002c9c <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d803      	bhi.n	8006d42 <HAL_SPI_TransmitReceive+0x2be>
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d40:	d102      	bne.n	8006d48 <HAL_SPI_TransmitReceive+0x2c4>
 8006d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d109      	bne.n	8006d5c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e038      	b.n	8006dce <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d19c      	bne.n	8006ca0 <HAL_SPI_TransmitReceive+0x21c>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d197      	bne.n	8006ca0 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d70:	6a3a      	ldr	r2, [r7, #32]
 8006d72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 f8b7 	bl	8006ee8 <SPI_EndRxTxTransaction>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d008      	beq.n	8006d92 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2220      	movs	r2, #32
 8006d84:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e01d      	b.n	8006dce <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10a      	bne.n	8006db0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	613b      	str	r3, [r7, #16]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	613b      	str	r3, [r7, #16]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	613b      	str	r3, [r7, #16]
 8006dae:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e000      	b.n	8006dce <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
  }
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3728      	adds	r7, #40	@ 0x28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
	...

08006dd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b088      	sub	sp, #32
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	603b      	str	r3, [r7, #0]
 8006de4:	4613      	mov	r3, r2
 8006de6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006de8:	f7fb ff58 	bl	8002c9c <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df0:	1a9b      	subs	r3, r3, r2
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	4413      	add	r3, r2
 8006df6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006df8:	f7fb ff50 	bl	8002c9c <HAL_GetTick>
 8006dfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006dfe:	4b39      	ldr	r3, [pc, #228]	@ (8006ee4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	015b      	lsls	r3, r3, #5
 8006e04:	0d1b      	lsrs	r3, r3, #20
 8006e06:	69fa      	ldr	r2, [r7, #28]
 8006e08:	fb02 f303 	mul.w	r3, r2, r3
 8006e0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e0e:	e054      	b.n	8006eba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e16:	d050      	beq.n	8006eba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e18:	f7fb ff40 	bl	8002c9c <HAL_GetTick>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	1ad3      	subs	r3, r2, r3
 8006e22:	69fa      	ldr	r2, [r7, #28]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d902      	bls.n	8006e2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d13d      	bne.n	8006eaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006e3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e46:	d111      	bne.n	8006e6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e50:	d004      	beq.n	8006e5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e5a:	d107      	bne.n	8006e6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e74:	d10f      	bne.n	8006e96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e017      	b.n	8006eda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	bf0c      	ite	eq
 8006eca:	2301      	moveq	r3, #1
 8006ecc:	2300      	movne	r3, #0
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d19b      	bne.n	8006e10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3720      	adds	r7, #32
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20000004 	.word	0x20000004

08006ee8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af02      	add	r7, sp, #8
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2201      	movs	r2, #1
 8006efc:	2102      	movs	r1, #2
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f7ff ff6a 	bl	8006dd8 <SPI_WaitFlagStateUntilTimeout>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d007      	beq.n	8006f1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f0e:	f043 0220 	orr.w	r2, r3, #32
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e013      	b.n	8006f42 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2200      	movs	r2, #0
 8006f22:	2180      	movs	r1, #128	@ 0x80
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f7ff ff57 	bl	8006dd8 <SPI_WaitFlagStateUntilTimeout>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d007      	beq.n	8006f40 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f34:	f043 0220 	orr.w	r2, r3, #32
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e000      	b.n	8006f42 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e041      	b.n	8006fe0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d106      	bne.n	8006f76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7fb fc8f 	bl	8002894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2202      	movs	r2, #2
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3304      	adds	r3, #4
 8006f86:	4619      	mov	r1, r3
 8006f88:	4610      	mov	r0, r2
 8006f8a:	f000 fa5b 	bl	8007444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d001      	beq.n	8007000 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e03a      	b.n	8007076 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68da      	ldr	r2, [r3, #12]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0201 	orr.w	r2, r2, #1
 8007016:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a18      	ldr	r2, [pc, #96]	@ (8007080 <HAL_TIM_Base_Start_IT+0x98>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d00e      	beq.n	8007040 <HAL_TIM_Base_Start_IT+0x58>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800702a:	d009      	beq.n	8007040 <HAL_TIM_Base_Start_IT+0x58>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a14      	ldr	r2, [pc, #80]	@ (8007084 <HAL_TIM_Base_Start_IT+0x9c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d004      	beq.n	8007040 <HAL_TIM_Base_Start_IT+0x58>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a13      	ldr	r2, [pc, #76]	@ (8007088 <HAL_TIM_Base_Start_IT+0xa0>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d111      	bne.n	8007064 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b06      	cmp	r3, #6
 8007050:	d010      	beq.n	8007074 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f042 0201 	orr.w	r2, r2, #1
 8007060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007062:	e007      	b.n	8007074 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f042 0201 	orr.w	r2, r2, #1
 8007072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	bc80      	pop	{r7}
 800707e:	4770      	bx	lr
 8007080:	40012c00 	.word	0x40012c00
 8007084:	40000400 	.word	0x40000400
 8007088:	40000800 	.word	0x40000800

0800708c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d020      	beq.n	80070f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d01b      	beq.n	80070f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f06f 0202 	mvn.w	r2, #2
 80070c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	f003 0303 	and.w	r3, r3, #3
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f998 	bl	800740c <HAL_TIM_IC_CaptureCallback>
 80070dc:	e005      	b.n	80070ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f98b 	bl	80073fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f99a 	bl	800741e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f003 0304 	and.w	r3, r3, #4
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d020      	beq.n	800713c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d01b      	beq.n	800713c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f06f 0204 	mvn.w	r2, #4
 800710c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2202      	movs	r2, #2
 8007112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f972 	bl	800740c <HAL_TIM_IC_CaptureCallback>
 8007128:	e005      	b.n	8007136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f965 	bl	80073fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f974 	bl	800741e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f003 0308 	and.w	r3, r3, #8
 8007142:	2b00      	cmp	r3, #0
 8007144:	d020      	beq.n	8007188 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f003 0308 	and.w	r3, r3, #8
 800714c:	2b00      	cmp	r3, #0
 800714e:	d01b      	beq.n	8007188 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f06f 0208 	mvn.w	r2, #8
 8007158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2204      	movs	r2, #4
 800715e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	f003 0303 	and.w	r3, r3, #3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f94c 	bl	800740c <HAL_TIM_IC_CaptureCallback>
 8007174:	e005      	b.n	8007182 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f93f 	bl	80073fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f94e 	bl	800741e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f003 0310 	and.w	r3, r3, #16
 800718e:	2b00      	cmp	r3, #0
 8007190:	d020      	beq.n	80071d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f003 0310 	and.w	r3, r3, #16
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01b      	beq.n	80071d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f06f 0210 	mvn.w	r2, #16
 80071a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2208      	movs	r2, #8
 80071aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f926 	bl	800740c <HAL_TIM_IC_CaptureCallback>
 80071c0:	e005      	b.n	80071ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f919 	bl	80073fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f928 	bl	800741e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00c      	beq.n	80071f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d007      	beq.n	80071f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f06f 0201 	mvn.w	r2, #1
 80071f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7fa fd68 	bl	8001cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00c      	beq.n	800721c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007208:	2b00      	cmp	r3, #0
 800720a:	d007      	beq.n	800721c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fa7f 	bl	800771a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00c      	beq.n	8007240 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800722c:	2b00      	cmp	r3, #0
 800722e:	d007      	beq.n	8007240 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f8f8 	bl	8007430 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00c      	beq.n	8007264 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f003 0320 	and.w	r3, r3, #32
 8007250:	2b00      	cmp	r3, #0
 8007252:	d007      	beq.n	8007264 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f06f 0220 	mvn.w	r2, #32
 800725c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa52 	bl	8007708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007264:	bf00      	nop
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007280:	2b01      	cmp	r3, #1
 8007282:	d101      	bne.n	8007288 <HAL_TIM_ConfigClockSource+0x1c>
 8007284:	2302      	movs	r3, #2
 8007286:	e0b4      	b.n	80073f2 <HAL_TIM_ConfigClockSource+0x186>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80072a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072c0:	d03e      	beq.n	8007340 <HAL_TIM_ConfigClockSource+0xd4>
 80072c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072c6:	f200 8087 	bhi.w	80073d8 <HAL_TIM_ConfigClockSource+0x16c>
 80072ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ce:	f000 8086 	beq.w	80073de <HAL_TIM_ConfigClockSource+0x172>
 80072d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072d6:	d87f      	bhi.n	80073d8 <HAL_TIM_ConfigClockSource+0x16c>
 80072d8:	2b70      	cmp	r3, #112	@ 0x70
 80072da:	d01a      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0xa6>
 80072dc:	2b70      	cmp	r3, #112	@ 0x70
 80072de:	d87b      	bhi.n	80073d8 <HAL_TIM_ConfigClockSource+0x16c>
 80072e0:	2b60      	cmp	r3, #96	@ 0x60
 80072e2:	d050      	beq.n	8007386 <HAL_TIM_ConfigClockSource+0x11a>
 80072e4:	2b60      	cmp	r3, #96	@ 0x60
 80072e6:	d877      	bhi.n	80073d8 <HAL_TIM_ConfigClockSource+0x16c>
 80072e8:	2b50      	cmp	r3, #80	@ 0x50
 80072ea:	d03c      	beq.n	8007366 <HAL_TIM_ConfigClockSource+0xfa>
 80072ec:	2b50      	cmp	r3, #80	@ 0x50
 80072ee:	d873      	bhi.n	80073d8 <HAL_TIM_ConfigClockSource+0x16c>
 80072f0:	2b40      	cmp	r3, #64	@ 0x40
 80072f2:	d058      	beq.n	80073a6 <HAL_TIM_ConfigClockSource+0x13a>
 80072f4:	2b40      	cmp	r3, #64	@ 0x40
 80072f6:	d86f      	bhi.n	80073d8 <HAL_TIM_ConfigClockSource+0x16c>
 80072f8:	2b30      	cmp	r3, #48	@ 0x30
 80072fa:	d064      	beq.n	80073c6 <HAL_TIM_ConfigClockSource+0x15a>
 80072fc:	2b30      	cmp	r3, #48	@ 0x30
 80072fe:	d86b      	bhi.n	80073d8 <HAL_TIM_ConfigClockSource+0x16c>
 8007300:	2b20      	cmp	r3, #32
 8007302:	d060      	beq.n	80073c6 <HAL_TIM_ConfigClockSource+0x15a>
 8007304:	2b20      	cmp	r3, #32
 8007306:	d867      	bhi.n	80073d8 <HAL_TIM_ConfigClockSource+0x16c>
 8007308:	2b00      	cmp	r3, #0
 800730a:	d05c      	beq.n	80073c6 <HAL_TIM_ConfigClockSource+0x15a>
 800730c:	2b10      	cmp	r3, #16
 800730e:	d05a      	beq.n	80073c6 <HAL_TIM_ConfigClockSource+0x15a>
 8007310:	e062      	b.n	80073d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007322:	f000 f974 	bl	800760e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007334:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	609a      	str	r2, [r3, #8]
      break;
 800733e:	e04f      	b.n	80073e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007350:	f000 f95d 	bl	800760e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689a      	ldr	r2, [r3, #8]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007362:	609a      	str	r2, [r3, #8]
      break;
 8007364:	e03c      	b.n	80073e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007372:	461a      	mov	r2, r3
 8007374:	f000 f8d4 	bl	8007520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2150      	movs	r1, #80	@ 0x50
 800737e:	4618      	mov	r0, r3
 8007380:	f000 f92b 	bl	80075da <TIM_ITRx_SetConfig>
      break;
 8007384:	e02c      	b.n	80073e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007392:	461a      	mov	r2, r3
 8007394:	f000 f8f2 	bl	800757c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2160      	movs	r1, #96	@ 0x60
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 f91b 	bl	80075da <TIM_ITRx_SetConfig>
      break;
 80073a4:	e01c      	b.n	80073e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073b2:	461a      	mov	r2, r3
 80073b4:	f000 f8b4 	bl	8007520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2140      	movs	r1, #64	@ 0x40
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 f90b 	bl	80075da <TIM_ITRx_SetConfig>
      break;
 80073c4:	e00c      	b.n	80073e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4619      	mov	r1, r3
 80073d0:	4610      	mov	r0, r2
 80073d2:	f000 f902 	bl	80075da <TIM_ITRx_SetConfig>
      break;
 80073d6:	e003      	b.n	80073e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	73fb      	strb	r3, [r7, #15]
      break;
 80073dc:	e000      	b.n	80073e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007402:	bf00      	nop
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	bc80      	pop	{r7}
 800740a:	4770      	bx	lr

0800740c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	bc80      	pop	{r7}
 800741c:	4770      	bx	lr

0800741e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	bc80      	pop	{r7}
 800742e:	4770      	bx	lr

08007430 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	bc80      	pop	{r7}
 8007440:	4770      	bx	lr
	...

08007444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a2f      	ldr	r2, [pc, #188]	@ (8007514 <TIM_Base_SetConfig+0xd0>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d00b      	beq.n	8007474 <TIM_Base_SetConfig+0x30>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007462:	d007      	beq.n	8007474 <TIM_Base_SetConfig+0x30>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a2c      	ldr	r2, [pc, #176]	@ (8007518 <TIM_Base_SetConfig+0xd4>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d003      	beq.n	8007474 <TIM_Base_SetConfig+0x30>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a2b      	ldr	r2, [pc, #172]	@ (800751c <TIM_Base_SetConfig+0xd8>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d108      	bne.n	8007486 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800747a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a22      	ldr	r2, [pc, #136]	@ (8007514 <TIM_Base_SetConfig+0xd0>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d00b      	beq.n	80074a6 <TIM_Base_SetConfig+0x62>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007494:	d007      	beq.n	80074a6 <TIM_Base_SetConfig+0x62>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a1f      	ldr	r2, [pc, #124]	@ (8007518 <TIM_Base_SetConfig+0xd4>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d003      	beq.n	80074a6 <TIM_Base_SetConfig+0x62>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a1e      	ldr	r2, [pc, #120]	@ (800751c <TIM_Base_SetConfig+0xd8>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d108      	bne.n	80074b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a0d      	ldr	r2, [pc, #52]	@ (8007514 <TIM_Base_SetConfig+0xd0>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d103      	bne.n	80074ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	691a      	ldr	r2, [r3, #16]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f023 0201 	bic.w	r2, r3, #1
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	611a      	str	r2, [r3, #16]
  }
}
 800750a:	bf00      	nop
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	bc80      	pop	{r7}
 8007512:	4770      	bx	lr
 8007514:	40012c00 	.word	0x40012c00
 8007518:	40000400 	.word	0x40000400
 800751c:	40000800 	.word	0x40000800

08007520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f023 0201 	bic.w	r2, r3, #1
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800754a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f023 030a 	bic.w	r3, r3, #10
 800755c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	4313      	orrs	r3, r2
 8007564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	621a      	str	r2, [r3, #32]
}
 8007572:	bf00      	nop
 8007574:	371c      	adds	r7, #28
 8007576:	46bd      	mov	sp, r7
 8007578:	bc80      	pop	{r7}
 800757a:	4770      	bx	lr

0800757c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	f023 0210 	bic.w	r2, r3, #16
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80075a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	031b      	lsls	r3, r3, #12
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80075b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	011b      	lsls	r3, r3, #4
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	621a      	str	r2, [r3, #32]
}
 80075d0:	bf00      	nop
 80075d2:	371c      	adds	r7, #28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bc80      	pop	{r7}
 80075d8:	4770      	bx	lr

080075da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075da:	b480      	push	{r7}
 80075dc:	b085      	sub	sp, #20
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	f043 0307 	orr.w	r3, r3, #7
 80075fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	609a      	str	r2, [r3, #8]
}
 8007604:	bf00      	nop
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	bc80      	pop	{r7}
 800760c:	4770      	bx	lr

0800760e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800760e:	b480      	push	{r7}
 8007610:	b087      	sub	sp, #28
 8007612:	af00      	add	r7, sp, #0
 8007614:	60f8      	str	r0, [r7, #12]
 8007616:	60b9      	str	r1, [r7, #8]
 8007618:	607a      	str	r2, [r7, #4]
 800761a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007628:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	021a      	lsls	r2, r3, #8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	431a      	orrs	r2, r3
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	4313      	orrs	r3, r2
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	4313      	orrs	r3, r2
 800763a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	609a      	str	r2, [r3, #8]
}
 8007642:	bf00      	nop
 8007644:	371c      	adds	r7, #28
 8007646:	46bd      	mov	sp, r7
 8007648:	bc80      	pop	{r7}
 800764a:	4770      	bx	lr

0800764c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800765c:	2b01      	cmp	r3, #1
 800765e:	d101      	bne.n	8007664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007660:	2302      	movs	r3, #2
 8007662:	e046      	b.n	80076f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800768a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4313      	orrs	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a16      	ldr	r2, [pc, #88]	@ (80076fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d00e      	beq.n	80076c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076b0:	d009      	beq.n	80076c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a12      	ldr	r2, [pc, #72]	@ (8007700 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d004      	beq.n	80076c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a10      	ldr	r2, [pc, #64]	@ (8007704 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d10c      	bne.n	80076e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3714      	adds	r7, #20
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bc80      	pop	{r7}
 80076fa:	4770      	bx	lr
 80076fc:	40012c00 	.word	0x40012c00
 8007700:	40000400 	.word	0x40000400
 8007704:	40000800 	.word	0x40000800

08007708 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	bc80      	pop	{r7}
 8007718:	4770      	bx	lr

0800771a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007722:	bf00      	nop
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	bc80      	pop	{r7}
 800772a:	4770      	bx	lr

0800772c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007730:	4904      	ldr	r1, [pc, #16]	@ (8007744 <MX_FATFS_Init+0x18>)
 8007732:	4805      	ldr	r0, [pc, #20]	@ (8007748 <MX_FATFS_Init+0x1c>)
 8007734:	f003 ff10 	bl	800b558 <FATFS_LinkDriver>
 8007738:	4603      	mov	r3, r0
 800773a:	461a      	mov	r2, r3
 800773c:	4b03      	ldr	r3, [pc, #12]	@ (800774c <MX_FATFS_Init+0x20>)
 800773e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007740:	bf00      	nop
 8007742:	bd80      	pop	{r7, pc}
 8007744:	200025d0 	.word	0x200025d0
 8007748:	20000010 	.word	0x20000010
 800774c:	200025cc 	.word	0x200025cc

08007750 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007750:	b480      	push	{r7}
 8007752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007754:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007756:	4618      	mov	r0, r3
 8007758:	46bd      	mov	sp, r7
 800775a:	bc80      	pop	{r7}
 800775c:	4770      	bx	lr

0800775e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b082      	sub	sp, #8
 8007762:	af00      	add	r7, sp, #0
 8007764:	4603      	mov	r3, r0
 8007766:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 8007768:	79fb      	ldrb	r3, [r7, #7]
 800776a:	4618      	mov	r0, r3
 800776c:	f7f9 fdc6 	bl	80012fc <SD_disk_initialize>
 8007770:	4603      	mov	r3, r0
 8007772:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007774:	4618      	mov	r0, r3
 8007776:	3708      	adds	r7, #8
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8007786:	79fb      	ldrb	r3, [r7, #7]
 8007788:	4618      	mov	r0, r3
 800778a:	f7f9 fe9d 	bl	80014c8 <SD_disk_status>
 800778e:	4603      	mov	r3, r0
 8007790:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
 80077a4:	603b      	str	r3, [r7, #0]
 80077a6:	4603      	mov	r3, r0
 80077a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 80077aa:	7bf8      	ldrb	r0, [r7, #15]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	68b9      	ldr	r1, [r7, #8]
 80077b2:	f7f9 fe9d 	bl	80014f0 <SD_disk_read>
 80077b6:	4603      	mov	r3, r0
 80077b8:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
 80077cc:	603b      	str	r3, [r7, #0]
 80077ce:	4603      	mov	r3, r0
 80077d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 80077d2:	7bf8      	ldrb	r0, [r7, #15]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	68b9      	ldr	r1, [r7, #8]
 80077da:	f7f9 fef3 	bl	80015c4 <SD_disk_write>
 80077de:	4603      	mov	r3, r0
 80077e0:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	4603      	mov	r3, r0
 80077f2:	603a      	str	r2, [r7, #0]
 80077f4:	71fb      	strb	r3, [r7, #7]
 80077f6:	460b      	mov	r3, r1
 80077f8:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	79b9      	ldrb	r1, [r7, #6]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	4618      	mov	r0, r3
 8007802:	f7f9 ff63 	bl	80016cc <SD_disk_ioctl>
 8007806:	4603      	mov	r3, r0
 8007808:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800780a:	4618      	mov	r0, r3
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800781e:	79fb      	ldrb	r3, [r7, #7]
 8007820:	4a08      	ldr	r2, [pc, #32]	@ (8007844 <disk_status+0x30>)
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	79fa      	ldrb	r2, [r7, #7]
 800782c:	4905      	ldr	r1, [pc, #20]	@ (8007844 <disk_status+0x30>)
 800782e:	440a      	add	r2, r1
 8007830:	7a12      	ldrb	r2, [r2, #8]
 8007832:	4610      	mov	r0, r2
 8007834:	4798      	blx	r3
 8007836:	4603      	mov	r3, r0
 8007838:	73fb      	strb	r3, [r7, #15]
  return stat;
 800783a:	7bfb      	ldrb	r3, [r7, #15]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	200027f4 	.word	0x200027f4

08007848 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	4a0d      	ldr	r2, [pc, #52]	@ (8007890 <disk_initialize+0x48>)
 800785a:	5cd3      	ldrb	r3, [r2, r3]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d111      	bne.n	8007884 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8007860:	79fb      	ldrb	r3, [r7, #7]
 8007862:	4a0b      	ldr	r2, [pc, #44]	@ (8007890 <disk_initialize+0x48>)
 8007864:	2101      	movs	r1, #1
 8007866:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007868:	79fb      	ldrb	r3, [r7, #7]
 800786a:	4a09      	ldr	r2, [pc, #36]	@ (8007890 <disk_initialize+0x48>)
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	79fa      	ldrb	r2, [r7, #7]
 8007876:	4906      	ldr	r1, [pc, #24]	@ (8007890 <disk_initialize+0x48>)
 8007878:	440a      	add	r2, r1
 800787a:	7a12      	ldrb	r2, [r2, #8]
 800787c:	4610      	mov	r0, r2
 800787e:	4798      	blx	r3
 8007880:	4603      	mov	r3, r0
 8007882:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007884:	7bfb      	ldrb	r3, [r7, #15]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	200027f4 	.word	0x200027f4

08007894 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007894:	b590      	push	{r4, r7, lr}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	607a      	str	r2, [r7, #4]
 800789e:	603b      	str	r3, [r7, #0]
 80078a0:	4603      	mov	r3, r0
 80078a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
 80078a6:	4a0a      	ldr	r2, [pc, #40]	@ (80078d0 <disk_read+0x3c>)
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	689c      	ldr	r4, [r3, #8]
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	4a07      	ldr	r2, [pc, #28]	@ (80078d0 <disk_read+0x3c>)
 80078b4:	4413      	add	r3, r2
 80078b6:	7a18      	ldrb	r0, [r3, #8]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	68b9      	ldr	r1, [r7, #8]
 80078be:	47a0      	blx	r4
 80078c0:	4603      	mov	r3, r0
 80078c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	371c      	adds	r7, #28
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd90      	pop	{r4, r7, pc}
 80078ce:	bf00      	nop
 80078d0:	200027f4 	.word	0x200027f4

080078d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80078d4:	b590      	push	{r4, r7, lr}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	607a      	str	r2, [r7, #4]
 80078de:	603b      	str	r3, [r7, #0]
 80078e0:	4603      	mov	r3, r0
 80078e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
 80078e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007910 <disk_write+0x3c>)
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	68dc      	ldr	r4, [r3, #12]
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	4a07      	ldr	r2, [pc, #28]	@ (8007910 <disk_write+0x3c>)
 80078f4:	4413      	add	r3, r2
 80078f6:	7a18      	ldrb	r0, [r3, #8]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	68b9      	ldr	r1, [r7, #8]
 80078fe:	47a0      	blx	r4
 8007900:	4603      	mov	r3, r0
 8007902:	75fb      	strb	r3, [r7, #23]
  return res;
 8007904:	7dfb      	ldrb	r3, [r7, #23]
}
 8007906:	4618      	mov	r0, r3
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	bd90      	pop	{r4, r7, pc}
 800790e:	bf00      	nop
 8007910:	200027f4 	.word	0x200027f4

08007914 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	603a      	str	r2, [r7, #0]
 800791e:	71fb      	strb	r3, [r7, #7]
 8007920:	460b      	mov	r3, r1
 8007922:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007924:	79fb      	ldrb	r3, [r7, #7]
 8007926:	4a09      	ldr	r2, [pc, #36]	@ (800794c <disk_ioctl+0x38>)
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	79fa      	ldrb	r2, [r7, #7]
 8007932:	4906      	ldr	r1, [pc, #24]	@ (800794c <disk_ioctl+0x38>)
 8007934:	440a      	add	r2, r1
 8007936:	7a10      	ldrb	r0, [r2, #8]
 8007938:	79b9      	ldrb	r1, [r7, #6]
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	4798      	blx	r3
 800793e:	4603      	mov	r3, r0
 8007940:	73fb      	strb	r3, [r7, #15]
  return res;
 8007942:	7bfb      	ldrb	r3, [r7, #15]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	200027f4 	.word	0x200027f4

08007950 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007950:	b480      	push	{r7}
 8007952:	b087      	sub	sp, #28
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8007964:	e007      	b.n	8007976 <mem_cpy+0x26>
		*d++ = *s++;
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	1c53      	adds	r3, r2, #1
 800796a:	613b      	str	r3, [r7, #16]
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	1c59      	adds	r1, r3, #1
 8007970:	6179      	str	r1, [r7, #20]
 8007972:	7812      	ldrb	r2, [r2, #0]
 8007974:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	1e5a      	subs	r2, r3, #1
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1f2      	bne.n	8007966 <mem_cpy+0x16>
}
 8007980:	bf00      	nop
 8007982:	bf00      	nop
 8007984:	371c      	adds	r7, #28
 8007986:	46bd      	mov	sp, r7
 8007988:	bc80      	pop	{r7}
 800798a:	4770      	bx	lr

0800798c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800799c:	e005      	b.n	80079aa <mem_set+0x1e>
		*d++ = (BYTE)val;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	617a      	str	r2, [r7, #20]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	b2d2      	uxtb	r2, r2
 80079a8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	1e5a      	subs	r2, r3, #1
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1f4      	bne.n	800799e <mem_set+0x12>
}
 80079b4:	bf00      	nop
 80079b6:	bf00      	nop
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bc80      	pop	{r7}
 80079be:	4770      	bx	lr

080079c0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80079c0:	b480      	push	{r7}
 80079c2:	b089      	sub	sp, #36	@ 0x24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	61fb      	str	r3, [r7, #28]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80079d4:	2300      	movs	r3, #0
 80079d6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80079d8:	bf00      	nop
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	1e5a      	subs	r2, r3, #1
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00d      	beq.n	8007a00 <mem_cmp+0x40>
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	1c5a      	adds	r2, r3, #1
 80079e8:	61fa      	str	r2, [r7, #28]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	4619      	mov	r1, r3
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	61ba      	str	r2, [r7, #24]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	1acb      	subs	r3, r1, r3
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d0ec      	beq.n	80079da <mem_cmp+0x1a>
	return r;
 8007a00:	697b      	ldr	r3, [r7, #20]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3724      	adds	r7, #36	@ 0x24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bc80      	pop	{r7}
 8007a0a:	4770      	bx	lr

08007a0c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007a16:	e002      	b.n	8007a1e <chk_chr+0x12>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	607b      	str	r3, [r7, #4]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d005      	beq.n	8007a32 <chk_chr+0x26>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d1f2      	bne.n	8007a18 <chk_chr+0xc>
	return *str;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	781b      	ldrb	r3, [r3, #0]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bc80      	pop	{r7}
 8007a3e:	4770      	bx	lr

08007a40 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60bb      	str	r3, [r7, #8]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	e03b      	b.n	8007acc <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8007a54:	4931      	ldr	r1, [pc, #196]	@ (8007b1c <chk_lock+0xdc>)
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	4413      	add	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	440b      	add	r3, r1
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d02c      	beq.n	8007ac2 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007a68:	492c      	ldr	r1, [pc, #176]	@ (8007b1c <chk_lock+0xdc>)
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	4413      	add	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	440b      	add	r3, r1
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d120      	bne.n	8007ac6 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8007a84:	4925      	ldr	r1, [pc, #148]	@ (8007b1c <chk_lock+0xdc>)
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	4413      	add	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	440b      	add	r3, r1
 8007a92:	3304      	adds	r3, #4
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a9c:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d111      	bne.n	8007ac6 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8007aa2:	491e      	ldr	r1, [pc, #120]	@ (8007b1c <chk_lock+0xdc>)
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	440b      	add	r3, r1
 8007ab0:	3308      	adds	r3, #8
 8007ab2:	881a      	ldrh	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007aba:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d102      	bne.n	8007ac6 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8007ac0:	e007      	b.n	8007ad2 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d9c0      	bls.n	8007a54 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d109      	bne.n	8007aec <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d102      	bne.n	8007ae4 <chk_lock+0xa4>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d101      	bne.n	8007ae8 <chk_lock+0xa8>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	e013      	b.n	8007b10 <chk_lock+0xd0>
 8007ae8:	2312      	movs	r3, #18
 8007aea:	e011      	b.n	8007b10 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10b      	bne.n	8007b0a <chk_lock+0xca>
 8007af2:	490a      	ldr	r1, [pc, #40]	@ (8007b1c <chk_lock+0xdc>)
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4613      	mov	r3, r2
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	4413      	add	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	440b      	add	r3, r1
 8007b00:	330a      	adds	r3, #10
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b08:	d101      	bne.n	8007b0e <chk_lock+0xce>
 8007b0a:	2310      	movs	r3, #16
 8007b0c:	e000      	b.n	8007b10 <chk_lock+0xd0>
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bc80      	pop	{r7}
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	200025dc 	.word	0x200025dc

08007b20 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007b26:	2300      	movs	r3, #0
 8007b28:	607b      	str	r3, [r7, #4]
 8007b2a:	e002      	b.n	8007b32 <enq_lock+0x12>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	607b      	str	r3, [r7, #4]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d809      	bhi.n	8007b4c <enq_lock+0x2c>
 8007b38:	490a      	ldr	r1, [pc, #40]	@ (8007b64 <enq_lock+0x44>)
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	4413      	add	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	440b      	add	r3, r1
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1ef      	bne.n	8007b2c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	bf14      	ite	ne
 8007b52:	2301      	movne	r3, #1
 8007b54:	2300      	moveq	r3, #0
 8007b56:	b2db      	uxtb	r3, r3
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bc80      	pop	{r7}
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	200025dc 	.word	0x200025dc

08007b68 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007b72:	2300      	movs	r3, #0
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	e02e      	b.n	8007bd6 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8007b78:	4958      	ldr	r1, [pc, #352]	@ (8007cdc <inc_lock+0x174>)
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	005b      	lsls	r3, r3, #1
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	440b      	add	r3, r1
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d11d      	bne.n	8007bd0 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8007b94:	4951      	ldr	r1, [pc, #324]	@ (8007cdc <inc_lock+0x174>)
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	005b      	lsls	r3, r3, #1
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	440b      	add	r3, r1
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d10e      	bne.n	8007bd0 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8007bb2:	494a      	ldr	r1, [pc, #296]	@ (8007cdc <inc_lock+0x174>)
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	440b      	add	r3, r1
 8007bc0:	3308      	adds	r3, #8
 8007bc2:	881a      	ldrh	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bca:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d006      	beq.n	8007bde <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d9cd      	bls.n	8007b78 <inc_lock+0x10>
 8007bdc:	e000      	b.n	8007be0 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8007bde:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d148      	bne.n	8007c78 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	e002      	b.n	8007bf2 <inc_lock+0x8a>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	60fb      	str	r3, [r7, #12]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d809      	bhi.n	8007c0c <inc_lock+0xa4>
 8007bf8:	4938      	ldr	r1, [pc, #224]	@ (8007cdc <inc_lock+0x174>)
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	005b      	lsls	r3, r3, #1
 8007c00:	4413      	add	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	440b      	add	r3, r1
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1ef      	bne.n	8007bec <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d101      	bne.n	8007c16 <inc_lock+0xae>
 8007c12:	2300      	movs	r3, #0
 8007c14:	e05d      	b.n	8007cd2 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c1c:	6819      	ldr	r1, [r3, #0]
 8007c1e:	482f      	ldr	r0, [pc, #188]	@ (8007cdc <inc_lock+0x174>)
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	4613      	mov	r3, r2
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	4413      	add	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4403      	add	r3, r0
 8007c2c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c34:	6899      	ldr	r1, [r3, #8]
 8007c36:	4829      	ldr	r0, [pc, #164]	@ (8007cdc <inc_lock+0x174>)
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	005b      	lsls	r3, r3, #1
 8007c3e:	4413      	add	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4403      	add	r3, r0
 8007c44:	3304      	adds	r3, #4
 8007c46:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c4e:	88d8      	ldrh	r0, [r3, #6]
 8007c50:	4922      	ldr	r1, [pc, #136]	@ (8007cdc <inc_lock+0x174>)
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	4613      	mov	r3, r2
 8007c56:	005b      	lsls	r3, r3, #1
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	440b      	add	r3, r1
 8007c5e:	3308      	adds	r3, #8
 8007c60:	4602      	mov	r2, r0
 8007c62:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8007c64:	491d      	ldr	r1, [pc, #116]	@ (8007cdc <inc_lock+0x174>)
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	4413      	add	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	440b      	add	r3, r1
 8007c72:	330a      	adds	r3, #10
 8007c74:	2200      	movs	r2, #0
 8007c76:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00c      	beq.n	8007c98 <inc_lock+0x130>
 8007c7e:	4917      	ldr	r1, [pc, #92]	@ (8007cdc <inc_lock+0x174>)
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	4613      	mov	r3, r2
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	440b      	add	r3, r1
 8007c8c:	330a      	adds	r3, #10
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <inc_lock+0x130>
 8007c94:	2300      	movs	r3, #0
 8007c96:	e01c      	b.n	8007cd2 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10b      	bne.n	8007cb6 <inc_lock+0x14e>
 8007c9e:	490f      	ldr	r1, [pc, #60]	@ (8007cdc <inc_lock+0x174>)
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	4413      	add	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	440b      	add	r3, r1
 8007cac:	330a      	adds	r3, #10
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	b299      	uxth	r1, r3
 8007cb4:	e001      	b.n	8007cba <inc_lock+0x152>
 8007cb6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007cba:	4808      	ldr	r0, [pc, #32]	@ (8007cdc <inc_lock+0x174>)
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	4413      	add	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4403      	add	r3, r0
 8007cc8:	330a      	adds	r3, #10
 8007cca:	460a      	mov	r2, r1
 8007ccc:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3301      	adds	r3, #1
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bc80      	pop	{r7}
 8007cda:	4770      	bx	lr
 8007cdc:	200025dc 	.word	0x200025dc

08007ce0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3b01      	subs	r3, #1
 8007cec:	607b      	str	r3, [r7, #4]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d82e      	bhi.n	8007d52 <dec_lock+0x72>
		n = Files[i].ctr;
 8007cf4:	491b      	ldr	r1, [pc, #108]	@ (8007d64 <dec_lock+0x84>)
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	4413      	add	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	440b      	add	r3, r1
 8007d02:	330a      	adds	r3, #10
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007d08:	89fb      	ldrh	r3, [r7, #14]
 8007d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d0e:	d101      	bne.n	8007d14 <dec_lock+0x34>
 8007d10:	2300      	movs	r3, #0
 8007d12:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8007d14:	89fb      	ldrh	r3, [r7, #14]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <dec_lock+0x40>
 8007d1a:	89fb      	ldrh	r3, [r7, #14]
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007d20:	4910      	ldr	r1, [pc, #64]	@ (8007d64 <dec_lock+0x84>)
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	4613      	mov	r3, r2
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	440b      	add	r3, r1
 8007d2e:	330a      	adds	r3, #10
 8007d30:	89fa      	ldrh	r2, [r7, #14]
 8007d32:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007d34:	89fb      	ldrh	r3, [r7, #14]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d108      	bne.n	8007d4c <dec_lock+0x6c>
 8007d3a:	490a      	ldr	r1, [pc, #40]	@ (8007d64 <dec_lock+0x84>)
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	005b      	lsls	r3, r3, #1
 8007d42:	4413      	add	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	2200      	movs	r2, #0
 8007d4a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	737b      	strb	r3, [r7, #13]
 8007d50:	e001      	b.n	8007d56 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007d52:	2302      	movs	r3, #2
 8007d54:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007d56:	7b7b      	ldrb	r3, [r7, #13]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bc80      	pop	{r7}
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	200025dc 	.word	0x200025dc

08007d68 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007d70:	2300      	movs	r3, #0
 8007d72:	60fb      	str	r3, [r7, #12]
 8007d74:	e016      	b.n	8007da4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007d76:	4910      	ldr	r1, [pc, #64]	@ (8007db8 <clear_lock+0x50>)
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	005b      	lsls	r3, r3, #1
 8007d7e:	4413      	add	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	440b      	add	r3, r1
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d108      	bne.n	8007d9e <clear_lock+0x36>
 8007d8c:	490a      	ldr	r1, [pc, #40]	@ (8007db8 <clear_lock+0x50>)
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	4613      	mov	r3, r2
 8007d92:	005b      	lsls	r3, r3, #1
 8007d94:	4413      	add	r3, r2
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	440b      	add	r3, r1
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3301      	adds	r3, #1
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d9e5      	bls.n	8007d76 <clear_lock+0xe>
	}
}
 8007daa:	bf00      	nop
 8007dac:	bf00      	nop
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bc80      	pop	{r7}
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	200025dc 	.word	0x200025dc

08007dbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dce:	791b      	ldrb	r3, [r3, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d040      	beq.n	8007e56 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ddc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007de4:	7858      	ldrb	r0, [r3, #1]
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	2301      	movs	r3, #1
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	f7ff fd72 	bl	80078d4 <disk_write>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d002      	beq.n	8007dfc <sync_window+0x40>
			res = FR_DISK_ERR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	73fb      	strb	r3, [r7, #15]
 8007dfa:	e02c      	b.n	8007e56 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e02:	2200      	movs	r2, #0
 8007e04:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	1ad2      	subs	r2, r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d21b      	bcs.n	8007e56 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e24:	78db      	ldrb	r3, [r3, #3]
 8007e26:	613b      	str	r3, [r7, #16]
 8007e28:	e012      	b.n	8007e50 <sync_window+0x94>
					wsect += fs->fsize;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	4413      	add	r3, r2
 8007e36:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e3e:	7858      	ldrb	r0, [r3, #1]
 8007e40:	6879      	ldr	r1, [r7, #4]
 8007e42:	2301      	movs	r3, #1
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	f7ff fd45 	bl	80078d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	613b      	str	r3, [r7, #16]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d8e9      	bhi.n	8007e2a <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8007e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3718      	adds	r7, #24
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d01e      	beq.n	8007eba <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7ff ff9d 	bl	8007dbc <sync_window>
 8007e82:	4603      	mov	r3, r0
 8007e84:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d116      	bne.n	8007eba <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e92:	7858      	ldrb	r0, [r3, #1]
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	2301      	movs	r3, #1
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	f7ff fcfb 	bl	8007894 <disk_read>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d004      	beq.n	8007eae <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f7ff ff75 	bl	8007dbc <sync_window>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007ed6:	7bfb      	ldrb	r3, [r7, #15]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f040 80ad 	bne.w	8008038 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	2b03      	cmp	r3, #3
 8007ee8:	f040 8098 	bne.w	800801c <sync_fs+0x158>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ef2:	795b      	ldrb	r3, [r3, #5]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	f040 8091 	bne.w	800801c <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f02:	895b      	ldrh	r3, [r3, #10]
 8007f04:	461a      	mov	r2, r3
 8007f06:	2100      	movs	r1, #0
 8007f08:	f7ff fd40 	bl	800798c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2255      	movs	r2, #85	@ 0x55
 8007f10:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	22aa      	movs	r2, #170	@ 0xaa
 8007f18:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2252      	movs	r2, #82	@ 0x52
 8007f20:	701a      	strb	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2252      	movs	r2, #82	@ 0x52
 8007f26:	705a      	strb	r2, [r3, #1]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2261      	movs	r2, #97	@ 0x61
 8007f2c:	709a      	strb	r2, [r3, #2]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2241      	movs	r2, #65	@ 0x41
 8007f32:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2272      	movs	r2, #114	@ 0x72
 8007f38:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2272      	movs	r2, #114	@ 0x72
 8007f40:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2241      	movs	r2, #65	@ 0x41
 8007f48:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2261      	movs	r2, #97	@ 0x61
 8007f50:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	0a1b      	lsrs	r3, r3, #8
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	0c1b      	lsrs	r3, r3, #16
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	0e1b      	lsrs	r3, r3, #24
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	0a1b      	lsrs	r3, r3, #8
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	b2da      	uxtb	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	0c1b      	lsrs	r3, r3, #16
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	0e1b      	lsrs	r3, r3, #24
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fee:	69db      	ldr	r3, [r3, #28]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007ff8:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008000:	7858      	ldrb	r0, [r3, #1]
 8008002:	6879      	ldr	r1, [r7, #4]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800800a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800800c:	2301      	movs	r3, #1
 800800e:	f7ff fc61 	bl	80078d4 <disk_write>
			fs->fsi_flag = 0;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008018:	2200      	movs	r2, #0
 800801a:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008022:	785b      	ldrb	r3, [r3, #1]
 8008024:	2200      	movs	r2, #0
 8008026:	2100      	movs	r1, #0
 8008028:	4618      	mov	r0, r3
 800802a:	f7ff fc73 	bl	8007914 <disk_ioctl>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8008034:	2301      	movs	r3, #1
 8008036:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008038:	7bfb      	ldrb	r3, [r7, #15]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008042:	b480      	push	{r7}
 8008044:	b083      	sub	sp, #12
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	3b02      	subs	r3, #2
 8008050:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	3b02      	subs	r3, #2
 800805c:	683a      	ldr	r2, [r7, #0]
 800805e:	429a      	cmp	r2, r3
 8008060:	d301      	bcc.n	8008066 <clust2sect+0x24>
 8008062:	2300      	movs	r3, #0
 8008064:	e00c      	b.n	8008080 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800806c:	789b      	ldrb	r3, [r3, #2]
 800806e:	461a      	mov	r2, r3
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	fb03 f202 	mul.w	r2, r3, r2
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800807c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800807e:	4413      	add	r3, r2
}
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	bc80      	pop	{r7}
 8008088:	4770      	bx	lr

0800808a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b086      	sub	sp, #24
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
 8008092:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d906      	bls.n	80080a8 <get_fat+0x1e>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d302      	bcc.n	80080ae <get_fat+0x24>
		val = 1;	/* Internal error */
 80080a8:	2301      	movs	r3, #1
 80080aa:	617b      	str	r3, [r7, #20]
 80080ac:	e0e3      	b.n	8008276 <get_fat+0x1ec>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80080ae:	f04f 33ff 	mov.w	r3, #4294967295
 80080b2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b03      	cmp	r3, #3
 80080be:	f000 8097 	beq.w	80081f0 <get_fat+0x166>
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	f300 80cd 	bgt.w	8008262 <get_fat+0x1d8>
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d002      	beq.n	80080d2 <get_fat+0x48>
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d05e      	beq.n	800818e <get_fat+0x104>
 80080d0:	e0c7      	b.n	8008262 <get_fat+0x1d8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	085b      	lsrs	r3, r3, #1
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	4413      	add	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080e6:	6a1a      	ldr	r2, [r3, #32]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080ee:	895b      	ldrh	r3, [r3, #10]
 80080f0:	4619      	mov	r1, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80080f8:	4413      	add	r3, r2
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff feaf 	bl	8007e60 <move_window>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	f040 80af 	bne.w	8008268 <get_fat+0x1de>
			wc = fs->win.d8[bc++ % SS(fs)];
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	1c5a      	adds	r2, r3, #1
 800810e:	60fa      	str	r2, [r7, #12]
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008116:	8952      	ldrh	r2, [r2, #10]
 8008118:	fbb3 f1f2 	udiv	r1, r3, r2
 800811c:	fb01 f202 	mul.w	r2, r1, r2
 8008120:	1a9b      	subs	r3, r3, r2
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	5cd3      	ldrb	r3, [r2, r3]
 8008126:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800812e:	6a1a      	ldr	r2, [r3, #32]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008136:	895b      	ldrh	r3, [r3, #10]
 8008138:	4619      	mov	r1, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008140:	4413      	add	r3, r2
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7ff fe8b 	bl	8007e60 <move_window>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	f040 808d 	bne.w	800826c <get_fat+0x1e2>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008158:	895b      	ldrh	r3, [r3, #10]
 800815a:	461a      	mov	r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008162:	fb01 f202 	mul.w	r2, r1, r2
 8008166:	1a9b      	subs	r3, r3, r2
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	5cd3      	ldrb	r3, [r2, r3]
 800816c:	021b      	lsls	r3, r3, #8
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	4313      	orrs	r3, r2
 8008172:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	d002      	beq.n	8008184 <get_fat+0xfa>
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	091b      	lsrs	r3, r3, #4
 8008182:	e002      	b.n	800818a <get_fat+0x100>
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800818a:	617b      	str	r3, [r7, #20]
			break;
 800818c:	e073      	b.n	8008276 <get_fat+0x1ec>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008194:	6a1a      	ldr	r2, [r3, #32]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800819c:	895b      	ldrh	r3, [r3, #10]
 800819e:	085b      	lsrs	r3, r3, #1
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	4619      	mov	r1, r3
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80081aa:	4413      	add	r3, r2
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7ff fe56 	bl	8007e60 <move_window>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d15a      	bne.n	8008270 <get_fat+0x1e6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80081c4:	8952      	ldrh	r2, [r2, #10]
 80081c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80081ca:	fb01 f202 	mul.w	r2, r1, r2
 80081ce:	1a9b      	subs	r3, r3, r2
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	4413      	add	r3, r2
 80081d4:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	3301      	adds	r3, #1
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	021b      	lsls	r3, r3, #8
 80081de:	b21a      	sxth	r2, r3
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	b21b      	sxth	r3, r3
 80081e6:	4313      	orrs	r3, r2
 80081e8:	b21b      	sxth	r3, r3
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	617b      	str	r3, [r7, #20]
			break;
 80081ee:	e042      	b.n	8008276 <get_fat+0x1ec>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081f6:	6a1a      	ldr	r2, [r3, #32]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081fe:	895b      	ldrh	r3, [r3, #10]
 8008200:	089b      	lsrs	r3, r3, #2
 8008202:	b29b      	uxth	r3, r3
 8008204:	4619      	mov	r1, r3
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	fbb3 f3f1 	udiv	r3, r3, r1
 800820c:	4413      	add	r3, r2
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff fe25 	bl	8007e60 <move_window>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d12b      	bne.n	8008274 <get_fat+0x1ea>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008226:	8952      	ldrh	r2, [r2, #10]
 8008228:	fbb3 f1f2 	udiv	r1, r3, r2
 800822c:	fb01 f202 	mul.w	r2, r1, r2
 8008230:	1a9b      	subs	r3, r3, r2
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	4413      	add	r3, r2
 8008236:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	3303      	adds	r3, #3
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	061a      	lsls	r2, r3, #24
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	3302      	adds	r3, #2
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	041b      	lsls	r3, r3, #16
 8008248:	431a      	orrs	r2, r3
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	3301      	adds	r3, #1
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	021b      	lsls	r3, r3, #8
 8008252:	4313      	orrs	r3, r2
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	7812      	ldrb	r2, [r2, #0]
 8008258:	4313      	orrs	r3, r2
 800825a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800825e:	617b      	str	r3, [r7, #20]
			break;
 8008260:	e009      	b.n	8008276 <get_fat+0x1ec>

		default:
			val = 1;	/* Internal error */
 8008262:	2301      	movs	r3, #1
 8008264:	617b      	str	r3, [r7, #20]
 8008266:	e006      	b.n	8008276 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008268:	bf00      	nop
 800826a:	e004      	b.n	8008276 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800826c:	bf00      	nop
 800826e:	e002      	b.n	8008276 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008270:	bf00      	nop
 8008272:	e000      	b.n	8008276 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008274:	bf00      	nop
		}
	}

	return val;
 8008276:	697b      	ldr	r3, [r7, #20]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d906      	bls.n	80082a0 <put_fat+0x20>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	429a      	cmp	r2, r3
 800829e:	d302      	bcc.n	80082a6 <put_fat+0x26>
		res = FR_INT_ERR;
 80082a0:	2302      	movs	r3, #2
 80082a2:	77fb      	strb	r3, [r7, #31]
 80082a4:	e13a      	b.n	800851c <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	f000 80d0 	beq.w	8008454 <put_fat+0x1d4>
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	f300 8127 	bgt.w	8008508 <put_fat+0x288>
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d003      	beq.n	80082c6 <put_fat+0x46>
 80082be:	2b02      	cmp	r3, #2
 80082c0:	f000 808f 	beq.w	80083e2 <put_fat+0x162>
 80082c4:	e120      	b.n	8008508 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	617b      	str	r3, [r7, #20]
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	085b      	lsrs	r3, r3, #1
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	4413      	add	r3, r2
 80082d2:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082da:	6a1a      	ldr	r2, [r3, #32]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082e2:	895b      	ldrh	r3, [r3, #10]
 80082e4:	4619      	mov	r1, r3
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80082ec:	4413      	add	r3, r2
 80082ee:	4619      	mov	r1, r3
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f7ff fdb5 	bl	8007e60 <move_window>
 80082f6:	4603      	mov	r3, r0
 80082f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80082fa:	7ffb      	ldrb	r3, [r7, #31]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f040 8106 	bne.w	800850e <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	617a      	str	r2, [r7, #20]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800830e:	8952      	ldrh	r2, [r2, #10]
 8008310:	fbb3 f1f2 	udiv	r1, r3, r2
 8008314:	fb01 f202 	mul.w	r2, r1, r2
 8008318:	1a9b      	subs	r3, r3, r2
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	4413      	add	r3, r2
 800831e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00d      	beq.n	8008346 <put_fat+0xc6>
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	b25b      	sxtb	r3, r3
 8008330:	f003 030f 	and.w	r3, r3, #15
 8008334:	b25a      	sxtb	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	b2db      	uxtb	r3, r3
 800833a:	011b      	lsls	r3, r3, #4
 800833c:	b25b      	sxtb	r3, r3
 800833e:	4313      	orrs	r3, r2
 8008340:	b25b      	sxtb	r3, r3
 8008342:	b2db      	uxtb	r3, r3
 8008344:	e001      	b.n	800834a <put_fat+0xca>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	b2db      	uxtb	r3, r3
 800834a:	69ba      	ldr	r2, [r7, #24]
 800834c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008354:	2201      	movs	r2, #1
 8008356:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800835e:	6a1a      	ldr	r2, [r3, #32]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008366:	895b      	ldrh	r3, [r3, #10]
 8008368:	4619      	mov	r1, r3
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008370:	4413      	add	r3, r2
 8008372:	4619      	mov	r1, r3
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f7ff fd73 	bl	8007e60 <move_window>
 800837a:	4603      	mov	r3, r0
 800837c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800837e:	7ffb      	ldrb	r3, [r7, #31]
 8008380:	2b00      	cmp	r3, #0
 8008382:	f040 80c6 	bne.w	8008512 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800838c:	895b      	ldrh	r3, [r3, #10]
 800838e:	461a      	mov	r2, r3
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	fbb3 f1f2 	udiv	r1, r3, r2
 8008396:	fb01 f202 	mul.w	r2, r1, r2
 800839a:	1a9b      	subs	r3, r3, r2
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	4413      	add	r3, r2
 80083a0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d003      	beq.n	80083b4 <put_fat+0x134>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	091b      	lsrs	r3, r3, #4
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	e00e      	b.n	80083d2 <put_fat+0x152>
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	b25b      	sxtb	r3, r3
 80083ba:	f023 030f 	bic.w	r3, r3, #15
 80083be:	b25a      	sxtb	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	0a1b      	lsrs	r3, r3, #8
 80083c4:	b25b      	sxtb	r3, r3
 80083c6:	f003 030f 	and.w	r3, r3, #15
 80083ca:	b25b      	sxtb	r3, r3
 80083cc:	4313      	orrs	r3, r2
 80083ce:	b25b      	sxtb	r3, r3
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	69ba      	ldr	r2, [r7, #24]
 80083d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083dc:	2201      	movs	r2, #1
 80083de:	711a      	strb	r2, [r3, #4]
			break;
 80083e0:	e09c      	b.n	800851c <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083e8:	6a1a      	ldr	r2, [r3, #32]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083f0:	895b      	ldrh	r3, [r3, #10]
 80083f2:	085b      	lsrs	r3, r3, #1
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	4619      	mov	r1, r3
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80083fe:	4413      	add	r3, r2
 8008400:	4619      	mov	r1, r3
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f7ff fd2c 	bl	8007e60 <move_window>
 8008408:	4603      	mov	r3, r0
 800840a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800840c:	7ffb      	ldrb	r3, [r7, #31]
 800840e:	2b00      	cmp	r3, #0
 8008410:	f040 8081 	bne.w	8008516 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	005b      	lsls	r3, r3, #1
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800841e:	8952      	ldrh	r2, [r2, #10]
 8008420:	fbb3 f1f2 	udiv	r1, r3, r2
 8008424:	fb01 f202 	mul.w	r2, r1, r2
 8008428:	1a9b      	subs	r3, r3, r2
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	4413      	add	r3, r2
 800842e:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	b2da      	uxtb	r2, r3
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	701a      	strb	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	b29b      	uxth	r3, r3
 800843c:	0a1b      	lsrs	r3, r3, #8
 800843e:	b29a      	uxth	r2, r3
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	3301      	adds	r3, #1
 8008444:	b2d2      	uxtb	r2, r2
 8008446:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800844e:	2201      	movs	r2, #1
 8008450:	711a      	strb	r2, [r3, #4]
			break;
 8008452:	e063      	b.n	800851c <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800845a:	6a1a      	ldr	r2, [r3, #32]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008462:	895b      	ldrh	r3, [r3, #10]
 8008464:	089b      	lsrs	r3, r3, #2
 8008466:	b29b      	uxth	r3, r3
 8008468:	4619      	mov	r1, r3
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008470:	4413      	add	r3, r2
 8008472:	4619      	mov	r1, r3
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f7ff fcf3 	bl	8007e60 <move_window>
 800847a:	4603      	mov	r3, r0
 800847c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800847e:	7ffb      	ldrb	r3, [r7, #31]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d14a      	bne.n	800851a <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800848e:	8952      	ldrh	r2, [r2, #10]
 8008490:	fbb3 f1f2 	udiv	r1, r3, r2
 8008494:	fb01 f202 	mul.w	r2, r1, r2
 8008498:	1a9b      	subs	r3, r3, r2
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	4413      	add	r3, r2
 800849e:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	3303      	adds	r3, #3
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	061a      	lsls	r2, r3, #24
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	3302      	adds	r3, #2
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	041b      	lsls	r3, r3, #16
 80084b0:	431a      	orrs	r2, r3
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	3301      	adds	r3, #1
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	021b      	lsls	r3, r3, #8
 80084ba:	4313      	orrs	r3, r2
 80084bc:	69ba      	ldr	r2, [r7, #24]
 80084be:	7812      	ldrb	r2, [r2, #0]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	701a      	strb	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	0a1b      	lsrs	r3, r3, #8
 80084da:	b29a      	uxth	r2, r3
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	3301      	adds	r3, #1
 80084e0:	b2d2      	uxtb	r2, r2
 80084e2:	701a      	strb	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	0c1a      	lsrs	r2, r3, #16
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	3302      	adds	r3, #2
 80084ec:	b2d2      	uxtb	r2, r2
 80084ee:	701a      	strb	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	0e1a      	lsrs	r2, r3, #24
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	3303      	adds	r3, #3
 80084f8:	b2d2      	uxtb	r2, r2
 80084fa:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008502:	2201      	movs	r2, #1
 8008504:	711a      	strb	r2, [r3, #4]
			break;
 8008506:	e009      	b.n	800851c <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8008508:	2302      	movs	r3, #2
 800850a:	77fb      	strb	r3, [r7, #31]
 800850c:	e006      	b.n	800851c <put_fat+0x29c>
			if (res != FR_OK) break;
 800850e:	bf00      	nop
 8008510:	e004      	b.n	800851c <put_fat+0x29c>
			if (res != FR_OK) break;
 8008512:	bf00      	nop
 8008514:	e002      	b.n	800851c <put_fat+0x29c>
			if (res != FR_OK) break;
 8008516:	bf00      	nop
 8008518:	e000      	b.n	800851c <put_fat+0x29c>
			if (res != FR_OK) break;
 800851a:	bf00      	nop
		}
	}

	return res;
 800851c:	7ffb      	ldrb	r3, [r7, #31]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3720      	adds	r7, #32
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b084      	sub	sp, #16
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
 800852e:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d906      	bls.n	8008544 <remove_chain+0x1e>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	429a      	cmp	r2, r3
 8008542:	d302      	bcc.n	800854a <remove_chain+0x24>
		res = FR_INT_ERR;
 8008544:	2302      	movs	r3, #2
 8008546:	73fb      	strb	r3, [r7, #15]
 8008548:	e049      	b.n	80085de <remove_chain+0xb8>

	} else {
		res = FR_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800854e:	e03b      	b.n	80085c8 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8008550:	6839      	ldr	r1, [r7, #0]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7ff fd99 	bl	800808a <get_fat>
 8008558:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d03b      	beq.n	80085d8 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d102      	bne.n	800856c <remove_chain+0x46>
 8008566:	2302      	movs	r3, #2
 8008568:	73fb      	strb	r3, [r7, #15]
 800856a:	e038      	b.n	80085de <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008572:	d102      	bne.n	800857a <remove_chain+0x54>
 8008574:	2301      	movs	r3, #1
 8008576:	73fb      	strb	r3, [r7, #15]
 8008578:	e031      	b.n	80085de <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800857a:	2200      	movs	r2, #0
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7ff fe7e 	bl	8008280 <put_fat>
 8008584:	4603      	mov	r3, r0
 8008586:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d126      	bne.n	80085dc <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859a:	d013      	beq.n	80085c4 <remove_chain+0x9e>
				fs->free_clust++;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	3301      	adds	r3, #1
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80085ac:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085b4:	795b      	ldrb	r3, [r3, #5]
 80085b6:	f043 0301 	orr.w	r3, r3, #1
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085c2:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085ce:	695b      	ldr	r3, [r3, #20]
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d3bc      	bcc.n	8008550 <remove_chain+0x2a>
 80085d6:	e002      	b.n	80085de <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 80085d8:	bf00      	nop
 80085da:	e000      	b.n	80085de <remove_chain+0xb8>
			if (res != FR_OK) break;
 80085dc:	bf00      	nop
		}
	}

	return res;
 80085de:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d111      	bne.n	800861c <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d006      	beq.n	8008616 <create_chain+0x2e>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	429a      	cmp	r2, r3
 8008614:	d31d      	bcc.n	8008652 <create_chain+0x6a>
 8008616:	2301      	movs	r3, #1
 8008618:	613b      	str	r3, [r7, #16]
 800861a:	e01a      	b.n	8008652 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800861c:	6839      	ldr	r1, [r7, #0]
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7ff fd33 	bl	800808a <get_fat>
 8008624:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d801      	bhi.n	8008630 <create_chain+0x48>
 800862c:	2301      	movs	r3, #1
 800862e:	e07f      	b.n	8008730 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008636:	d101      	bne.n	800863c <create_chain+0x54>
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	e079      	b.n	8008730 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	429a      	cmp	r2, r3
 8008648:	d201      	bcs.n	800864e <create_chain+0x66>
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	e070      	b.n	8008730 <create_chain+0x148>
		scl = clst;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	3301      	adds	r3, #1
 800865a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008662:	695b      	ldr	r3, [r3, #20]
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	429a      	cmp	r2, r3
 8008668:	d307      	bcc.n	800867a <create_chain+0x92>
			ncl = 2;
 800866a:	2302      	movs	r3, #2
 800866c:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	429a      	cmp	r2, r3
 8008674:	d901      	bls.n	800867a <create_chain+0x92>
 8008676:	2300      	movs	r3, #0
 8008678:	e05a      	b.n	8008730 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800867a:	6979      	ldr	r1, [r7, #20]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f7ff fd04 	bl	800808a <get_fat>
 8008682:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00e      	beq.n	80086a8 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008690:	d002      	beq.n	8008698 <create_chain+0xb0>
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d101      	bne.n	800869c <create_chain+0xb4>
			return cs;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	e049      	b.n	8008730 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d1d8      	bne.n	8008656 <create_chain+0x6e>
 80086a4:	2300      	movs	r3, #0
 80086a6:	e043      	b.n	8008730 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 80086a8:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80086aa:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 80086ae:	6979      	ldr	r1, [r7, #20]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f7ff fde5 	bl	8008280 <put_fat>
 80086b6:	4603      	mov	r3, r0
 80086b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d109      	bne.n	80086d4 <create_chain+0xec>
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d006      	beq.n	80086d4 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7ff fdd8 	bl	8008280 <put_fat>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d121      	bne.n	800871e <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086e0:	461a      	mov	r2, r3
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f2:	d01c      	beq.n	800872e <create_chain+0x146>
			fs->free_clust--;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	3b01      	subs	r3, #1
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008704:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800870c:	795b      	ldrb	r3, [r3, #5]
 800870e:	f043 0301 	orr.w	r3, r3, #1
 8008712:	b2da      	uxtb	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800871a:	715a      	strb	r2, [r3, #5]
 800871c:	e007      	b.n	800872e <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800871e:	7bfb      	ldrb	r3, [r7, #15]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d102      	bne.n	800872a <create_chain+0x142>
 8008724:	f04f 33ff 	mov.w	r3, #4294967295
 8008728:	e000      	b.n	800872c <create_chain+0x144>
 800872a:	2301      	movs	r3, #1
 800872c:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800872e:	697b      	ldr	r3, [r7, #20]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874a:	3304      	adds	r3, #4
 800874c:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800875a:	895b      	ldrh	r3, [r3, #10]
 800875c:	461a      	mov	r2, r3
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	fbb3 f3f2 	udiv	r3, r3, r2
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800876a:	6812      	ldr	r2, [r2, #0]
 800876c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008770:	7892      	ldrb	r2, [r2, #2]
 8008772:	fbb3 f3f2 	udiv	r3, r3, r2
 8008776:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	1d1a      	adds	r2, r3, #4
 800877c:	613a      	str	r2, [r7, #16]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d101      	bne.n	800878c <clmt_clust+0x54>
 8008788:	2300      	movs	r3, #0
 800878a:	e010      	b.n	80087ae <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	429a      	cmp	r2, r3
 8008792:	d307      	bcc.n	80087a4 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8008794:	697a      	ldr	r2, [r7, #20]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	617b      	str	r3, [r7, #20]
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	3304      	adds	r3, #4
 80087a0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80087a2:	e7e9      	b.n	8008778 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 80087a4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	4413      	add	r3, r2
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	371c      	adds	r7, #28
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bc80      	pop	{r7}
 80087b6:	4770      	bx	lr

080087b8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087cc:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d009      	beq.n	80087f2 <dir_sdi+0x3a>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d301      	bcc.n	80087f6 <dir_sdi+0x3e>
		return FR_INT_ERR;
 80087f2:	2302      	movs	r3, #2
 80087f4:	e0aa      	b.n	800894c <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d110      	bne.n	800881e <dir_sdi+0x66>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	2b03      	cmp	r3, #3
 800880c:	d107      	bne.n	800881e <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800881a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800881c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d115      	bne.n	8008850 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008830:	891b      	ldrh	r3, [r3, #8]
 8008832:	461a      	mov	r2, r3
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	4293      	cmp	r3, r2
 8008838:	d301      	bcc.n	800883e <dir_sdi+0x86>
			return FR_INT_ERR;
 800883a:	2302      	movs	r3, #2
 800883c:	e086      	b.n	800894c <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800884a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800884c:	613b      	str	r3, [r7, #16]
 800884e:	e043      	b.n	80088d8 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800885c:	895b      	ldrh	r3, [r3, #10]
 800885e:	095b      	lsrs	r3, r3, #5
 8008860:	b29b      	uxth	r3, r3
 8008862:	461a      	mov	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008870:	789b      	ldrb	r3, [r3, #2]
 8008872:	fb02 f303 	mul.w	r3, r2, r3
 8008876:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8008878:	e021      	b.n	80088be <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	6979      	ldr	r1, [r7, #20]
 8008884:	4618      	mov	r0, r3
 8008886:	f7ff fc00 	bl	800808a <get_fat>
 800888a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008892:	d101      	bne.n	8008898 <dir_sdi+0xe0>
 8008894:	2301      	movs	r3, #1
 8008896:	e059      	b.n	800894c <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d909      	bls.n	80088b2 <dir_sdi+0xfa>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d301      	bcc.n	80088b6 <dir_sdi+0xfe>
				return FR_INT_ERR;
 80088b2:	2302      	movs	r3, #2
 80088b4:	e04a      	b.n	800894c <dir_sdi+0x194>
			idx -= ic;
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d2d9      	bcs.n	800887a <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6979      	ldr	r1, [r7, #20]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7ff fbb6 	bl	8008042 <clust2sect>
 80088d6:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088de:	461a      	mov	r2, r3
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <dir_sdi+0x136>
 80088ea:	2302      	movs	r3, #2
 80088ec:	e02e      	b.n	800894c <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088fa:	895b      	ldrh	r3, [r3, #10]
 80088fc:	095b      	lsrs	r3, r3, #5
 80088fe:	b29b      	uxth	r3, r3
 8008900:	461a      	mov	r2, r3
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	fbb3 f2f2 	udiv	r2, r3, r2
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	4413      	add	r3, r2
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008912:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4618      	mov	r0, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800892a:	895b      	ldrh	r3, [r3, #10]
 800892c:	095b      	lsrs	r3, r3, #5
 800892e:	b29b      	uxth	r3, r3
 8008930:	461a      	mov	r2, r3
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	fbb3 f1f2 	udiv	r1, r3, r2
 8008938:	fb01 f202 	mul.w	r2, r1, r2
 800893c:	1a9b      	subs	r3, r3, r2
 800893e:	015b      	lsls	r3, r3, #5
 8008940:	4403      	add	r3, r0
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008948:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3718      	adds	r7, #24
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008954:	b590      	push	{r4, r7, lr}
 8008956:	b087      	sub	sp, #28
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008964:	88db      	ldrh	r3, [r3, #6]
 8008966:	3301      	adds	r3, #1
 8008968:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	b29b      	uxth	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d005      	beq.n	800897e <dir_next+0x2a>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d101      	bne.n	8008982 <dir_next+0x2e>
		return FR_NO_FILE;
 800897e:	2304      	movs	r3, #4
 8008980:	e12e      	b.n	8008be0 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800898e:	895b      	ldrh	r3, [r3, #10]
 8008990:	095b      	lsrs	r3, r3, #5
 8008992:	b29b      	uxth	r3, r3
 8008994:	461a      	mov	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	fbb3 f1f2 	udiv	r1, r3, r2
 800899c:	fb01 f202 	mul.w	r2, r1, r2
 80089a0:	1a9b      	subs	r3, r3, r2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f040 80fa 	bne.w	8008b9c <dir_next+0x248>
		dp->sect++;					/* Next sector */
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	3301      	adds	r3, #1
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80089b8:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d10d      	bne.n	80089e2 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089d2:	891b      	ldrh	r3, [r3, #8]
 80089d4:	461a      	mov	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	4293      	cmp	r3, r2
 80089da:	f0c0 80df 	bcc.w	8008b9c <dir_next+0x248>
				return FR_NO_FILE;
 80089de:	2304      	movs	r3, #4
 80089e0:	e0fe      	b.n	8008be0 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089ee:	895b      	ldrh	r3, [r3, #10]
 80089f0:	095b      	lsrs	r3, r3, #5
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	461a      	mov	r2, r3
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008a02:	6812      	ldr	r2, [r2, #0]
 8008a04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008a08:	7892      	ldrb	r2, [r2, #2]
 8008a0a:	3a01      	subs	r2, #1
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f040 80c4 	bne.w	8008b9c <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	4619      	mov	r1, r3
 8008a26:	4610      	mov	r0, r2
 8008a28:	f7ff fb2f 	bl	800808a <get_fat>
 8008a2c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d801      	bhi.n	8008a38 <dir_next+0xe4>
 8008a34:	2302      	movs	r3, #2
 8008a36:	e0d3      	b.n	8008be0 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3e:	d101      	bne.n	8008a44 <dir_next+0xf0>
 8008a40:	2301      	movs	r3, #1
 8008a42:	e0cd      	b.n	8008be0 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	f0c0 808e 	bcc.w	8008b76 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d101      	bne.n	8008a64 <dir_next+0x110>
 8008a60:	2304      	movs	r3, #4
 8008a62:	e0bd      	b.n	8008be0 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	4619      	mov	r1, r3
 8008a76:	4610      	mov	r0, r2
 8008a78:	f7ff fdb6 	bl	80085e8 <create_chain>
 8008a7c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <dir_next+0x134>
 8008a84:	2307      	movs	r3, #7
 8008a86:	e0ab      	b.n	8008be0 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d101      	bne.n	8008a92 <dir_next+0x13e>
 8008a8e:	2302      	movs	r3, #2
 8008a90:	e0a6      	b.n	8008be0 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a98:	d101      	bne.n	8008a9e <dir_next+0x14a>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e0a0      	b.n	8008be0 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7ff f988 	bl	8007dbc <sync_window>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <dir_next+0x162>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e094      	b.n	8008be0 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008acc:	895b      	ldrh	r3, [r3, #10]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	f7fe ff5b 	bl	800798c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ae4:	681c      	ldr	r4, [r3, #0]
 8008ae6:	6979      	ldr	r1, [r7, #20]
 8008ae8:	4610      	mov	r0, r2
 8008aea:	f7ff faaa 	bl	8008042 <clust2sect>
 8008aee:	4603      	mov	r3, r0
 8008af0:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8008af4:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008af6:	2300      	movs	r3, #0
 8008af8:	613b      	str	r3, [r7, #16]
 8008afa:	e021      	b.n	8008b40 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b08:	2201      	movs	r2, #1
 8008b0a:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7ff f951 	bl	8007dbc <sync_window>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <dir_next+0x1d0>
 8008b20:	2301      	movs	r3, #1
 8008b22:	e05d      	b.n	8008be0 <dir_next+0x28c>
						dp->fs->winsect++;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 8008b30:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008b32:	3201      	adds	r2, #1
 8008b34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b38:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	613b      	str	r3, [r7, #16]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b4c:	789b      	ldrb	r3, [r3, #2]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d3d2      	bcc.n	8008afc <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b62:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	1acb      	subs	r3, r1, r3
 8008b70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008b74:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	6979      	ldr	r1, [r7, #20]
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7ff fa58 	bl	8008042 <clust2sect>
 8008b92:	4602      	mov	r2, r0
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b9a:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ba6:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bbe:	895b      	ldrh	r3, [r3, #10]
 8008bc0:	095b      	lsrs	r3, r3, #5
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bcc:	fb01 f202 	mul.w	r2, r1, r2
 8008bd0:	1a9b      	subs	r3, r3, r2
 8008bd2:	015b      	lsls	r3, r3, #5
 8008bd4:	4403      	add	r3, r0
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008bdc:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	371c      	adds	r7, #28
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd90      	pop	{r4, r7, pc}

08008be8 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7ff fddf 	bl	80087b8 <dir_sdi>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d135      	bne.n	8008c70 <dir_alloc+0x88>
		n = 0;
 8008c04:	2300      	movs	r3, #0
 8008c06:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	4619      	mov	r1, r3
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	f7ff f920 	bl	8007e60 <move_window>
 8008c20:	4603      	mov	r3, r0
 8008c22:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d121      	bne.n	8008c6e <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c30:	695b      	ldr	r3, [r3, #20]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	2be5      	cmp	r3, #229	@ 0xe5
 8008c36:	d006      	beq.n	8008c46 <dir_alloc+0x5e>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d107      	bne.n	8008c56 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	60bb      	str	r3, [r7, #8]
 8008c4c:	68ba      	ldr	r2, [r7, #8]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d102      	bne.n	8008c5a <dir_alloc+0x72>
 8008c54:	e00c      	b.n	8008c70 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008c56:	2300      	movs	r3, #0
 8008c58:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8008c5a:	2101      	movs	r1, #1
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f7ff fe79 	bl	8008954 <dir_next>
 8008c62:	4603      	mov	r3, r0
 8008c64:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d0cd      	beq.n	8008c08 <dir_alloc+0x20>
 8008c6c:	e000      	b.n	8008c70 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8008c6e:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
 8008c72:	2b04      	cmp	r3, #4
 8008c74:	d101      	bne.n	8008c7a <dir_alloc+0x92>
 8008c76:	2307      	movs	r3, #7
 8008c78:	73fb      	strb	r3, [r7, #15]
	return res;
 8008c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	331b      	adds	r3, #27
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	021b      	lsls	r3, r3, #8
 8008c96:	b21a      	sxth	r2, r3
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	331a      	adds	r3, #26
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	b21b      	sxth	r3, r3
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	b21b      	sxth	r3, r3
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	2b03      	cmp	r3, #3
 8008cb2:	d10f      	bne.n	8008cd4 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	3315      	adds	r3, #21
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	021b      	lsls	r3, r3, #8
 8008cbc:	b21a      	sxth	r2, r3
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	3314      	adds	r3, #20
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	b21b      	sxth	r3, r3
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	b21b      	sxth	r3, r3
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	041b      	lsls	r3, r3, #16
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]

	return cl;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3714      	adds	r7, #20
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bc80      	pop	{r7}
 8008cde:	4770      	bx	lr

08008ce0 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	331a      	adds	r3, #26
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	b2d2      	uxtb	r2, r2
 8008cf2:	701a      	strb	r2, [r3, #0]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	0a1b      	lsrs	r3, r3, #8
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	331b      	adds	r3, #27
 8008d00:	b2d2      	uxtb	r2, r2
 8008d02:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	0c1a      	lsrs	r2, r3, #16
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3314      	adds	r3, #20
 8008d0c:	b2d2      	uxtb	r2, r2
 8008d0e:	701a      	strb	r2, [r3, #0]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	0c1b      	lsrs	r3, r3, #16
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	0a1b      	lsrs	r3, r3, #8
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	3315      	adds	r3, #21
 8008d1e:	b2d2      	uxtb	r2, r2
 8008d20:	701a      	strb	r2, [r3, #0]
}
 8008d22:	bf00      	nop
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bc80      	pop	{r7}
 8008d2a:	4770      	bx	lr

08008d2c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b086      	sub	sp, #24
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d3e:	1e5a      	subs	r2, r3, #1
 8008d40:	4613      	mov	r3, r2
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	4413      	add	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	613b      	str	r3, [r7, #16]
 8008d50:	2301      	movs	r3, #1
 8008d52:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8008d54:	4a2b      	ldr	r2, [pc, #172]	@ (8008e04 <cmp_lfn+0xd8>)
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	4413      	add	r3, r2
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	4413      	add	r3, r2
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	021b      	lsls	r3, r3, #8
 8008d66:	b21a      	sxth	r2, r3
 8008d68:	4926      	ldr	r1, [pc, #152]	@ (8008e04 <cmp_lfn+0xd8>)
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	440b      	add	r3, r1
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	4619      	mov	r1, r3
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	440b      	add	r3, r1
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	b21b      	sxth	r3, r3
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	b21b      	sxth	r3, r3
 8008d7e:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8008d80:	89fb      	ldrh	r3, [r7, #14]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d019      	beq.n	8008dba <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8008d86:	89bb      	ldrh	r3, [r7, #12]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f002 fc2f 	bl	800b5ec <ff_wtoupper>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	2bfe      	cmp	r3, #254	@ 0xfe
 8008d96:	d80e      	bhi.n	8008db6 <cmp_lfn+0x8a>
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	1c5a      	adds	r2, r3, #1
 8008d9c:	617a      	str	r2, [r7, #20]
 8008d9e:	005b      	lsls	r3, r3, #1
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	4413      	add	r3, r2
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f002 fc20 	bl	800b5ec <ff_wtoupper>
 8008dac:	4603      	mov	r3, r0
 8008dae:	461a      	mov	r2, r3
 8008db0:	89fb      	ldrh	r3, [r7, #14]
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d008      	beq.n	8008dc8 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8008db6:	2300      	movs	r3, #0
 8008db8:	e01f      	b.n	8008dfa <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8008dba:	89bb      	ldrh	r3, [r7, #12]
 8008dbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d001      	beq.n	8008dc8 <cmp_lfn+0x9c>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	e018      	b.n	8008dfa <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	613b      	str	r3, [r7, #16]
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	2b0c      	cmp	r3, #12
 8008dd2:	d9bf      	bls.n	8008d54 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00b      	beq.n	8008df8 <cmp_lfn+0xcc>
 8008de0:	89fb      	ldrh	r3, [r7, #14]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d008      	beq.n	8008df8 <cmp_lfn+0xcc>
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	005b      	lsls	r3, r3, #1
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	4413      	add	r3, r2
 8008dee:	881b      	ldrh	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <cmp_lfn+0xcc>
		return 0;
 8008df4:	2300      	movs	r3, #0
 8008df6:	e000      	b.n	8008dfa <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8008df8:	2301      	movs	r3, #1
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3718      	adds	r7, #24
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	0800e4a8 	.word	0x0800e4a8

08008e08 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b089      	sub	sp, #36	@ 0x24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	4611      	mov	r1, r2
 8008e14:	461a      	mov	r2, r3
 8008e16:	460b      	mov	r3, r1
 8008e18:	71fb      	strb	r3, [r7, #7]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	330d      	adds	r3, #13
 8008e22:	79ba      	ldrb	r2, [r7, #6]
 8008e24:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	330b      	adds	r3, #11
 8008e2a:	220f      	movs	r2, #15
 8008e2c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	330c      	adds	r3, #12
 8008e32:	2200      	movs	r2, #0
 8008e34:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	331a      	adds	r3, #26
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	331b      	adds	r3, #27
 8008e42:	2200      	movs	r2, #0
 8008e44:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8008e46:	79fb      	ldrb	r3, [r7, #7]
 8008e48:	1e5a      	subs	r2, r3, #1
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	005b      	lsls	r3, r3, #1
 8008e4e:	4413      	add	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	82fb      	strh	r3, [r7, #22]
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8008e5e:	8afb      	ldrh	r3, [r7, #22]
 8008e60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d007      	beq.n	8008e78 <fit_lfn+0x70>
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	61fa      	str	r2, [r7, #28]
 8008e6e:	005b      	lsls	r3, r3, #1
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	4413      	add	r3, r2
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8008e78:	4a1c      	ldr	r2, [pc, #112]	@ (8008eec <fit_lfn+0xe4>)
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	461a      	mov	r2, r3
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	4413      	add	r3, r2
 8008e86:	8afa      	ldrh	r2, [r7, #22]
 8008e88:	b2d2      	uxtb	r2, r2
 8008e8a:	701a      	strb	r2, [r3, #0]
 8008e8c:	8afb      	ldrh	r3, [r7, #22]
 8008e8e:	0a1b      	lsrs	r3, r3, #8
 8008e90:	b299      	uxth	r1, r3
 8008e92:	4a16      	ldr	r2, [pc, #88]	@ (8008eec <fit_lfn+0xe4>)
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	4413      	add	r3, r2
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	b2ca      	uxtb	r2, r1
 8008ea2:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8008ea4:	8afb      	ldrh	r3, [r7, #22]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d102      	bne.n	8008eb0 <fit_lfn+0xa8>
 8008eaa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008eae:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	61bb      	str	r3, [r7, #24]
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	2b0c      	cmp	r3, #12
 8008eba:	d9d0      	bls.n	8008e5e <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8008ebc:	8afb      	ldrh	r3, [r7, #22]
 8008ebe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d006      	beq.n	8008ed4 <fit_lfn+0xcc>
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	68fa      	ldr	r2, [r7, #12]
 8008ecc:	4413      	add	r3, r2
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d103      	bne.n	8008edc <fit_lfn+0xd4>
 8008ed4:	79fb      	ldrb	r3, [r7, #7]
 8008ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008eda:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	79fa      	ldrb	r2, [r7, #7]
 8008ee0:	701a      	strb	r2, [r3, #0]
}
 8008ee2:	bf00      	nop
 8008ee4:	3724      	adds	r7, #36	@ 0x24
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bc80      	pop	{r7}
 8008eea:	4770      	bx	lr
 8008eec:	0800e4a8 	.word	0x0800e4a8

08008ef0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08c      	sub	sp, #48	@ 0x30
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
 8008efc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008efe:	220b      	movs	r2, #11
 8008f00:	68b9      	ldr	r1, [r7, #8]
 8008f02:	68f8      	ldr	r0, [r7, #12]
 8008f04:	f7fe fd24 	bl	8007950 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	2b05      	cmp	r3, #5
 8008f0c:	d92b      	bls.n	8008f66 <gen_numname+0x76>
		sr = seq;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008f12:	e022      	b.n	8008f5a <gen_numname+0x6a>
			wc = *lfn++;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	1c9a      	adds	r2, r3, #2
 8008f18:	607a      	str	r2, [r7, #4]
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8008f1e:	2300      	movs	r3, #0
 8008f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f22:	e017      	b.n	8008f54 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	005a      	lsls	r2, r3, #1
 8008f28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	4413      	add	r3, r2
 8008f30:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008f32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008f34:	085b      	lsrs	r3, r3, #1
 8008f36:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d005      	beq.n	8008f4e <gen_numname+0x5e>
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8008f48:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8008f4c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f50:	3301      	adds	r3, #1
 8008f52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f56:	2b0f      	cmp	r3, #15
 8008f58:	d9e4      	bls.n	8008f24 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	881b      	ldrh	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1d8      	bne.n	8008f14 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008f66:	2307      	movs	r3, #7
 8008f68:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	f003 030f 	and.w	r3, r3, #15
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	3330      	adds	r3, #48	@ 0x30
 8008f76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8008f7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008f7e:	2b39      	cmp	r3, #57	@ 0x39
 8008f80:	d904      	bls.n	8008f8c <gen_numname+0x9c>
 8008f82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008f86:	3307      	adds	r3, #7
 8008f88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8008f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f8e:	1e5a      	subs	r2, r3, #1
 8008f90:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008f92:	3330      	adds	r3, #48	@ 0x30
 8008f94:	443b      	add	r3, r7
 8008f96:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8008f9a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	091b      	lsrs	r3, r3, #4
 8008fa2:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1df      	bne.n	8008f6a <gen_numname+0x7a>
	ns[i] = '~';
 8008faa:	f107 0214 	add.w	r2, r7, #20
 8008fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb0:	4413      	add	r3, r2
 8008fb2:	227e      	movs	r2, #126	@ 0x7e
 8008fb4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fba:	e002      	b.n	8008fc2 <gen_numname+0xd2>
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d205      	bcs.n	8008fd6 <gen_numname+0xe6>
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fce:	4413      	add	r3, r2
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	2b20      	cmp	r3, #32
 8008fd4:	d1f2      	bne.n	8008fbc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd8:	2b07      	cmp	r3, #7
 8008fda:	d807      	bhi.n	8008fec <gen_numname+0xfc>
 8008fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008fe2:	3330      	adds	r3, #48	@ 0x30
 8008fe4:	443b      	add	r3, r7
 8008fe6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008fea:	e000      	b.n	8008fee <gen_numname+0xfe>
 8008fec:	2120      	movs	r1, #32
 8008fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff0:	1c5a      	adds	r2, r3, #1
 8008ff2:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	460a      	mov	r2, r1
 8008ffa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ffe:	2b07      	cmp	r3, #7
 8009000:	d9e9      	bls.n	8008fd6 <gen_numname+0xe6>
}
 8009002:	bf00      	nop
 8009004:	bf00      	nop
 8009006:	3730      	adds	r7, #48	@ 0x30
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009014:	2300      	movs	r3, #0
 8009016:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009018:	230b      	movs	r3, #11
 800901a:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	b2da      	uxtb	r2, r3
 8009020:	0852      	lsrs	r2, r2, #1
 8009022:	01db      	lsls	r3, r3, #7
 8009024:	4313      	orrs	r3, r2
 8009026:	b2da      	uxtb	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	1c59      	adds	r1, r3, #1
 800902c:	6079      	str	r1, [r7, #4]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	4413      	add	r3, r2
 8009032:	73fb      	strb	r3, [r7, #15]
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	3b01      	subs	r3, #1
 8009038:	60bb      	str	r3, [r7, #8]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1ed      	bne.n	800901c <sum_sfn+0x10>
	return sum;
 8009040:	7bfb      	ldrb	r3, [r7, #15]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	bc80      	pop	{r7}
 800904a:	4770      	bx	lr

0800904c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009054:	2100      	movs	r1, #0
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7ff fbae 	bl	80087b8 <dir_sdi>
 800905c:	4603      	mov	r3, r0
 800905e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009060:	7dfb      	ldrb	r3, [r7, #23]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <dir_find+0x1e>
 8009066:	7dfb      	ldrb	r3, [r7, #23]
 8009068:	e0b8      	b.n	80091dc <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800906a:	23ff      	movs	r3, #255	@ 0xff
 800906c:	753b      	strb	r3, [r7, #20]
 800906e:	7d3b      	ldrb	r3, [r7, #20]
 8009070:	757b      	strb	r3, [r7, #21]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009078:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800907c:	849a      	strh	r2, [r3, #36]	@ 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	4619      	mov	r1, r3
 8009090:	4610      	mov	r0, r2
 8009092:	f7fe fee5 	bl	8007e60 <move_window>
 8009096:	4603      	mov	r3, r0
 8009098:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800909a:	7dfb      	ldrb	r3, [r7, #23]
 800909c:	2b00      	cmp	r3, #0
 800909e:	f040 8097 	bne.w	80091d0 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80090b2:	7dbb      	ldrb	r3, [r7, #22]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d102      	bne.n	80090be <dir_find+0x72>
 80090b8:	2304      	movs	r3, #4
 80090ba:	75fb      	strb	r3, [r7, #23]
 80090bc:	e08d      	b.n	80091da <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	330b      	adds	r3, #11
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090c8:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80090ca:	7dbb      	ldrb	r3, [r7, #22]
 80090cc:	2be5      	cmp	r3, #229	@ 0xe5
 80090ce:	d007      	beq.n	80090e0 <dir_find+0x94>
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	f003 0308 	and.w	r3, r3, #8
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00b      	beq.n	80090f2 <dir_find+0xa6>
 80090da:	7bfb      	ldrb	r3, [r7, #15]
 80090dc:	2b0f      	cmp	r3, #15
 80090de:	d008      	beq.n	80090f2 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80090e0:	23ff      	movs	r3, #255	@ 0xff
 80090e2:	757b      	strb	r3, [r7, #21]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80090ee:	849a      	strh	r2, [r3, #36]	@ 0x24
 80090f0:	e063      	b.n	80091ba <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
 80090f4:	2b0f      	cmp	r3, #15
 80090f6:	d137      	bne.n	8009168 <dir_find+0x11c>
				if (dp->lfn) {
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090fe:	6a1b      	ldr	r3, [r3, #32]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d05a      	beq.n	80091ba <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009104:	7dbb      	ldrb	r3, [r7, #22]
 8009106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800910a:	2b00      	cmp	r3, #0
 800910c:	d010      	beq.n	8009130 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	7b5b      	ldrb	r3, [r3, #13]
 8009112:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8009114:	7dbb      	ldrb	r3, [r7, #22]
 8009116:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800911a:	75bb      	strb	r3, [r7, #22]
 800911c:	7dbb      	ldrb	r3, [r7, #22]
 800911e:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009126:	88da      	ldrh	r2, [r3, #6]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800912e:	849a      	strh	r2, [r3, #36]	@ 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8009130:	7dba      	ldrb	r2, [r7, #22]
 8009132:	7d7b      	ldrb	r3, [r7, #21]
 8009134:	429a      	cmp	r2, r3
 8009136:	d114      	bne.n	8009162 <dir_find+0x116>
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	330d      	adds	r3, #13
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	7d3a      	ldrb	r2, [r7, #20]
 8009140:	429a      	cmp	r2, r3
 8009142:	d10e      	bne.n	8009162 <dir_find+0x116>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800914a:	6a1b      	ldr	r3, [r3, #32]
 800914c:	6939      	ldr	r1, [r7, #16]
 800914e:	4618      	mov	r0, r3
 8009150:	f7ff fdec 	bl	8008d2c <cmp_lfn>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <dir_find+0x116>
 800915a:	7d7b      	ldrb	r3, [r7, #21]
 800915c:	3b01      	subs	r3, #1
 800915e:	b2db      	uxtb	r3, r3
 8009160:	e000      	b.n	8009164 <dir_find+0x118>
 8009162:	23ff      	movs	r3, #255	@ 0xff
 8009164:	757b      	strb	r3, [r7, #21]
 8009166:	e028      	b.n	80091ba <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8009168:	7d7b      	ldrb	r3, [r7, #21]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d107      	bne.n	800917e <dir_find+0x132>
 800916e:	6938      	ldr	r0, [r7, #16]
 8009170:	f7ff ff4c 	bl	800900c <sum_sfn>
 8009174:	4603      	mov	r3, r0
 8009176:	461a      	mov	r2, r3
 8009178:	7d3b      	ldrb	r3, [r7, #20]
 800917a:	4293      	cmp	r3, r2
 800917c:	d02a      	beq.n	80091d4 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	330b      	adds	r3, #11
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10b      	bne.n	80091aa <dir_find+0x15e>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	220b      	movs	r2, #11
 800919c:	4619      	mov	r1, r3
 800919e:	6938      	ldr	r0, [r7, #16]
 80091a0:	f7fe fc0e 	bl	80079c0 <mem_cmp>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d016      	beq.n	80091d8 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80091aa:	23ff      	movs	r3, #255	@ 0xff
 80091ac:	757b      	strb	r3, [r7, #21]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80091b8:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80091ba:	2100      	movs	r1, #0
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7ff fbc9 	bl	8008954 <dir_next>
 80091c2:	4603      	mov	r3, r0
 80091c4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80091c6:	7dfb      	ldrb	r3, [r7, #23]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f43f af58 	beq.w	800907e <dir_find+0x32>
 80091ce:	e004      	b.n	80091da <dir_find+0x18e>
		if (res != FR_OK) break;
 80091d0:	bf00      	nop
 80091d2:	e002      	b.n	80091da <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80091d4:	bf00      	nop
 80091d6:	e000      	b.n	80091da <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80091d8:	bf00      	nop

	return res;
 80091da:	7dfb      	ldrb	r3, [r7, #23]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3718      	adds	r7, #24
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b08c      	sub	sp, #48	@ 0x30
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	623b      	str	r3, [r7, #32]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8009200:	f107 030c 	add.w	r3, r7, #12
 8009204:	220c      	movs	r2, #12
 8009206:	6a39      	ldr	r1, [r7, #32]
 8009208:	4618      	mov	r0, r3
 800920a:	f7fe fba1 	bl	8007950 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800920e:	7dfb      	ldrb	r3, [r7, #23]
 8009210:	f003 0301 	and.w	r3, r3, #1
 8009214:	2b00      	cmp	r3, #0
 8009216:	d03b      	beq.n	8009290 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	330b      	adds	r3, #11
 800921c:	2200      	movs	r2, #0
 800921e:	701a      	strb	r2, [r3, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009226:	461a      	mov	r2, r3
 8009228:	2300      	movs	r3, #0
 800922a:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 800922c:	2301      	movs	r3, #1
 800922e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009230:	e013      	b.n	800925a <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8009232:	f107 010c 	add.w	r1, r7, #12
 8009236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009238:	69fa      	ldr	r2, [r7, #28]
 800923a:	6a38      	ldr	r0, [r7, #32]
 800923c:	f7ff fe58 	bl	8008ef0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7ff ff03 	bl	800904c <dir_find>
 8009246:	4603      	mov	r3, r0
 8009248:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800924c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009250:	2b00      	cmp	r3, #0
 8009252:	d106      	bne.n	8009262 <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8009254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009256:	3301      	adds	r3, #1
 8009258:	62bb      	str	r3, [r7, #40]	@ 0x28
 800925a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800925c:	2b63      	cmp	r3, #99	@ 0x63
 800925e:	d9e8      	bls.n	8009232 <dir_register+0x4e>
 8009260:	e000      	b.n	8009264 <dir_register+0x80>
			if (res != FR_OK) break;
 8009262:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009266:	2b64      	cmp	r3, #100	@ 0x64
 8009268:	d101      	bne.n	800926e <dir_register+0x8a>
 800926a:	2307      	movs	r3, #7
 800926c:	e0d8      	b.n	8009420 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800926e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009272:	2b04      	cmp	r3, #4
 8009274:	d002      	beq.n	800927c <dir_register+0x98>
 8009276:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800927a:	e0d1      	b.n	8009420 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	330b      	adds	r3, #11
 8009280:	7dfa      	ldrb	r2, [r7, #23]
 8009282:	701a      	strb	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800928a:	461a      	mov	r2, r3
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8009290:	7dfb      	ldrb	r3, [r7, #23]
 8009292:	f003 0302 	and.w	r3, r3, #2
 8009296:	2b00      	cmp	r3, #0
 8009298:	d014      	beq.n	80092c4 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 800929a:	2300      	movs	r3, #0
 800929c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800929e:	e002      	b.n	80092a6 <dir_register+0xc2>
 80092a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a2:	3301      	adds	r3, #1
 80092a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	69fa      	ldr	r2, [r7, #28]
 80092ac:	4413      	add	r3, r2
 80092ae:	881b      	ldrh	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1f5      	bne.n	80092a0 <dir_register+0xbc>
		nent = (n + 25) / 13;
 80092b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b6:	3319      	adds	r3, #25
 80092b8:	4a5b      	ldr	r2, [pc, #364]	@ (8009428 <dir_register+0x244>)
 80092ba:	fba2 2303 	umull	r2, r3, r2, r3
 80092be:	089b      	lsrs	r3, r3, #2
 80092c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80092c2:	e001      	b.n	80092c8 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 80092c4:	2301      	movs	r3, #1
 80092c6:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80092c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f7ff fc8c 	bl	8008be8 <dir_alloc>
 80092d0:	4603      	mov	r3, r0
 80092d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80092d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d15b      	bne.n	8009396 <dir_register+0x1b2>
 80092de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e0:	3b01      	subs	r3, #1
 80092e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80092e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d055      	beq.n	8009396 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092f0:	88db      	ldrh	r3, [r3, #6]
 80092f2:	461a      	mov	r2, r3
 80092f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	4619      	mov	r1, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7ff fa5c 	bl	80087b8 <dir_sdi>
 8009300:	4603      	mov	r3, r0
 8009302:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8009306:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800930a:	2b00      	cmp	r3, #0
 800930c:	d143      	bne.n	8009396 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	4618      	mov	r0, r3
 8009318:	f7ff fe78 	bl	800900c <sum_sfn>
 800931c:	4603      	mov	r3, r0
 800931e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	4619      	mov	r1, r3
 8009332:	4610      	mov	r0, r2
 8009334:	f7fe fd94 	bl	8007e60 <move_window>
 8009338:	4603      	mov	r3, r0
 800933a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800933e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009342:	2b00      	cmp	r3, #0
 8009344:	d126      	bne.n	8009394 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800934c:	6a18      	ldr	r0, [r3, #32]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009354:	6959      	ldr	r1, [r3, #20]
 8009356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009358:	b2da      	uxtb	r2, r3
 800935a:	7efb      	ldrb	r3, [r7, #27]
 800935c:	f7ff fd54 	bl	8008e08 <fit_lfn>
				dp->fs->wflag = 1;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800936c:	2201      	movs	r2, #1
 800936e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8009370:	2100      	movs	r1, #0
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7ff faee 	bl	8008954 <dir_next>
 8009378:	4603      	mov	r3, r0
 800937a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800937e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009382:	2b00      	cmp	r3, #0
 8009384:	d107      	bne.n	8009396 <dir_register+0x1b2>
 8009386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009388:	3b01      	subs	r3, #1
 800938a:	627b      	str	r3, [r7, #36]	@ 0x24
 800938c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1c6      	bne.n	8009320 <dir_register+0x13c>
 8009392:	e000      	b.n	8009396 <dir_register+0x1b2>
				if (res != FR_OK) break;
 8009394:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8009396:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800939a:	2b00      	cmp	r3, #0
 800939c:	d13e      	bne.n	800941c <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	4619      	mov	r1, r3
 80093b0:	4610      	mov	r0, r2
 80093b2:	f7fe fd55 	bl	8007e60 <move_window>
 80093b6:	4603      	mov	r3, r0
 80093b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80093bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d12b      	bne.n	800941c <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093ca:	695b      	ldr	r3, [r3, #20]
 80093cc:	2220      	movs	r2, #32
 80093ce:	2100      	movs	r1, #0
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7fe fadb 	bl	800798c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093dc:	6958      	ldr	r0, [r3, #20]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	220b      	movs	r2, #11
 80093e8:	4619      	mov	r1, r3
 80093ea:	f7fe fab1 	bl	8007950 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	330b      	adds	r3, #11
 80093f8:	781a      	ldrb	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	330c      	adds	r3, #12
 8009404:	f002 0218 	and.w	r2, r2, #24
 8009408:	b2d2      	uxtb	r2, r2
 800940a:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009418:	2201      	movs	r2, #1
 800941a:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800941c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009420:	4618      	mov	r0, r3
 8009422:	3730      	adds	r7, #48	@ 0x30
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	4ec4ec4f 	.word	0x4ec4ec4f

0800942c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b08a      	sub	sp, #40	@ 0x28
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	613b      	str	r3, [r7, #16]
 800943c:	e002      	b.n	8009444 <create_name+0x18>
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	3301      	adds	r3, #1
 8009442:	613b      	str	r3, [r7, #16]
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	2b2f      	cmp	r3, #47	@ 0x2f
 800944a:	d0f8      	beq.n	800943e <create_name+0x12>
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	2b5c      	cmp	r3, #92	@ 0x5c
 8009452:	d0f4      	beq.n	800943e <create_name+0x12>
	lfn = dp->lfn;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800945a:	6a1b      	ldr	r3, [r3, #32]
 800945c:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800945e:	2300      	movs	r3, #0
 8009460:	617b      	str	r3, [r7, #20]
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	61ba      	str	r2, [r7, #24]
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	4413      	add	r3, r2
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8009474:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009476:	2b1f      	cmp	r3, #31
 8009478:	d92f      	bls.n	80094da <create_name+0xae>
 800947a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800947c:	2b2f      	cmp	r3, #47	@ 0x2f
 800947e:	d02c      	beq.n	80094da <create_name+0xae>
 8009480:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009482:	2b5c      	cmp	r3, #92	@ 0x5c
 8009484:	d029      	beq.n	80094da <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	2bfe      	cmp	r3, #254	@ 0xfe
 800948a:	d901      	bls.n	8009490 <create_name+0x64>
			return FR_INVALID_NAME;
 800948c:	2306      	movs	r3, #6
 800948e:	e186      	b.n	800979e <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8009490:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009492:	b2db      	uxtb	r3, r3
 8009494:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009496:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009498:	2101      	movs	r1, #1
 800949a:	4618      	mov	r0, r3
 800949c:	f002 f86c 	bl	800b578 <ff_convert>
 80094a0:	4603      	mov	r3, r0
 80094a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80094a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d101      	bne.n	80094ae <create_name+0x82>
 80094aa:	2306      	movs	r3, #6
 80094ac:	e177      	b.n	800979e <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80094ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80094b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80094b2:	d809      	bhi.n	80094c8 <create_name+0x9c>
 80094b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80094b6:	4619      	mov	r1, r3
 80094b8:	488e      	ldr	r0, [pc, #568]	@ (80096f4 <create_name+0x2c8>)
 80094ba:	f7fe faa7 	bl	8007a0c <chk_chr>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d001      	beq.n	80094c8 <create_name+0x9c>
			return FR_INVALID_NAME;
 80094c4:	2306      	movs	r3, #6
 80094c6:	e16a      	b.n	800979e <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	1c5a      	adds	r2, r3, #1
 80094cc:	617a      	str	r2, [r7, #20]
 80094ce:	005b      	lsls	r3, r3, #1
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	4413      	add	r3, r2
 80094d4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80094d6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80094d8:	e7c5      	b.n	8009466 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80094da:	693a      	ldr	r2, [r7, #16]
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	441a      	add	r2, r3
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80094e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80094e6:	2b1f      	cmp	r3, #31
 80094e8:	d801      	bhi.n	80094ee <create_name+0xc2>
 80094ea:	2304      	movs	r3, #4
 80094ec:	e000      	b.n	80094f0 <create_name+0xc4>
 80094ee:	2300      	movs	r3, #0
 80094f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 80094f4:	e011      	b.n	800951a <create_name+0xee>
		w = lfn[di - 1];
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80094fc:	3b01      	subs	r3, #1
 80094fe:	005b      	lsls	r3, r3, #1
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	4413      	add	r3, r2
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8009508:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800950a:	2b20      	cmp	r3, #32
 800950c:	d002      	beq.n	8009514 <create_name+0xe8>
 800950e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009510:	2b2e      	cmp	r3, #46	@ 0x2e
 8009512:	d106      	bne.n	8009522 <create_name+0xf6>
		di--;
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	3b01      	subs	r3, #1
 8009518:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1ea      	bne.n	80094f6 <create_name+0xca>
 8009520:	e000      	b.n	8009524 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8009522:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <create_name+0x102>
 800952a:	2306      	movs	r3, #6
 800952c:	e137      	b.n	800979e <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	005b      	lsls	r3, r3, #1
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	4413      	add	r3, r2
 8009536:	2200      	movs	r2, #0
 8009538:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009540:	699b      	ldr	r3, [r3, #24]
 8009542:	220b      	movs	r2, #11
 8009544:	2120      	movs	r1, #32
 8009546:	4618      	mov	r0, r3
 8009548:	f7fe fa20 	bl	800798c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800954c:	2300      	movs	r3, #0
 800954e:	61bb      	str	r3, [r7, #24]
 8009550:	e002      	b.n	8009558 <create_name+0x12c>
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	3301      	adds	r3, #1
 8009556:	61bb      	str	r3, [r7, #24]
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	005b      	lsls	r3, r3, #1
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	4413      	add	r3, r2
 8009560:	881b      	ldrh	r3, [r3, #0]
 8009562:	2b20      	cmp	r3, #32
 8009564:	d0f5      	beq.n	8009552 <create_name+0x126>
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	4413      	add	r3, r2
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	2b2e      	cmp	r3, #46	@ 0x2e
 8009572:	d0ee      	beq.n	8009552 <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d009      	beq.n	800958e <create_name+0x162>
 800957a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800957e:	f043 0303 	orr.w	r3, r3, #3
 8009582:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009586:	e002      	b.n	800958e <create_name+0x162>
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	3b01      	subs	r3, #1
 800958c:	617b      	str	r3, [r7, #20]
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d009      	beq.n	80095a8 <create_name+0x17c>
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800959a:	3b01      	subs	r3, #1
 800959c:	005b      	lsls	r3, r3, #1
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	4413      	add	r3, r2
 80095a2:	881b      	ldrh	r3, [r3, #0]
 80095a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80095a6:	d1ef      	bne.n	8009588 <create_name+0x15c>

	b = i = 0; ni = 8;
 80095a8:	2300      	movs	r3, #0
 80095aa:	623b      	str	r3, [r7, #32]
 80095ac:	2300      	movs	r3, #0
 80095ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80095b2:	2308      	movs	r3, #8
 80095b4:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	61ba      	str	r2, [r7, #24]
 80095bc:	005b      	lsls	r3, r3, #1
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	4413      	add	r3, r2
 80095c2:	881b      	ldrh	r3, [r3, #0]
 80095c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80095c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 8091 	beq.w	80096f0 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80095ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80095d0:	2b20      	cmp	r3, #32
 80095d2:	d006      	beq.n	80095e2 <create_name+0x1b6>
 80095d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80095d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80095d8:	d10a      	bne.n	80095f0 <create_name+0x1c4>
 80095da:	69ba      	ldr	r2, [r7, #24]
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d006      	beq.n	80095f0 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 80095e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095e6:	f043 0303 	orr.w	r3, r3, #3
 80095ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80095ee:	e07e      	b.n	80096ee <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80095f0:	6a3a      	ldr	r2, [r7, #32]
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d203      	bcs.n	8009600 <create_name+0x1d4>
 80095f8:	69ba      	ldr	r2, [r7, #24]
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d123      	bne.n	8009648 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	2b0b      	cmp	r3, #11
 8009604:	d106      	bne.n	8009614 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8009606:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800960a:	f043 0303 	orr.w	r3, r3, #3
 800960e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009612:	e076      	b.n	8009702 <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009614:	69ba      	ldr	r2, [r7, #24]
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	429a      	cmp	r2, r3
 800961a:	d005      	beq.n	8009628 <create_name+0x1fc>
 800961c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009620:	f043 0303 	orr.w	r3, r3, #3
 8009624:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8009628:	69ba      	ldr	r2, [r7, #24]
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	429a      	cmp	r2, r3
 800962e:	d867      	bhi.n	8009700 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	61bb      	str	r3, [r7, #24]
 8009634:	2308      	movs	r3, #8
 8009636:	623b      	str	r3, [r7, #32]
 8009638:	230b      	movs	r3, #11
 800963a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800963c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009646:	e052      	b.n	80096ee <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009648:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800964a:	2b7f      	cmp	r3, #127	@ 0x7f
 800964c:	d914      	bls.n	8009678 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800964e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009650:	2100      	movs	r1, #0
 8009652:	4618      	mov	r0, r3
 8009654:	f001 ff90 	bl	800b578 <ff_convert>
 8009658:	4603      	mov	r3, r0
 800965a:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800965c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800965e:	2b00      	cmp	r3, #0
 8009660:	d004      	beq.n	800966c <create_name+0x240>
 8009662:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009664:	3b80      	subs	r3, #128	@ 0x80
 8009666:	4a24      	ldr	r2, [pc, #144]	@ (80096f8 <create_name+0x2cc>)
 8009668:	5cd3      	ldrb	r3, [r2, r3]
 800966a:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800966c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009670:	f043 0302 	orr.w	r3, r3, #2
 8009674:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009678:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800967a:	2b00      	cmp	r3, #0
 800967c:	d007      	beq.n	800968e <create_name+0x262>
 800967e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009680:	4619      	mov	r1, r3
 8009682:	481e      	ldr	r0, [pc, #120]	@ (80096fc <create_name+0x2d0>)
 8009684:	f7fe f9c2 	bl	8007a0c <chk_chr>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d008      	beq.n	80096a0 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800968e:	235f      	movs	r3, #95	@ 0x5f
 8009690:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009692:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009696:	f043 0303 	orr.w	r3, r3, #3
 800969a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800969e:	e01b      	b.n	80096d8 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80096a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096a2:	2b40      	cmp	r3, #64	@ 0x40
 80096a4:	d909      	bls.n	80096ba <create_name+0x28e>
 80096a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096a8:	2b5a      	cmp	r3, #90	@ 0x5a
 80096aa:	d806      	bhi.n	80096ba <create_name+0x28e>
					b |= 2;
 80096ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80096b0:	f043 0302 	orr.w	r3, r3, #2
 80096b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80096b8:	e00e      	b.n	80096d8 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80096ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096bc:	2b60      	cmp	r3, #96	@ 0x60
 80096be:	d90b      	bls.n	80096d8 <create_name+0x2ac>
 80096c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096c2:	2b7a      	cmp	r3, #122	@ 0x7a
 80096c4:	d808      	bhi.n	80096d8 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 80096c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80096ca:	f043 0301 	orr.w	r3, r3, #1
 80096ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80096d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096d4:	3b20      	subs	r3, #32
 80096d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096de:	699a      	ldr	r2, [r3, #24]
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	1c59      	adds	r1, r3, #1
 80096e4:	6239      	str	r1, [r7, #32]
 80096e6:	4413      	add	r3, r2
 80096e8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80096ea:	b2d2      	uxtb	r2, r2
 80096ec:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80096ee:	e762      	b.n	80095b6 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 80096f0:	bf00      	nop
 80096f2:	e006      	b.n	8009702 <create_name+0x2d6>
 80096f4:	0800e3b4 	.word	0x0800e3b4
 80096f8:	0800e428 	.word	0x0800e428
 80096fc:	0800e3c0 	.word	0x0800e3c0
			if (si > di) break;			/* No extension */
 8009700:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	2be5      	cmp	r3, #229	@ 0xe5
 800970e:	d105      	bne.n	800971c <create_name+0x2f0>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	2205      	movs	r2, #5
 800971a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	2b08      	cmp	r3, #8
 8009720:	d104      	bne.n	800972c <create_name+0x300>
 8009722:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800972c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009730:	f003 030c 	and.w	r3, r3, #12
 8009734:	2b0c      	cmp	r3, #12
 8009736:	d005      	beq.n	8009744 <create_name+0x318>
 8009738:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800973c:	f003 0303 	and.w	r3, r3, #3
 8009740:	2b03      	cmp	r3, #3
 8009742:	d105      	bne.n	8009750 <create_name+0x324>
		cf |= NS_LFN;
 8009744:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009748:	f043 0302 	orr.w	r3, r3, #2
 800974c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009754:	f003 0302 	and.w	r3, r3, #2
 8009758:	2b00      	cmp	r3, #0
 800975a:	d117      	bne.n	800978c <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800975c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009760:	f003 0303 	and.w	r3, r3, #3
 8009764:	2b01      	cmp	r3, #1
 8009766:	d105      	bne.n	8009774 <create_name+0x348>
 8009768:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800976c:	f043 0310 	orr.w	r3, r3, #16
 8009770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009774:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009778:	f003 030c 	and.w	r3, r3, #12
 800977c:	2b04      	cmp	r3, #4
 800977e:	d105      	bne.n	800978c <create_name+0x360>
 8009780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009784:	f043 0308 	orr.w	r3, r3, #8
 8009788:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	330b      	adds	r3, #11
 8009796:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800979a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800979c:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3728      	adds	r7, #40	@ 0x28
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop

080097a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	2b2f      	cmp	r3, #47	@ 0x2f
 80097b8:	d003      	beq.n	80097c2 <follow_path+0x1a>
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	2b5c      	cmp	r3, #92	@ 0x5c
 80097c0:	d102      	bne.n	80097c8 <follow_path+0x20>
		path++;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	3301      	adds	r3, #1
 80097c6:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097ce:	461a      	mov	r2, r3
 80097d0:	2300      	movs	r3, #0
 80097d2:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	2b1f      	cmp	r3, #31
 80097da:	d80c      	bhi.n	80097f6 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 80097dc:	2100      	movs	r1, #0
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f7fe ffea 	bl	80087b8 <dir_sdi>
 80097e4:	4603      	mov	r3, r0
 80097e6:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097ee:	461a      	mov	r2, r3
 80097f0:	2300      	movs	r3, #0
 80097f2:	6153      	str	r3, [r2, #20]
 80097f4:	e049      	b.n	800988a <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80097f6:	463b      	mov	r3, r7
 80097f8:	4619      	mov	r1, r3
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7ff fe16 	bl	800942c <create_name>
 8009800:	4603      	mov	r3, r0
 8009802:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d13a      	bne.n	8009880 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7ff fc1e 	bl	800904c <dir_find>
 8009810:	4603      	mov	r3, r0
 8009812:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800981a:	699b      	ldr	r3, [r3, #24]
 800981c:	7adb      	ldrb	r3, [r3, #11]
 800981e:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00a      	beq.n	800983c <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009826:	7bfb      	ldrb	r3, [r7, #15]
 8009828:	2b04      	cmp	r3, #4
 800982a:	d12b      	bne.n	8009884 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800982c:	7bbb      	ldrb	r3, [r7, #14]
 800982e:	f003 0304 	and.w	r3, r3, #4
 8009832:	2b00      	cmp	r3, #0
 8009834:	d126      	bne.n	8009884 <follow_path+0xdc>
 8009836:	2305      	movs	r3, #5
 8009838:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800983a:	e023      	b.n	8009884 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800983c:	7bbb      	ldrb	r3, [r7, #14]
 800983e:	f003 0304 	and.w	r3, r3, #4
 8009842:	2b00      	cmp	r3, #0
 8009844:	d120      	bne.n	8009888 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	330b      	adds	r3, #11
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	f003 0310 	and.w	r3, r3, #16
 800985a:	2b00      	cmp	r3, #0
 800985c:	d102      	bne.n	8009864 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800985e:	2305      	movs	r3, #5
 8009860:	73fb      	strb	r3, [r7, #15]
 8009862:	e012      	b.n	800988a <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68b9      	ldr	r1, [r7, #8]
 800986e:	4618      	mov	r0, r3
 8009870:	f7ff fa08 	bl	8008c84 <ld_clust>
 8009874:	4602      	mov	r2, r0
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800987c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800987e:	e7ba      	b.n	80097f6 <follow_path+0x4e>
			if (res != FR_OK) break;
 8009880:	bf00      	nop
 8009882:	e002      	b.n	800988a <follow_path+0xe2>
				break;
 8009884:	bf00      	nop
 8009886:	e000      	b.n	800988a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009888:	bf00      	nop
		}
	}

	return res;
 800988a:	7bfb      	ldrb	r3, [r7, #15]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009894:	b480      	push	{r7}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800989c:	f04f 33ff 	mov.w	r3, #4294967295
 80098a0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d031      	beq.n	800990e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	617b      	str	r3, [r7, #20]
 80098b0:	e002      	b.n	80098b8 <get_ldnumber+0x24>
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	3301      	adds	r3, #1
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	2b1f      	cmp	r3, #31
 80098be:	d903      	bls.n	80098c8 <get_ldnumber+0x34>
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	2b3a      	cmp	r3, #58	@ 0x3a
 80098c6:	d1f4      	bne.n	80098b2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	2b3a      	cmp	r3, #58	@ 0x3a
 80098ce:	d11c      	bne.n	800990a <get_ldnumber+0x76>
			tp = *path;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	1c5a      	adds	r2, r3, #1
 80098da:	60fa      	str	r2, [r7, #12]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	3b30      	subs	r3, #48	@ 0x30
 80098e0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	2b09      	cmp	r3, #9
 80098e6:	d80e      	bhi.n	8009906 <get_ldnumber+0x72>
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d10a      	bne.n	8009906 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d107      	bne.n	8009906 <get_ldnumber+0x72>
					vol = (int)i;
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	3301      	adds	r3, #1
 80098fe:	617b      	str	r3, [r7, #20]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	e002      	b.n	8009910 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800990a:	2300      	movs	r3, #0
 800990c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800990e:	693b      	ldr	r3, [r7, #16]
}
 8009910:	4618      	mov	r0, r3
 8009912:	371c      	adds	r7, #28
 8009914:	46bd      	mov	sp, r7
 8009916:	bc80      	pop	{r7}
 8009918:	4770      	bx	lr
	...

0800991c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800992c:	2200      	movs	r2, #0
 800992e:	711a      	strb	r2, [r3, #4]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009936:	461a      	mov	r2, r3
 8009938:	f04f 33ff 	mov.w	r3, #4294967295
 800993c:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7fe fa8d 	bl	8007e60 <move_window>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d001      	beq.n	8009950 <check_fs+0x34>
		return 3;
 800994c:	2303      	movs	r3, #3
 800994e:	e04a      	b.n	80099e6 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009956:	3301      	adds	r3, #1
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	021b      	lsls	r3, r3, #8
 800995c:	b21a      	sxth	r2, r3
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8009964:	b21b      	sxth	r3, r3
 8009966:	4313      	orrs	r3, r2
 8009968:	b21b      	sxth	r3, r3
 800996a:	4a21      	ldr	r2, [pc, #132]	@ (80099f0 <check_fs+0xd4>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d001      	beq.n	8009974 <check_fs+0x58>
		return 2;
 8009970:	2302      	movs	r3, #2
 8009972:	e038      	b.n	80099e6 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3336      	adds	r3, #54	@ 0x36
 8009978:	3303      	adds	r3, #3
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	061a      	lsls	r2, r3, #24
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	3336      	adds	r3, #54	@ 0x36
 8009982:	3302      	adds	r3, #2
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	041b      	lsls	r3, r3, #16
 8009988:	431a      	orrs	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	3336      	adds	r3, #54	@ 0x36
 800998e:	3301      	adds	r3, #1
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	021b      	lsls	r3, r3, #8
 8009994:	4313      	orrs	r3, r2
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 800999c:	4313      	orrs	r3, r2
 800999e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80099a2:	4a14      	ldr	r2, [pc, #80]	@ (80099f4 <check_fs+0xd8>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d101      	bne.n	80099ac <check_fs+0x90>
		return 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	e01c      	b.n	80099e6 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	3352      	adds	r3, #82	@ 0x52
 80099b0:	3303      	adds	r3, #3
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	061a      	lsls	r2, r3, #24
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	3352      	adds	r3, #82	@ 0x52
 80099ba:	3302      	adds	r3, #2
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	041b      	lsls	r3, r3, #16
 80099c0:	431a      	orrs	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	3352      	adds	r3, #82	@ 0x52
 80099c6:	3301      	adds	r3, #1
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	021b      	lsls	r3, r3, #8
 80099cc:	4313      	orrs	r3, r2
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 80099d4:	4313      	orrs	r3, r2
 80099d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80099da:	4a06      	ldr	r2, [pc, #24]	@ (80099f4 <check_fs+0xd8>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d101      	bne.n	80099e4 <check_fs+0xc8>
		return 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	e000      	b.n	80099e6 <check_fs+0xca>

	return 1;
 80099e4:	2301      	movs	r3, #1
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	ffffaa55 	.word	0xffffaa55
 80099f4:	00544146 	.word	0x00544146

080099f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b096      	sub	sp, #88	@ 0x58
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	4613      	mov	r3, r2
 8009a04:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009a0c:	68b8      	ldr	r0, [r7, #8]
 8009a0e:	f7ff ff41 	bl	8009894 <get_ldnumber>
 8009a12:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	da01      	bge.n	8009a1e <find_volume+0x26>
 8009a1a:	230b      	movs	r3, #11
 8009a1c:	e311      	b.n	800a042 <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009a1e:	4a98      	ldr	r2, [pc, #608]	@ (8009c80 <find_volume+0x288>)
 8009a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a26:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d101      	bne.n	8009a32 <find_volume+0x3a>
 8009a2e:	230c      	movs	r3, #12
 8009a30:	e307      	b.n	800a042 <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a36:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8009a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d01c      	beq.n	8009a7e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a4a:	785b      	ldrb	r3, [r3, #1]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fd fee1 	bl	8007814 <disk_status>
 8009a52:	4603      	mov	r3, r0
 8009a54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009a58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009a5c:	f003 0301 	and.w	r3, r3, #1
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10c      	bne.n	8009a7e <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8009a64:	79fb      	ldrb	r3, [r7, #7]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d007      	beq.n	8009a7a <find_volume+0x82>
 8009a6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009a6e:	f003 0304 	and.w	r3, r3, #4
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d001      	beq.n	8009a7a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009a76:	230a      	movs	r3, #10
 8009a78:	e2e3      	b.n	800a042 <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	e2e1      	b.n	800a042 <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a84:	2200      	movs	r2, #0
 8009a86:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a92:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a9a:	785b      	ldrb	r3, [r3, #1]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fd fed3 	bl	8007848 <disk_initialize>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8009aa8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009aac:	f003 0301 	and.w	r3, r3, #1
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d001      	beq.n	8009ab8 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e2c4      	b.n	800a042 <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8009ab8:	79fb      	ldrb	r3, [r7, #7]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d007      	beq.n	8009ace <find_volume+0xd6>
 8009abe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009ac2:	f003 0304 	and.w	r3, r3, #4
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8009aca:	230a      	movs	r3, #10
 8009acc:	e2b9      	b.n	800a042 <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8009ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ad4:	7858      	ldrb	r0, [r3, #1]
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009adc:	330a      	adds	r3, #10
 8009ade:	461a      	mov	r2, r3
 8009ae0:	2102      	movs	r1, #2
 8009ae2:	f7fd ff17 	bl	8007914 <disk_ioctl>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d10d      	bne.n	8009b08 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8009aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009af2:	895b      	ldrh	r3, [r3, #10]
 8009af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009af8:	d306      	bcc.n	8009b08 <find_volume+0x110>
 8009afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b00:	895b      	ldrh	r3, [r3, #10]
 8009b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b06:	d901      	bls.n	8009b0c <find_volume+0x114>
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e29a      	b.n	800a042 <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8009b10:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009b12:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009b14:	f7ff ff02 	bl	800991c <check_fs>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8009b1e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d153      	bne.n	8009bce <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009b26:	2300      	movs	r3, #0
 8009b28:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b2a:	e028      	b.n	8009b7e <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8009b2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b30:	011b      	lsls	r3, r3, #4
 8009b32:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009b36:	4413      	add	r3, r2
 8009b38:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3c:	3304      	adds	r3, #4
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d012      	beq.n	8009b6a <find_volume+0x172>
 8009b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b46:	330b      	adds	r3, #11
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	061a      	lsls	r2, r3, #24
 8009b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4e:	330a      	adds	r3, #10
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	041b      	lsls	r3, r3, #16
 8009b54:	431a      	orrs	r2, r3
 8009b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b58:	3309      	adds	r3, #9
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	021b      	lsls	r3, r3, #8
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b62:	3208      	adds	r2, #8
 8009b64:	7812      	ldrb	r2, [r2, #0]
 8009b66:	431a      	orrs	r2, r3
 8009b68:	e000      	b.n	8009b6c <find_volume+0x174>
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	3358      	adds	r3, #88	@ 0x58
 8009b72:	443b      	add	r3, r7
 8009b74:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b80:	2b03      	cmp	r3, #3
 8009b82:	d9d3      	bls.n	8009b2c <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8009b84:	2300      	movs	r3, #0
 8009b86:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009b88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d002      	beq.n	8009b94 <find_volume+0x19c>
 8009b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b90:	3b01      	subs	r3, #1
 8009b92:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8009b94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	3358      	adds	r3, #88	@ 0x58
 8009b9a:	443b      	add	r3, r7
 8009b9c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009ba0:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8009ba2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d005      	beq.n	8009bb4 <find_volume+0x1bc>
 8009ba8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009baa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009bac:	f7ff feb6 	bl	800991c <check_fs>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	e000      	b.n	8009bb6 <find_volume+0x1be>
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8009bba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d005      	beq.n	8009bce <find_volume+0x1d6>
 8009bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	d9e2      	bls.n	8009b94 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009bce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009bd2:	2b03      	cmp	r3, #3
 8009bd4:	d101      	bne.n	8009bda <find_volume+0x1e2>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e233      	b.n	800a042 <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8009bda:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <find_volume+0x1ee>
 8009be2:	230d      	movs	r3, #13
 8009be4:	e22d      	b.n	800a042 <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be8:	7b1b      	ldrb	r3, [r3, #12]
 8009bea:	021b      	lsls	r3, r3, #8
 8009bec:	b21a      	sxth	r2, r3
 8009bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf0:	7adb      	ldrb	r3, [r3, #11]
 8009bf2:	b21b      	sxth	r3, r3
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	b21a      	sxth	r2, r3
 8009bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bfe:	895b      	ldrh	r3, [r3, #10]
 8009c00:	b21b      	sxth	r3, r3
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d001      	beq.n	8009c0a <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8009c06:	230d      	movs	r3, #13
 8009c08:	e21b      	b.n	800a042 <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8009c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0c:	7ddb      	ldrb	r3, [r3, #23]
 8009c0e:	021b      	lsls	r3, r3, #8
 8009c10:	b21a      	sxth	r2, r3
 8009c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c14:	7d9b      	ldrb	r3, [r3, #22]
 8009c16:	b21b      	sxth	r3, r3
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	b21b      	sxth	r3, r3
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8009c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d112      	bne.n	8009c4c <find_volume+0x254>
 8009c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c28:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8009c2c:	061a      	lsls	r2, r3, #24
 8009c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c30:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8009c34:	041b      	lsls	r3, r3, #16
 8009c36:	431a      	orrs	r2, r3
 8009c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009c3e:	021b      	lsls	r3, r3, #8
 8009c40:	4313      	orrs	r3, r2
 8009c42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c44:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8009c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c52:	461a      	mov	r2, r3
 8009c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c56:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8009c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c5a:	7c1a      	ldrb	r2, [r3, #16]
 8009c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c62:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8009c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c6a:	78db      	ldrb	r3, [r3, #3]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d009      	beq.n	8009c84 <find_volume+0x28c>
 8009c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c76:	78db      	ldrb	r3, [r3, #3]
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d003      	beq.n	8009c84 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8009c7c:	230d      	movs	r3, #13
 8009c7e:	e1e0      	b.n	800a042 <find_volume+0x64a>
 8009c80:	200025d4 	.word	0x200025d4
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8009c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c8a:	78db      	ldrb	r3, [r3, #3]
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c90:	fb02 f303 	mul.w	r3, r2, r3
 8009c94:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8009c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c98:	7b5a      	ldrb	r2, [r3, #13]
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ca0:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8009ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ca8:	789b      	ldrb	r3, [r3, #2]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00c      	beq.n	8009cc8 <find_volume+0x2d0>
 8009cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cb4:	789b      	ldrb	r3, [r3, #2]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cbe:	789b      	ldrb	r3, [r3, #2]
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	4013      	ands	r3, r2
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d001      	beq.n	8009ccc <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8009cc8:	230d      	movs	r3, #13
 8009cca:	e1ba      	b.n	800a042 <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8009ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cce:	7c9b      	ldrb	r3, [r3, #18]
 8009cd0:	021b      	lsls	r3, r3, #8
 8009cd2:	b21a      	sxth	r2, r3
 8009cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd6:	7c5b      	ldrb	r3, [r3, #17]
 8009cd8:	b21b      	sxth	r3, r3
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	b21b      	sxth	r3, r3
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ce6:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8009ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cee:	891b      	ldrh	r3, [r3, #8]
 8009cf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009cf2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009cf6:	8952      	ldrh	r2, [r2, #10]
 8009cf8:	0952      	lsrs	r2, r2, #5
 8009cfa:	b292      	uxth	r2, r2
 8009cfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d00:	fb01 f202 	mul.w	r2, r1, r2
 8009d04:	1a9b      	subs	r3, r3, r2
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d001      	beq.n	8009d10 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8009d0c:	230d      	movs	r3, #13
 8009d0e:	e198      	b.n	800a042 <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8009d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d12:	7d1b      	ldrb	r3, [r3, #20]
 8009d14:	021b      	lsls	r3, r3, #8
 8009d16:	b21a      	sxth	r2, r3
 8009d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1a:	7cdb      	ldrb	r3, [r3, #19]
 8009d1c:	b21b      	sxth	r3, r3
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	b21b      	sxth	r3, r3
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8009d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d112      	bne.n	8009d52 <find_volume+0x35a>
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d2e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009d32:	061a      	lsls	r2, r3, #24
 8009d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d36:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8009d3a:	041b      	lsls	r3, r3, #16
 8009d3c:	431a      	orrs	r2, r3
 8009d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d40:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009d44:	021b      	lsls	r3, r3, #8
 8009d46:	4313      	orrs	r3, r2
 8009d48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d4a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8009d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d54:	7bdb      	ldrb	r3, [r3, #15]
 8009d56:	021b      	lsls	r3, r3, #8
 8009d58:	b21a      	sxth	r2, r3
 8009d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5c:	7b9b      	ldrb	r3, [r3, #14]
 8009d5e:	b21b      	sxth	r3, r3
 8009d60:	4313      	orrs	r3, r2
 8009d62:	b21b      	sxth	r3, r3
 8009d64:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8009d66:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d101      	bne.n	8009d70 <find_volume+0x378>
 8009d6c:	230d      	movs	r3, #13
 8009d6e:	e168      	b.n	800a042 <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8009d70:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d74:	4413      	add	r3, r2
 8009d76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009d7c:	8911      	ldrh	r1, [r2, #8]
 8009d7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009d80:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009d84:	8952      	ldrh	r2, [r2, #10]
 8009d86:	0952      	lsrs	r2, r2, #5
 8009d88:	b292      	uxth	r2, r2
 8009d8a:	fbb1 f2f2 	udiv	r2, r1, r2
 8009d8e:	b292      	uxth	r2, r2
 8009d90:	4413      	add	r3, r2
 8009d92:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009d94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d201      	bcs.n	8009da0 <find_volume+0x3a8>
 8009d9c:	230d      	movs	r3, #13
 8009d9e:	e150      	b.n	800a042 <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8009da0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009da8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009dac:	7892      	ldrb	r2, [r2, #2]
 8009dae:	fbb3 f3f2 	udiv	r3, r3, r2
 8009db2:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8009db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d101      	bne.n	8009dbe <find_volume+0x3c6>
 8009dba:	230d      	movs	r3, #13
 8009dbc:	e141      	b.n	800a042 <find_volume+0x64a>
	fmt = FS_FAT12;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d902      	bls.n	8009dd4 <find_volume+0x3dc>
 8009dce:	2302      	movs	r3, #2
 8009dd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d902      	bls.n	8009de4 <find_volume+0x3ec>
 8009dde:	2303      	movs	r3, #3
 8009de0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8009de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de6:	3302      	adds	r3, #2
 8009de8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009dea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009dee:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8009df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009df6:	461a      	mov	r2, r3
 8009df8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dfa:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8009dfc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009dfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e00:	4413      	add	r3, r2
 8009e02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e08:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8009e0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e0e:	4413      	add	r3, r2
 8009e10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e16:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8009e18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e1c:	2b03      	cmp	r3, #3
 8009e1e:	d124      	bne.n	8009e6a <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8009e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e26:	891b      	ldrh	r3, [r3, #8]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d001      	beq.n	8009e30 <find_volume+0x438>
 8009e2c:	230d      	movs	r3, #13
 8009e2e:	e108      	b.n	800a042 <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8009e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e32:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009e36:	061a      	lsls	r2, r3, #24
 8009e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e3a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8009e3e:	041b      	lsls	r3, r3, #16
 8009e40:	431a      	orrs	r2, r3
 8009e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e44:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009e48:	021b      	lsls	r3, r3, #8
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e4e:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8009e52:	4313      	orrs	r3, r2
 8009e54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e5a:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8009e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e68:	e02b      	b.n	8009ec2 <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e70:	891b      	ldrh	r3, [r3, #8]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d101      	bne.n	8009e7a <find_volume+0x482>
 8009e76:	230d      	movs	r3, #13
 8009e78:	e0e3      	b.n	800a042 <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8009e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e80:	6a1a      	ldr	r2, [r3, #32]
 8009e82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e84:	4413      	add	r3, r2
 8009e86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e8c:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009e8e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d105      	bne.n	8009ea2 <find_volume+0x4aa>
 8009e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e9c:	695b      	ldr	r3, [r3, #20]
 8009e9e:	005b      	lsls	r3, r3, #1
 8009ea0:	e00e      	b.n	8009ec0 <find_volume+0x4c8>
 8009ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ea8:	695a      	ldr	r2, [r3, #20]
 8009eaa:	4613      	mov	r3, r2
 8009eac:	005b      	lsls	r3, r3, #1
 8009eae:	4413      	add	r3, r2
 8009eb0:	085a      	lsrs	r2, r3, #1
 8009eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8009ec0:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ec8:	699a      	ldr	r2, [r3, #24]
 8009eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ecc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ed0:	895b      	ldrh	r3, [r3, #10]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ed6:	440b      	add	r3, r1
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009edc:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8009ee0:	8949      	ldrh	r1, [r1, #10]
 8009ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d201      	bcs.n	8009eee <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8009eea:	230d      	movs	r3, #13
 8009eec:	e0a9      	b.n	800a042 <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8009eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8009efa:	6113      	str	r3, [r2, #16]
 8009efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009f0a:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8009f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f12:	2280      	movs	r2, #128	@ 0x80
 8009f14:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8009f16:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	d17a      	bne.n	800a014 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8009f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f20:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009f24:	021b      	lsls	r3, r3, #8
 8009f26:	b21a      	sxth	r2, r3
 8009f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009f2e:	b21b      	sxth	r3, r3
 8009f30:	4313      	orrs	r3, r2
 8009f32:	b21b      	sxth	r3, r3
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d16d      	bne.n	800a014 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8009f38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009f40:	f7fd ff8e 	bl	8007e60 <move_window>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d164      	bne.n	800a014 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8009f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f50:	2200      	movs	r2, #0
 8009f52:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f56:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8009f5a:	021b      	lsls	r3, r3, #8
 8009f5c:	b21a      	sxth	r2, r3
 8009f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f60:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8009f64:	b21b      	sxth	r3, r3
 8009f66:	4313      	orrs	r3, r2
 8009f68:	b21b      	sxth	r3, r3
 8009f6a:	4a38      	ldr	r2, [pc, #224]	@ (800a04c <find_volume+0x654>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d151      	bne.n	800a014 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8009f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f72:	78db      	ldrb	r3, [r3, #3]
 8009f74:	061a      	lsls	r2, r3, #24
 8009f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f78:	789b      	ldrb	r3, [r3, #2]
 8009f7a:	041b      	lsls	r3, r3, #16
 8009f7c:	431a      	orrs	r2, r3
 8009f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f80:	785b      	ldrb	r3, [r3, #1]
 8009f82:	021b      	lsls	r3, r3, #8
 8009f84:	4313      	orrs	r3, r2
 8009f86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009f88:	7812      	ldrb	r2, [r2, #0]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	4a30      	ldr	r2, [pc, #192]	@ (800a050 <find_volume+0x658>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d140      	bne.n	800a014 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8009f92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f94:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8009f98:	061a      	lsls	r2, r3, #24
 8009f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f9c:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8009fa0:	041b      	lsls	r3, r3, #16
 8009fa2:	431a      	orrs	r2, r3
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa6:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8009faa:	021b      	lsls	r3, r3, #8
 8009fac:	4313      	orrs	r3, r2
 8009fae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fb0:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	4a27      	ldr	r2, [pc, #156]	@ (800a054 <find_volume+0x65c>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d12b      	bne.n	800a014 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8009fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fbe:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8009fc2:	061a      	lsls	r2, r3, #24
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc6:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8009fca:	041b      	lsls	r3, r3, #16
 8009fcc:	431a      	orrs	r2, r3
 8009fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd0:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8009fd4:	021b      	lsls	r3, r3, #8
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fda:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009fe2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009fe6:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fea:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8009fee:	061a      	lsls	r2, r3, #24
 8009ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff2:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8009ff6:	041b      	lsls	r3, r3, #16
 8009ff8:	431a      	orrs	r2, r3
 8009ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffc:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800a000:	021b      	lsls	r3, r3, #8
 800a002:	4313      	orrs	r3, r2
 800a004:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a006:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 800a00a:	4313      	orrs	r3, r2
 800a00c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a00e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a012:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800a014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a016:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a01a:	461a      	mov	r2, r3
 800a01c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a020:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800a022:	4b0d      	ldr	r3, [pc, #52]	@ (800a058 <find_volume+0x660>)
 800a024:	881b      	ldrh	r3, [r3, #0]
 800a026:	3301      	adds	r3, #1
 800a028:	b29a      	uxth	r2, r3
 800a02a:	4b0b      	ldr	r3, [pc, #44]	@ (800a058 <find_volume+0x660>)
 800a02c:	801a      	strh	r2, [r3, #0]
 800a02e:	4b0a      	ldr	r3, [pc, #40]	@ (800a058 <find_volume+0x660>)
 800a030:	881a      	ldrh	r2, [r3, #0]
 800a032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a034:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a038:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800a03a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a03c:	f7fd fe94 	bl	8007d68 <clear_lock>
#endif

	return FR_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3758      	adds	r7, #88	@ 0x58
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	ffffaa55 	.word	0xffffaa55
 800a050:	41615252 	.word	0x41615252
 800a054:	61417272 	.word	0x61417272
 800a058:	200025d8 	.word	0x200025d8

0800a05c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d02a      	beq.n	800a0c4 <validate+0x68>
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d024      	beq.n	800a0c4 <validate+0x68>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d01b      	beq.n	800a0c4 <validate+0x68>
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a098:	88da      	ldrh	r2, [r3, #6]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0a0:	889b      	ldrh	r3, [r3, #4]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d10e      	bne.n	800a0c4 <validate+0x68>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0b2:	785b      	ldrb	r3, [r3, #1]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fd fbad 	bl	8007814 <disk_status>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	f003 0301 	and.w	r3, r3, #1
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d001      	beq.n	800a0c8 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800a0c4:	2309      	movs	r3, #9
 800a0c6:	e000      	b.n	800a0ca <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
	...

0800a0d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b088      	sub	sp, #32
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800a0e6:	f107 0310 	add.w	r3, r7, #16
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7ff fbd2 	bl	8009894 <get_ldnumber>
 800a0f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	da01      	bge.n	800a0fc <f_mount+0x28>
 800a0f8:	230b      	movs	r3, #11
 800a0fa:	e02f      	b.n	800a15c <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a0fc:	4a19      	ldr	r2, [pc, #100]	@ (800a164 <f_mount+0x90>)
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a104:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d007      	beq.n	800a11c <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800a10c:	69b8      	ldr	r0, [r7, #24]
 800a10e:	f7fd fe2b 	bl	8007d68 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a118:	2200      	movs	r2, #0
 800a11a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d004      	beq.n	800a12c <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a128:	2200      	movs	r2, #0
 800a12a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	490d      	ldr	r1, [pc, #52]	@ (800a164 <f_mount+0x90>)
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d002      	beq.n	800a142 <f_mount+0x6e>
 800a13c:	79fb      	ldrb	r3, [r7, #7]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d001      	beq.n	800a146 <f_mount+0x72>
 800a142:	2300      	movs	r3, #0
 800a144:	e00a      	b.n	800a15c <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800a146:	f107 0108 	add.w	r1, r7, #8
 800a14a:	f107 030c 	add.w	r3, r7, #12
 800a14e:	2200      	movs	r2, #0
 800a150:	4618      	mov	r0, r3
 800a152:	f7ff fc51 	bl	80099f8 <find_volume>
 800a156:	4603      	mov	r3, r0
 800a158:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3720      	adds	r7, #32
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	200025d4 	.word	0x200025d4

0800a168 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800a16e:	b086      	sub	sp, #24
 800a170:	af00      	add	r7, sp, #0
 800a172:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a176:	f843 0c4c 	str.w	r0, [r3, #-76]
 800a17a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a17e:	f843 1c50 	str.w	r1, [r3, #-80]
 800a182:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a186:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800a18a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a18e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <f_open+0x32>
 800a196:	2309      	movs	r3, #9
 800a198:	e2f3      	b.n	800a782 <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 800a19a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a19e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a1a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800a1ac:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a1b6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800a1ba:	f003 031f 	and.w	r3, r3, #31
 800a1be:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800a1c2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a1c6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800a1ca:	f023 0301 	bic.w	r3, r3, #1
 800a1ce:	b2da      	uxtb	r2, r3
 800a1d0:	f107 0118 	add.w	r1, r7, #24
 800a1d4:	3910      	subs	r1, #16
 800a1d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a1da:	3b18      	subs	r3, #24
 800a1dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7ff fc09 	bl	80099f8 <find_volume>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a1ec:	f102 0217 	add.w	r2, r2, #23
 800a1f0:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800a1f2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a1f6:	f103 0317 	add.w	r3, r3, #23
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f040 82bb 	bne.w	800a778 <f_open+0x610>
		INIT_BUF(dj);
 800a202:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a206:	461a      	mov	r2, r3
 800a208:	f107 0318 	add.w	r3, r7, #24
 800a20c:	3b04      	subs	r3, #4
 800a20e:	f8c2 3fe0 	str.w	r3, [r2, #4064]	@ 0xfe0
 800a212:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a216:	461a      	mov	r2, r3
 800a218:	4bd3      	ldr	r3, [pc, #844]	@ (800a568 <f_open+0x400>)
 800a21a:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800a21e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a222:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800a226:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a22a:	3b18      	subs	r3, #24
 800a22c:	4611      	mov	r1, r2
 800a22e:	4618      	mov	r0, r3
 800a230:	f7ff faba 	bl	80097a8 <follow_path>
 800a234:	4603      	mov	r3, r0
 800a236:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a23a:	f102 0217 	add.w	r2, r2, #23
 800a23e:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800a240:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a244:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 800a248:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a24c:	f102 0210 	add.w	r2, r2, #16
 800a250:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a252:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a256:	f103 0317 	add.w	r3, r3, #23
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d124      	bne.n	800a2aa <f_open+0x142>
			if (!dir)	/* Default directory itself */
 800a260:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a264:	f103 0310 	add.w	r3, r3, #16
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d106      	bne.n	800a27c <f_open+0x114>
				res = FR_INVALID_NAME;
 800a26e:	2306      	movs	r3, #6
 800a270:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a274:	f102 0217 	add.w	r2, r2, #23
 800a278:	7013      	strb	r3, [r2, #0]
 800a27a:	e016      	b.n	800a2aa <f_open+0x142>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a27c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a280:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800a284:	2b01      	cmp	r3, #1
 800a286:	bf8c      	ite	hi
 800a288:	2301      	movhi	r3, #1
 800a28a:	2300      	movls	r3, #0
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	461a      	mov	r2, r3
 800a290:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a294:	3b18      	subs	r3, #24
 800a296:	4611      	mov	r1, r2
 800a298:	4618      	mov	r0, r3
 800a29a:	f7fd fbd1 	bl	8007a40 <chk_lock>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a2a4:	f102 0217 	add.w	r2, r2, #23
 800a2a8:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a2aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a2ae:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800a2b2:	f003 031c 	and.w	r3, r3, #28
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f000 813c 	beq.w	800a534 <f_open+0x3cc>
			if (res != FR_OK) {					/* No file, create new */
 800a2bc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a2c0:	f103 0317 	add.w	r3, r3, #23
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d02e      	beq.n	800a328 <f_open+0x1c0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800a2ca:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a2ce:	f103 0317 	add.w	r3, r3, #23
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	2b04      	cmp	r3, #4
 800a2d6:	d112      	bne.n	800a2fe <f_open+0x196>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a2d8:	f7fd fc22 	bl	8007b20 <enq_lock>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d007      	beq.n	800a2f2 <f_open+0x18a>
 800a2e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a2e6:	3b18      	subs	r3, #24
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7fe ff7b 	bl	80091e4 <dir_register>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	e000      	b.n	800a2f4 <f_open+0x18c>
 800a2f2:	2312      	movs	r3, #18
 800a2f4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a2f8:	f102 0217 	add.w	r2, r2, #23
 800a2fc:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a2fe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a302:	461a      	mov	r2, r3
 800a304:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a308:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800a30c:	f043 0308 	orr.w	r3, r3, #8
 800a310:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 800a314:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a318:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 800a31c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a320:	f102 0210 	add.w	r2, r2, #16
 800a324:	6013      	str	r3, [r2, #0]
 800a326:	e01f      	b.n	800a368 <f_open+0x200>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a328:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a32c:	f103 0310 	add.w	r3, r3, #16
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	330b      	adds	r3, #11
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	f003 0311 	and.w	r3, r3, #17
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d006      	beq.n	800a34c <f_open+0x1e4>
					res = FR_DENIED;
 800a33e:	2307      	movs	r3, #7
 800a340:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a344:	f102 0217 	add.w	r2, r2, #23
 800a348:	7013      	strb	r3, [r2, #0]
 800a34a:	e00d      	b.n	800a368 <f_open+0x200>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800a34c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a350:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800a354:	f003 0304 	and.w	r3, r3, #4
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d005      	beq.n	800a368 <f_open+0x200>
						res = FR_EXIST;
 800a35c:	2308      	movs	r3, #8
 800a35e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a362:	f102 0217 	add.w	r2, r2, #23
 800a366:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a368:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a36c:	f103 0317 	add.w	r3, r3, #23
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	f040 8113 	bne.w	800a59e <f_open+0x436>
 800a378:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a37c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800a380:	f003 0308 	and.w	r3, r3, #8
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 810a 	beq.w	800a59e <f_open+0x436>
				dw = GET_FATTIME();				/* Created time */
 800a38a:	f7fd f9e1 	bl	8007750 <get_fattime>
 800a38e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a392:	f103 030c 	add.w	r3, r3, #12
 800a396:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a398:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a39c:	f103 0310 	add.w	r3, r3, #16
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	330e      	adds	r3, #14
 800a3a4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a3a8:	f102 020c 	add.w	r2, r2, #12
 800a3ac:	6812      	ldr	r2, [r2, #0]
 800a3ae:	b2d2      	uxtb	r2, r2
 800a3b0:	701a      	strb	r2, [r3, #0]
 800a3b2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a3b6:	f103 030c 	add.w	r3, r3, #12
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	0a1b      	lsrs	r3, r3, #8
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a3c6:	f103 0310 	add.w	r3, r3, #16
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	330f      	adds	r3, #15
 800a3ce:	b2d2      	uxtb	r2, r2
 800a3d0:	701a      	strb	r2, [r3, #0]
 800a3d2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a3d6:	f103 030c 	add.w	r3, r3, #12
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	0c1a      	lsrs	r2, r3, #16
 800a3de:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a3e2:	f103 0310 	add.w	r3, r3, #16
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	3310      	adds	r3, #16
 800a3ea:	b2d2      	uxtb	r2, r2
 800a3ec:	701a      	strb	r2, [r3, #0]
 800a3ee:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a3f2:	f103 030c 	add.w	r3, r3, #12
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	0e1a      	lsrs	r2, r3, #24
 800a3fa:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a3fe:	f103 0310 	add.w	r3, r3, #16
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	3311      	adds	r3, #17
 800a406:	b2d2      	uxtb	r2, r2
 800a408:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800a40a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a40e:	f103 0310 	add.w	r3, r3, #16
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	330b      	adds	r3, #11
 800a416:	2200      	movs	r2, #0
 800a418:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800a41a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a41e:	f103 0310 	add.w	r3, r3, #16
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	331c      	adds	r3, #28
 800a426:	2200      	movs	r2, #0
 800a428:	701a      	strb	r2, [r3, #0]
 800a42a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a42e:	f103 0310 	add.w	r3, r3, #16
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	331d      	adds	r3, #29
 800a436:	2200      	movs	r2, #0
 800a438:	701a      	strb	r2, [r3, #0]
 800a43a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a43e:	f103 0310 	add.w	r3, r3, #16
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	331e      	adds	r3, #30
 800a446:	2200      	movs	r2, #0
 800a448:	701a      	strb	r2, [r3, #0]
 800a44a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a44e:	f103 0310 	add.w	r3, r3, #16
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	331f      	adds	r3, #31
 800a456:	2200      	movs	r2, #0
 800a458:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800a45a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a45e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800a462:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a466:	f102 0210 	add.w	r2, r2, #16
 800a46a:	6811      	ldr	r1, [r2, #0]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fe fc09 	bl	8008c84 <ld_clust>
 800a472:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a476:	f103 0308 	add.w	r3, r3, #8
 800a47a:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800a47c:	2100      	movs	r1, #0
 800a47e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a482:	f103 0310 	add.w	r3, r3, #16
 800a486:	6818      	ldr	r0, [r3, #0]
 800a488:	f7fe fc2a 	bl	8008ce0 <st_clust>
				dj.fs->wflag = 1;
 800a48c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a490:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800a494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a498:	2201      	movs	r2, #1
 800a49a:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800a49c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a4a0:	f103 0308 	add.w	r3, r3, #8
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d079      	beq.n	800a59e <f_open+0x436>
					dw = dj.fs->winsect;
 800a4aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a4ae:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800a4b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4b8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a4bc:	f102 020c 	add.w	r2, r2, #12
 800a4c0:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800a4c2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a4c6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800a4ca:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a4ce:	f102 0208 	add.w	r2, r2, #8
 800a4d2:	6811      	ldr	r1, [r2, #0]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fe f826 	bl	8008526 <remove_chain>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a4e0:	f102 0217 	add.w	r2, r2, #23
 800a4e4:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800a4e6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a4ea:	f103 0317 	add.w	r3, r3, #23
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d154      	bne.n	800a59e <f_open+0x436>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800a4f4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a4f8:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 800a4fc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a500:	f103 0308 	add.w	r3, r3, #8
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	3b01      	subs	r3, #1
 800a508:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a50c:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800a50e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a512:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800a516:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a51a:	f102 020c 	add.w	r2, r2, #12
 800a51e:	6811      	ldr	r1, [r2, #0]
 800a520:	4618      	mov	r0, r3
 800a522:	f7fd fc9d 	bl	8007e60 <move_window>
 800a526:	4603      	mov	r3, r0
 800a528:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a52c:	f102 0217 	add.w	r2, r2, #23
 800a530:	7013      	strb	r3, [r2, #0]
 800a532:	e034      	b.n	800a59e <f_open+0x436>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800a534:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a538:	f103 0317 	add.w	r3, r3, #23
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d12d      	bne.n	800a59e <f_open+0x436>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800a542:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a546:	f103 0310 	add.w	r3, r3, #16
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	330b      	adds	r3, #11
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	f003 0310 	and.w	r3, r3, #16
 800a554:	2b00      	cmp	r3, #0
 800a556:	d009      	beq.n	800a56c <f_open+0x404>
					res = FR_NO_FILE;
 800a558:	2304      	movs	r3, #4
 800a55a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a55e:	f102 0217 	add.w	r2, r2, #23
 800a562:	7013      	strb	r3, [r2, #0]
 800a564:	e01b      	b.n	800a59e <f_open+0x436>
 800a566:	bf00      	nop
 800a568:	200025f4 	.word	0x200025f4
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800a56c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a570:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800a574:	f003 0302 	and.w	r3, r3, #2
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d010      	beq.n	800a59e <f_open+0x436>
 800a57c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a580:	f103 0310 	add.w	r3, r3, #16
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	330b      	adds	r3, #11
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d005      	beq.n	800a59e <f_open+0x436>
						res = FR_DENIED;
 800a592:	2307      	movs	r3, #7
 800a594:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a598:	f102 0217 	add.w	r2, r2, #23
 800a59c:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800a59e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a5a2:	f103 0317 	add.w	r3, r3, #23
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d155      	bne.n	800a658 <f_open+0x4f0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a5ac:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a5b0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800a5b4:	f003 0308 	and.w	r3, r3, #8
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00a      	beq.n	800a5d2 <f_open+0x46a>
				mode |= FA__WRITTEN;
 800a5bc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a5c6:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800a5ca:	f043 0320 	orr.w	r3, r3, #32
 800a5ce:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800a5d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a5d6:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800a5da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5e0:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800a5e4:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800a5e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a5ec:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800a5ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a5f2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a5f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a600:	f103 0310 	add.w	r3, r3, #16
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a608:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a60c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800a610:	2b01      	cmp	r3, #1
 800a612:	bf8c      	ite	hi
 800a614:	2301      	movhi	r3, #1
 800a616:	2300      	movls	r3, #0
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	461a      	mov	r2, r3
 800a61c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a620:	3b18      	subs	r3, #24
 800a622:	4611      	mov	r1, r2
 800a624:	4618      	mov	r0, r3
 800a626:	f7fd fa9f 	bl	8007b68 <inc_lock>
 800a62a:	4602      	mov	r2, r0
 800a62c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a630:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a634:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a638:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800a63a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a63e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a642:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d105      	bne.n	800a658 <f_open+0x4f0>
 800a64c:	2302      	movs	r3, #2
 800a64e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a652:	f102 0217 	add.w	r2, r2, #23
 800a656:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800a658:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a65c:	f103 0317 	add.w	r3, r3, #23
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	f040 8088 	bne.w	800a778 <f_open+0x610>
			fp->flag = mode;					/* File access mode */
 800a668:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a66c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a670:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a674:	461a      	mov	r2, r3
 800a676:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a67a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800a67e:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800a680:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a684:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a688:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a68c:	2200      	movs	r2, #0
 800a68e:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800a690:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a694:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800a698:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a69c:	f102 0210 	add.w	r2, r2, #16
 800a6a0:	6811      	ldr	r1, [r2, #0]
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7fe faee 	bl	8008c84 <ld_clust>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a6ae:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a6b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a6b6:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800a6b8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a6bc:	f103 0310 	add.w	r3, r3, #16
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	331f      	adds	r3, #31
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	061a      	lsls	r2, r3, #24
 800a6c8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a6cc:	f103 0310 	add.w	r3, r3, #16
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	331e      	adds	r3, #30
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	041b      	lsls	r3, r3, #16
 800a6d8:	431a      	orrs	r2, r3
 800a6da:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a6de:	f103 0310 	add.w	r3, r3, #16
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	331d      	adds	r3, #29
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	021b      	lsls	r3, r3, #8
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a6f0:	f102 0210 	add.w	r2, r2, #16
 800a6f4:	6812      	ldr	r2, [r2, #0]
 800a6f6:	321c      	adds	r2, #28
 800a6f8:	7812      	ldrb	r2, [r2, #0]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800a700:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800a704:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a708:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800a70a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a70e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a716:	461a      	mov	r2, r3
 800a718:	2300      	movs	r3, #0
 800a71a:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800a71c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a720:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a728:	461a      	mov	r2, r3
 800a72a:	2300      	movs	r3, #0
 800a72c:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800a72e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a732:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a73a:	461a      	mov	r2, r3
 800a73c:	2300      	movs	r3, #0
 800a73e:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800a740:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a744:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800a748:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800a74c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800a750:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a754:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800a756:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a75a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a75e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a768:	88da      	ldrh	r2, [r3, #6]
 800a76a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a76e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a776:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800a778:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a77c:	f103 0317 	add.w	r3, r3, #23
 800a780:	781b      	ldrb	r3, [r3, #0]
}
 800a782:	4618      	mov	r0, r3
 800a784:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 800a788:	3718      	adds	r7, #24
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop

0800a790 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b08a      	sub	sp, #40	@ 0x28
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
 800a79c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f7ff fc57 	bl	800a05c <validate>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800a7b2:	7dfb      	ldrb	r3, [r7, #23]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d001      	beq.n	800a7bc <f_write+0x2c>
 800a7b8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ba:	e21e      	b.n	800abfa <f_write+0x46a>
	if (fp->err)							/* Check error */
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7c2:	79db      	ldrb	r3, [r3, #7]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d004      	beq.n	800a7d2 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7ce:	79db      	ldrb	r3, [r3, #7]
 800a7d0:	e213      	b.n	800abfa <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7d8:	799b      	ldrb	r3, [r3, #6]
 800a7da:	f003 0302 	and.w	r3, r3, #2
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d101      	bne.n	800a7e6 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800a7e2:	2307      	movs	r3, #7
 800a7e4:	e209      	b.n	800abfa <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7ec:	689a      	ldr	r2, [r3, #8]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	441a      	add	r2, r3
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	f080 81d9 	bcs.w	800abb2 <f_write+0x422>
 800a800:	2300      	movs	r3, #0
 800a802:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800a804:	e1d5      	b.n	800abb2 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a814:	6812      	ldr	r2, [r2, #0]
 800a816:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a81a:	8952      	ldrh	r2, [r2, #10]
 800a81c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a820:	fb01 f202 	mul.w	r2, r1, r2
 800a824:	1a9b      	subs	r3, r3, r2
 800a826:	2b00      	cmp	r3, #0
 800a828:	f040 8169 	bne.w	800aafe <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a83a:	6812      	ldr	r2, [r2, #0]
 800a83c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a840:	8952      	ldrh	r2, [r2, #10]
 800a842:	fbb3 f3f2 	udiv	r3, r3, r2
 800a846:	b2da      	uxtb	r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a854:	789b      	ldrb	r3, [r3, #2]
 800a856:	3b01      	subs	r3, #1
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	4013      	ands	r3, r2
 800a85c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800a85e:	7dbb      	ldrb	r3, [r7, #22]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d15f      	bne.n	800a924 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d111      	bne.n	800a894 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800a87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d126      	bne.n	800a8ce <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2100      	movs	r1, #0
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7fd feac 	bl	80085e8 <create_chain>
 800a890:	6278      	str	r0, [r7, #36]	@ 0x24
 800a892:	e01c      	b.n	800a8ce <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a89a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d009      	beq.n	800a8b4 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f7fd ff44 	bl	8008738 <clmt_clust>
 800a8b0:	6278      	str	r0, [r7, #36]	@ 0x24
 800a8b2:	e00c      	b.n	800a8ce <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	4610      	mov	r0, r2
 800a8c8:	f7fd fe8e 	bl	80085e8 <create_chain>
 800a8cc:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f000 8173 	beq.w	800abbc <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d106      	bne.n	800a8ea <f_write+0x15a>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8e2:	2202      	movs	r2, #2
 800a8e4:	71da      	strb	r2, [r3, #7]
 800a8e6:	2302      	movs	r3, #2
 800a8e8:	e187      	b.n	800abfa <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f0:	d106      	bne.n	800a900 <f_write+0x170>
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	71da      	strb	r2, [r3, #7]
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e17c      	b.n	800abfa <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a906:	461a      	mov	r2, r3
 800a908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a90a:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d105      	bne.n	800a924 <f_write+0x194>
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a91e:	461a      	mov	r2, r3
 800a920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a922:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a92a:	799b      	ldrb	r3, [r3, #6]
 800a92c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a930:	2b00      	cmp	r3, #0
 800a932:	d023      	beq.n	800a97c <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a940:	7858      	ldrb	r0, [r3, #1]
 800a942:	68f9      	ldr	r1, [r7, #12]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a94a:	699a      	ldr	r2, [r3, #24]
 800a94c:	2301      	movs	r3, #1
 800a94e:	f7fc ffc1 	bl	80078d4 <disk_write>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d006      	beq.n	800a966 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a95e:	2201      	movs	r2, #1
 800a960:	71da      	strb	r2, [r3, #7]
 800a962:	2301      	movs	r3, #1
 800a964:	e149      	b.n	800abfa <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a96c:	799b      	ldrb	r3, [r3, #6]
 800a96e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a972:	b2da      	uxtb	r2, r3
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a97a:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a98a:	695b      	ldr	r3, [r3, #20]
 800a98c:	4619      	mov	r1, r3
 800a98e:	4610      	mov	r0, r2
 800a990:	f7fd fb57 	bl	8008042 <clust2sect>
 800a994:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d106      	bne.n	800a9aa <f_write+0x21a>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	71da      	strb	r2, [r3, #7]
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	e127      	b.n	800abfa <f_write+0x46a>
			sect += csect;
 800a9aa:	7dbb      	ldrb	r3, [r7, #22]
 800a9ac:	693a      	ldr	r2, [r7, #16]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9be:	895b      	ldrh	r3, [r3, #10]
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9c8:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d069      	beq.n	800aaa4 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800a9d0:	7dba      	ldrb	r2, [r7, #22]
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a9dc:	6812      	ldr	r2, [r2, #0]
 800a9de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a9e2:	7892      	ldrb	r2, [r2, #2]
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d90a      	bls.n	800a9fe <f_write+0x26e>
					cc = fp->fs->csize - csect;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9f4:	789b      	ldrb	r3, [r3, #2]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	7dbb      	ldrb	r3, [r7, #22]
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa0a:	7858      	ldrb	r0, [r3, #1]
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	693a      	ldr	r2, [r7, #16]
 800aa10:	69b9      	ldr	r1, [r7, #24]
 800aa12:	f7fc ff5f 	bl	80078d4 <disk_write>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d006      	beq.n	800aa2a <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa22:	2201      	movs	r2, #1
 800aa24:	71da      	strb	r2, [r3, #7]
 800aa26:	2301      	movs	r3, #1
 800aa28:	e0e7      	b.n	800abfa <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa30:	699a      	ldr	r2, [r3, #24]
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	69fa      	ldr	r2, [r7, #28]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d926      	bls.n	800aa8a <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa44:	699a      	ldr	r2, [r3, #24]
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	1ad3      	subs	r3, r2, r3
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800aa50:	6812      	ldr	r2, [r2, #0]
 800aa52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800aa56:	8952      	ldrh	r2, [r2, #10]
 800aa58:	fb02 f303 	mul.w	r3, r2, r3
 800aa5c:	69ba      	ldr	r2, [r7, #24]
 800aa5e:	18d1      	adds	r1, r2, r3
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa6c:	895b      	ldrh	r3, [r3, #10]
 800aa6e:	461a      	mov	r2, r3
 800aa70:	f7fc ff6e 	bl	8007950 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa7a:	799b      	ldrb	r3, [r3, #6]
 800aa7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa88:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa96:	895b      	ldrh	r3, [r3, #10]
 800aa98:	461a      	mov	r2, r3
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	fb02 f303 	mul.w	r3, r2, r3
 800aaa0:	623b      	str	r3, [r7, #32]
				continue;
 800aaa2:	e06e      	b.n	800ab82 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	693a      	ldr	r2, [r7, #16]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d01f      	beq.n	800aaf2 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aab8:	689a      	ldr	r2, [r3, #8]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d215      	bcs.n	800aaf2 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aad2:	7858      	ldrb	r0, [r3, #1]
 800aad4:	68f9      	ldr	r1, [r7, #12]
 800aad6:	2301      	movs	r3, #1
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	f7fc fedb 	bl	8007894 <disk_read>
 800aade:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d006      	beq.n	800aaf2 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aaea:	2201      	movs	r2, #1
 800aaec:	71da      	strb	r2, [r3, #7]
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e083      	b.n	800abfa <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aaf8:	461a      	mov	r2, r3
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab0a:	895b      	ldrh	r3, [r3, #10]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ab1c:	6812      	ldr	r2, [r2, #0]
 800ab1e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ab22:	8952      	ldrh	r2, [r2, #10]
 800ab24:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab28:	fb01 f202 	mul.w	r2, r1, r2
 800ab2c:	1a9b      	subs	r3, r3, r2
 800ab2e:	1ac3      	subs	r3, r0, r3
 800ab30:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800ab32:	6a3a      	ldr	r2, [r7, #32]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d901      	bls.n	800ab3e <f_write+0x3ae>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ab4c:	6812      	ldr	r2, [r2, #0]
 800ab4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ab52:	8952      	ldrh	r2, [r2, #10]
 800ab54:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab58:	fb01 f202 	mul.w	r2, r1, r2
 800ab5c:	1a9b      	subs	r3, r3, r2
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	4413      	add	r3, r2
 800ab62:	6a3a      	ldr	r2, [r7, #32]
 800ab64:	69b9      	ldr	r1, [r7, #24]
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fc fef2 	bl	8007950 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab72:	799b      	ldrb	r3, [r3, #6]
 800ab74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab78:	b2da      	uxtb	r2, r3
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab80:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800ab82:	69ba      	ldr	r2, [r7, #24]
 800ab84:	6a3b      	ldr	r3, [r7, #32]
 800ab86:	4413      	add	r3, r2
 800ab88:	61bb      	str	r3, [r7, #24]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab90:	689a      	ldr	r2, [r3, #8]
 800ab92:	6a3b      	ldr	r3, [r7, #32]
 800ab94:	4413      	add	r3, r2
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ab9c:	6093      	str	r3, [r2, #8]
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	6a3b      	ldr	r3, [r7, #32]
 800aba4:	441a      	add	r2, r3
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	601a      	str	r2, [r3, #0]
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	6a3b      	ldr	r3, [r7, #32]
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f47f ae26 	bne.w	800a806 <f_write+0x76>
 800abba:	e000      	b.n	800abbe <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800abbc:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abc4:	689a      	ldr	r2, [r3, #8]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d907      	bls.n	800abe2 <f_write+0x452>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800abe0:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abe8:	799b      	ldrb	r3, [r3, #6]
 800abea:	f043 0320 	orr.w	r3, r3, #32
 800abee:	b2da      	uxtb	r2, r3
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abf6:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3728      	adds	r7, #40	@ 0x28
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b086      	sub	sp, #24
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f7ff fa26 	bl	800a05c <validate>
 800ac10:	4603      	mov	r3, r0
 800ac12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ac14:	7dfb      	ldrb	r3, [r7, #23]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f040 80bc 	bne.w	800ad94 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac22:	799b      	ldrb	r3, [r3, #6]
 800ac24:	f003 0320 	and.w	r3, r3, #32
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f000 80b3 	beq.w	800ad94 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac34:	799b      	ldrb	r3, [r3, #6]
 800ac36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d01e      	beq.n	800ac7c <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac4a:	7858      	ldrb	r0, [r3, #1]
 800ac4c:	6879      	ldr	r1, [r7, #4]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac54:	699a      	ldr	r2, [r3, #24]
 800ac56:	2301      	movs	r3, #1
 800ac58:	f7fc fe3c 	bl	80078d4 <disk_write>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d001      	beq.n	800ac66 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800ac62:	2301      	movs	r3, #1
 800ac64:	e097      	b.n	800ad96 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac6c:	799b      	ldrb	r3, [r3, #6]
 800ac6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac72:	b2da      	uxtb	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac7a:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac8a:	69db      	ldr	r3, [r3, #28]
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	4610      	mov	r0, r2
 800ac90:	f7fd f8e6 	bl	8007e60 <move_window>
 800ac94:	4603      	mov	r3, r0
 800ac96:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800ac98:	7dfb      	ldrb	r3, [r7, #23]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d17a      	bne.n	800ad94 <f_sync+0x192>
				dir = fp->dir_ptr;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aca4:	6a1b      	ldr	r3, [r3, #32]
 800aca6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	330b      	adds	r3, #11
 800acac:	781a      	ldrb	r2, [r3, #0]
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	330b      	adds	r3, #11
 800acb2:	f042 0220 	orr.w	r2, r2, #32
 800acb6:	b2d2      	uxtb	r2, r2
 800acb8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800acc0:	68da      	ldr	r2, [r3, #12]
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	331c      	adds	r3, #28
 800acc6:	b2d2      	uxtb	r2, r2
 800acc8:	701a      	strb	r2, [r3, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	0a1b      	lsrs	r3, r3, #8
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	331d      	adds	r3, #29
 800acdc:	b2d2      	uxtb	r2, r2
 800acde:	701a      	strb	r2, [r3, #0]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ace6:	68db      	ldr	r3, [r3, #12]
 800ace8:	0c1a      	lsrs	r2, r3, #16
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	331e      	adds	r3, #30
 800acee:	b2d2      	uxtb	r2, r2
 800acf0:	701a      	strb	r2, [r3, #0]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	0e1a      	lsrs	r2, r3, #24
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	331f      	adds	r3, #31
 800ad00:	b2d2      	uxtb	r2, r2
 800ad02:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	6938      	ldr	r0, [r7, #16]
 800ad10:	f7fd ffe6 	bl	8008ce0 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800ad14:	f7fc fd1c 	bl	8007750 <get_fattime>
 800ad18:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	3316      	adds	r3, #22
 800ad1e:	68fa      	ldr	r2, [r7, #12]
 800ad20:	b2d2      	uxtb	r2, r2
 800ad22:	701a      	strb	r2, [r3, #0]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	0a1b      	lsrs	r3, r3, #8
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	3317      	adds	r3, #23
 800ad30:	b2d2      	uxtb	r2, r2
 800ad32:	701a      	strb	r2, [r3, #0]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	0c1a      	lsrs	r2, r3, #16
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	3318      	adds	r3, #24
 800ad3c:	b2d2      	uxtb	r2, r2
 800ad3e:	701a      	strb	r2, [r3, #0]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	0e1a      	lsrs	r2, r3, #24
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	3319      	adds	r3, #25
 800ad48:	b2d2      	uxtb	r2, r2
 800ad4a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	3312      	adds	r3, #18
 800ad50:	2200      	movs	r2, #0
 800ad52:	701a      	strb	r2, [r3, #0]
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	3313      	adds	r3, #19
 800ad58:	2200      	movs	r2, #0
 800ad5a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad62:	799b      	ldrb	r3, [r3, #6]
 800ad64:	f023 0320 	bic.w	r3, r3, #32
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad70:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad7e:	2201      	movs	r2, #1
 800ad80:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fd f89a 	bl	8007ec4 <sync_fs>
 800ad90:	4603      	mov	r3, r0
 800ad92:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800ad94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3718      	adds	r7, #24
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b084      	sub	sp, #16
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f7ff ff2b 	bl	800ac02 <f_sync>
 800adac:	4603      	mov	r3, r0
 800adae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d119      	bne.n	800adea <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f7ff f950 	bl	800a05c <validate>
 800adbc:	4603      	mov	r3, r0
 800adbe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800adc0:	7bfb      	ldrb	r3, [r7, #15]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d111      	bne.n	800adea <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800adcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adce:	4618      	mov	r0, r3
 800add0:	f7fc ff86 	bl	8007ce0 <dec_lock>
 800add4:	4603      	mov	r3, r0
 800add6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800add8:	7bfb      	ldrb	r3, [r7, #15]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d105      	bne.n	800adea <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ade4:	461a      	mov	r2, r3
 800ade6:	2300      	movs	r3, #0
 800ade8:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800adea:	7bfb      	ldrb	r3, [r7, #15]
}
 800adec:	4618      	mov	r0, r3
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b090      	sub	sp, #64	@ 0x40
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f7ff f92c 	bl	800a05c <validate>
 800ae04:	4603      	mov	r3, r0
 800ae06:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ae0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d002      	beq.n	800ae18 <f_lseek+0x24>
 800ae12:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ae16:	e2da      	b.n	800b3ce <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae1e:	79db      	ldrb	r3, [r3, #7]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d004      	beq.n	800ae2e <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae2a:	79db      	ldrb	r3, [r3, #7]
 800ae2c:	e2cf      	b.n	800b3ce <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f000 8124 	beq.w	800b084 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae42:	d16c      	bne.n	800af1e <f_lseek+0x12a>
			tbl = fp->cltbl;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae4c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ae4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae50:	1d1a      	adds	r2, r3, #4
 800ae52:	627a      	str	r2, [r7, #36]	@ 0x24
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	617b      	str	r3, [r7, #20]
 800ae58:	2302      	movs	r3, #2
 800ae5a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800ae66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d046      	beq.n	800aefa <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ae6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6e:	613b      	str	r3, [r7, #16]
 800ae70:	2300      	movs	r3, #0
 800ae72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae76:	3302      	adds	r3, #2
 800ae78:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae7c:	60fb      	str	r3, [r7, #12]
 800ae7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae80:	3301      	adds	r3, #1
 800ae82:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fd f8fb 	bl	800808a <get_fat>
 800ae94:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800ae96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d806      	bhi.n	800aeaa <f_lseek+0xb6>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aea2:	2202      	movs	r2, #2
 800aea4:	71da      	strb	r2, [r3, #7]
 800aea6:	2302      	movs	r3, #2
 800aea8:	e291      	b.n	800b3ce <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb0:	d106      	bne.n	800aec0 <f_lseek+0xcc>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aeb8:	2201      	movs	r2, #1
 800aeba:	71da      	strb	r2, [r3, #7]
 800aebc:	2301      	movs	r3, #1
 800aebe:	e286      	b.n	800b3ce <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	3301      	adds	r3, #1
 800aec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d0d7      	beq.n	800ae7a <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800aeca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d809      	bhi.n	800aee6 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800aed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed4:	1d1a      	adds	r2, r3, #4
 800aed6:	627a      	str	r2, [r7, #36]	@ 0x24
 800aed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aeda:	601a      	str	r2, [r3, #0]
 800aedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aede:	1d1a      	adds	r2, r3, #4
 800aee0:	627a      	str	r2, [r7, #36]	@ 0x24
 800aee2:	693a      	ldr	r2, [r7, #16]
 800aee4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aef2:	695b      	ldr	r3, [r3, #20]
 800aef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d3b8      	bcc.n	800ae6c <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af04:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800af06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d803      	bhi.n	800af16 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800af0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af10:	2200      	movs	r2, #0
 800af12:	601a      	str	r2, [r3, #0]
 800af14:	e259      	b.n	800b3ca <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800af16:	2311      	movs	r3, #17
 800af18:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800af1c:	e255      	b.n	800b3ca <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	683a      	ldr	r2, [r7, #0]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d904      	bls.n	800af36 <f_lseek+0x142>
				ofs = fp->fsize;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af32:	68db      	ldr	r3, [r3, #12]
 800af34:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af3c:	461a      	mov	r2, r3
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	f000 8240 	beq.w	800b3ca <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	3b01      	subs	r3, #1
 800af4e:	4619      	mov	r1, r3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f7fd fbf1 	bl	8008738 <clmt_clust>
 800af56:	4602      	mov	r2, r0
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af5e:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af6e:	695b      	ldr	r3, [r3, #20]
 800af70:	4619      	mov	r1, r3
 800af72:	4610      	mov	r0, r2
 800af74:	f7fd f865 	bl	8008042 <clust2sect>
 800af78:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d106      	bne.n	800af8e <f_lseek+0x19a>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af86:	2202      	movs	r2, #2
 800af88:	71da      	strb	r2, [r3, #7]
 800af8a:	2302      	movs	r3, #2
 800af8c:	e21f      	b.n	800b3ce <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	3b01      	subs	r3, #1
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800af98:	6812      	ldr	r2, [r2, #0]
 800af9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800af9e:	8952      	ldrh	r2, [r2, #10]
 800afa0:	fbb3 f3f2 	udiv	r3, r3, r2
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800afaa:	6812      	ldr	r2, [r2, #0]
 800afac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800afb0:	7892      	ldrb	r2, [r2, #2]
 800afb2:	3a01      	subs	r2, #1
 800afb4:	4013      	ands	r3, r2
 800afb6:	69ba      	ldr	r2, [r7, #24]
 800afb8:	4413      	add	r3, r2
 800afba:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800afca:	6812      	ldr	r2, [r2, #0]
 800afcc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800afd0:	8952      	ldrh	r2, [r2, #10]
 800afd2:	fbb3 f1f2 	udiv	r1, r3, r2
 800afd6:	fb01 f202 	mul.w	r2, r1, r2
 800afda:	1a9b      	subs	r3, r3, r2
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f000 81f4 	beq.w	800b3ca <f_lseek+0x5d6>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	69ba      	ldr	r2, [r7, #24]
 800afec:	429a      	cmp	r2, r3
 800afee:	f000 81ec 	beq.w	800b3ca <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aff8:	799b      	ldrb	r3, [r3, #6]
 800affa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800affe:	2b00      	cmp	r3, #0
 800b000:	d023      	beq.n	800b04a <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b00e:	7858      	ldrb	r0, [r3, #1]
 800b010:	6879      	ldr	r1, [r7, #4]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b018:	699a      	ldr	r2, [r3, #24]
 800b01a:	2301      	movs	r3, #1
 800b01c:	f7fc fc5a 	bl	80078d4 <disk_write>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d006      	beq.n	800b034 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b02c:	2201      	movs	r2, #1
 800b02e:	71da      	strb	r2, [r3, #7]
 800b030:	2301      	movs	r3, #1
 800b032:	e1cc      	b.n	800b3ce <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b03a:	799b      	ldrb	r3, [r3, #6]
 800b03c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b040:	b2da      	uxtb	r2, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b048:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b056:	7858      	ldrb	r0, [r3, #1]
 800b058:	6879      	ldr	r1, [r7, #4]
 800b05a:	2301      	movs	r3, #1
 800b05c:	69ba      	ldr	r2, [r7, #24]
 800b05e:	f7fc fc19 	bl	8007894 <disk_read>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d006      	beq.n	800b076 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b06e:	2201      	movs	r2, #1
 800b070:	71da      	strb	r2, [r3, #7]
 800b072:	2301      	movs	r3, #1
 800b074:	e1ab      	b.n	800b3ce <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b07c:	461a      	mov	r2, r3
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	6193      	str	r3, [r2, #24]
 800b082:	e1a2      	b.n	800b3ca <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	683a      	ldr	r2, [r7, #0]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d90c      	bls.n	800b0ac <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b098:	799b      	ldrb	r3, [r3, #6]
 800b09a:	f003 0302 	and.w	r3, r3, #2
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d104      	bne.n	800b0ac <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0c4:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	f000 8100 	beq.w	800b2ce <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0da:	789b      	ldrb	r3, [r3, #2]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0ea:	895b      	ldrh	r3, [r3, #10]
 800b0ec:	fb02 f303 	mul.w	r3, r2, r3
 800b0f0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b0f2:	6a3b      	ldr	r3, [r7, #32]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d021      	beq.n	800b13c <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	1e5a      	subs	r2, r3, #1
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	fbb2 f2f3 	udiv	r2, r2, r3
 800b102:	6a3b      	ldr	r3, [r7, #32]
 800b104:	1e59      	subs	r1, r3, #1
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d315      	bcc.n	800b13c <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800b110:	6a3b      	ldr	r3, [r7, #32]
 800b112:	1e5a      	subs	r2, r3, #1
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	425b      	negs	r3, r3
 800b118:	4013      	ands	r3, r2
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b120:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	683a      	ldr	r2, [r7, #0]
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b136:	695b      	ldr	r3, [r3, #20]
 800b138:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b13a:	e031      	b.n	800b1a0 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b142:	691b      	ldr	r3, [r3, #16]
 800b144:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d123      	bne.n	800b194 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	2100      	movs	r1, #0
 800b156:	4618      	mov	r0, r3
 800b158:	f7fd fa46 	bl	80085e8 <create_chain>
 800b15c:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800b15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b160:	2b01      	cmp	r3, #1
 800b162:	d106      	bne.n	800b172 <f_lseek+0x37e>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b16a:	2202      	movs	r2, #2
 800b16c:	71da      	strb	r2, [r3, #7]
 800b16e:	2302      	movs	r3, #2
 800b170:	e12d      	b.n	800b3ce <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b178:	d106      	bne.n	800b188 <f_lseek+0x394>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b180:	2201      	movs	r2, #1
 800b182:	71da      	strb	r2, [r3, #7]
 800b184:	2301      	movs	r3, #1
 800b186:	e122      	b.n	800b3ce <f_lseek+0x5da>
					fp->sclust = clst;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b18e:	461a      	mov	r2, r3
 800b190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b192:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b19a:	461a      	mov	r2, r3
 800b19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b19e:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800b1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f000 8093 	beq.w	800b2ce <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 800b1a8:	e052      	b.n	800b250 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1b0:	799b      	ldrb	r3, [r3, #6]
 800b1b2:	f003 0302 	and.w	r3, r3, #2
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00e      	beq.n	800b1d8 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fd fa0f 	bl	80085e8 <create_chain>
 800b1ca:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800b1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d10b      	bne.n	800b1ea <f_lseek+0x3f6>
							ofs = bcs; break;
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	603b      	str	r3, [r7, #0]
 800b1d6:	e03f      	b.n	800b258 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fc ff51 	bl	800808a <get_fat>
 800b1e8:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f0:	d106      	bne.n	800b200 <f_lseek+0x40c>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	71da      	strb	r2, [r3, #7]
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e0e6      	b.n	800b3ce <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800b200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b202:	2b01      	cmp	r3, #1
 800b204:	d909      	bls.n	800b21a <f_lseek+0x426>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b212:	695b      	ldr	r3, [r3, #20]
 800b214:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b216:	429a      	cmp	r2, r3
 800b218:	d306      	bcc.n	800b228 <f_lseek+0x434>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b220:	2202      	movs	r2, #2
 800b222:	71da      	strb	r2, [r3, #7]
 800b224:	2302      	movs	r3, #2
 800b226:	e0d2      	b.n	800b3ce <f_lseek+0x5da>
					fp->clust = clst;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b22e:	461a      	mov	r2, r3
 800b230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b232:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b23a:	689a      	ldr	r2, [r3, #8]
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	4413      	add	r3, r2
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b246:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800b248:	683a      	ldr	r2, [r7, #0]
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800b250:	683a      	ldr	r2, [r7, #0]
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	429a      	cmp	r2, r3
 800b256:	d8a8      	bhi.n	800b1aa <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b25e:	689a      	ldr	r2, [r3, #8]
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	4413      	add	r3, r2
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b26a:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b278:	895b      	ldrh	r3, [r3, #10]
 800b27a:	461a      	mov	r2, r3
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b282:	fb01 f202 	mul.w	r2, r1, r2
 800b286:	1a9b      	subs	r3, r3, r2
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d020      	beq.n	800b2ce <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b296:	4618      	mov	r0, r3
 800b298:	f7fc fed3 	bl	8008042 <clust2sect>
 800b29c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800b29e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d106      	bne.n	800b2b2 <f_lseek+0x4be>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2aa:	2202      	movs	r2, #2
 800b2ac:	71da      	strb	r2, [r3, #7]
 800b2ae:	2302      	movs	r3, #2
 800b2b0:	e08d      	b.n	800b3ce <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2be:	895b      	ldrh	r3, [r3, #10]
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2ca:	4413      	add	r3, r2
 800b2cc:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b2dc:	6812      	ldr	r2, [r2, #0]
 800b2de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b2e2:	8952      	ldrh	r2, [r2, #10]
 800b2e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2e8:	fb01 f202 	mul.w	r2, r1, r2
 800b2ec:	1a9b      	subs	r3, r3, r2
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d04e      	beq.n	800b390 <f_lseek+0x59c>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2f8:	699b      	ldr	r3, [r3, #24]
 800b2fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d047      	beq.n	800b390 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b306:	799b      	ldrb	r3, [r3, #6]
 800b308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d023      	beq.n	800b358 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b31c:	7858      	ldrb	r0, [r3, #1]
 800b31e:	6879      	ldr	r1, [r7, #4]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b326:	699a      	ldr	r2, [r3, #24]
 800b328:	2301      	movs	r3, #1
 800b32a:	f7fc fad3 	bl	80078d4 <disk_write>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d006      	beq.n	800b342 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b33a:	2201      	movs	r2, #1
 800b33c:	71da      	strb	r2, [r3, #7]
 800b33e:	2301      	movs	r3, #1
 800b340:	e045      	b.n	800b3ce <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b348:	799b      	ldrb	r3, [r3, #6]
 800b34a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b34e:	b2da      	uxtb	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b356:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b364:	7858      	ldrb	r0, [r3, #1]
 800b366:	6879      	ldr	r1, [r7, #4]
 800b368:	2301      	movs	r3, #1
 800b36a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b36c:	f7fc fa92 	bl	8007894 <disk_read>
 800b370:	4603      	mov	r3, r0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d006      	beq.n	800b384 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b37c:	2201      	movs	r2, #1
 800b37e:	71da      	strb	r2, [r3, #7]
 800b380:	2301      	movs	r3, #1
 800b382:	e024      	b.n	800b3ce <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b38a:	461a      	mov	r2, r3
 800b38c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b38e:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b396:	689a      	ldr	r2, [r3, #8]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d912      	bls.n	800b3ca <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b3b2:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3ba:	799b      	ldrb	r3, [r3, #6]
 800b3bc:	f043 0320 	orr.w	r3, r3, #32
 800b3c0:	b2da      	uxtb	r2, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3c8:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800b3ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3740      	adds	r7, #64	@ 0x40
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b084      	sub	sp, #16
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	460b      	mov	r3, r1
 800b3e0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800b3e2:	78fb      	ldrb	r3, [r7, #3]
 800b3e4:	2b0a      	cmp	r3, #10
 800b3e6:	d103      	bne.n	800b3f0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800b3e8:	210d      	movs	r1, #13
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f7ff fff3 	bl	800b3d6 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	db25      	blt.n	800b448 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	1c5a      	adds	r2, r3, #1
 800b400:	60fa      	str	r2, [r7, #12]
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	4413      	add	r3, r2
 800b406:	78fa      	ldrb	r2, [r7, #3]
 800b408:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2b3c      	cmp	r3, #60	@ 0x3c
 800b40e:	dd12      	ble.n	800b436 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6818      	ldr	r0, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f103 010c 	add.w	r1, r3, #12
 800b41a:	68fa      	ldr	r2, [r7, #12]
 800b41c:	f107 0308 	add.w	r3, r7, #8
 800b420:	f7ff f9b6 	bl	800a790 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d101      	bne.n	800b430 <putc_bfd+0x5a>
 800b42c:	2300      	movs	r3, #0
 800b42e:	e001      	b.n	800b434 <putc_bfd+0x5e>
 800b430:	f04f 33ff 	mov.w	r3, #4294967295
 800b434:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	1c5a      	adds	r2, r3, #1
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	609a      	str	r2, [r3, #8]
 800b446:	e000      	b.n	800b44a <putc_bfd+0x74>
	if (i < 0) return;
 800b448:	bf00      	nop
}
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800b450:	b590      	push	{r4, r7, lr}
 800b452:	b097      	sub	sp, #92	@ 0x5c
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800b45e:	2300      	movs	r3, #0
 800b460:	613b      	str	r3, [r7, #16]
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800b466:	e009      	b.n	800b47c <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	1c5a      	adds	r2, r3, #1
 800b46c:	607a      	str	r2, [r7, #4]
 800b46e:	781a      	ldrb	r2, [r3, #0]
 800b470:	f107 030c 	add.w	r3, r7, #12
 800b474:	4611      	mov	r1, r2
 800b476:	4618      	mov	r0, r3
 800b478:	f7ff ffad 	bl	800b3d6 <putc_bfd>
	while (*str)			/* Put the string */
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d1f1      	bne.n	800b468 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	2b00      	cmp	r3, #0
 800b488:	db15      	blt.n	800b4b6 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	461c      	mov	r4, r3
 800b490:	f107 0208 	add.w	r2, r7, #8
 800b494:	f107 030c 	add.w	r3, r7, #12
 800b498:	f103 010c 	add.w	r1, r3, #12
 800b49c:	4613      	mov	r3, r2
 800b49e:	4622      	mov	r2, r4
 800b4a0:	f7ff f976 	bl	800a790 <f_write>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d105      	bne.n	800b4b6 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d101      	bne.n	800b4b6 <f_puts+0x66>
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	e001      	b.n	800b4ba <f_puts+0x6a>
	return EOF;
 800b4b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	375c      	adds	r7, #92	@ 0x5c
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd90      	pop	{r4, r7, pc}
	...

0800b4c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b087      	sub	sp, #28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800b4da:	4b1e      	ldr	r3, [pc, #120]	@ (800b554 <FATFS_LinkDriverEx+0x90>)
 800b4dc:	7a5b      	ldrb	r3, [r3, #9]
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d831      	bhi.n	800b548 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b4e4:	4b1b      	ldr	r3, [pc, #108]	@ (800b554 <FATFS_LinkDriverEx+0x90>)
 800b4e6:	7a5b      	ldrb	r3, [r3, #9]
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	4b19      	ldr	r3, [pc, #100]	@ (800b554 <FATFS_LinkDriverEx+0x90>)
 800b4ee:	2100      	movs	r1, #0
 800b4f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800b4f2:	4b18      	ldr	r3, [pc, #96]	@ (800b554 <FATFS_LinkDriverEx+0x90>)
 800b4f4:	7a5b      	ldrb	r3, [r3, #9]
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	4a16      	ldr	r2, [pc, #88]	@ (800b554 <FATFS_LinkDriverEx+0x90>)
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	4413      	add	r3, r2
 800b4fe:	68fa      	ldr	r2, [r7, #12]
 800b500:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800b502:	4b14      	ldr	r3, [pc, #80]	@ (800b554 <FATFS_LinkDriverEx+0x90>)
 800b504:	7a5b      	ldrb	r3, [r3, #9]
 800b506:	b2db      	uxtb	r3, r3
 800b508:	461a      	mov	r2, r3
 800b50a:	4b12      	ldr	r3, [pc, #72]	@ (800b554 <FATFS_LinkDriverEx+0x90>)
 800b50c:	4413      	add	r3, r2
 800b50e:	79fa      	ldrb	r2, [r7, #7]
 800b510:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b512:	4b10      	ldr	r3, [pc, #64]	@ (800b554 <FATFS_LinkDriverEx+0x90>)
 800b514:	7a5b      	ldrb	r3, [r3, #9]
 800b516:	b2db      	uxtb	r3, r3
 800b518:	1c5a      	adds	r2, r3, #1
 800b51a:	b2d1      	uxtb	r1, r2
 800b51c:	4a0d      	ldr	r2, [pc, #52]	@ (800b554 <FATFS_LinkDriverEx+0x90>)
 800b51e:	7251      	strb	r1, [r2, #9]
 800b520:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b522:	7dbb      	ldrb	r3, [r7, #22]
 800b524:	3330      	adds	r3, #48	@ 0x30
 800b526:	b2da      	uxtb	r2, r3
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	3301      	adds	r3, #1
 800b530:	223a      	movs	r2, #58	@ 0x3a
 800b532:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	3302      	adds	r3, #2
 800b538:	222f      	movs	r2, #47	@ 0x2f
 800b53a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	3303      	adds	r3, #3
 800b540:	2200      	movs	r2, #0
 800b542:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b544:	2300      	movs	r3, #0
 800b546:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800b548:	7dfb      	ldrb	r3, [r7, #23]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	371c      	adds	r7, #28
 800b54e:	46bd      	mov	sp, r7
 800b550:	bc80      	pop	{r7}
 800b552:	4770      	bx	lr
 800b554:	200027f4 	.word	0x200027f4

0800b558 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b562:	2200      	movs	r2, #0
 800b564:	6839      	ldr	r1, [r7, #0]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f7ff ffac 	bl	800b4c4 <FATFS_LinkDriverEx>
 800b56c:	4603      	mov	r3, r0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
	...

0800b578 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800b578:	b480      	push	{r7}
 800b57a:	b085      	sub	sp, #20
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	4603      	mov	r3, r0
 800b580:	6039      	str	r1, [r7, #0]
 800b582:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b584:	88fb      	ldrh	r3, [r7, #6]
 800b586:	2b7f      	cmp	r3, #127	@ 0x7f
 800b588:	d802      	bhi.n	800b590 <ff_convert+0x18>
		c = chr;
 800b58a:	88fb      	ldrh	r3, [r7, #6]
 800b58c:	81fb      	strh	r3, [r7, #14]
 800b58e:	e025      	b.n	800b5dc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00b      	beq.n	800b5ae <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b596:	88fb      	ldrh	r3, [r7, #6]
 800b598:	2bff      	cmp	r3, #255	@ 0xff
 800b59a:	d805      	bhi.n	800b5a8 <ff_convert+0x30>
 800b59c:	88fb      	ldrh	r3, [r7, #6]
 800b59e:	3b80      	subs	r3, #128	@ 0x80
 800b5a0:	4a11      	ldr	r2, [pc, #68]	@ (800b5e8 <ff_convert+0x70>)
 800b5a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5a6:	e000      	b.n	800b5aa <ff_convert+0x32>
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	81fb      	strh	r3, [r7, #14]
 800b5ac:	e016      	b.n	800b5dc <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	81fb      	strh	r3, [r7, #14]
 800b5b2:	e009      	b.n	800b5c8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b5b4:	89fb      	ldrh	r3, [r7, #14]
 800b5b6:	4a0c      	ldr	r2, [pc, #48]	@ (800b5e8 <ff_convert+0x70>)
 800b5b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5bc:	88fa      	ldrh	r2, [r7, #6]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d006      	beq.n	800b5d0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b5c2:	89fb      	ldrh	r3, [r7, #14]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	81fb      	strh	r3, [r7, #14]
 800b5c8:	89fb      	ldrh	r3, [r7, #14]
 800b5ca:	2b7f      	cmp	r3, #127	@ 0x7f
 800b5cc:	d9f2      	bls.n	800b5b4 <ff_convert+0x3c>
 800b5ce:	e000      	b.n	800b5d2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b5d0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b5d2:	89fb      	ldrh	r3, [r7, #14]
 800b5d4:	3380      	adds	r3, #128	@ 0x80
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b5dc:	89fb      	ldrh	r3, [r7, #14]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3714      	adds	r7, #20
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bc80      	pop	{r7}
 800b5e6:	4770      	bx	lr
 800b5e8:	0800e4b8 	.word	0x0800e4b8

0800b5ec <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	60fb      	str	r3, [r7, #12]
 800b5fa:	e002      	b.n	800b602 <ff_wtoupper+0x16>
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	3301      	adds	r3, #1
 800b600:	60fb      	str	r3, [r7, #12]
 800b602:	4a0f      	ldr	r2, [pc, #60]	@ (800b640 <ff_wtoupper+0x54>)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d006      	beq.n	800b61c <ff_wtoupper+0x30>
 800b60e:	4a0c      	ldr	r2, [pc, #48]	@ (800b640 <ff_wtoupper+0x54>)
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b616:	88fa      	ldrh	r2, [r7, #6]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d1ef      	bne.n	800b5fc <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800b61c:	4a08      	ldr	r2, [pc, #32]	@ (800b640 <ff_wtoupper+0x54>)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d004      	beq.n	800b632 <ff_wtoupper+0x46>
 800b628:	4a06      	ldr	r2, [pc, #24]	@ (800b644 <ff_wtoupper+0x58>)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b630:	e000      	b.n	800b634 <ff_wtoupper+0x48>
 800b632:	88fb      	ldrh	r3, [r7, #6]
}
 800b634:	4618      	mov	r0, r3
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	bc80      	pop	{r7}
 800b63c:	4770      	bx	lr
 800b63e:	bf00      	nop
 800b640:	0800e5b8 	.word	0x0800e5b8
 800b644:	0800e798 	.word	0x0800e798

0800b648 <__cvt>:
 800b648:	2b00      	cmp	r3, #0
 800b64a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b64e:	461d      	mov	r5, r3
 800b650:	bfbb      	ittet	lt
 800b652:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b656:	461d      	movlt	r5, r3
 800b658:	2300      	movge	r3, #0
 800b65a:	232d      	movlt	r3, #45	@ 0x2d
 800b65c:	b088      	sub	sp, #32
 800b65e:	4614      	mov	r4, r2
 800b660:	bfb8      	it	lt
 800b662:	4614      	movlt	r4, r2
 800b664:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b666:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b668:	7013      	strb	r3, [r2, #0]
 800b66a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b66c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b670:	f023 0820 	bic.w	r8, r3, #32
 800b674:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b678:	d005      	beq.n	800b686 <__cvt+0x3e>
 800b67a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b67e:	d100      	bne.n	800b682 <__cvt+0x3a>
 800b680:	3601      	adds	r6, #1
 800b682:	2302      	movs	r3, #2
 800b684:	e000      	b.n	800b688 <__cvt+0x40>
 800b686:	2303      	movs	r3, #3
 800b688:	aa07      	add	r2, sp, #28
 800b68a:	9204      	str	r2, [sp, #16]
 800b68c:	aa06      	add	r2, sp, #24
 800b68e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b692:	e9cd 3600 	strd	r3, r6, [sp]
 800b696:	4622      	mov	r2, r4
 800b698:	462b      	mov	r3, r5
 800b69a:	f000 fe6d 	bl	800c378 <_dtoa_r>
 800b69e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b6a2:	4607      	mov	r7, r0
 800b6a4:	d119      	bne.n	800b6da <__cvt+0x92>
 800b6a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b6a8:	07db      	lsls	r3, r3, #31
 800b6aa:	d50e      	bpl.n	800b6ca <__cvt+0x82>
 800b6ac:	eb00 0906 	add.w	r9, r0, r6
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	4629      	mov	r1, r5
 800b6b8:	f7f5 f976 	bl	80009a8 <__aeabi_dcmpeq>
 800b6bc:	b108      	cbz	r0, 800b6c2 <__cvt+0x7a>
 800b6be:	f8cd 901c 	str.w	r9, [sp, #28]
 800b6c2:	2230      	movs	r2, #48	@ 0x30
 800b6c4:	9b07      	ldr	r3, [sp, #28]
 800b6c6:	454b      	cmp	r3, r9
 800b6c8:	d31e      	bcc.n	800b708 <__cvt+0xc0>
 800b6ca:	4638      	mov	r0, r7
 800b6cc:	9b07      	ldr	r3, [sp, #28]
 800b6ce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b6d0:	1bdb      	subs	r3, r3, r7
 800b6d2:	6013      	str	r3, [r2, #0]
 800b6d4:	b008      	add	sp, #32
 800b6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6da:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b6de:	eb00 0906 	add.w	r9, r0, r6
 800b6e2:	d1e5      	bne.n	800b6b0 <__cvt+0x68>
 800b6e4:	7803      	ldrb	r3, [r0, #0]
 800b6e6:	2b30      	cmp	r3, #48	@ 0x30
 800b6e8:	d10a      	bne.n	800b700 <__cvt+0xb8>
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	f7f5 f959 	bl	80009a8 <__aeabi_dcmpeq>
 800b6f6:	b918      	cbnz	r0, 800b700 <__cvt+0xb8>
 800b6f8:	f1c6 0601 	rsb	r6, r6, #1
 800b6fc:	f8ca 6000 	str.w	r6, [sl]
 800b700:	f8da 3000 	ldr.w	r3, [sl]
 800b704:	4499      	add	r9, r3
 800b706:	e7d3      	b.n	800b6b0 <__cvt+0x68>
 800b708:	1c59      	adds	r1, r3, #1
 800b70a:	9107      	str	r1, [sp, #28]
 800b70c:	701a      	strb	r2, [r3, #0]
 800b70e:	e7d9      	b.n	800b6c4 <__cvt+0x7c>

0800b710 <__exponent>:
 800b710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b712:	2900      	cmp	r1, #0
 800b714:	bfb6      	itet	lt
 800b716:	232d      	movlt	r3, #45	@ 0x2d
 800b718:	232b      	movge	r3, #43	@ 0x2b
 800b71a:	4249      	neglt	r1, r1
 800b71c:	2909      	cmp	r1, #9
 800b71e:	7002      	strb	r2, [r0, #0]
 800b720:	7043      	strb	r3, [r0, #1]
 800b722:	dd29      	ble.n	800b778 <__exponent+0x68>
 800b724:	f10d 0307 	add.w	r3, sp, #7
 800b728:	461d      	mov	r5, r3
 800b72a:	270a      	movs	r7, #10
 800b72c:	fbb1 f6f7 	udiv	r6, r1, r7
 800b730:	461a      	mov	r2, r3
 800b732:	fb07 1416 	mls	r4, r7, r6, r1
 800b736:	3430      	adds	r4, #48	@ 0x30
 800b738:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b73c:	460c      	mov	r4, r1
 800b73e:	2c63      	cmp	r4, #99	@ 0x63
 800b740:	4631      	mov	r1, r6
 800b742:	f103 33ff 	add.w	r3, r3, #4294967295
 800b746:	dcf1      	bgt.n	800b72c <__exponent+0x1c>
 800b748:	3130      	adds	r1, #48	@ 0x30
 800b74a:	1e94      	subs	r4, r2, #2
 800b74c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b750:	4623      	mov	r3, r4
 800b752:	1c41      	adds	r1, r0, #1
 800b754:	42ab      	cmp	r3, r5
 800b756:	d30a      	bcc.n	800b76e <__exponent+0x5e>
 800b758:	f10d 0309 	add.w	r3, sp, #9
 800b75c:	1a9b      	subs	r3, r3, r2
 800b75e:	42ac      	cmp	r4, r5
 800b760:	bf88      	it	hi
 800b762:	2300      	movhi	r3, #0
 800b764:	3302      	adds	r3, #2
 800b766:	4403      	add	r3, r0
 800b768:	1a18      	subs	r0, r3, r0
 800b76a:	b003      	add	sp, #12
 800b76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b76e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b772:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b776:	e7ed      	b.n	800b754 <__exponent+0x44>
 800b778:	2330      	movs	r3, #48	@ 0x30
 800b77a:	3130      	adds	r1, #48	@ 0x30
 800b77c:	7083      	strb	r3, [r0, #2]
 800b77e:	70c1      	strb	r1, [r0, #3]
 800b780:	1d03      	adds	r3, r0, #4
 800b782:	e7f1      	b.n	800b768 <__exponent+0x58>

0800b784 <_printf_float>:
 800b784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b788:	b091      	sub	sp, #68	@ 0x44
 800b78a:	460c      	mov	r4, r1
 800b78c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b790:	4616      	mov	r6, r2
 800b792:	461f      	mov	r7, r3
 800b794:	4605      	mov	r5, r0
 800b796:	f000 fce1 	bl	800c15c <_localeconv_r>
 800b79a:	6803      	ldr	r3, [r0, #0]
 800b79c:	4618      	mov	r0, r3
 800b79e:	9308      	str	r3, [sp, #32]
 800b7a0:	f7f4 fcd6 	bl	8000150 <strlen>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	930e      	str	r3, [sp, #56]	@ 0x38
 800b7a8:	f8d8 3000 	ldr.w	r3, [r8]
 800b7ac:	9009      	str	r0, [sp, #36]	@ 0x24
 800b7ae:	3307      	adds	r3, #7
 800b7b0:	f023 0307 	bic.w	r3, r3, #7
 800b7b4:	f103 0208 	add.w	r2, r3, #8
 800b7b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b7bc:	f8d4 b000 	ldr.w	fp, [r4]
 800b7c0:	f8c8 2000 	str.w	r2, [r8]
 800b7c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b7c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b7cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7ce:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b7d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b7da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b7de:	4b9c      	ldr	r3, [pc, #624]	@ (800ba50 <_printf_float+0x2cc>)
 800b7e0:	f7f5 f914 	bl	8000a0c <__aeabi_dcmpun>
 800b7e4:	bb70      	cbnz	r0, 800b844 <_printf_float+0xc0>
 800b7e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ee:	4b98      	ldr	r3, [pc, #608]	@ (800ba50 <_printf_float+0x2cc>)
 800b7f0:	f7f5 f8ee 	bl	80009d0 <__aeabi_dcmple>
 800b7f4:	bb30      	cbnz	r0, 800b844 <_printf_float+0xc0>
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	4640      	mov	r0, r8
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	f7f5 f8dd 	bl	80009bc <__aeabi_dcmplt>
 800b802:	b110      	cbz	r0, 800b80a <_printf_float+0x86>
 800b804:	232d      	movs	r3, #45	@ 0x2d
 800b806:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b80a:	4a92      	ldr	r2, [pc, #584]	@ (800ba54 <_printf_float+0x2d0>)
 800b80c:	4b92      	ldr	r3, [pc, #584]	@ (800ba58 <_printf_float+0x2d4>)
 800b80e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b812:	bf94      	ite	ls
 800b814:	4690      	movls	r8, r2
 800b816:	4698      	movhi	r8, r3
 800b818:	2303      	movs	r3, #3
 800b81a:	f04f 0900 	mov.w	r9, #0
 800b81e:	6123      	str	r3, [r4, #16]
 800b820:	f02b 0304 	bic.w	r3, fp, #4
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	4633      	mov	r3, r6
 800b828:	4621      	mov	r1, r4
 800b82a:	4628      	mov	r0, r5
 800b82c:	9700      	str	r7, [sp, #0]
 800b82e:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b830:	f000 f9d4 	bl	800bbdc <_printf_common>
 800b834:	3001      	adds	r0, #1
 800b836:	f040 8090 	bne.w	800b95a <_printf_float+0x1d6>
 800b83a:	f04f 30ff 	mov.w	r0, #4294967295
 800b83e:	b011      	add	sp, #68	@ 0x44
 800b840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b844:	4642      	mov	r2, r8
 800b846:	464b      	mov	r3, r9
 800b848:	4640      	mov	r0, r8
 800b84a:	4649      	mov	r1, r9
 800b84c:	f7f5 f8de 	bl	8000a0c <__aeabi_dcmpun>
 800b850:	b148      	cbz	r0, 800b866 <_printf_float+0xe2>
 800b852:	464b      	mov	r3, r9
 800b854:	2b00      	cmp	r3, #0
 800b856:	bfb8      	it	lt
 800b858:	232d      	movlt	r3, #45	@ 0x2d
 800b85a:	4a80      	ldr	r2, [pc, #512]	@ (800ba5c <_printf_float+0x2d8>)
 800b85c:	bfb8      	it	lt
 800b85e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b862:	4b7f      	ldr	r3, [pc, #508]	@ (800ba60 <_printf_float+0x2dc>)
 800b864:	e7d3      	b.n	800b80e <_printf_float+0x8a>
 800b866:	6863      	ldr	r3, [r4, #4]
 800b868:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b86c:	1c5a      	adds	r2, r3, #1
 800b86e:	d13f      	bne.n	800b8f0 <_printf_float+0x16c>
 800b870:	2306      	movs	r3, #6
 800b872:	6063      	str	r3, [r4, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b87a:	6023      	str	r3, [r4, #0]
 800b87c:	9206      	str	r2, [sp, #24]
 800b87e:	aa0e      	add	r2, sp, #56	@ 0x38
 800b880:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b884:	aa0d      	add	r2, sp, #52	@ 0x34
 800b886:	9203      	str	r2, [sp, #12]
 800b888:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b88c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b890:	6863      	ldr	r3, [r4, #4]
 800b892:	4642      	mov	r2, r8
 800b894:	9300      	str	r3, [sp, #0]
 800b896:	4628      	mov	r0, r5
 800b898:	464b      	mov	r3, r9
 800b89a:	910a      	str	r1, [sp, #40]	@ 0x28
 800b89c:	f7ff fed4 	bl	800b648 <__cvt>
 800b8a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b8a2:	4680      	mov	r8, r0
 800b8a4:	2947      	cmp	r1, #71	@ 0x47
 800b8a6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b8a8:	d128      	bne.n	800b8fc <_printf_float+0x178>
 800b8aa:	1cc8      	adds	r0, r1, #3
 800b8ac:	db02      	blt.n	800b8b4 <_printf_float+0x130>
 800b8ae:	6863      	ldr	r3, [r4, #4]
 800b8b0:	4299      	cmp	r1, r3
 800b8b2:	dd40      	ble.n	800b936 <_printf_float+0x1b2>
 800b8b4:	f1aa 0a02 	sub.w	sl, sl, #2
 800b8b8:	fa5f fa8a 	uxtb.w	sl, sl
 800b8bc:	4652      	mov	r2, sl
 800b8be:	3901      	subs	r1, #1
 800b8c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b8c4:	910d      	str	r1, [sp, #52]	@ 0x34
 800b8c6:	f7ff ff23 	bl	800b710 <__exponent>
 800b8ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8cc:	4681      	mov	r9, r0
 800b8ce:	1813      	adds	r3, r2, r0
 800b8d0:	2a01      	cmp	r2, #1
 800b8d2:	6123      	str	r3, [r4, #16]
 800b8d4:	dc02      	bgt.n	800b8dc <_printf_float+0x158>
 800b8d6:	6822      	ldr	r2, [r4, #0]
 800b8d8:	07d2      	lsls	r2, r2, #31
 800b8da:	d501      	bpl.n	800b8e0 <_printf_float+0x15c>
 800b8dc:	3301      	adds	r3, #1
 800b8de:	6123      	str	r3, [r4, #16]
 800b8e0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d09e      	beq.n	800b826 <_printf_float+0xa2>
 800b8e8:	232d      	movs	r3, #45	@ 0x2d
 800b8ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8ee:	e79a      	b.n	800b826 <_printf_float+0xa2>
 800b8f0:	2947      	cmp	r1, #71	@ 0x47
 800b8f2:	d1bf      	bne.n	800b874 <_printf_float+0xf0>
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d1bd      	bne.n	800b874 <_printf_float+0xf0>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	e7ba      	b.n	800b872 <_printf_float+0xee>
 800b8fc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b900:	d9dc      	bls.n	800b8bc <_printf_float+0x138>
 800b902:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b906:	d118      	bne.n	800b93a <_printf_float+0x1b6>
 800b908:	2900      	cmp	r1, #0
 800b90a:	6863      	ldr	r3, [r4, #4]
 800b90c:	dd0b      	ble.n	800b926 <_printf_float+0x1a2>
 800b90e:	6121      	str	r1, [r4, #16]
 800b910:	b913      	cbnz	r3, 800b918 <_printf_float+0x194>
 800b912:	6822      	ldr	r2, [r4, #0]
 800b914:	07d0      	lsls	r0, r2, #31
 800b916:	d502      	bpl.n	800b91e <_printf_float+0x19a>
 800b918:	3301      	adds	r3, #1
 800b91a:	440b      	add	r3, r1
 800b91c:	6123      	str	r3, [r4, #16]
 800b91e:	f04f 0900 	mov.w	r9, #0
 800b922:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b924:	e7dc      	b.n	800b8e0 <_printf_float+0x15c>
 800b926:	b913      	cbnz	r3, 800b92e <_printf_float+0x1aa>
 800b928:	6822      	ldr	r2, [r4, #0]
 800b92a:	07d2      	lsls	r2, r2, #31
 800b92c:	d501      	bpl.n	800b932 <_printf_float+0x1ae>
 800b92e:	3302      	adds	r3, #2
 800b930:	e7f4      	b.n	800b91c <_printf_float+0x198>
 800b932:	2301      	movs	r3, #1
 800b934:	e7f2      	b.n	800b91c <_printf_float+0x198>
 800b936:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b93a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b93c:	4299      	cmp	r1, r3
 800b93e:	db05      	blt.n	800b94c <_printf_float+0x1c8>
 800b940:	6823      	ldr	r3, [r4, #0]
 800b942:	6121      	str	r1, [r4, #16]
 800b944:	07d8      	lsls	r0, r3, #31
 800b946:	d5ea      	bpl.n	800b91e <_printf_float+0x19a>
 800b948:	1c4b      	adds	r3, r1, #1
 800b94a:	e7e7      	b.n	800b91c <_printf_float+0x198>
 800b94c:	2900      	cmp	r1, #0
 800b94e:	bfcc      	ite	gt
 800b950:	2201      	movgt	r2, #1
 800b952:	f1c1 0202 	rsble	r2, r1, #2
 800b956:	4413      	add	r3, r2
 800b958:	e7e0      	b.n	800b91c <_printf_float+0x198>
 800b95a:	6823      	ldr	r3, [r4, #0]
 800b95c:	055a      	lsls	r2, r3, #21
 800b95e:	d407      	bmi.n	800b970 <_printf_float+0x1ec>
 800b960:	6923      	ldr	r3, [r4, #16]
 800b962:	4642      	mov	r2, r8
 800b964:	4631      	mov	r1, r6
 800b966:	4628      	mov	r0, r5
 800b968:	47b8      	blx	r7
 800b96a:	3001      	adds	r0, #1
 800b96c:	d12b      	bne.n	800b9c6 <_printf_float+0x242>
 800b96e:	e764      	b.n	800b83a <_printf_float+0xb6>
 800b970:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b974:	f240 80dc 	bls.w	800bb30 <_printf_float+0x3ac>
 800b978:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b97c:	2200      	movs	r2, #0
 800b97e:	2300      	movs	r3, #0
 800b980:	f7f5 f812 	bl	80009a8 <__aeabi_dcmpeq>
 800b984:	2800      	cmp	r0, #0
 800b986:	d033      	beq.n	800b9f0 <_printf_float+0x26c>
 800b988:	2301      	movs	r3, #1
 800b98a:	4631      	mov	r1, r6
 800b98c:	4628      	mov	r0, r5
 800b98e:	4a35      	ldr	r2, [pc, #212]	@ (800ba64 <_printf_float+0x2e0>)
 800b990:	47b8      	blx	r7
 800b992:	3001      	adds	r0, #1
 800b994:	f43f af51 	beq.w	800b83a <_printf_float+0xb6>
 800b998:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b99c:	4543      	cmp	r3, r8
 800b99e:	db02      	blt.n	800b9a6 <_printf_float+0x222>
 800b9a0:	6823      	ldr	r3, [r4, #0]
 800b9a2:	07d8      	lsls	r0, r3, #31
 800b9a4:	d50f      	bpl.n	800b9c6 <_printf_float+0x242>
 800b9a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b9aa:	4631      	mov	r1, r6
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	47b8      	blx	r7
 800b9b0:	3001      	adds	r0, #1
 800b9b2:	f43f af42 	beq.w	800b83a <_printf_float+0xb6>
 800b9b6:	f04f 0900 	mov.w	r9, #0
 800b9ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800b9be:	f104 0a1a 	add.w	sl, r4, #26
 800b9c2:	45c8      	cmp	r8, r9
 800b9c4:	dc09      	bgt.n	800b9da <_printf_float+0x256>
 800b9c6:	6823      	ldr	r3, [r4, #0]
 800b9c8:	079b      	lsls	r3, r3, #30
 800b9ca:	f100 8102 	bmi.w	800bbd2 <_printf_float+0x44e>
 800b9ce:	68e0      	ldr	r0, [r4, #12]
 800b9d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9d2:	4298      	cmp	r0, r3
 800b9d4:	bfb8      	it	lt
 800b9d6:	4618      	movlt	r0, r3
 800b9d8:	e731      	b.n	800b83e <_printf_float+0xba>
 800b9da:	2301      	movs	r3, #1
 800b9dc:	4652      	mov	r2, sl
 800b9de:	4631      	mov	r1, r6
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	47b8      	blx	r7
 800b9e4:	3001      	adds	r0, #1
 800b9e6:	f43f af28 	beq.w	800b83a <_printf_float+0xb6>
 800b9ea:	f109 0901 	add.w	r9, r9, #1
 800b9ee:	e7e8      	b.n	800b9c2 <_printf_float+0x23e>
 800b9f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	dc38      	bgt.n	800ba68 <_printf_float+0x2e4>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	4631      	mov	r1, r6
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	4a19      	ldr	r2, [pc, #100]	@ (800ba64 <_printf_float+0x2e0>)
 800b9fe:	47b8      	blx	r7
 800ba00:	3001      	adds	r0, #1
 800ba02:	f43f af1a 	beq.w	800b83a <_printf_float+0xb6>
 800ba06:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800ba0a:	ea59 0303 	orrs.w	r3, r9, r3
 800ba0e:	d102      	bne.n	800ba16 <_printf_float+0x292>
 800ba10:	6823      	ldr	r3, [r4, #0]
 800ba12:	07d9      	lsls	r1, r3, #31
 800ba14:	d5d7      	bpl.n	800b9c6 <_printf_float+0x242>
 800ba16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ba1a:	4631      	mov	r1, r6
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	47b8      	blx	r7
 800ba20:	3001      	adds	r0, #1
 800ba22:	f43f af0a 	beq.w	800b83a <_printf_float+0xb6>
 800ba26:	f04f 0a00 	mov.w	sl, #0
 800ba2a:	f104 0b1a 	add.w	fp, r4, #26
 800ba2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba30:	425b      	negs	r3, r3
 800ba32:	4553      	cmp	r3, sl
 800ba34:	dc01      	bgt.n	800ba3a <_printf_float+0x2b6>
 800ba36:	464b      	mov	r3, r9
 800ba38:	e793      	b.n	800b962 <_printf_float+0x1de>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	465a      	mov	r2, fp
 800ba3e:	4631      	mov	r1, r6
 800ba40:	4628      	mov	r0, r5
 800ba42:	47b8      	blx	r7
 800ba44:	3001      	adds	r0, #1
 800ba46:	f43f aef8 	beq.w	800b83a <_printf_float+0xb6>
 800ba4a:	f10a 0a01 	add.w	sl, sl, #1
 800ba4e:	e7ee      	b.n	800ba2e <_printf_float+0x2aa>
 800ba50:	7fefffff 	.word	0x7fefffff
 800ba54:	0800e978 	.word	0x0800e978
 800ba58:	0800e97c 	.word	0x0800e97c
 800ba5c:	0800e980 	.word	0x0800e980
 800ba60:	0800e984 	.word	0x0800e984
 800ba64:	0800e988 	.word	0x0800e988
 800ba68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ba6a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ba6e:	4553      	cmp	r3, sl
 800ba70:	bfa8      	it	ge
 800ba72:	4653      	movge	r3, sl
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	4699      	mov	r9, r3
 800ba78:	dc36      	bgt.n	800bae8 <_printf_float+0x364>
 800ba7a:	f04f 0b00 	mov.w	fp, #0
 800ba7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba82:	f104 021a 	add.w	r2, r4, #26
 800ba86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ba88:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba8a:	eba3 0309 	sub.w	r3, r3, r9
 800ba8e:	455b      	cmp	r3, fp
 800ba90:	dc31      	bgt.n	800baf6 <_printf_float+0x372>
 800ba92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba94:	459a      	cmp	sl, r3
 800ba96:	dc3a      	bgt.n	800bb0e <_printf_float+0x38a>
 800ba98:	6823      	ldr	r3, [r4, #0]
 800ba9a:	07da      	lsls	r2, r3, #31
 800ba9c:	d437      	bmi.n	800bb0e <_printf_float+0x38a>
 800ba9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800baa0:	ebaa 0903 	sub.w	r9, sl, r3
 800baa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800baa6:	ebaa 0303 	sub.w	r3, sl, r3
 800baaa:	4599      	cmp	r9, r3
 800baac:	bfa8      	it	ge
 800baae:	4699      	movge	r9, r3
 800bab0:	f1b9 0f00 	cmp.w	r9, #0
 800bab4:	dc33      	bgt.n	800bb1e <_printf_float+0x39a>
 800bab6:	f04f 0800 	mov.w	r8, #0
 800baba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800babe:	f104 0b1a 	add.w	fp, r4, #26
 800bac2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bac4:	ebaa 0303 	sub.w	r3, sl, r3
 800bac8:	eba3 0309 	sub.w	r3, r3, r9
 800bacc:	4543      	cmp	r3, r8
 800bace:	f77f af7a 	ble.w	800b9c6 <_printf_float+0x242>
 800bad2:	2301      	movs	r3, #1
 800bad4:	465a      	mov	r2, fp
 800bad6:	4631      	mov	r1, r6
 800bad8:	4628      	mov	r0, r5
 800bada:	47b8      	blx	r7
 800badc:	3001      	adds	r0, #1
 800bade:	f43f aeac 	beq.w	800b83a <_printf_float+0xb6>
 800bae2:	f108 0801 	add.w	r8, r8, #1
 800bae6:	e7ec      	b.n	800bac2 <_printf_float+0x33e>
 800bae8:	4642      	mov	r2, r8
 800baea:	4631      	mov	r1, r6
 800baec:	4628      	mov	r0, r5
 800baee:	47b8      	blx	r7
 800baf0:	3001      	adds	r0, #1
 800baf2:	d1c2      	bne.n	800ba7a <_printf_float+0x2f6>
 800baf4:	e6a1      	b.n	800b83a <_printf_float+0xb6>
 800baf6:	2301      	movs	r3, #1
 800baf8:	4631      	mov	r1, r6
 800bafa:	4628      	mov	r0, r5
 800bafc:	920a      	str	r2, [sp, #40]	@ 0x28
 800bafe:	47b8      	blx	r7
 800bb00:	3001      	adds	r0, #1
 800bb02:	f43f ae9a 	beq.w	800b83a <_printf_float+0xb6>
 800bb06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb08:	f10b 0b01 	add.w	fp, fp, #1
 800bb0c:	e7bb      	b.n	800ba86 <_printf_float+0x302>
 800bb0e:	4631      	mov	r1, r6
 800bb10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bb14:	4628      	mov	r0, r5
 800bb16:	47b8      	blx	r7
 800bb18:	3001      	adds	r0, #1
 800bb1a:	d1c0      	bne.n	800ba9e <_printf_float+0x31a>
 800bb1c:	e68d      	b.n	800b83a <_printf_float+0xb6>
 800bb1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb20:	464b      	mov	r3, r9
 800bb22:	4631      	mov	r1, r6
 800bb24:	4628      	mov	r0, r5
 800bb26:	4442      	add	r2, r8
 800bb28:	47b8      	blx	r7
 800bb2a:	3001      	adds	r0, #1
 800bb2c:	d1c3      	bne.n	800bab6 <_printf_float+0x332>
 800bb2e:	e684      	b.n	800b83a <_printf_float+0xb6>
 800bb30:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800bb34:	f1ba 0f01 	cmp.w	sl, #1
 800bb38:	dc01      	bgt.n	800bb3e <_printf_float+0x3ba>
 800bb3a:	07db      	lsls	r3, r3, #31
 800bb3c:	d536      	bpl.n	800bbac <_printf_float+0x428>
 800bb3e:	2301      	movs	r3, #1
 800bb40:	4642      	mov	r2, r8
 800bb42:	4631      	mov	r1, r6
 800bb44:	4628      	mov	r0, r5
 800bb46:	47b8      	blx	r7
 800bb48:	3001      	adds	r0, #1
 800bb4a:	f43f ae76 	beq.w	800b83a <_printf_float+0xb6>
 800bb4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bb52:	4631      	mov	r1, r6
 800bb54:	4628      	mov	r0, r5
 800bb56:	47b8      	blx	r7
 800bb58:	3001      	adds	r0, #1
 800bb5a:	f43f ae6e 	beq.w	800b83a <_printf_float+0xb6>
 800bb5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bb62:	2200      	movs	r2, #0
 800bb64:	2300      	movs	r3, #0
 800bb66:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb6a:	f7f4 ff1d 	bl	80009a8 <__aeabi_dcmpeq>
 800bb6e:	b9c0      	cbnz	r0, 800bba2 <_printf_float+0x41e>
 800bb70:	4653      	mov	r3, sl
 800bb72:	f108 0201 	add.w	r2, r8, #1
 800bb76:	4631      	mov	r1, r6
 800bb78:	4628      	mov	r0, r5
 800bb7a:	47b8      	blx	r7
 800bb7c:	3001      	adds	r0, #1
 800bb7e:	d10c      	bne.n	800bb9a <_printf_float+0x416>
 800bb80:	e65b      	b.n	800b83a <_printf_float+0xb6>
 800bb82:	2301      	movs	r3, #1
 800bb84:	465a      	mov	r2, fp
 800bb86:	4631      	mov	r1, r6
 800bb88:	4628      	mov	r0, r5
 800bb8a:	47b8      	blx	r7
 800bb8c:	3001      	adds	r0, #1
 800bb8e:	f43f ae54 	beq.w	800b83a <_printf_float+0xb6>
 800bb92:	f108 0801 	add.w	r8, r8, #1
 800bb96:	45d0      	cmp	r8, sl
 800bb98:	dbf3      	blt.n	800bb82 <_printf_float+0x3fe>
 800bb9a:	464b      	mov	r3, r9
 800bb9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bba0:	e6e0      	b.n	800b964 <_printf_float+0x1e0>
 800bba2:	f04f 0800 	mov.w	r8, #0
 800bba6:	f104 0b1a 	add.w	fp, r4, #26
 800bbaa:	e7f4      	b.n	800bb96 <_printf_float+0x412>
 800bbac:	2301      	movs	r3, #1
 800bbae:	4642      	mov	r2, r8
 800bbb0:	e7e1      	b.n	800bb76 <_printf_float+0x3f2>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	464a      	mov	r2, r9
 800bbb6:	4631      	mov	r1, r6
 800bbb8:	4628      	mov	r0, r5
 800bbba:	47b8      	blx	r7
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	f43f ae3c 	beq.w	800b83a <_printf_float+0xb6>
 800bbc2:	f108 0801 	add.w	r8, r8, #1
 800bbc6:	68e3      	ldr	r3, [r4, #12]
 800bbc8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bbca:	1a5b      	subs	r3, r3, r1
 800bbcc:	4543      	cmp	r3, r8
 800bbce:	dcf0      	bgt.n	800bbb2 <_printf_float+0x42e>
 800bbd0:	e6fd      	b.n	800b9ce <_printf_float+0x24a>
 800bbd2:	f04f 0800 	mov.w	r8, #0
 800bbd6:	f104 0919 	add.w	r9, r4, #25
 800bbda:	e7f4      	b.n	800bbc6 <_printf_float+0x442>

0800bbdc <_printf_common>:
 800bbdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbe0:	4616      	mov	r6, r2
 800bbe2:	4698      	mov	r8, r3
 800bbe4:	688a      	ldr	r2, [r1, #8]
 800bbe6:	690b      	ldr	r3, [r1, #16]
 800bbe8:	4607      	mov	r7, r0
 800bbea:	4293      	cmp	r3, r2
 800bbec:	bfb8      	it	lt
 800bbee:	4613      	movlt	r3, r2
 800bbf0:	6033      	str	r3, [r6, #0]
 800bbf2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bbf6:	460c      	mov	r4, r1
 800bbf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bbfc:	b10a      	cbz	r2, 800bc02 <_printf_common+0x26>
 800bbfe:	3301      	adds	r3, #1
 800bc00:	6033      	str	r3, [r6, #0]
 800bc02:	6823      	ldr	r3, [r4, #0]
 800bc04:	0699      	lsls	r1, r3, #26
 800bc06:	bf42      	ittt	mi
 800bc08:	6833      	ldrmi	r3, [r6, #0]
 800bc0a:	3302      	addmi	r3, #2
 800bc0c:	6033      	strmi	r3, [r6, #0]
 800bc0e:	6825      	ldr	r5, [r4, #0]
 800bc10:	f015 0506 	ands.w	r5, r5, #6
 800bc14:	d106      	bne.n	800bc24 <_printf_common+0x48>
 800bc16:	f104 0a19 	add.w	sl, r4, #25
 800bc1a:	68e3      	ldr	r3, [r4, #12]
 800bc1c:	6832      	ldr	r2, [r6, #0]
 800bc1e:	1a9b      	subs	r3, r3, r2
 800bc20:	42ab      	cmp	r3, r5
 800bc22:	dc2b      	bgt.n	800bc7c <_printf_common+0xa0>
 800bc24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bc28:	6822      	ldr	r2, [r4, #0]
 800bc2a:	3b00      	subs	r3, #0
 800bc2c:	bf18      	it	ne
 800bc2e:	2301      	movne	r3, #1
 800bc30:	0692      	lsls	r2, r2, #26
 800bc32:	d430      	bmi.n	800bc96 <_printf_common+0xba>
 800bc34:	4641      	mov	r1, r8
 800bc36:	4638      	mov	r0, r7
 800bc38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bc3c:	47c8      	blx	r9
 800bc3e:	3001      	adds	r0, #1
 800bc40:	d023      	beq.n	800bc8a <_printf_common+0xae>
 800bc42:	6823      	ldr	r3, [r4, #0]
 800bc44:	6922      	ldr	r2, [r4, #16]
 800bc46:	f003 0306 	and.w	r3, r3, #6
 800bc4a:	2b04      	cmp	r3, #4
 800bc4c:	bf14      	ite	ne
 800bc4e:	2500      	movne	r5, #0
 800bc50:	6833      	ldreq	r3, [r6, #0]
 800bc52:	f04f 0600 	mov.w	r6, #0
 800bc56:	bf08      	it	eq
 800bc58:	68e5      	ldreq	r5, [r4, #12]
 800bc5a:	f104 041a 	add.w	r4, r4, #26
 800bc5e:	bf08      	it	eq
 800bc60:	1aed      	subeq	r5, r5, r3
 800bc62:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bc66:	bf08      	it	eq
 800bc68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	bfc4      	itt	gt
 800bc70:	1a9b      	subgt	r3, r3, r2
 800bc72:	18ed      	addgt	r5, r5, r3
 800bc74:	42b5      	cmp	r5, r6
 800bc76:	d11a      	bne.n	800bcae <_printf_common+0xd2>
 800bc78:	2000      	movs	r0, #0
 800bc7a:	e008      	b.n	800bc8e <_printf_common+0xb2>
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	4652      	mov	r2, sl
 800bc80:	4641      	mov	r1, r8
 800bc82:	4638      	mov	r0, r7
 800bc84:	47c8      	blx	r9
 800bc86:	3001      	adds	r0, #1
 800bc88:	d103      	bne.n	800bc92 <_printf_common+0xb6>
 800bc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc92:	3501      	adds	r5, #1
 800bc94:	e7c1      	b.n	800bc1a <_printf_common+0x3e>
 800bc96:	2030      	movs	r0, #48	@ 0x30
 800bc98:	18e1      	adds	r1, r4, r3
 800bc9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bc9e:	1c5a      	adds	r2, r3, #1
 800bca0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bca4:	4422      	add	r2, r4
 800bca6:	3302      	adds	r3, #2
 800bca8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bcac:	e7c2      	b.n	800bc34 <_printf_common+0x58>
 800bcae:	2301      	movs	r3, #1
 800bcb0:	4622      	mov	r2, r4
 800bcb2:	4641      	mov	r1, r8
 800bcb4:	4638      	mov	r0, r7
 800bcb6:	47c8      	blx	r9
 800bcb8:	3001      	adds	r0, #1
 800bcba:	d0e6      	beq.n	800bc8a <_printf_common+0xae>
 800bcbc:	3601      	adds	r6, #1
 800bcbe:	e7d9      	b.n	800bc74 <_printf_common+0x98>

0800bcc0 <_printf_i>:
 800bcc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcc4:	7e0f      	ldrb	r7, [r1, #24]
 800bcc6:	4691      	mov	r9, r2
 800bcc8:	2f78      	cmp	r7, #120	@ 0x78
 800bcca:	4680      	mov	r8, r0
 800bccc:	460c      	mov	r4, r1
 800bcce:	469a      	mov	sl, r3
 800bcd0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bcd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bcd6:	d807      	bhi.n	800bce8 <_printf_i+0x28>
 800bcd8:	2f62      	cmp	r7, #98	@ 0x62
 800bcda:	d80a      	bhi.n	800bcf2 <_printf_i+0x32>
 800bcdc:	2f00      	cmp	r7, #0
 800bcde:	f000 80d3 	beq.w	800be88 <_printf_i+0x1c8>
 800bce2:	2f58      	cmp	r7, #88	@ 0x58
 800bce4:	f000 80ba 	beq.w	800be5c <_printf_i+0x19c>
 800bce8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bcec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bcf0:	e03a      	b.n	800bd68 <_printf_i+0xa8>
 800bcf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bcf6:	2b15      	cmp	r3, #21
 800bcf8:	d8f6      	bhi.n	800bce8 <_printf_i+0x28>
 800bcfa:	a101      	add	r1, pc, #4	@ (adr r1, 800bd00 <_printf_i+0x40>)
 800bcfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd00:	0800bd59 	.word	0x0800bd59
 800bd04:	0800bd6d 	.word	0x0800bd6d
 800bd08:	0800bce9 	.word	0x0800bce9
 800bd0c:	0800bce9 	.word	0x0800bce9
 800bd10:	0800bce9 	.word	0x0800bce9
 800bd14:	0800bce9 	.word	0x0800bce9
 800bd18:	0800bd6d 	.word	0x0800bd6d
 800bd1c:	0800bce9 	.word	0x0800bce9
 800bd20:	0800bce9 	.word	0x0800bce9
 800bd24:	0800bce9 	.word	0x0800bce9
 800bd28:	0800bce9 	.word	0x0800bce9
 800bd2c:	0800be6f 	.word	0x0800be6f
 800bd30:	0800bd97 	.word	0x0800bd97
 800bd34:	0800be29 	.word	0x0800be29
 800bd38:	0800bce9 	.word	0x0800bce9
 800bd3c:	0800bce9 	.word	0x0800bce9
 800bd40:	0800be91 	.word	0x0800be91
 800bd44:	0800bce9 	.word	0x0800bce9
 800bd48:	0800bd97 	.word	0x0800bd97
 800bd4c:	0800bce9 	.word	0x0800bce9
 800bd50:	0800bce9 	.word	0x0800bce9
 800bd54:	0800be31 	.word	0x0800be31
 800bd58:	6833      	ldr	r3, [r6, #0]
 800bd5a:	1d1a      	adds	r2, r3, #4
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	6032      	str	r2, [r6, #0]
 800bd60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e09e      	b.n	800beaa <_printf_i+0x1ea>
 800bd6c:	6833      	ldr	r3, [r6, #0]
 800bd6e:	6820      	ldr	r0, [r4, #0]
 800bd70:	1d19      	adds	r1, r3, #4
 800bd72:	6031      	str	r1, [r6, #0]
 800bd74:	0606      	lsls	r6, r0, #24
 800bd76:	d501      	bpl.n	800bd7c <_printf_i+0xbc>
 800bd78:	681d      	ldr	r5, [r3, #0]
 800bd7a:	e003      	b.n	800bd84 <_printf_i+0xc4>
 800bd7c:	0645      	lsls	r5, r0, #25
 800bd7e:	d5fb      	bpl.n	800bd78 <_printf_i+0xb8>
 800bd80:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bd84:	2d00      	cmp	r5, #0
 800bd86:	da03      	bge.n	800bd90 <_printf_i+0xd0>
 800bd88:	232d      	movs	r3, #45	@ 0x2d
 800bd8a:	426d      	negs	r5, r5
 800bd8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd90:	230a      	movs	r3, #10
 800bd92:	4859      	ldr	r0, [pc, #356]	@ (800bef8 <_printf_i+0x238>)
 800bd94:	e011      	b.n	800bdba <_printf_i+0xfa>
 800bd96:	6821      	ldr	r1, [r4, #0]
 800bd98:	6833      	ldr	r3, [r6, #0]
 800bd9a:	0608      	lsls	r0, r1, #24
 800bd9c:	f853 5b04 	ldr.w	r5, [r3], #4
 800bda0:	d402      	bmi.n	800bda8 <_printf_i+0xe8>
 800bda2:	0649      	lsls	r1, r1, #25
 800bda4:	bf48      	it	mi
 800bda6:	b2ad      	uxthmi	r5, r5
 800bda8:	2f6f      	cmp	r7, #111	@ 0x6f
 800bdaa:	6033      	str	r3, [r6, #0]
 800bdac:	bf14      	ite	ne
 800bdae:	230a      	movne	r3, #10
 800bdb0:	2308      	moveq	r3, #8
 800bdb2:	4851      	ldr	r0, [pc, #324]	@ (800bef8 <_printf_i+0x238>)
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bdba:	6866      	ldr	r6, [r4, #4]
 800bdbc:	2e00      	cmp	r6, #0
 800bdbe:	bfa8      	it	ge
 800bdc0:	6821      	ldrge	r1, [r4, #0]
 800bdc2:	60a6      	str	r6, [r4, #8]
 800bdc4:	bfa4      	itt	ge
 800bdc6:	f021 0104 	bicge.w	r1, r1, #4
 800bdca:	6021      	strge	r1, [r4, #0]
 800bdcc:	b90d      	cbnz	r5, 800bdd2 <_printf_i+0x112>
 800bdce:	2e00      	cmp	r6, #0
 800bdd0:	d04b      	beq.n	800be6a <_printf_i+0x1aa>
 800bdd2:	4616      	mov	r6, r2
 800bdd4:	fbb5 f1f3 	udiv	r1, r5, r3
 800bdd8:	fb03 5711 	mls	r7, r3, r1, r5
 800bddc:	5dc7      	ldrb	r7, [r0, r7]
 800bdde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bde2:	462f      	mov	r7, r5
 800bde4:	42bb      	cmp	r3, r7
 800bde6:	460d      	mov	r5, r1
 800bde8:	d9f4      	bls.n	800bdd4 <_printf_i+0x114>
 800bdea:	2b08      	cmp	r3, #8
 800bdec:	d10b      	bne.n	800be06 <_printf_i+0x146>
 800bdee:	6823      	ldr	r3, [r4, #0]
 800bdf0:	07df      	lsls	r7, r3, #31
 800bdf2:	d508      	bpl.n	800be06 <_printf_i+0x146>
 800bdf4:	6923      	ldr	r3, [r4, #16]
 800bdf6:	6861      	ldr	r1, [r4, #4]
 800bdf8:	4299      	cmp	r1, r3
 800bdfa:	bfde      	ittt	le
 800bdfc:	2330      	movle	r3, #48	@ 0x30
 800bdfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800be02:	f106 36ff 	addle.w	r6, r6, #4294967295
 800be06:	1b92      	subs	r2, r2, r6
 800be08:	6122      	str	r2, [r4, #16]
 800be0a:	464b      	mov	r3, r9
 800be0c:	4621      	mov	r1, r4
 800be0e:	4640      	mov	r0, r8
 800be10:	f8cd a000 	str.w	sl, [sp]
 800be14:	aa03      	add	r2, sp, #12
 800be16:	f7ff fee1 	bl	800bbdc <_printf_common>
 800be1a:	3001      	adds	r0, #1
 800be1c:	d14a      	bne.n	800beb4 <_printf_i+0x1f4>
 800be1e:	f04f 30ff 	mov.w	r0, #4294967295
 800be22:	b004      	add	sp, #16
 800be24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be28:	6823      	ldr	r3, [r4, #0]
 800be2a:	f043 0320 	orr.w	r3, r3, #32
 800be2e:	6023      	str	r3, [r4, #0]
 800be30:	2778      	movs	r7, #120	@ 0x78
 800be32:	4832      	ldr	r0, [pc, #200]	@ (800befc <_printf_i+0x23c>)
 800be34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800be38:	6823      	ldr	r3, [r4, #0]
 800be3a:	6831      	ldr	r1, [r6, #0]
 800be3c:	061f      	lsls	r7, r3, #24
 800be3e:	f851 5b04 	ldr.w	r5, [r1], #4
 800be42:	d402      	bmi.n	800be4a <_printf_i+0x18a>
 800be44:	065f      	lsls	r7, r3, #25
 800be46:	bf48      	it	mi
 800be48:	b2ad      	uxthmi	r5, r5
 800be4a:	6031      	str	r1, [r6, #0]
 800be4c:	07d9      	lsls	r1, r3, #31
 800be4e:	bf44      	itt	mi
 800be50:	f043 0320 	orrmi.w	r3, r3, #32
 800be54:	6023      	strmi	r3, [r4, #0]
 800be56:	b11d      	cbz	r5, 800be60 <_printf_i+0x1a0>
 800be58:	2310      	movs	r3, #16
 800be5a:	e7ab      	b.n	800bdb4 <_printf_i+0xf4>
 800be5c:	4826      	ldr	r0, [pc, #152]	@ (800bef8 <_printf_i+0x238>)
 800be5e:	e7e9      	b.n	800be34 <_printf_i+0x174>
 800be60:	6823      	ldr	r3, [r4, #0]
 800be62:	f023 0320 	bic.w	r3, r3, #32
 800be66:	6023      	str	r3, [r4, #0]
 800be68:	e7f6      	b.n	800be58 <_printf_i+0x198>
 800be6a:	4616      	mov	r6, r2
 800be6c:	e7bd      	b.n	800bdea <_printf_i+0x12a>
 800be6e:	6833      	ldr	r3, [r6, #0]
 800be70:	6825      	ldr	r5, [r4, #0]
 800be72:	1d18      	adds	r0, r3, #4
 800be74:	6961      	ldr	r1, [r4, #20]
 800be76:	6030      	str	r0, [r6, #0]
 800be78:	062e      	lsls	r6, r5, #24
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	d501      	bpl.n	800be82 <_printf_i+0x1c2>
 800be7e:	6019      	str	r1, [r3, #0]
 800be80:	e002      	b.n	800be88 <_printf_i+0x1c8>
 800be82:	0668      	lsls	r0, r5, #25
 800be84:	d5fb      	bpl.n	800be7e <_printf_i+0x1be>
 800be86:	8019      	strh	r1, [r3, #0]
 800be88:	2300      	movs	r3, #0
 800be8a:	4616      	mov	r6, r2
 800be8c:	6123      	str	r3, [r4, #16]
 800be8e:	e7bc      	b.n	800be0a <_printf_i+0x14a>
 800be90:	6833      	ldr	r3, [r6, #0]
 800be92:	2100      	movs	r1, #0
 800be94:	1d1a      	adds	r2, r3, #4
 800be96:	6032      	str	r2, [r6, #0]
 800be98:	681e      	ldr	r6, [r3, #0]
 800be9a:	6862      	ldr	r2, [r4, #4]
 800be9c:	4630      	mov	r0, r6
 800be9e:	f000 f9d4 	bl	800c24a <memchr>
 800bea2:	b108      	cbz	r0, 800bea8 <_printf_i+0x1e8>
 800bea4:	1b80      	subs	r0, r0, r6
 800bea6:	6060      	str	r0, [r4, #4]
 800bea8:	6863      	ldr	r3, [r4, #4]
 800beaa:	6123      	str	r3, [r4, #16]
 800beac:	2300      	movs	r3, #0
 800beae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800beb2:	e7aa      	b.n	800be0a <_printf_i+0x14a>
 800beb4:	4632      	mov	r2, r6
 800beb6:	4649      	mov	r1, r9
 800beb8:	4640      	mov	r0, r8
 800beba:	6923      	ldr	r3, [r4, #16]
 800bebc:	47d0      	blx	sl
 800bebe:	3001      	adds	r0, #1
 800bec0:	d0ad      	beq.n	800be1e <_printf_i+0x15e>
 800bec2:	6823      	ldr	r3, [r4, #0]
 800bec4:	079b      	lsls	r3, r3, #30
 800bec6:	d413      	bmi.n	800bef0 <_printf_i+0x230>
 800bec8:	68e0      	ldr	r0, [r4, #12]
 800beca:	9b03      	ldr	r3, [sp, #12]
 800becc:	4298      	cmp	r0, r3
 800bece:	bfb8      	it	lt
 800bed0:	4618      	movlt	r0, r3
 800bed2:	e7a6      	b.n	800be22 <_printf_i+0x162>
 800bed4:	2301      	movs	r3, #1
 800bed6:	4632      	mov	r2, r6
 800bed8:	4649      	mov	r1, r9
 800beda:	4640      	mov	r0, r8
 800bedc:	47d0      	blx	sl
 800bede:	3001      	adds	r0, #1
 800bee0:	d09d      	beq.n	800be1e <_printf_i+0x15e>
 800bee2:	3501      	adds	r5, #1
 800bee4:	68e3      	ldr	r3, [r4, #12]
 800bee6:	9903      	ldr	r1, [sp, #12]
 800bee8:	1a5b      	subs	r3, r3, r1
 800beea:	42ab      	cmp	r3, r5
 800beec:	dcf2      	bgt.n	800bed4 <_printf_i+0x214>
 800beee:	e7eb      	b.n	800bec8 <_printf_i+0x208>
 800bef0:	2500      	movs	r5, #0
 800bef2:	f104 0619 	add.w	r6, r4, #25
 800bef6:	e7f5      	b.n	800bee4 <_printf_i+0x224>
 800bef8:	0800e98a 	.word	0x0800e98a
 800befc:	0800e99b 	.word	0x0800e99b

0800bf00 <std>:
 800bf00:	2300      	movs	r3, #0
 800bf02:	b510      	push	{r4, lr}
 800bf04:	4604      	mov	r4, r0
 800bf06:	e9c0 3300 	strd	r3, r3, [r0]
 800bf0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf0e:	6083      	str	r3, [r0, #8]
 800bf10:	8181      	strh	r1, [r0, #12]
 800bf12:	6643      	str	r3, [r0, #100]	@ 0x64
 800bf14:	81c2      	strh	r2, [r0, #14]
 800bf16:	6183      	str	r3, [r0, #24]
 800bf18:	4619      	mov	r1, r3
 800bf1a:	2208      	movs	r2, #8
 800bf1c:	305c      	adds	r0, #92	@ 0x5c
 800bf1e:	f000 f914 	bl	800c14a <memset>
 800bf22:	4b0d      	ldr	r3, [pc, #52]	@ (800bf58 <std+0x58>)
 800bf24:	6224      	str	r4, [r4, #32]
 800bf26:	6263      	str	r3, [r4, #36]	@ 0x24
 800bf28:	4b0c      	ldr	r3, [pc, #48]	@ (800bf5c <std+0x5c>)
 800bf2a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bf2c:	4b0c      	ldr	r3, [pc, #48]	@ (800bf60 <std+0x60>)
 800bf2e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bf30:	4b0c      	ldr	r3, [pc, #48]	@ (800bf64 <std+0x64>)
 800bf32:	6323      	str	r3, [r4, #48]	@ 0x30
 800bf34:	4b0c      	ldr	r3, [pc, #48]	@ (800bf68 <std+0x68>)
 800bf36:	429c      	cmp	r4, r3
 800bf38:	d006      	beq.n	800bf48 <std+0x48>
 800bf3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bf3e:	4294      	cmp	r4, r2
 800bf40:	d002      	beq.n	800bf48 <std+0x48>
 800bf42:	33d0      	adds	r3, #208	@ 0xd0
 800bf44:	429c      	cmp	r4, r3
 800bf46:	d105      	bne.n	800bf54 <std+0x54>
 800bf48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bf4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf50:	f000 b978 	b.w	800c244 <__retarget_lock_init_recursive>
 800bf54:	bd10      	pop	{r4, pc}
 800bf56:	bf00      	nop
 800bf58:	0800c0c5 	.word	0x0800c0c5
 800bf5c:	0800c0e7 	.word	0x0800c0e7
 800bf60:	0800c11f 	.word	0x0800c11f
 800bf64:	0800c143 	.word	0x0800c143
 800bf68:	20002800 	.word	0x20002800

0800bf6c <stdio_exit_handler>:
 800bf6c:	4a02      	ldr	r2, [pc, #8]	@ (800bf78 <stdio_exit_handler+0xc>)
 800bf6e:	4903      	ldr	r1, [pc, #12]	@ (800bf7c <stdio_exit_handler+0x10>)
 800bf70:	4803      	ldr	r0, [pc, #12]	@ (800bf80 <stdio_exit_handler+0x14>)
 800bf72:	f000 b869 	b.w	800c048 <_fwalk_sglue>
 800bf76:	bf00      	nop
 800bf78:	20000024 	.word	0x20000024
 800bf7c:	0800dbb5 	.word	0x0800dbb5
 800bf80:	20000034 	.word	0x20000034

0800bf84 <cleanup_stdio>:
 800bf84:	6841      	ldr	r1, [r0, #4]
 800bf86:	4b0c      	ldr	r3, [pc, #48]	@ (800bfb8 <cleanup_stdio+0x34>)
 800bf88:	b510      	push	{r4, lr}
 800bf8a:	4299      	cmp	r1, r3
 800bf8c:	4604      	mov	r4, r0
 800bf8e:	d001      	beq.n	800bf94 <cleanup_stdio+0x10>
 800bf90:	f001 fe10 	bl	800dbb4 <_fflush_r>
 800bf94:	68a1      	ldr	r1, [r4, #8]
 800bf96:	4b09      	ldr	r3, [pc, #36]	@ (800bfbc <cleanup_stdio+0x38>)
 800bf98:	4299      	cmp	r1, r3
 800bf9a:	d002      	beq.n	800bfa2 <cleanup_stdio+0x1e>
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	f001 fe09 	bl	800dbb4 <_fflush_r>
 800bfa2:	68e1      	ldr	r1, [r4, #12]
 800bfa4:	4b06      	ldr	r3, [pc, #24]	@ (800bfc0 <cleanup_stdio+0x3c>)
 800bfa6:	4299      	cmp	r1, r3
 800bfa8:	d004      	beq.n	800bfb4 <cleanup_stdio+0x30>
 800bfaa:	4620      	mov	r0, r4
 800bfac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfb0:	f001 be00 	b.w	800dbb4 <_fflush_r>
 800bfb4:	bd10      	pop	{r4, pc}
 800bfb6:	bf00      	nop
 800bfb8:	20002800 	.word	0x20002800
 800bfbc:	20002868 	.word	0x20002868
 800bfc0:	200028d0 	.word	0x200028d0

0800bfc4 <global_stdio_init.part.0>:
 800bfc4:	b510      	push	{r4, lr}
 800bfc6:	4b0b      	ldr	r3, [pc, #44]	@ (800bff4 <global_stdio_init.part.0+0x30>)
 800bfc8:	4c0b      	ldr	r4, [pc, #44]	@ (800bff8 <global_stdio_init.part.0+0x34>)
 800bfca:	4a0c      	ldr	r2, [pc, #48]	@ (800bffc <global_stdio_init.part.0+0x38>)
 800bfcc:	4620      	mov	r0, r4
 800bfce:	601a      	str	r2, [r3, #0]
 800bfd0:	2104      	movs	r1, #4
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f7ff ff94 	bl	800bf00 <std>
 800bfd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bfdc:	2201      	movs	r2, #1
 800bfde:	2109      	movs	r1, #9
 800bfe0:	f7ff ff8e 	bl	800bf00 <std>
 800bfe4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bfe8:	2202      	movs	r2, #2
 800bfea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfee:	2112      	movs	r1, #18
 800bff0:	f7ff bf86 	b.w	800bf00 <std>
 800bff4:	20002938 	.word	0x20002938
 800bff8:	20002800 	.word	0x20002800
 800bffc:	0800bf6d 	.word	0x0800bf6d

0800c000 <__sfp_lock_acquire>:
 800c000:	4801      	ldr	r0, [pc, #4]	@ (800c008 <__sfp_lock_acquire+0x8>)
 800c002:	f000 b920 	b.w	800c246 <__retarget_lock_acquire_recursive>
 800c006:	bf00      	nop
 800c008:	20002941 	.word	0x20002941

0800c00c <__sfp_lock_release>:
 800c00c:	4801      	ldr	r0, [pc, #4]	@ (800c014 <__sfp_lock_release+0x8>)
 800c00e:	f000 b91b 	b.w	800c248 <__retarget_lock_release_recursive>
 800c012:	bf00      	nop
 800c014:	20002941 	.word	0x20002941

0800c018 <__sinit>:
 800c018:	b510      	push	{r4, lr}
 800c01a:	4604      	mov	r4, r0
 800c01c:	f7ff fff0 	bl	800c000 <__sfp_lock_acquire>
 800c020:	6a23      	ldr	r3, [r4, #32]
 800c022:	b11b      	cbz	r3, 800c02c <__sinit+0x14>
 800c024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c028:	f7ff bff0 	b.w	800c00c <__sfp_lock_release>
 800c02c:	4b04      	ldr	r3, [pc, #16]	@ (800c040 <__sinit+0x28>)
 800c02e:	6223      	str	r3, [r4, #32]
 800c030:	4b04      	ldr	r3, [pc, #16]	@ (800c044 <__sinit+0x2c>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d1f5      	bne.n	800c024 <__sinit+0xc>
 800c038:	f7ff ffc4 	bl	800bfc4 <global_stdio_init.part.0>
 800c03c:	e7f2      	b.n	800c024 <__sinit+0xc>
 800c03e:	bf00      	nop
 800c040:	0800bf85 	.word	0x0800bf85
 800c044:	20002938 	.word	0x20002938

0800c048 <_fwalk_sglue>:
 800c048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c04c:	4607      	mov	r7, r0
 800c04e:	4688      	mov	r8, r1
 800c050:	4614      	mov	r4, r2
 800c052:	2600      	movs	r6, #0
 800c054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c058:	f1b9 0901 	subs.w	r9, r9, #1
 800c05c:	d505      	bpl.n	800c06a <_fwalk_sglue+0x22>
 800c05e:	6824      	ldr	r4, [r4, #0]
 800c060:	2c00      	cmp	r4, #0
 800c062:	d1f7      	bne.n	800c054 <_fwalk_sglue+0xc>
 800c064:	4630      	mov	r0, r6
 800c066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c06a:	89ab      	ldrh	r3, [r5, #12]
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d907      	bls.n	800c080 <_fwalk_sglue+0x38>
 800c070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c074:	3301      	adds	r3, #1
 800c076:	d003      	beq.n	800c080 <_fwalk_sglue+0x38>
 800c078:	4629      	mov	r1, r5
 800c07a:	4638      	mov	r0, r7
 800c07c:	47c0      	blx	r8
 800c07e:	4306      	orrs	r6, r0
 800c080:	3568      	adds	r5, #104	@ 0x68
 800c082:	e7e9      	b.n	800c058 <_fwalk_sglue+0x10>

0800c084 <siprintf>:
 800c084:	b40e      	push	{r1, r2, r3}
 800c086:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c08a:	b500      	push	{lr}
 800c08c:	b09c      	sub	sp, #112	@ 0x70
 800c08e:	ab1d      	add	r3, sp, #116	@ 0x74
 800c090:	9002      	str	r0, [sp, #8]
 800c092:	9006      	str	r0, [sp, #24]
 800c094:	9107      	str	r1, [sp, #28]
 800c096:	9104      	str	r1, [sp, #16]
 800c098:	4808      	ldr	r0, [pc, #32]	@ (800c0bc <siprintf+0x38>)
 800c09a:	4909      	ldr	r1, [pc, #36]	@ (800c0c0 <siprintf+0x3c>)
 800c09c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0a0:	9105      	str	r1, [sp, #20]
 800c0a2:	6800      	ldr	r0, [r0, #0]
 800c0a4:	a902      	add	r1, sp, #8
 800c0a6:	9301      	str	r3, [sp, #4]
 800c0a8:	f001 fc08 	bl	800d8bc <_svfiprintf_r>
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	9b02      	ldr	r3, [sp, #8]
 800c0b0:	701a      	strb	r2, [r3, #0]
 800c0b2:	b01c      	add	sp, #112	@ 0x70
 800c0b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0b8:	b003      	add	sp, #12
 800c0ba:	4770      	bx	lr
 800c0bc:	20000030 	.word	0x20000030
 800c0c0:	ffff0208 	.word	0xffff0208

0800c0c4 <__sread>:
 800c0c4:	b510      	push	{r4, lr}
 800c0c6:	460c      	mov	r4, r1
 800c0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0cc:	f000 f86c 	bl	800c1a8 <_read_r>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	bfab      	itete	ge
 800c0d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c0d6:	89a3      	ldrhlt	r3, [r4, #12]
 800c0d8:	181b      	addge	r3, r3, r0
 800c0da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c0de:	bfac      	ite	ge
 800c0e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c0e2:	81a3      	strhlt	r3, [r4, #12]
 800c0e4:	bd10      	pop	{r4, pc}

0800c0e6 <__swrite>:
 800c0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ea:	461f      	mov	r7, r3
 800c0ec:	898b      	ldrh	r3, [r1, #12]
 800c0ee:	4605      	mov	r5, r0
 800c0f0:	05db      	lsls	r3, r3, #23
 800c0f2:	460c      	mov	r4, r1
 800c0f4:	4616      	mov	r6, r2
 800c0f6:	d505      	bpl.n	800c104 <__swrite+0x1e>
 800c0f8:	2302      	movs	r3, #2
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c100:	f000 f840 	bl	800c184 <_lseek_r>
 800c104:	89a3      	ldrh	r3, [r4, #12]
 800c106:	4632      	mov	r2, r6
 800c108:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c10c:	81a3      	strh	r3, [r4, #12]
 800c10e:	4628      	mov	r0, r5
 800c110:	463b      	mov	r3, r7
 800c112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c11a:	f000 b857 	b.w	800c1cc <_write_r>

0800c11e <__sseek>:
 800c11e:	b510      	push	{r4, lr}
 800c120:	460c      	mov	r4, r1
 800c122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c126:	f000 f82d 	bl	800c184 <_lseek_r>
 800c12a:	1c43      	adds	r3, r0, #1
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	bf15      	itete	ne
 800c130:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c132:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c136:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c13a:	81a3      	strheq	r3, [r4, #12]
 800c13c:	bf18      	it	ne
 800c13e:	81a3      	strhne	r3, [r4, #12]
 800c140:	bd10      	pop	{r4, pc}

0800c142 <__sclose>:
 800c142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c146:	f000 b80d 	b.w	800c164 <_close_r>

0800c14a <memset>:
 800c14a:	4603      	mov	r3, r0
 800c14c:	4402      	add	r2, r0
 800c14e:	4293      	cmp	r3, r2
 800c150:	d100      	bne.n	800c154 <memset+0xa>
 800c152:	4770      	bx	lr
 800c154:	f803 1b01 	strb.w	r1, [r3], #1
 800c158:	e7f9      	b.n	800c14e <memset+0x4>
	...

0800c15c <_localeconv_r>:
 800c15c:	4800      	ldr	r0, [pc, #0]	@ (800c160 <_localeconv_r+0x4>)
 800c15e:	4770      	bx	lr
 800c160:	20000170 	.word	0x20000170

0800c164 <_close_r>:
 800c164:	b538      	push	{r3, r4, r5, lr}
 800c166:	2300      	movs	r3, #0
 800c168:	4d05      	ldr	r5, [pc, #20]	@ (800c180 <_close_r+0x1c>)
 800c16a:	4604      	mov	r4, r0
 800c16c:	4608      	mov	r0, r1
 800c16e:	602b      	str	r3, [r5, #0]
 800c170:	f7f6 fca9 	bl	8002ac6 <_close>
 800c174:	1c43      	adds	r3, r0, #1
 800c176:	d102      	bne.n	800c17e <_close_r+0x1a>
 800c178:	682b      	ldr	r3, [r5, #0]
 800c17a:	b103      	cbz	r3, 800c17e <_close_r+0x1a>
 800c17c:	6023      	str	r3, [r4, #0]
 800c17e:	bd38      	pop	{r3, r4, r5, pc}
 800c180:	2000293c 	.word	0x2000293c

0800c184 <_lseek_r>:
 800c184:	b538      	push	{r3, r4, r5, lr}
 800c186:	4604      	mov	r4, r0
 800c188:	4608      	mov	r0, r1
 800c18a:	4611      	mov	r1, r2
 800c18c:	2200      	movs	r2, #0
 800c18e:	4d05      	ldr	r5, [pc, #20]	@ (800c1a4 <_lseek_r+0x20>)
 800c190:	602a      	str	r2, [r5, #0]
 800c192:	461a      	mov	r2, r3
 800c194:	f7f6 fcbb 	bl	8002b0e <_lseek>
 800c198:	1c43      	adds	r3, r0, #1
 800c19a:	d102      	bne.n	800c1a2 <_lseek_r+0x1e>
 800c19c:	682b      	ldr	r3, [r5, #0]
 800c19e:	b103      	cbz	r3, 800c1a2 <_lseek_r+0x1e>
 800c1a0:	6023      	str	r3, [r4, #0]
 800c1a2:	bd38      	pop	{r3, r4, r5, pc}
 800c1a4:	2000293c 	.word	0x2000293c

0800c1a8 <_read_r>:
 800c1a8:	b538      	push	{r3, r4, r5, lr}
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	4608      	mov	r0, r1
 800c1ae:	4611      	mov	r1, r2
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	4d05      	ldr	r5, [pc, #20]	@ (800c1c8 <_read_r+0x20>)
 800c1b4:	602a      	str	r2, [r5, #0]
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	f7f6 fc4c 	bl	8002a54 <_read>
 800c1bc:	1c43      	adds	r3, r0, #1
 800c1be:	d102      	bne.n	800c1c6 <_read_r+0x1e>
 800c1c0:	682b      	ldr	r3, [r5, #0]
 800c1c2:	b103      	cbz	r3, 800c1c6 <_read_r+0x1e>
 800c1c4:	6023      	str	r3, [r4, #0]
 800c1c6:	bd38      	pop	{r3, r4, r5, pc}
 800c1c8:	2000293c 	.word	0x2000293c

0800c1cc <_write_r>:
 800c1cc:	b538      	push	{r3, r4, r5, lr}
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	4608      	mov	r0, r1
 800c1d2:	4611      	mov	r1, r2
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	4d05      	ldr	r5, [pc, #20]	@ (800c1ec <_write_r+0x20>)
 800c1d8:	602a      	str	r2, [r5, #0]
 800c1da:	461a      	mov	r2, r3
 800c1dc:	f7f6 fc57 	bl	8002a8e <_write>
 800c1e0:	1c43      	adds	r3, r0, #1
 800c1e2:	d102      	bne.n	800c1ea <_write_r+0x1e>
 800c1e4:	682b      	ldr	r3, [r5, #0]
 800c1e6:	b103      	cbz	r3, 800c1ea <_write_r+0x1e>
 800c1e8:	6023      	str	r3, [r4, #0]
 800c1ea:	bd38      	pop	{r3, r4, r5, pc}
 800c1ec:	2000293c 	.word	0x2000293c

0800c1f0 <__errno>:
 800c1f0:	4b01      	ldr	r3, [pc, #4]	@ (800c1f8 <__errno+0x8>)
 800c1f2:	6818      	ldr	r0, [r3, #0]
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop
 800c1f8:	20000030 	.word	0x20000030

0800c1fc <__libc_init_array>:
 800c1fc:	b570      	push	{r4, r5, r6, lr}
 800c1fe:	2600      	movs	r6, #0
 800c200:	4d0c      	ldr	r5, [pc, #48]	@ (800c234 <__libc_init_array+0x38>)
 800c202:	4c0d      	ldr	r4, [pc, #52]	@ (800c238 <__libc_init_array+0x3c>)
 800c204:	1b64      	subs	r4, r4, r5
 800c206:	10a4      	asrs	r4, r4, #2
 800c208:	42a6      	cmp	r6, r4
 800c20a:	d109      	bne.n	800c220 <__libc_init_array+0x24>
 800c20c:	f002 f86e 	bl	800e2ec <_init>
 800c210:	2600      	movs	r6, #0
 800c212:	4d0a      	ldr	r5, [pc, #40]	@ (800c23c <__libc_init_array+0x40>)
 800c214:	4c0a      	ldr	r4, [pc, #40]	@ (800c240 <__libc_init_array+0x44>)
 800c216:	1b64      	subs	r4, r4, r5
 800c218:	10a4      	asrs	r4, r4, #2
 800c21a:	42a6      	cmp	r6, r4
 800c21c:	d105      	bne.n	800c22a <__libc_init_array+0x2e>
 800c21e:	bd70      	pop	{r4, r5, r6, pc}
 800c220:	f855 3b04 	ldr.w	r3, [r5], #4
 800c224:	4798      	blx	r3
 800c226:	3601      	adds	r6, #1
 800c228:	e7ee      	b.n	800c208 <__libc_init_array+0xc>
 800c22a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c22e:	4798      	blx	r3
 800c230:	3601      	adds	r6, #1
 800c232:	e7f2      	b.n	800c21a <__libc_init_array+0x1e>
 800c234:	0800ecf0 	.word	0x0800ecf0
 800c238:	0800ecf0 	.word	0x0800ecf0
 800c23c:	0800ecf0 	.word	0x0800ecf0
 800c240:	0800ecf4 	.word	0x0800ecf4

0800c244 <__retarget_lock_init_recursive>:
 800c244:	4770      	bx	lr

0800c246 <__retarget_lock_acquire_recursive>:
 800c246:	4770      	bx	lr

0800c248 <__retarget_lock_release_recursive>:
 800c248:	4770      	bx	lr

0800c24a <memchr>:
 800c24a:	4603      	mov	r3, r0
 800c24c:	b510      	push	{r4, lr}
 800c24e:	b2c9      	uxtb	r1, r1
 800c250:	4402      	add	r2, r0
 800c252:	4293      	cmp	r3, r2
 800c254:	4618      	mov	r0, r3
 800c256:	d101      	bne.n	800c25c <memchr+0x12>
 800c258:	2000      	movs	r0, #0
 800c25a:	e003      	b.n	800c264 <memchr+0x1a>
 800c25c:	7804      	ldrb	r4, [r0, #0]
 800c25e:	3301      	adds	r3, #1
 800c260:	428c      	cmp	r4, r1
 800c262:	d1f6      	bne.n	800c252 <memchr+0x8>
 800c264:	bd10      	pop	{r4, pc}

0800c266 <quorem>:
 800c266:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c26a:	6903      	ldr	r3, [r0, #16]
 800c26c:	690c      	ldr	r4, [r1, #16]
 800c26e:	4607      	mov	r7, r0
 800c270:	42a3      	cmp	r3, r4
 800c272:	db7e      	blt.n	800c372 <quorem+0x10c>
 800c274:	3c01      	subs	r4, #1
 800c276:	00a3      	lsls	r3, r4, #2
 800c278:	f100 0514 	add.w	r5, r0, #20
 800c27c:	f101 0814 	add.w	r8, r1, #20
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c286:	9301      	str	r3, [sp, #4]
 800c288:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c28c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c290:	3301      	adds	r3, #1
 800c292:	429a      	cmp	r2, r3
 800c294:	fbb2 f6f3 	udiv	r6, r2, r3
 800c298:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c29c:	d32e      	bcc.n	800c2fc <quorem+0x96>
 800c29e:	f04f 0a00 	mov.w	sl, #0
 800c2a2:	46c4      	mov	ip, r8
 800c2a4:	46ae      	mov	lr, r5
 800c2a6:	46d3      	mov	fp, sl
 800c2a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c2ac:	b298      	uxth	r0, r3
 800c2ae:	fb06 a000 	mla	r0, r6, r0, sl
 800c2b2:	0c1b      	lsrs	r3, r3, #16
 800c2b4:	0c02      	lsrs	r2, r0, #16
 800c2b6:	fb06 2303 	mla	r3, r6, r3, r2
 800c2ba:	f8de 2000 	ldr.w	r2, [lr]
 800c2be:	b280      	uxth	r0, r0
 800c2c0:	b292      	uxth	r2, r2
 800c2c2:	1a12      	subs	r2, r2, r0
 800c2c4:	445a      	add	r2, fp
 800c2c6:	f8de 0000 	ldr.w	r0, [lr]
 800c2ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c2d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c2d8:	b292      	uxth	r2, r2
 800c2da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c2de:	45e1      	cmp	r9, ip
 800c2e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c2e4:	f84e 2b04 	str.w	r2, [lr], #4
 800c2e8:	d2de      	bcs.n	800c2a8 <quorem+0x42>
 800c2ea:	9b00      	ldr	r3, [sp, #0]
 800c2ec:	58eb      	ldr	r3, [r5, r3]
 800c2ee:	b92b      	cbnz	r3, 800c2fc <quorem+0x96>
 800c2f0:	9b01      	ldr	r3, [sp, #4]
 800c2f2:	3b04      	subs	r3, #4
 800c2f4:	429d      	cmp	r5, r3
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	d32f      	bcc.n	800c35a <quorem+0xf4>
 800c2fa:	613c      	str	r4, [r7, #16]
 800c2fc:	4638      	mov	r0, r7
 800c2fe:	f001 f979 	bl	800d5f4 <__mcmp>
 800c302:	2800      	cmp	r0, #0
 800c304:	db25      	blt.n	800c352 <quorem+0xec>
 800c306:	4629      	mov	r1, r5
 800c308:	2000      	movs	r0, #0
 800c30a:	f858 2b04 	ldr.w	r2, [r8], #4
 800c30e:	f8d1 c000 	ldr.w	ip, [r1]
 800c312:	fa1f fe82 	uxth.w	lr, r2
 800c316:	fa1f f38c 	uxth.w	r3, ip
 800c31a:	eba3 030e 	sub.w	r3, r3, lr
 800c31e:	4403      	add	r3, r0
 800c320:	0c12      	lsrs	r2, r2, #16
 800c322:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c326:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c330:	45c1      	cmp	r9, r8
 800c332:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c336:	f841 3b04 	str.w	r3, [r1], #4
 800c33a:	d2e6      	bcs.n	800c30a <quorem+0xa4>
 800c33c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c340:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c344:	b922      	cbnz	r2, 800c350 <quorem+0xea>
 800c346:	3b04      	subs	r3, #4
 800c348:	429d      	cmp	r5, r3
 800c34a:	461a      	mov	r2, r3
 800c34c:	d30b      	bcc.n	800c366 <quorem+0x100>
 800c34e:	613c      	str	r4, [r7, #16]
 800c350:	3601      	adds	r6, #1
 800c352:	4630      	mov	r0, r6
 800c354:	b003      	add	sp, #12
 800c356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c35a:	6812      	ldr	r2, [r2, #0]
 800c35c:	3b04      	subs	r3, #4
 800c35e:	2a00      	cmp	r2, #0
 800c360:	d1cb      	bne.n	800c2fa <quorem+0x94>
 800c362:	3c01      	subs	r4, #1
 800c364:	e7c6      	b.n	800c2f4 <quorem+0x8e>
 800c366:	6812      	ldr	r2, [r2, #0]
 800c368:	3b04      	subs	r3, #4
 800c36a:	2a00      	cmp	r2, #0
 800c36c:	d1ef      	bne.n	800c34e <quorem+0xe8>
 800c36e:	3c01      	subs	r4, #1
 800c370:	e7ea      	b.n	800c348 <quorem+0xe2>
 800c372:	2000      	movs	r0, #0
 800c374:	e7ee      	b.n	800c354 <quorem+0xee>
	...

0800c378 <_dtoa_r>:
 800c378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c37c:	4614      	mov	r4, r2
 800c37e:	461d      	mov	r5, r3
 800c380:	69c7      	ldr	r7, [r0, #28]
 800c382:	b097      	sub	sp, #92	@ 0x5c
 800c384:	4683      	mov	fp, r0
 800c386:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c38a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800c38c:	b97f      	cbnz	r7, 800c3ae <_dtoa_r+0x36>
 800c38e:	2010      	movs	r0, #16
 800c390:	f000 fe02 	bl	800cf98 <malloc>
 800c394:	4602      	mov	r2, r0
 800c396:	f8cb 001c 	str.w	r0, [fp, #28]
 800c39a:	b920      	cbnz	r0, 800c3a6 <_dtoa_r+0x2e>
 800c39c:	21ef      	movs	r1, #239	@ 0xef
 800c39e:	4ba8      	ldr	r3, [pc, #672]	@ (800c640 <_dtoa_r+0x2c8>)
 800c3a0:	48a8      	ldr	r0, [pc, #672]	@ (800c644 <_dtoa_r+0x2cc>)
 800c3a2:	f001 fc67 	bl	800dc74 <__assert_func>
 800c3a6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c3aa:	6007      	str	r7, [r0, #0]
 800c3ac:	60c7      	str	r7, [r0, #12]
 800c3ae:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c3b2:	6819      	ldr	r1, [r3, #0]
 800c3b4:	b159      	cbz	r1, 800c3ce <_dtoa_r+0x56>
 800c3b6:	685a      	ldr	r2, [r3, #4]
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	4093      	lsls	r3, r2
 800c3bc:	604a      	str	r2, [r1, #4]
 800c3be:	608b      	str	r3, [r1, #8]
 800c3c0:	4658      	mov	r0, fp
 800c3c2:	f000 fedf 	bl	800d184 <_Bfree>
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c3cc:	601a      	str	r2, [r3, #0]
 800c3ce:	1e2b      	subs	r3, r5, #0
 800c3d0:	bfaf      	iteee	ge
 800c3d2:	2300      	movge	r3, #0
 800c3d4:	2201      	movlt	r2, #1
 800c3d6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c3da:	9303      	strlt	r3, [sp, #12]
 800c3dc:	bfa8      	it	ge
 800c3de:	6033      	strge	r3, [r6, #0]
 800c3e0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c3e4:	4b98      	ldr	r3, [pc, #608]	@ (800c648 <_dtoa_r+0x2d0>)
 800c3e6:	bfb8      	it	lt
 800c3e8:	6032      	strlt	r2, [r6, #0]
 800c3ea:	ea33 0308 	bics.w	r3, r3, r8
 800c3ee:	d112      	bne.n	800c416 <_dtoa_r+0x9e>
 800c3f0:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c3f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c3f6:	6013      	str	r3, [r2, #0]
 800c3f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c3fc:	4323      	orrs	r3, r4
 800c3fe:	f000 8550 	beq.w	800cea2 <_dtoa_r+0xb2a>
 800c402:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c404:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800c64c <_dtoa_r+0x2d4>
 800c408:	2b00      	cmp	r3, #0
 800c40a:	f000 8552 	beq.w	800ceb2 <_dtoa_r+0xb3a>
 800c40e:	f10a 0303 	add.w	r3, sl, #3
 800c412:	f000 bd4c 	b.w	800ceae <_dtoa_r+0xb36>
 800c416:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c41a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c41e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c422:	2200      	movs	r2, #0
 800c424:	2300      	movs	r3, #0
 800c426:	f7f4 fabf 	bl	80009a8 <__aeabi_dcmpeq>
 800c42a:	4607      	mov	r7, r0
 800c42c:	b158      	cbz	r0, 800c446 <_dtoa_r+0xce>
 800c42e:	2301      	movs	r3, #1
 800c430:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c432:	6013      	str	r3, [r2, #0]
 800c434:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c436:	b113      	cbz	r3, 800c43e <_dtoa_r+0xc6>
 800c438:	4b85      	ldr	r3, [pc, #532]	@ (800c650 <_dtoa_r+0x2d8>)
 800c43a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c43c:	6013      	str	r3, [r2, #0]
 800c43e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800c654 <_dtoa_r+0x2dc>
 800c442:	f000 bd36 	b.w	800ceb2 <_dtoa_r+0xb3a>
 800c446:	ab14      	add	r3, sp, #80	@ 0x50
 800c448:	9301      	str	r3, [sp, #4]
 800c44a:	ab15      	add	r3, sp, #84	@ 0x54
 800c44c:	9300      	str	r3, [sp, #0]
 800c44e:	4658      	mov	r0, fp
 800c450:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c454:	f001 f97e 	bl	800d754 <__d2b>
 800c458:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800c45c:	4681      	mov	r9, r0
 800c45e:	2e00      	cmp	r6, #0
 800c460:	d077      	beq.n	800c552 <_dtoa_r+0x1da>
 800c462:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c466:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c468:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c46c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c470:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c474:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c478:	9712      	str	r7, [sp, #72]	@ 0x48
 800c47a:	4619      	mov	r1, r3
 800c47c:	2200      	movs	r2, #0
 800c47e:	4b76      	ldr	r3, [pc, #472]	@ (800c658 <_dtoa_r+0x2e0>)
 800c480:	f7f3 fe72 	bl	8000168 <__aeabi_dsub>
 800c484:	a368      	add	r3, pc, #416	@ (adr r3, 800c628 <_dtoa_r+0x2b0>)
 800c486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48a:	f7f4 f825 	bl	80004d8 <__aeabi_dmul>
 800c48e:	a368      	add	r3, pc, #416	@ (adr r3, 800c630 <_dtoa_r+0x2b8>)
 800c490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c494:	f7f3 fe6a 	bl	800016c <__adddf3>
 800c498:	4604      	mov	r4, r0
 800c49a:	4630      	mov	r0, r6
 800c49c:	460d      	mov	r5, r1
 800c49e:	f7f3 ffb1 	bl	8000404 <__aeabi_i2d>
 800c4a2:	a365      	add	r3, pc, #404	@ (adr r3, 800c638 <_dtoa_r+0x2c0>)
 800c4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a8:	f7f4 f816 	bl	80004d8 <__aeabi_dmul>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	460b      	mov	r3, r1
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	4629      	mov	r1, r5
 800c4b4:	f7f3 fe5a 	bl	800016c <__adddf3>
 800c4b8:	4604      	mov	r4, r0
 800c4ba:	460d      	mov	r5, r1
 800c4bc:	f7f4 fabc 	bl	8000a38 <__aeabi_d2iz>
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	4607      	mov	r7, r0
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	4629      	mov	r1, r5
 800c4ca:	f7f4 fa77 	bl	80009bc <__aeabi_dcmplt>
 800c4ce:	b140      	cbz	r0, 800c4e2 <_dtoa_r+0x16a>
 800c4d0:	4638      	mov	r0, r7
 800c4d2:	f7f3 ff97 	bl	8000404 <__aeabi_i2d>
 800c4d6:	4622      	mov	r2, r4
 800c4d8:	462b      	mov	r3, r5
 800c4da:	f7f4 fa65 	bl	80009a8 <__aeabi_dcmpeq>
 800c4de:	b900      	cbnz	r0, 800c4e2 <_dtoa_r+0x16a>
 800c4e0:	3f01      	subs	r7, #1
 800c4e2:	2f16      	cmp	r7, #22
 800c4e4:	d853      	bhi.n	800c58e <_dtoa_r+0x216>
 800c4e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c4ea:	4b5c      	ldr	r3, [pc, #368]	@ (800c65c <_dtoa_r+0x2e4>)
 800c4ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f4:	f7f4 fa62 	bl	80009bc <__aeabi_dcmplt>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	d04a      	beq.n	800c592 <_dtoa_r+0x21a>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	3f01      	subs	r7, #1
 800c500:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c502:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c504:	1b9b      	subs	r3, r3, r6
 800c506:	1e5a      	subs	r2, r3, #1
 800c508:	bf46      	itte	mi
 800c50a:	f1c3 0801 	rsbmi	r8, r3, #1
 800c50e:	2300      	movmi	r3, #0
 800c510:	f04f 0800 	movpl.w	r8, #0
 800c514:	9209      	str	r2, [sp, #36]	@ 0x24
 800c516:	bf48      	it	mi
 800c518:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800c51a:	2f00      	cmp	r7, #0
 800c51c:	db3b      	blt.n	800c596 <_dtoa_r+0x21e>
 800c51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c520:	970e      	str	r7, [sp, #56]	@ 0x38
 800c522:	443b      	add	r3, r7
 800c524:	9309      	str	r3, [sp, #36]	@ 0x24
 800c526:	2300      	movs	r3, #0
 800c528:	930a      	str	r3, [sp, #40]	@ 0x28
 800c52a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c52c:	2b09      	cmp	r3, #9
 800c52e:	d866      	bhi.n	800c5fe <_dtoa_r+0x286>
 800c530:	2b05      	cmp	r3, #5
 800c532:	bfc4      	itt	gt
 800c534:	3b04      	subgt	r3, #4
 800c536:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c538:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c53a:	bfc8      	it	gt
 800c53c:	2400      	movgt	r4, #0
 800c53e:	f1a3 0302 	sub.w	r3, r3, #2
 800c542:	bfd8      	it	le
 800c544:	2401      	movle	r4, #1
 800c546:	2b03      	cmp	r3, #3
 800c548:	d864      	bhi.n	800c614 <_dtoa_r+0x29c>
 800c54a:	e8df f003 	tbb	[pc, r3]
 800c54e:	382b      	.short	0x382b
 800c550:	5636      	.short	0x5636
 800c552:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c556:	441e      	add	r6, r3
 800c558:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c55c:	2b20      	cmp	r3, #32
 800c55e:	bfc1      	itttt	gt
 800c560:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c564:	fa08 f803 	lslgt.w	r8, r8, r3
 800c568:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c56c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c570:	bfd6      	itet	le
 800c572:	f1c3 0320 	rsble	r3, r3, #32
 800c576:	ea48 0003 	orrgt.w	r0, r8, r3
 800c57a:	fa04 f003 	lslle.w	r0, r4, r3
 800c57e:	f7f3 ff31 	bl	80003e4 <__aeabi_ui2d>
 800c582:	2201      	movs	r2, #1
 800c584:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c588:	3e01      	subs	r6, #1
 800c58a:	9212      	str	r2, [sp, #72]	@ 0x48
 800c58c:	e775      	b.n	800c47a <_dtoa_r+0x102>
 800c58e:	2301      	movs	r3, #1
 800c590:	e7b6      	b.n	800c500 <_dtoa_r+0x188>
 800c592:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c594:	e7b5      	b.n	800c502 <_dtoa_r+0x18a>
 800c596:	427b      	negs	r3, r7
 800c598:	930a      	str	r3, [sp, #40]	@ 0x28
 800c59a:	2300      	movs	r3, #0
 800c59c:	eba8 0807 	sub.w	r8, r8, r7
 800c5a0:	930e      	str	r3, [sp, #56]	@ 0x38
 800c5a2:	e7c2      	b.n	800c52a <_dtoa_r+0x1b2>
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	dc35      	bgt.n	800c61a <_dtoa_r+0x2a2>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c5b6:	9221      	str	r2, [sp, #132]	@ 0x84
 800c5b8:	e00b      	b.n	800c5d2 <_dtoa_r+0x25a>
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	e7f3      	b.n	800c5a6 <_dtoa_r+0x22e>
 800c5be:	2300      	movs	r3, #0
 800c5c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c5c4:	18fb      	adds	r3, r7, r3
 800c5c6:	9308      	str	r3, [sp, #32]
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	9307      	str	r3, [sp, #28]
 800c5ce:	bfb8      	it	lt
 800c5d0:	2301      	movlt	r3, #1
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	2204      	movs	r2, #4
 800c5d6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c5da:	f102 0514 	add.w	r5, r2, #20
 800c5de:	429d      	cmp	r5, r3
 800c5e0:	d91f      	bls.n	800c622 <_dtoa_r+0x2aa>
 800c5e2:	6041      	str	r1, [r0, #4]
 800c5e4:	4658      	mov	r0, fp
 800c5e6:	f000 fd8d 	bl	800d104 <_Balloc>
 800c5ea:	4682      	mov	sl, r0
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	d139      	bne.n	800c664 <_dtoa_r+0x2ec>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	f240 11af 	movw	r1, #431	@ 0x1af
 800c5f6:	4b1a      	ldr	r3, [pc, #104]	@ (800c660 <_dtoa_r+0x2e8>)
 800c5f8:	e6d2      	b.n	800c3a0 <_dtoa_r+0x28>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e7e0      	b.n	800c5c0 <_dtoa_r+0x248>
 800c5fe:	2401      	movs	r4, #1
 800c600:	2300      	movs	r3, #0
 800c602:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c604:	9320      	str	r3, [sp, #128]	@ 0x80
 800c606:	f04f 33ff 	mov.w	r3, #4294967295
 800c60a:	2200      	movs	r2, #0
 800c60c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c610:	2312      	movs	r3, #18
 800c612:	e7d0      	b.n	800c5b6 <_dtoa_r+0x23e>
 800c614:	2301      	movs	r3, #1
 800c616:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c618:	e7f5      	b.n	800c606 <_dtoa_r+0x28e>
 800c61a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c61c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c620:	e7d7      	b.n	800c5d2 <_dtoa_r+0x25a>
 800c622:	3101      	adds	r1, #1
 800c624:	0052      	lsls	r2, r2, #1
 800c626:	e7d8      	b.n	800c5da <_dtoa_r+0x262>
 800c628:	636f4361 	.word	0x636f4361
 800c62c:	3fd287a7 	.word	0x3fd287a7
 800c630:	8b60c8b3 	.word	0x8b60c8b3
 800c634:	3fc68a28 	.word	0x3fc68a28
 800c638:	509f79fb 	.word	0x509f79fb
 800c63c:	3fd34413 	.word	0x3fd34413
 800c640:	0800e9b9 	.word	0x0800e9b9
 800c644:	0800e9d0 	.word	0x0800e9d0
 800c648:	7ff00000 	.word	0x7ff00000
 800c64c:	0800e9b5 	.word	0x0800e9b5
 800c650:	0800e989 	.word	0x0800e989
 800c654:	0800e988 	.word	0x0800e988
 800c658:	3ff80000 	.word	0x3ff80000
 800c65c:	0800eac8 	.word	0x0800eac8
 800c660:	0800ea28 	.word	0x0800ea28
 800c664:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c668:	6018      	str	r0, [r3, #0]
 800c66a:	9b07      	ldr	r3, [sp, #28]
 800c66c:	2b0e      	cmp	r3, #14
 800c66e:	f200 80a4 	bhi.w	800c7ba <_dtoa_r+0x442>
 800c672:	2c00      	cmp	r4, #0
 800c674:	f000 80a1 	beq.w	800c7ba <_dtoa_r+0x442>
 800c678:	2f00      	cmp	r7, #0
 800c67a:	dd33      	ble.n	800c6e4 <_dtoa_r+0x36c>
 800c67c:	4b86      	ldr	r3, [pc, #536]	@ (800c898 <_dtoa_r+0x520>)
 800c67e:	f007 020f 	and.w	r2, r7, #15
 800c682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c686:	05f8      	lsls	r0, r7, #23
 800c688:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c68c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c690:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c694:	d516      	bpl.n	800c6c4 <_dtoa_r+0x34c>
 800c696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c69a:	4b80      	ldr	r3, [pc, #512]	@ (800c89c <_dtoa_r+0x524>)
 800c69c:	2603      	movs	r6, #3
 800c69e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c6a2:	f7f4 f843 	bl	800072c <__aeabi_ddiv>
 800c6a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6aa:	f004 040f 	and.w	r4, r4, #15
 800c6ae:	4d7b      	ldr	r5, [pc, #492]	@ (800c89c <_dtoa_r+0x524>)
 800c6b0:	b954      	cbnz	r4, 800c6c8 <_dtoa_r+0x350>
 800c6b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6ba:	f7f4 f837 	bl	800072c <__aeabi_ddiv>
 800c6be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6c2:	e028      	b.n	800c716 <_dtoa_r+0x39e>
 800c6c4:	2602      	movs	r6, #2
 800c6c6:	e7f2      	b.n	800c6ae <_dtoa_r+0x336>
 800c6c8:	07e1      	lsls	r1, r4, #31
 800c6ca:	d508      	bpl.n	800c6de <_dtoa_r+0x366>
 800c6cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c6d4:	f7f3 ff00 	bl	80004d8 <__aeabi_dmul>
 800c6d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6dc:	3601      	adds	r6, #1
 800c6de:	1064      	asrs	r4, r4, #1
 800c6e0:	3508      	adds	r5, #8
 800c6e2:	e7e5      	b.n	800c6b0 <_dtoa_r+0x338>
 800c6e4:	f000 80d2 	beq.w	800c88c <_dtoa_r+0x514>
 800c6e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c6ec:	427c      	negs	r4, r7
 800c6ee:	4b6a      	ldr	r3, [pc, #424]	@ (800c898 <_dtoa_r+0x520>)
 800c6f0:	f004 020f 	and.w	r2, r4, #15
 800c6f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fc:	f7f3 feec 	bl	80004d8 <__aeabi_dmul>
 800c700:	2602      	movs	r6, #2
 800c702:	2300      	movs	r3, #0
 800c704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c708:	4d64      	ldr	r5, [pc, #400]	@ (800c89c <_dtoa_r+0x524>)
 800c70a:	1124      	asrs	r4, r4, #4
 800c70c:	2c00      	cmp	r4, #0
 800c70e:	f040 80b2 	bne.w	800c876 <_dtoa_r+0x4fe>
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1d3      	bne.n	800c6be <_dtoa_r+0x346>
 800c716:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c71a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f000 80b7 	beq.w	800c890 <_dtoa_r+0x518>
 800c722:	2200      	movs	r2, #0
 800c724:	4620      	mov	r0, r4
 800c726:	4629      	mov	r1, r5
 800c728:	4b5d      	ldr	r3, [pc, #372]	@ (800c8a0 <_dtoa_r+0x528>)
 800c72a:	f7f4 f947 	bl	80009bc <__aeabi_dcmplt>
 800c72e:	2800      	cmp	r0, #0
 800c730:	f000 80ae 	beq.w	800c890 <_dtoa_r+0x518>
 800c734:	9b07      	ldr	r3, [sp, #28]
 800c736:	2b00      	cmp	r3, #0
 800c738:	f000 80aa 	beq.w	800c890 <_dtoa_r+0x518>
 800c73c:	9b08      	ldr	r3, [sp, #32]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	dd37      	ble.n	800c7b2 <_dtoa_r+0x43a>
 800c742:	1e7b      	subs	r3, r7, #1
 800c744:	4620      	mov	r0, r4
 800c746:	9304      	str	r3, [sp, #16]
 800c748:	2200      	movs	r2, #0
 800c74a:	4629      	mov	r1, r5
 800c74c:	4b55      	ldr	r3, [pc, #340]	@ (800c8a4 <_dtoa_r+0x52c>)
 800c74e:	f7f3 fec3 	bl	80004d8 <__aeabi_dmul>
 800c752:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c756:	9c08      	ldr	r4, [sp, #32]
 800c758:	3601      	adds	r6, #1
 800c75a:	4630      	mov	r0, r6
 800c75c:	f7f3 fe52 	bl	8000404 <__aeabi_i2d>
 800c760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c764:	f7f3 feb8 	bl	80004d8 <__aeabi_dmul>
 800c768:	2200      	movs	r2, #0
 800c76a:	4b4f      	ldr	r3, [pc, #316]	@ (800c8a8 <_dtoa_r+0x530>)
 800c76c:	f7f3 fcfe 	bl	800016c <__adddf3>
 800c770:	4605      	mov	r5, r0
 800c772:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c776:	2c00      	cmp	r4, #0
 800c778:	f040 809a 	bne.w	800c8b0 <_dtoa_r+0x538>
 800c77c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c780:	2200      	movs	r2, #0
 800c782:	4b4a      	ldr	r3, [pc, #296]	@ (800c8ac <_dtoa_r+0x534>)
 800c784:	f7f3 fcf0 	bl	8000168 <__aeabi_dsub>
 800c788:	4602      	mov	r2, r0
 800c78a:	460b      	mov	r3, r1
 800c78c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c790:	462a      	mov	r2, r5
 800c792:	4633      	mov	r3, r6
 800c794:	f7f4 f930 	bl	80009f8 <__aeabi_dcmpgt>
 800c798:	2800      	cmp	r0, #0
 800c79a:	f040 828e 	bne.w	800ccba <_dtoa_r+0x942>
 800c79e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7a2:	462a      	mov	r2, r5
 800c7a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c7a8:	f7f4 f908 	bl	80009bc <__aeabi_dcmplt>
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	f040 8127 	bne.w	800ca00 <_dtoa_r+0x688>
 800c7b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c7b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c7ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f2c0 8163 	blt.w	800ca88 <_dtoa_r+0x710>
 800c7c2:	2f0e      	cmp	r7, #14
 800c7c4:	f300 8160 	bgt.w	800ca88 <_dtoa_r+0x710>
 800c7c8:	4b33      	ldr	r3, [pc, #204]	@ (800c898 <_dtoa_r+0x520>)
 800c7ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c7ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c7d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c7d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	da03      	bge.n	800c7e4 <_dtoa_r+0x46c>
 800c7dc:	9b07      	ldr	r3, [sp, #28]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	f340 8100 	ble.w	800c9e4 <_dtoa_r+0x66c>
 800c7e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c7e8:	4656      	mov	r6, sl
 800c7ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	f7f3 ff9b 	bl	800072c <__aeabi_ddiv>
 800c7f6:	f7f4 f91f 	bl	8000a38 <__aeabi_d2iz>
 800c7fa:	4680      	mov	r8, r0
 800c7fc:	f7f3 fe02 	bl	8000404 <__aeabi_i2d>
 800c800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c804:	f7f3 fe68 	bl	80004d8 <__aeabi_dmul>
 800c808:	4602      	mov	r2, r0
 800c80a:	460b      	mov	r3, r1
 800c80c:	4620      	mov	r0, r4
 800c80e:	4629      	mov	r1, r5
 800c810:	f7f3 fcaa 	bl	8000168 <__aeabi_dsub>
 800c814:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c818:	9d07      	ldr	r5, [sp, #28]
 800c81a:	f806 4b01 	strb.w	r4, [r6], #1
 800c81e:	eba6 040a 	sub.w	r4, r6, sl
 800c822:	42a5      	cmp	r5, r4
 800c824:	4602      	mov	r2, r0
 800c826:	460b      	mov	r3, r1
 800c828:	f040 8116 	bne.w	800ca58 <_dtoa_r+0x6e0>
 800c82c:	f7f3 fc9e 	bl	800016c <__adddf3>
 800c830:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c834:	4604      	mov	r4, r0
 800c836:	460d      	mov	r5, r1
 800c838:	f7f4 f8de 	bl	80009f8 <__aeabi_dcmpgt>
 800c83c:	2800      	cmp	r0, #0
 800c83e:	f040 80f8 	bne.w	800ca32 <_dtoa_r+0x6ba>
 800c842:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c846:	4620      	mov	r0, r4
 800c848:	4629      	mov	r1, r5
 800c84a:	f7f4 f8ad 	bl	80009a8 <__aeabi_dcmpeq>
 800c84e:	b118      	cbz	r0, 800c858 <_dtoa_r+0x4e0>
 800c850:	f018 0f01 	tst.w	r8, #1
 800c854:	f040 80ed 	bne.w	800ca32 <_dtoa_r+0x6ba>
 800c858:	4649      	mov	r1, r9
 800c85a:	4658      	mov	r0, fp
 800c85c:	f000 fc92 	bl	800d184 <_Bfree>
 800c860:	2300      	movs	r3, #0
 800c862:	7033      	strb	r3, [r6, #0]
 800c864:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c866:	3701      	adds	r7, #1
 800c868:	601f      	str	r7, [r3, #0]
 800c86a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f000 8320 	beq.w	800ceb2 <_dtoa_r+0xb3a>
 800c872:	601e      	str	r6, [r3, #0]
 800c874:	e31d      	b.n	800ceb2 <_dtoa_r+0xb3a>
 800c876:	07e2      	lsls	r2, r4, #31
 800c878:	d505      	bpl.n	800c886 <_dtoa_r+0x50e>
 800c87a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c87e:	f7f3 fe2b 	bl	80004d8 <__aeabi_dmul>
 800c882:	2301      	movs	r3, #1
 800c884:	3601      	adds	r6, #1
 800c886:	1064      	asrs	r4, r4, #1
 800c888:	3508      	adds	r5, #8
 800c88a:	e73f      	b.n	800c70c <_dtoa_r+0x394>
 800c88c:	2602      	movs	r6, #2
 800c88e:	e742      	b.n	800c716 <_dtoa_r+0x39e>
 800c890:	9c07      	ldr	r4, [sp, #28]
 800c892:	9704      	str	r7, [sp, #16]
 800c894:	e761      	b.n	800c75a <_dtoa_r+0x3e2>
 800c896:	bf00      	nop
 800c898:	0800eac8 	.word	0x0800eac8
 800c89c:	0800eaa0 	.word	0x0800eaa0
 800c8a0:	3ff00000 	.word	0x3ff00000
 800c8a4:	40240000 	.word	0x40240000
 800c8a8:	401c0000 	.word	0x401c0000
 800c8ac:	40140000 	.word	0x40140000
 800c8b0:	4b70      	ldr	r3, [pc, #448]	@ (800ca74 <_dtoa_r+0x6fc>)
 800c8b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c8b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c8b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c8bc:	4454      	add	r4, sl
 800c8be:	2900      	cmp	r1, #0
 800c8c0:	d045      	beq.n	800c94e <_dtoa_r+0x5d6>
 800c8c2:	2000      	movs	r0, #0
 800c8c4:	496c      	ldr	r1, [pc, #432]	@ (800ca78 <_dtoa_r+0x700>)
 800c8c6:	f7f3 ff31 	bl	800072c <__aeabi_ddiv>
 800c8ca:	4633      	mov	r3, r6
 800c8cc:	462a      	mov	r2, r5
 800c8ce:	f7f3 fc4b 	bl	8000168 <__aeabi_dsub>
 800c8d2:	4656      	mov	r6, sl
 800c8d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c8d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8dc:	f7f4 f8ac 	bl	8000a38 <__aeabi_d2iz>
 800c8e0:	4605      	mov	r5, r0
 800c8e2:	f7f3 fd8f 	bl	8000404 <__aeabi_i2d>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8ee:	f7f3 fc3b 	bl	8000168 <__aeabi_dsub>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	3530      	adds	r5, #48	@ 0x30
 800c8f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c8fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c900:	f806 5b01 	strb.w	r5, [r6], #1
 800c904:	f7f4 f85a 	bl	80009bc <__aeabi_dcmplt>
 800c908:	2800      	cmp	r0, #0
 800c90a:	d163      	bne.n	800c9d4 <_dtoa_r+0x65c>
 800c90c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c910:	2000      	movs	r0, #0
 800c912:	495a      	ldr	r1, [pc, #360]	@ (800ca7c <_dtoa_r+0x704>)
 800c914:	f7f3 fc28 	bl	8000168 <__aeabi_dsub>
 800c918:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c91c:	f7f4 f84e 	bl	80009bc <__aeabi_dcmplt>
 800c920:	2800      	cmp	r0, #0
 800c922:	f040 8087 	bne.w	800ca34 <_dtoa_r+0x6bc>
 800c926:	42a6      	cmp	r6, r4
 800c928:	f43f af43 	beq.w	800c7b2 <_dtoa_r+0x43a>
 800c92c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c930:	2200      	movs	r2, #0
 800c932:	4b53      	ldr	r3, [pc, #332]	@ (800ca80 <_dtoa_r+0x708>)
 800c934:	f7f3 fdd0 	bl	80004d8 <__aeabi_dmul>
 800c938:	2200      	movs	r2, #0
 800c93a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c93e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c942:	4b4f      	ldr	r3, [pc, #316]	@ (800ca80 <_dtoa_r+0x708>)
 800c944:	f7f3 fdc8 	bl	80004d8 <__aeabi_dmul>
 800c948:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c94c:	e7c4      	b.n	800c8d8 <_dtoa_r+0x560>
 800c94e:	4631      	mov	r1, r6
 800c950:	4628      	mov	r0, r5
 800c952:	f7f3 fdc1 	bl	80004d8 <__aeabi_dmul>
 800c956:	4656      	mov	r6, sl
 800c958:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c95c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c95e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c962:	f7f4 f869 	bl	8000a38 <__aeabi_d2iz>
 800c966:	4605      	mov	r5, r0
 800c968:	f7f3 fd4c 	bl	8000404 <__aeabi_i2d>
 800c96c:	4602      	mov	r2, r0
 800c96e:	460b      	mov	r3, r1
 800c970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c974:	f7f3 fbf8 	bl	8000168 <__aeabi_dsub>
 800c978:	4602      	mov	r2, r0
 800c97a:	460b      	mov	r3, r1
 800c97c:	3530      	adds	r5, #48	@ 0x30
 800c97e:	f806 5b01 	strb.w	r5, [r6], #1
 800c982:	42a6      	cmp	r6, r4
 800c984:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c988:	f04f 0200 	mov.w	r2, #0
 800c98c:	d124      	bne.n	800c9d8 <_dtoa_r+0x660>
 800c98e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c992:	4b39      	ldr	r3, [pc, #228]	@ (800ca78 <_dtoa_r+0x700>)
 800c994:	f7f3 fbea 	bl	800016c <__adddf3>
 800c998:	4602      	mov	r2, r0
 800c99a:	460b      	mov	r3, r1
 800c99c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9a0:	f7f4 f82a 	bl	80009f8 <__aeabi_dcmpgt>
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	d145      	bne.n	800ca34 <_dtoa_r+0x6bc>
 800c9a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c9ac:	2000      	movs	r0, #0
 800c9ae:	4932      	ldr	r1, [pc, #200]	@ (800ca78 <_dtoa_r+0x700>)
 800c9b0:	f7f3 fbda 	bl	8000168 <__aeabi_dsub>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9bc:	f7f3 fffe 	bl	80009bc <__aeabi_dcmplt>
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	f43f aef6 	beq.w	800c7b2 <_dtoa_r+0x43a>
 800c9c6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c9c8:	1e73      	subs	r3, r6, #1
 800c9ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c9cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c9d0:	2b30      	cmp	r3, #48	@ 0x30
 800c9d2:	d0f8      	beq.n	800c9c6 <_dtoa_r+0x64e>
 800c9d4:	9f04      	ldr	r7, [sp, #16]
 800c9d6:	e73f      	b.n	800c858 <_dtoa_r+0x4e0>
 800c9d8:	4b29      	ldr	r3, [pc, #164]	@ (800ca80 <_dtoa_r+0x708>)
 800c9da:	f7f3 fd7d 	bl	80004d8 <__aeabi_dmul>
 800c9de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9e2:	e7bc      	b.n	800c95e <_dtoa_r+0x5e6>
 800c9e4:	d10c      	bne.n	800ca00 <_dtoa_r+0x688>
 800c9e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	4b25      	ldr	r3, [pc, #148]	@ (800ca84 <_dtoa_r+0x70c>)
 800c9ee:	f7f3 fd73 	bl	80004d8 <__aeabi_dmul>
 800c9f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9f6:	f7f3 fff5 	bl	80009e4 <__aeabi_dcmpge>
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	f000 815b 	beq.w	800ccb6 <_dtoa_r+0x93e>
 800ca00:	2400      	movs	r4, #0
 800ca02:	4625      	mov	r5, r4
 800ca04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ca06:	4656      	mov	r6, sl
 800ca08:	43db      	mvns	r3, r3
 800ca0a:	9304      	str	r3, [sp, #16]
 800ca0c:	2700      	movs	r7, #0
 800ca0e:	4621      	mov	r1, r4
 800ca10:	4658      	mov	r0, fp
 800ca12:	f000 fbb7 	bl	800d184 <_Bfree>
 800ca16:	2d00      	cmp	r5, #0
 800ca18:	d0dc      	beq.n	800c9d4 <_dtoa_r+0x65c>
 800ca1a:	b12f      	cbz	r7, 800ca28 <_dtoa_r+0x6b0>
 800ca1c:	42af      	cmp	r7, r5
 800ca1e:	d003      	beq.n	800ca28 <_dtoa_r+0x6b0>
 800ca20:	4639      	mov	r1, r7
 800ca22:	4658      	mov	r0, fp
 800ca24:	f000 fbae 	bl	800d184 <_Bfree>
 800ca28:	4629      	mov	r1, r5
 800ca2a:	4658      	mov	r0, fp
 800ca2c:	f000 fbaa 	bl	800d184 <_Bfree>
 800ca30:	e7d0      	b.n	800c9d4 <_dtoa_r+0x65c>
 800ca32:	9704      	str	r7, [sp, #16]
 800ca34:	4633      	mov	r3, r6
 800ca36:	461e      	mov	r6, r3
 800ca38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca3c:	2a39      	cmp	r2, #57	@ 0x39
 800ca3e:	d107      	bne.n	800ca50 <_dtoa_r+0x6d8>
 800ca40:	459a      	cmp	sl, r3
 800ca42:	d1f8      	bne.n	800ca36 <_dtoa_r+0x6be>
 800ca44:	9a04      	ldr	r2, [sp, #16]
 800ca46:	3201      	adds	r2, #1
 800ca48:	9204      	str	r2, [sp, #16]
 800ca4a:	2230      	movs	r2, #48	@ 0x30
 800ca4c:	f88a 2000 	strb.w	r2, [sl]
 800ca50:	781a      	ldrb	r2, [r3, #0]
 800ca52:	3201      	adds	r2, #1
 800ca54:	701a      	strb	r2, [r3, #0]
 800ca56:	e7bd      	b.n	800c9d4 <_dtoa_r+0x65c>
 800ca58:	2200      	movs	r2, #0
 800ca5a:	4b09      	ldr	r3, [pc, #36]	@ (800ca80 <_dtoa_r+0x708>)
 800ca5c:	f7f3 fd3c 	bl	80004d8 <__aeabi_dmul>
 800ca60:	2200      	movs	r2, #0
 800ca62:	2300      	movs	r3, #0
 800ca64:	4604      	mov	r4, r0
 800ca66:	460d      	mov	r5, r1
 800ca68:	f7f3 ff9e 	bl	80009a8 <__aeabi_dcmpeq>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	f43f aebc 	beq.w	800c7ea <_dtoa_r+0x472>
 800ca72:	e6f1      	b.n	800c858 <_dtoa_r+0x4e0>
 800ca74:	0800eac8 	.word	0x0800eac8
 800ca78:	3fe00000 	.word	0x3fe00000
 800ca7c:	3ff00000 	.word	0x3ff00000
 800ca80:	40240000 	.word	0x40240000
 800ca84:	40140000 	.word	0x40140000
 800ca88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ca8a:	2a00      	cmp	r2, #0
 800ca8c:	f000 80db 	beq.w	800cc46 <_dtoa_r+0x8ce>
 800ca90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ca92:	2a01      	cmp	r2, #1
 800ca94:	f300 80bf 	bgt.w	800cc16 <_dtoa_r+0x89e>
 800ca98:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ca9a:	2a00      	cmp	r2, #0
 800ca9c:	f000 80b7 	beq.w	800cc0e <_dtoa_r+0x896>
 800caa0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800caa4:	4646      	mov	r6, r8
 800caa6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800caa8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800caaa:	2101      	movs	r1, #1
 800caac:	441a      	add	r2, r3
 800caae:	4658      	mov	r0, fp
 800cab0:	4498      	add	r8, r3
 800cab2:	9209      	str	r2, [sp, #36]	@ 0x24
 800cab4:	f000 fc1a 	bl	800d2ec <__i2b>
 800cab8:	4605      	mov	r5, r0
 800caba:	b15e      	cbz	r6, 800cad4 <_dtoa_r+0x75c>
 800cabc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	dd08      	ble.n	800cad4 <_dtoa_r+0x75c>
 800cac2:	42b3      	cmp	r3, r6
 800cac4:	bfa8      	it	ge
 800cac6:	4633      	movge	r3, r6
 800cac8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800caca:	eba8 0803 	sub.w	r8, r8, r3
 800cace:	1af6      	subs	r6, r6, r3
 800cad0:	1ad3      	subs	r3, r2, r3
 800cad2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cad6:	b1f3      	cbz	r3, 800cb16 <_dtoa_r+0x79e>
 800cad8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cada:	2b00      	cmp	r3, #0
 800cadc:	f000 80b7 	beq.w	800cc4e <_dtoa_r+0x8d6>
 800cae0:	b18c      	cbz	r4, 800cb06 <_dtoa_r+0x78e>
 800cae2:	4629      	mov	r1, r5
 800cae4:	4622      	mov	r2, r4
 800cae6:	4658      	mov	r0, fp
 800cae8:	f000 fcbe 	bl	800d468 <__pow5mult>
 800caec:	464a      	mov	r2, r9
 800caee:	4601      	mov	r1, r0
 800caf0:	4605      	mov	r5, r0
 800caf2:	4658      	mov	r0, fp
 800caf4:	f000 fc10 	bl	800d318 <__multiply>
 800caf8:	4649      	mov	r1, r9
 800cafa:	9004      	str	r0, [sp, #16]
 800cafc:	4658      	mov	r0, fp
 800cafe:	f000 fb41 	bl	800d184 <_Bfree>
 800cb02:	9b04      	ldr	r3, [sp, #16]
 800cb04:	4699      	mov	r9, r3
 800cb06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb08:	1b1a      	subs	r2, r3, r4
 800cb0a:	d004      	beq.n	800cb16 <_dtoa_r+0x79e>
 800cb0c:	4649      	mov	r1, r9
 800cb0e:	4658      	mov	r0, fp
 800cb10:	f000 fcaa 	bl	800d468 <__pow5mult>
 800cb14:	4681      	mov	r9, r0
 800cb16:	2101      	movs	r1, #1
 800cb18:	4658      	mov	r0, fp
 800cb1a:	f000 fbe7 	bl	800d2ec <__i2b>
 800cb1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb20:	4604      	mov	r4, r0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	f000 81c9 	beq.w	800ceba <_dtoa_r+0xb42>
 800cb28:	461a      	mov	r2, r3
 800cb2a:	4601      	mov	r1, r0
 800cb2c:	4658      	mov	r0, fp
 800cb2e:	f000 fc9b 	bl	800d468 <__pow5mult>
 800cb32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cb34:	4604      	mov	r4, r0
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	f300 808f 	bgt.w	800cc5a <_dtoa_r+0x8e2>
 800cb3c:	9b02      	ldr	r3, [sp, #8]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	f040 8087 	bne.w	800cc52 <_dtoa_r+0x8da>
 800cb44:	9b03      	ldr	r3, [sp, #12]
 800cb46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	f040 8083 	bne.w	800cc56 <_dtoa_r+0x8de>
 800cb50:	9b03      	ldr	r3, [sp, #12]
 800cb52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cb56:	0d1b      	lsrs	r3, r3, #20
 800cb58:	051b      	lsls	r3, r3, #20
 800cb5a:	b12b      	cbz	r3, 800cb68 <_dtoa_r+0x7f0>
 800cb5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb5e:	f108 0801 	add.w	r8, r8, #1
 800cb62:	3301      	adds	r3, #1
 800cb64:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb66:	2301      	movs	r3, #1
 800cb68:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f000 81aa 	beq.w	800cec6 <_dtoa_r+0xb4e>
 800cb72:	6923      	ldr	r3, [r4, #16]
 800cb74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cb78:	6918      	ldr	r0, [r3, #16]
 800cb7a:	f000 fb6b 	bl	800d254 <__hi0bits>
 800cb7e:	f1c0 0020 	rsb	r0, r0, #32
 800cb82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb84:	4418      	add	r0, r3
 800cb86:	f010 001f 	ands.w	r0, r0, #31
 800cb8a:	d071      	beq.n	800cc70 <_dtoa_r+0x8f8>
 800cb8c:	f1c0 0320 	rsb	r3, r0, #32
 800cb90:	2b04      	cmp	r3, #4
 800cb92:	dd65      	ble.n	800cc60 <_dtoa_r+0x8e8>
 800cb94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb96:	f1c0 001c 	rsb	r0, r0, #28
 800cb9a:	4403      	add	r3, r0
 800cb9c:	4480      	add	r8, r0
 800cb9e:	4406      	add	r6, r0
 800cba0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cba2:	f1b8 0f00 	cmp.w	r8, #0
 800cba6:	dd05      	ble.n	800cbb4 <_dtoa_r+0x83c>
 800cba8:	4649      	mov	r1, r9
 800cbaa:	4642      	mov	r2, r8
 800cbac:	4658      	mov	r0, fp
 800cbae:	f000 fcb5 	bl	800d51c <__lshift>
 800cbb2:	4681      	mov	r9, r0
 800cbb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	dd05      	ble.n	800cbc6 <_dtoa_r+0x84e>
 800cbba:	4621      	mov	r1, r4
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	4658      	mov	r0, fp
 800cbc0:	f000 fcac 	bl	800d51c <__lshift>
 800cbc4:	4604      	mov	r4, r0
 800cbc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d053      	beq.n	800cc74 <_dtoa_r+0x8fc>
 800cbcc:	4621      	mov	r1, r4
 800cbce:	4648      	mov	r0, r9
 800cbd0:	f000 fd10 	bl	800d5f4 <__mcmp>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	da4d      	bge.n	800cc74 <_dtoa_r+0x8fc>
 800cbd8:	1e7b      	subs	r3, r7, #1
 800cbda:	4649      	mov	r1, r9
 800cbdc:	9304      	str	r3, [sp, #16]
 800cbde:	220a      	movs	r2, #10
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	4658      	mov	r0, fp
 800cbe4:	f000 faf0 	bl	800d1c8 <__multadd>
 800cbe8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbea:	4681      	mov	r9, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f000 816c 	beq.w	800ceca <_dtoa_r+0xb52>
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	4629      	mov	r1, r5
 800cbf6:	220a      	movs	r2, #10
 800cbf8:	4658      	mov	r0, fp
 800cbfa:	f000 fae5 	bl	800d1c8 <__multadd>
 800cbfe:	9b08      	ldr	r3, [sp, #32]
 800cc00:	4605      	mov	r5, r0
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	dc61      	bgt.n	800ccca <_dtoa_r+0x952>
 800cc06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cc08:	2b02      	cmp	r3, #2
 800cc0a:	dc3b      	bgt.n	800cc84 <_dtoa_r+0x90c>
 800cc0c:	e05d      	b.n	800ccca <_dtoa_r+0x952>
 800cc0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cc10:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cc14:	e746      	b.n	800caa4 <_dtoa_r+0x72c>
 800cc16:	9b07      	ldr	r3, [sp, #28]
 800cc18:	1e5c      	subs	r4, r3, #1
 800cc1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc1c:	42a3      	cmp	r3, r4
 800cc1e:	bfbf      	itttt	lt
 800cc20:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cc22:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800cc24:	1ae3      	sublt	r3, r4, r3
 800cc26:	18d2      	addlt	r2, r2, r3
 800cc28:	bfa8      	it	ge
 800cc2a:	1b1c      	subge	r4, r3, r4
 800cc2c:	9b07      	ldr	r3, [sp, #28]
 800cc2e:	bfbe      	ittt	lt
 800cc30:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cc32:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800cc34:	2400      	movlt	r4, #0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	bfb5      	itete	lt
 800cc3a:	eba8 0603 	sublt.w	r6, r8, r3
 800cc3e:	4646      	movge	r6, r8
 800cc40:	2300      	movlt	r3, #0
 800cc42:	9b07      	ldrge	r3, [sp, #28]
 800cc44:	e730      	b.n	800caa8 <_dtoa_r+0x730>
 800cc46:	4646      	mov	r6, r8
 800cc48:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cc4a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cc4c:	e735      	b.n	800caba <_dtoa_r+0x742>
 800cc4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cc50:	e75c      	b.n	800cb0c <_dtoa_r+0x794>
 800cc52:	2300      	movs	r3, #0
 800cc54:	e788      	b.n	800cb68 <_dtoa_r+0x7f0>
 800cc56:	9b02      	ldr	r3, [sp, #8]
 800cc58:	e786      	b.n	800cb68 <_dtoa_r+0x7f0>
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc5e:	e788      	b.n	800cb72 <_dtoa_r+0x7fa>
 800cc60:	d09f      	beq.n	800cba2 <_dtoa_r+0x82a>
 800cc62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc64:	331c      	adds	r3, #28
 800cc66:	441a      	add	r2, r3
 800cc68:	4498      	add	r8, r3
 800cc6a:	441e      	add	r6, r3
 800cc6c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc6e:	e798      	b.n	800cba2 <_dtoa_r+0x82a>
 800cc70:	4603      	mov	r3, r0
 800cc72:	e7f6      	b.n	800cc62 <_dtoa_r+0x8ea>
 800cc74:	9b07      	ldr	r3, [sp, #28]
 800cc76:	9704      	str	r7, [sp, #16]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	dc20      	bgt.n	800ccbe <_dtoa_r+0x946>
 800cc7c:	9308      	str	r3, [sp, #32]
 800cc7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cc80:	2b02      	cmp	r3, #2
 800cc82:	dd1e      	ble.n	800ccc2 <_dtoa_r+0x94a>
 800cc84:	9b08      	ldr	r3, [sp, #32]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	f47f aebc 	bne.w	800ca04 <_dtoa_r+0x68c>
 800cc8c:	4621      	mov	r1, r4
 800cc8e:	2205      	movs	r2, #5
 800cc90:	4658      	mov	r0, fp
 800cc92:	f000 fa99 	bl	800d1c8 <__multadd>
 800cc96:	4601      	mov	r1, r0
 800cc98:	4604      	mov	r4, r0
 800cc9a:	4648      	mov	r0, r9
 800cc9c:	f000 fcaa 	bl	800d5f4 <__mcmp>
 800cca0:	2800      	cmp	r0, #0
 800cca2:	f77f aeaf 	ble.w	800ca04 <_dtoa_r+0x68c>
 800cca6:	2331      	movs	r3, #49	@ 0x31
 800cca8:	4656      	mov	r6, sl
 800ccaa:	f806 3b01 	strb.w	r3, [r6], #1
 800ccae:	9b04      	ldr	r3, [sp, #16]
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	9304      	str	r3, [sp, #16]
 800ccb4:	e6aa      	b.n	800ca0c <_dtoa_r+0x694>
 800ccb6:	9c07      	ldr	r4, [sp, #28]
 800ccb8:	9704      	str	r7, [sp, #16]
 800ccba:	4625      	mov	r5, r4
 800ccbc:	e7f3      	b.n	800cca6 <_dtoa_r+0x92e>
 800ccbe:	9b07      	ldr	r3, [sp, #28]
 800ccc0:	9308      	str	r3, [sp, #32]
 800ccc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	f000 8104 	beq.w	800ced2 <_dtoa_r+0xb5a>
 800ccca:	2e00      	cmp	r6, #0
 800cccc:	dd05      	ble.n	800ccda <_dtoa_r+0x962>
 800ccce:	4629      	mov	r1, r5
 800ccd0:	4632      	mov	r2, r6
 800ccd2:	4658      	mov	r0, fp
 800ccd4:	f000 fc22 	bl	800d51c <__lshift>
 800ccd8:	4605      	mov	r5, r0
 800ccda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d05a      	beq.n	800cd96 <_dtoa_r+0xa1e>
 800cce0:	4658      	mov	r0, fp
 800cce2:	6869      	ldr	r1, [r5, #4]
 800cce4:	f000 fa0e 	bl	800d104 <_Balloc>
 800cce8:	4606      	mov	r6, r0
 800ccea:	b928      	cbnz	r0, 800ccf8 <_dtoa_r+0x980>
 800ccec:	4602      	mov	r2, r0
 800ccee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ccf2:	4b83      	ldr	r3, [pc, #524]	@ (800cf00 <_dtoa_r+0xb88>)
 800ccf4:	f7ff bb54 	b.w	800c3a0 <_dtoa_r+0x28>
 800ccf8:	692a      	ldr	r2, [r5, #16]
 800ccfa:	f105 010c 	add.w	r1, r5, #12
 800ccfe:	3202      	adds	r2, #2
 800cd00:	0092      	lsls	r2, r2, #2
 800cd02:	300c      	adds	r0, #12
 800cd04:	f000 ffa8 	bl	800dc58 <memcpy>
 800cd08:	2201      	movs	r2, #1
 800cd0a:	4631      	mov	r1, r6
 800cd0c:	4658      	mov	r0, fp
 800cd0e:	f000 fc05 	bl	800d51c <__lshift>
 800cd12:	462f      	mov	r7, r5
 800cd14:	4605      	mov	r5, r0
 800cd16:	f10a 0301 	add.w	r3, sl, #1
 800cd1a:	9307      	str	r3, [sp, #28]
 800cd1c:	9b08      	ldr	r3, [sp, #32]
 800cd1e:	4453      	add	r3, sl
 800cd20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd22:	9b02      	ldr	r3, [sp, #8]
 800cd24:	f003 0301 	and.w	r3, r3, #1
 800cd28:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd2a:	9b07      	ldr	r3, [sp, #28]
 800cd2c:	4621      	mov	r1, r4
 800cd2e:	3b01      	subs	r3, #1
 800cd30:	4648      	mov	r0, r9
 800cd32:	9302      	str	r3, [sp, #8]
 800cd34:	f7ff fa97 	bl	800c266 <quorem>
 800cd38:	4639      	mov	r1, r7
 800cd3a:	9008      	str	r0, [sp, #32]
 800cd3c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cd40:	4648      	mov	r0, r9
 800cd42:	f000 fc57 	bl	800d5f4 <__mcmp>
 800cd46:	462a      	mov	r2, r5
 800cd48:	9009      	str	r0, [sp, #36]	@ 0x24
 800cd4a:	4621      	mov	r1, r4
 800cd4c:	4658      	mov	r0, fp
 800cd4e:	f000 fc6d 	bl	800d62c <__mdiff>
 800cd52:	68c2      	ldr	r2, [r0, #12]
 800cd54:	4606      	mov	r6, r0
 800cd56:	bb02      	cbnz	r2, 800cd9a <_dtoa_r+0xa22>
 800cd58:	4601      	mov	r1, r0
 800cd5a:	4648      	mov	r0, r9
 800cd5c:	f000 fc4a 	bl	800d5f4 <__mcmp>
 800cd60:	4602      	mov	r2, r0
 800cd62:	4631      	mov	r1, r6
 800cd64:	4658      	mov	r0, fp
 800cd66:	920c      	str	r2, [sp, #48]	@ 0x30
 800cd68:	f000 fa0c 	bl	800d184 <_Bfree>
 800cd6c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cd6e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cd70:	9e07      	ldr	r6, [sp, #28]
 800cd72:	ea43 0102 	orr.w	r1, r3, r2
 800cd76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd78:	4319      	orrs	r1, r3
 800cd7a:	d110      	bne.n	800cd9e <_dtoa_r+0xa26>
 800cd7c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cd80:	d029      	beq.n	800cdd6 <_dtoa_r+0xa5e>
 800cd82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	dd02      	ble.n	800cd8e <_dtoa_r+0xa16>
 800cd88:	9b08      	ldr	r3, [sp, #32]
 800cd8a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cd8e:	9b02      	ldr	r3, [sp, #8]
 800cd90:	f883 8000 	strb.w	r8, [r3]
 800cd94:	e63b      	b.n	800ca0e <_dtoa_r+0x696>
 800cd96:	4628      	mov	r0, r5
 800cd98:	e7bb      	b.n	800cd12 <_dtoa_r+0x99a>
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	e7e1      	b.n	800cd62 <_dtoa_r+0x9ea>
 800cd9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	db04      	blt.n	800cdae <_dtoa_r+0xa36>
 800cda4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800cda6:	430b      	orrs	r3, r1
 800cda8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cdaa:	430b      	orrs	r3, r1
 800cdac:	d120      	bne.n	800cdf0 <_dtoa_r+0xa78>
 800cdae:	2a00      	cmp	r2, #0
 800cdb0:	dded      	ble.n	800cd8e <_dtoa_r+0xa16>
 800cdb2:	4649      	mov	r1, r9
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	4658      	mov	r0, fp
 800cdb8:	f000 fbb0 	bl	800d51c <__lshift>
 800cdbc:	4621      	mov	r1, r4
 800cdbe:	4681      	mov	r9, r0
 800cdc0:	f000 fc18 	bl	800d5f4 <__mcmp>
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	dc03      	bgt.n	800cdd0 <_dtoa_r+0xa58>
 800cdc8:	d1e1      	bne.n	800cd8e <_dtoa_r+0xa16>
 800cdca:	f018 0f01 	tst.w	r8, #1
 800cdce:	d0de      	beq.n	800cd8e <_dtoa_r+0xa16>
 800cdd0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cdd4:	d1d8      	bne.n	800cd88 <_dtoa_r+0xa10>
 800cdd6:	2339      	movs	r3, #57	@ 0x39
 800cdd8:	9a02      	ldr	r2, [sp, #8]
 800cdda:	7013      	strb	r3, [r2, #0]
 800cddc:	4633      	mov	r3, r6
 800cdde:	461e      	mov	r6, r3
 800cde0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cde4:	3b01      	subs	r3, #1
 800cde6:	2a39      	cmp	r2, #57	@ 0x39
 800cde8:	d052      	beq.n	800ce90 <_dtoa_r+0xb18>
 800cdea:	3201      	adds	r2, #1
 800cdec:	701a      	strb	r2, [r3, #0]
 800cdee:	e60e      	b.n	800ca0e <_dtoa_r+0x696>
 800cdf0:	2a00      	cmp	r2, #0
 800cdf2:	dd07      	ble.n	800ce04 <_dtoa_r+0xa8c>
 800cdf4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cdf8:	d0ed      	beq.n	800cdd6 <_dtoa_r+0xa5e>
 800cdfa:	9a02      	ldr	r2, [sp, #8]
 800cdfc:	f108 0301 	add.w	r3, r8, #1
 800ce00:	7013      	strb	r3, [r2, #0]
 800ce02:	e604      	b.n	800ca0e <_dtoa_r+0x696>
 800ce04:	9b07      	ldr	r3, [sp, #28]
 800ce06:	9a07      	ldr	r2, [sp, #28]
 800ce08:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ce0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d028      	beq.n	800ce64 <_dtoa_r+0xaec>
 800ce12:	4649      	mov	r1, r9
 800ce14:	2300      	movs	r3, #0
 800ce16:	220a      	movs	r2, #10
 800ce18:	4658      	mov	r0, fp
 800ce1a:	f000 f9d5 	bl	800d1c8 <__multadd>
 800ce1e:	42af      	cmp	r7, r5
 800ce20:	4681      	mov	r9, r0
 800ce22:	f04f 0300 	mov.w	r3, #0
 800ce26:	f04f 020a 	mov.w	r2, #10
 800ce2a:	4639      	mov	r1, r7
 800ce2c:	4658      	mov	r0, fp
 800ce2e:	d107      	bne.n	800ce40 <_dtoa_r+0xac8>
 800ce30:	f000 f9ca 	bl	800d1c8 <__multadd>
 800ce34:	4607      	mov	r7, r0
 800ce36:	4605      	mov	r5, r0
 800ce38:	9b07      	ldr	r3, [sp, #28]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	9307      	str	r3, [sp, #28]
 800ce3e:	e774      	b.n	800cd2a <_dtoa_r+0x9b2>
 800ce40:	f000 f9c2 	bl	800d1c8 <__multadd>
 800ce44:	4629      	mov	r1, r5
 800ce46:	4607      	mov	r7, r0
 800ce48:	2300      	movs	r3, #0
 800ce4a:	220a      	movs	r2, #10
 800ce4c:	4658      	mov	r0, fp
 800ce4e:	f000 f9bb 	bl	800d1c8 <__multadd>
 800ce52:	4605      	mov	r5, r0
 800ce54:	e7f0      	b.n	800ce38 <_dtoa_r+0xac0>
 800ce56:	9b08      	ldr	r3, [sp, #32]
 800ce58:	2700      	movs	r7, #0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	bfcc      	ite	gt
 800ce5e:	461e      	movgt	r6, r3
 800ce60:	2601      	movle	r6, #1
 800ce62:	4456      	add	r6, sl
 800ce64:	4649      	mov	r1, r9
 800ce66:	2201      	movs	r2, #1
 800ce68:	4658      	mov	r0, fp
 800ce6a:	f000 fb57 	bl	800d51c <__lshift>
 800ce6e:	4621      	mov	r1, r4
 800ce70:	4681      	mov	r9, r0
 800ce72:	f000 fbbf 	bl	800d5f4 <__mcmp>
 800ce76:	2800      	cmp	r0, #0
 800ce78:	dcb0      	bgt.n	800cddc <_dtoa_r+0xa64>
 800ce7a:	d102      	bne.n	800ce82 <_dtoa_r+0xb0a>
 800ce7c:	f018 0f01 	tst.w	r8, #1
 800ce80:	d1ac      	bne.n	800cddc <_dtoa_r+0xa64>
 800ce82:	4633      	mov	r3, r6
 800ce84:	461e      	mov	r6, r3
 800ce86:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce8a:	2a30      	cmp	r2, #48	@ 0x30
 800ce8c:	d0fa      	beq.n	800ce84 <_dtoa_r+0xb0c>
 800ce8e:	e5be      	b.n	800ca0e <_dtoa_r+0x696>
 800ce90:	459a      	cmp	sl, r3
 800ce92:	d1a4      	bne.n	800cdde <_dtoa_r+0xa66>
 800ce94:	9b04      	ldr	r3, [sp, #16]
 800ce96:	3301      	adds	r3, #1
 800ce98:	9304      	str	r3, [sp, #16]
 800ce9a:	2331      	movs	r3, #49	@ 0x31
 800ce9c:	f88a 3000 	strb.w	r3, [sl]
 800cea0:	e5b5      	b.n	800ca0e <_dtoa_r+0x696>
 800cea2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cea4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cf04 <_dtoa_r+0xb8c>
 800cea8:	b11b      	cbz	r3, 800ceb2 <_dtoa_r+0xb3a>
 800ceaa:	f10a 0308 	add.w	r3, sl, #8
 800ceae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ceb0:	6013      	str	r3, [r2, #0]
 800ceb2:	4650      	mov	r0, sl
 800ceb4:	b017      	add	sp, #92	@ 0x5c
 800ceb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cebc:	2b01      	cmp	r3, #1
 800cebe:	f77f ae3d 	ble.w	800cb3c <_dtoa_r+0x7c4>
 800cec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cec4:	930a      	str	r3, [sp, #40]	@ 0x28
 800cec6:	2001      	movs	r0, #1
 800cec8:	e65b      	b.n	800cb82 <_dtoa_r+0x80a>
 800ceca:	9b08      	ldr	r3, [sp, #32]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f77f aed6 	ble.w	800cc7e <_dtoa_r+0x906>
 800ced2:	4656      	mov	r6, sl
 800ced4:	4621      	mov	r1, r4
 800ced6:	4648      	mov	r0, r9
 800ced8:	f7ff f9c5 	bl	800c266 <quorem>
 800cedc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cee0:	9b08      	ldr	r3, [sp, #32]
 800cee2:	f806 8b01 	strb.w	r8, [r6], #1
 800cee6:	eba6 020a 	sub.w	r2, r6, sl
 800ceea:	4293      	cmp	r3, r2
 800ceec:	ddb3      	ble.n	800ce56 <_dtoa_r+0xade>
 800ceee:	4649      	mov	r1, r9
 800cef0:	2300      	movs	r3, #0
 800cef2:	220a      	movs	r2, #10
 800cef4:	4658      	mov	r0, fp
 800cef6:	f000 f967 	bl	800d1c8 <__multadd>
 800cefa:	4681      	mov	r9, r0
 800cefc:	e7ea      	b.n	800ced4 <_dtoa_r+0xb5c>
 800cefe:	bf00      	nop
 800cf00:	0800ea28 	.word	0x0800ea28
 800cf04:	0800e9ac 	.word	0x0800e9ac

0800cf08 <_free_r>:
 800cf08:	b538      	push	{r3, r4, r5, lr}
 800cf0a:	4605      	mov	r5, r0
 800cf0c:	2900      	cmp	r1, #0
 800cf0e:	d040      	beq.n	800cf92 <_free_r+0x8a>
 800cf10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf14:	1f0c      	subs	r4, r1, #4
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	bfb8      	it	lt
 800cf1a:	18e4      	addlt	r4, r4, r3
 800cf1c:	f000 f8e6 	bl	800d0ec <__malloc_lock>
 800cf20:	4a1c      	ldr	r2, [pc, #112]	@ (800cf94 <_free_r+0x8c>)
 800cf22:	6813      	ldr	r3, [r2, #0]
 800cf24:	b933      	cbnz	r3, 800cf34 <_free_r+0x2c>
 800cf26:	6063      	str	r3, [r4, #4]
 800cf28:	6014      	str	r4, [r2, #0]
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf30:	f000 b8e2 	b.w	800d0f8 <__malloc_unlock>
 800cf34:	42a3      	cmp	r3, r4
 800cf36:	d908      	bls.n	800cf4a <_free_r+0x42>
 800cf38:	6820      	ldr	r0, [r4, #0]
 800cf3a:	1821      	adds	r1, r4, r0
 800cf3c:	428b      	cmp	r3, r1
 800cf3e:	bf01      	itttt	eq
 800cf40:	6819      	ldreq	r1, [r3, #0]
 800cf42:	685b      	ldreq	r3, [r3, #4]
 800cf44:	1809      	addeq	r1, r1, r0
 800cf46:	6021      	streq	r1, [r4, #0]
 800cf48:	e7ed      	b.n	800cf26 <_free_r+0x1e>
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	b10b      	cbz	r3, 800cf54 <_free_r+0x4c>
 800cf50:	42a3      	cmp	r3, r4
 800cf52:	d9fa      	bls.n	800cf4a <_free_r+0x42>
 800cf54:	6811      	ldr	r1, [r2, #0]
 800cf56:	1850      	adds	r0, r2, r1
 800cf58:	42a0      	cmp	r0, r4
 800cf5a:	d10b      	bne.n	800cf74 <_free_r+0x6c>
 800cf5c:	6820      	ldr	r0, [r4, #0]
 800cf5e:	4401      	add	r1, r0
 800cf60:	1850      	adds	r0, r2, r1
 800cf62:	4283      	cmp	r3, r0
 800cf64:	6011      	str	r1, [r2, #0]
 800cf66:	d1e0      	bne.n	800cf2a <_free_r+0x22>
 800cf68:	6818      	ldr	r0, [r3, #0]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	4408      	add	r0, r1
 800cf6e:	6010      	str	r0, [r2, #0]
 800cf70:	6053      	str	r3, [r2, #4]
 800cf72:	e7da      	b.n	800cf2a <_free_r+0x22>
 800cf74:	d902      	bls.n	800cf7c <_free_r+0x74>
 800cf76:	230c      	movs	r3, #12
 800cf78:	602b      	str	r3, [r5, #0]
 800cf7a:	e7d6      	b.n	800cf2a <_free_r+0x22>
 800cf7c:	6820      	ldr	r0, [r4, #0]
 800cf7e:	1821      	adds	r1, r4, r0
 800cf80:	428b      	cmp	r3, r1
 800cf82:	bf01      	itttt	eq
 800cf84:	6819      	ldreq	r1, [r3, #0]
 800cf86:	685b      	ldreq	r3, [r3, #4]
 800cf88:	1809      	addeq	r1, r1, r0
 800cf8a:	6021      	streq	r1, [r4, #0]
 800cf8c:	6063      	str	r3, [r4, #4]
 800cf8e:	6054      	str	r4, [r2, #4]
 800cf90:	e7cb      	b.n	800cf2a <_free_r+0x22>
 800cf92:	bd38      	pop	{r3, r4, r5, pc}
 800cf94:	20002948 	.word	0x20002948

0800cf98 <malloc>:
 800cf98:	4b02      	ldr	r3, [pc, #8]	@ (800cfa4 <malloc+0xc>)
 800cf9a:	4601      	mov	r1, r0
 800cf9c:	6818      	ldr	r0, [r3, #0]
 800cf9e:	f000 b825 	b.w	800cfec <_malloc_r>
 800cfa2:	bf00      	nop
 800cfa4:	20000030 	.word	0x20000030

0800cfa8 <sbrk_aligned>:
 800cfa8:	b570      	push	{r4, r5, r6, lr}
 800cfaa:	4e0f      	ldr	r6, [pc, #60]	@ (800cfe8 <sbrk_aligned+0x40>)
 800cfac:	460c      	mov	r4, r1
 800cfae:	6831      	ldr	r1, [r6, #0]
 800cfb0:	4605      	mov	r5, r0
 800cfb2:	b911      	cbnz	r1, 800cfba <sbrk_aligned+0x12>
 800cfb4:	f000 fe40 	bl	800dc38 <_sbrk_r>
 800cfb8:	6030      	str	r0, [r6, #0]
 800cfba:	4621      	mov	r1, r4
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	f000 fe3b 	bl	800dc38 <_sbrk_r>
 800cfc2:	1c43      	adds	r3, r0, #1
 800cfc4:	d103      	bne.n	800cfce <sbrk_aligned+0x26>
 800cfc6:	f04f 34ff 	mov.w	r4, #4294967295
 800cfca:	4620      	mov	r0, r4
 800cfcc:	bd70      	pop	{r4, r5, r6, pc}
 800cfce:	1cc4      	adds	r4, r0, #3
 800cfd0:	f024 0403 	bic.w	r4, r4, #3
 800cfd4:	42a0      	cmp	r0, r4
 800cfd6:	d0f8      	beq.n	800cfca <sbrk_aligned+0x22>
 800cfd8:	1a21      	subs	r1, r4, r0
 800cfda:	4628      	mov	r0, r5
 800cfdc:	f000 fe2c 	bl	800dc38 <_sbrk_r>
 800cfe0:	3001      	adds	r0, #1
 800cfe2:	d1f2      	bne.n	800cfca <sbrk_aligned+0x22>
 800cfe4:	e7ef      	b.n	800cfc6 <sbrk_aligned+0x1e>
 800cfe6:	bf00      	nop
 800cfe8:	20002944 	.word	0x20002944

0800cfec <_malloc_r>:
 800cfec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cff0:	1ccd      	adds	r5, r1, #3
 800cff2:	f025 0503 	bic.w	r5, r5, #3
 800cff6:	3508      	adds	r5, #8
 800cff8:	2d0c      	cmp	r5, #12
 800cffa:	bf38      	it	cc
 800cffc:	250c      	movcc	r5, #12
 800cffe:	2d00      	cmp	r5, #0
 800d000:	4606      	mov	r6, r0
 800d002:	db01      	blt.n	800d008 <_malloc_r+0x1c>
 800d004:	42a9      	cmp	r1, r5
 800d006:	d904      	bls.n	800d012 <_malloc_r+0x26>
 800d008:	230c      	movs	r3, #12
 800d00a:	6033      	str	r3, [r6, #0]
 800d00c:	2000      	movs	r0, #0
 800d00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d012:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d0e8 <_malloc_r+0xfc>
 800d016:	f000 f869 	bl	800d0ec <__malloc_lock>
 800d01a:	f8d8 3000 	ldr.w	r3, [r8]
 800d01e:	461c      	mov	r4, r3
 800d020:	bb44      	cbnz	r4, 800d074 <_malloc_r+0x88>
 800d022:	4629      	mov	r1, r5
 800d024:	4630      	mov	r0, r6
 800d026:	f7ff ffbf 	bl	800cfa8 <sbrk_aligned>
 800d02a:	1c43      	adds	r3, r0, #1
 800d02c:	4604      	mov	r4, r0
 800d02e:	d158      	bne.n	800d0e2 <_malloc_r+0xf6>
 800d030:	f8d8 4000 	ldr.w	r4, [r8]
 800d034:	4627      	mov	r7, r4
 800d036:	2f00      	cmp	r7, #0
 800d038:	d143      	bne.n	800d0c2 <_malloc_r+0xd6>
 800d03a:	2c00      	cmp	r4, #0
 800d03c:	d04b      	beq.n	800d0d6 <_malloc_r+0xea>
 800d03e:	6823      	ldr	r3, [r4, #0]
 800d040:	4639      	mov	r1, r7
 800d042:	4630      	mov	r0, r6
 800d044:	eb04 0903 	add.w	r9, r4, r3
 800d048:	f000 fdf6 	bl	800dc38 <_sbrk_r>
 800d04c:	4581      	cmp	r9, r0
 800d04e:	d142      	bne.n	800d0d6 <_malloc_r+0xea>
 800d050:	6821      	ldr	r1, [r4, #0]
 800d052:	4630      	mov	r0, r6
 800d054:	1a6d      	subs	r5, r5, r1
 800d056:	4629      	mov	r1, r5
 800d058:	f7ff ffa6 	bl	800cfa8 <sbrk_aligned>
 800d05c:	3001      	adds	r0, #1
 800d05e:	d03a      	beq.n	800d0d6 <_malloc_r+0xea>
 800d060:	6823      	ldr	r3, [r4, #0]
 800d062:	442b      	add	r3, r5
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	f8d8 3000 	ldr.w	r3, [r8]
 800d06a:	685a      	ldr	r2, [r3, #4]
 800d06c:	bb62      	cbnz	r2, 800d0c8 <_malloc_r+0xdc>
 800d06e:	f8c8 7000 	str.w	r7, [r8]
 800d072:	e00f      	b.n	800d094 <_malloc_r+0xa8>
 800d074:	6822      	ldr	r2, [r4, #0]
 800d076:	1b52      	subs	r2, r2, r5
 800d078:	d420      	bmi.n	800d0bc <_malloc_r+0xd0>
 800d07a:	2a0b      	cmp	r2, #11
 800d07c:	d917      	bls.n	800d0ae <_malloc_r+0xc2>
 800d07e:	1961      	adds	r1, r4, r5
 800d080:	42a3      	cmp	r3, r4
 800d082:	6025      	str	r5, [r4, #0]
 800d084:	bf18      	it	ne
 800d086:	6059      	strne	r1, [r3, #4]
 800d088:	6863      	ldr	r3, [r4, #4]
 800d08a:	bf08      	it	eq
 800d08c:	f8c8 1000 	streq.w	r1, [r8]
 800d090:	5162      	str	r2, [r4, r5]
 800d092:	604b      	str	r3, [r1, #4]
 800d094:	4630      	mov	r0, r6
 800d096:	f000 f82f 	bl	800d0f8 <__malloc_unlock>
 800d09a:	f104 000b 	add.w	r0, r4, #11
 800d09e:	1d23      	adds	r3, r4, #4
 800d0a0:	f020 0007 	bic.w	r0, r0, #7
 800d0a4:	1ac2      	subs	r2, r0, r3
 800d0a6:	bf1c      	itt	ne
 800d0a8:	1a1b      	subne	r3, r3, r0
 800d0aa:	50a3      	strne	r3, [r4, r2]
 800d0ac:	e7af      	b.n	800d00e <_malloc_r+0x22>
 800d0ae:	6862      	ldr	r2, [r4, #4]
 800d0b0:	42a3      	cmp	r3, r4
 800d0b2:	bf0c      	ite	eq
 800d0b4:	f8c8 2000 	streq.w	r2, [r8]
 800d0b8:	605a      	strne	r2, [r3, #4]
 800d0ba:	e7eb      	b.n	800d094 <_malloc_r+0xa8>
 800d0bc:	4623      	mov	r3, r4
 800d0be:	6864      	ldr	r4, [r4, #4]
 800d0c0:	e7ae      	b.n	800d020 <_malloc_r+0x34>
 800d0c2:	463c      	mov	r4, r7
 800d0c4:	687f      	ldr	r7, [r7, #4]
 800d0c6:	e7b6      	b.n	800d036 <_malloc_r+0x4a>
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	42a3      	cmp	r3, r4
 800d0ce:	d1fb      	bne.n	800d0c8 <_malloc_r+0xdc>
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	6053      	str	r3, [r2, #4]
 800d0d4:	e7de      	b.n	800d094 <_malloc_r+0xa8>
 800d0d6:	230c      	movs	r3, #12
 800d0d8:	4630      	mov	r0, r6
 800d0da:	6033      	str	r3, [r6, #0]
 800d0dc:	f000 f80c 	bl	800d0f8 <__malloc_unlock>
 800d0e0:	e794      	b.n	800d00c <_malloc_r+0x20>
 800d0e2:	6005      	str	r5, [r0, #0]
 800d0e4:	e7d6      	b.n	800d094 <_malloc_r+0xa8>
 800d0e6:	bf00      	nop
 800d0e8:	20002948 	.word	0x20002948

0800d0ec <__malloc_lock>:
 800d0ec:	4801      	ldr	r0, [pc, #4]	@ (800d0f4 <__malloc_lock+0x8>)
 800d0ee:	f7ff b8aa 	b.w	800c246 <__retarget_lock_acquire_recursive>
 800d0f2:	bf00      	nop
 800d0f4:	20002940 	.word	0x20002940

0800d0f8 <__malloc_unlock>:
 800d0f8:	4801      	ldr	r0, [pc, #4]	@ (800d100 <__malloc_unlock+0x8>)
 800d0fa:	f7ff b8a5 	b.w	800c248 <__retarget_lock_release_recursive>
 800d0fe:	bf00      	nop
 800d100:	20002940 	.word	0x20002940

0800d104 <_Balloc>:
 800d104:	b570      	push	{r4, r5, r6, lr}
 800d106:	69c6      	ldr	r6, [r0, #28]
 800d108:	4604      	mov	r4, r0
 800d10a:	460d      	mov	r5, r1
 800d10c:	b976      	cbnz	r6, 800d12c <_Balloc+0x28>
 800d10e:	2010      	movs	r0, #16
 800d110:	f7ff ff42 	bl	800cf98 <malloc>
 800d114:	4602      	mov	r2, r0
 800d116:	61e0      	str	r0, [r4, #28]
 800d118:	b920      	cbnz	r0, 800d124 <_Balloc+0x20>
 800d11a:	216b      	movs	r1, #107	@ 0x6b
 800d11c:	4b17      	ldr	r3, [pc, #92]	@ (800d17c <_Balloc+0x78>)
 800d11e:	4818      	ldr	r0, [pc, #96]	@ (800d180 <_Balloc+0x7c>)
 800d120:	f000 fda8 	bl	800dc74 <__assert_func>
 800d124:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d128:	6006      	str	r6, [r0, #0]
 800d12a:	60c6      	str	r6, [r0, #12]
 800d12c:	69e6      	ldr	r6, [r4, #28]
 800d12e:	68f3      	ldr	r3, [r6, #12]
 800d130:	b183      	cbz	r3, 800d154 <_Balloc+0x50>
 800d132:	69e3      	ldr	r3, [r4, #28]
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d13a:	b9b8      	cbnz	r0, 800d16c <_Balloc+0x68>
 800d13c:	2101      	movs	r1, #1
 800d13e:	fa01 f605 	lsl.w	r6, r1, r5
 800d142:	1d72      	adds	r2, r6, #5
 800d144:	4620      	mov	r0, r4
 800d146:	0092      	lsls	r2, r2, #2
 800d148:	f000 fdb2 	bl	800dcb0 <_calloc_r>
 800d14c:	b160      	cbz	r0, 800d168 <_Balloc+0x64>
 800d14e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d152:	e00e      	b.n	800d172 <_Balloc+0x6e>
 800d154:	2221      	movs	r2, #33	@ 0x21
 800d156:	2104      	movs	r1, #4
 800d158:	4620      	mov	r0, r4
 800d15a:	f000 fda9 	bl	800dcb0 <_calloc_r>
 800d15e:	69e3      	ldr	r3, [r4, #28]
 800d160:	60f0      	str	r0, [r6, #12]
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d1e4      	bne.n	800d132 <_Balloc+0x2e>
 800d168:	2000      	movs	r0, #0
 800d16a:	bd70      	pop	{r4, r5, r6, pc}
 800d16c:	6802      	ldr	r2, [r0, #0]
 800d16e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d172:	2300      	movs	r3, #0
 800d174:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d178:	e7f7      	b.n	800d16a <_Balloc+0x66>
 800d17a:	bf00      	nop
 800d17c:	0800e9b9 	.word	0x0800e9b9
 800d180:	0800ea39 	.word	0x0800ea39

0800d184 <_Bfree>:
 800d184:	b570      	push	{r4, r5, r6, lr}
 800d186:	69c6      	ldr	r6, [r0, #28]
 800d188:	4605      	mov	r5, r0
 800d18a:	460c      	mov	r4, r1
 800d18c:	b976      	cbnz	r6, 800d1ac <_Bfree+0x28>
 800d18e:	2010      	movs	r0, #16
 800d190:	f7ff ff02 	bl	800cf98 <malloc>
 800d194:	4602      	mov	r2, r0
 800d196:	61e8      	str	r0, [r5, #28]
 800d198:	b920      	cbnz	r0, 800d1a4 <_Bfree+0x20>
 800d19a:	218f      	movs	r1, #143	@ 0x8f
 800d19c:	4b08      	ldr	r3, [pc, #32]	@ (800d1c0 <_Bfree+0x3c>)
 800d19e:	4809      	ldr	r0, [pc, #36]	@ (800d1c4 <_Bfree+0x40>)
 800d1a0:	f000 fd68 	bl	800dc74 <__assert_func>
 800d1a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1a8:	6006      	str	r6, [r0, #0]
 800d1aa:	60c6      	str	r6, [r0, #12]
 800d1ac:	b13c      	cbz	r4, 800d1be <_Bfree+0x3a>
 800d1ae:	69eb      	ldr	r3, [r5, #28]
 800d1b0:	6862      	ldr	r2, [r4, #4]
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d1b8:	6021      	str	r1, [r4, #0]
 800d1ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d1be:	bd70      	pop	{r4, r5, r6, pc}
 800d1c0:	0800e9b9 	.word	0x0800e9b9
 800d1c4:	0800ea39 	.word	0x0800ea39

0800d1c8 <__multadd>:
 800d1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1cc:	4607      	mov	r7, r0
 800d1ce:	460c      	mov	r4, r1
 800d1d0:	461e      	mov	r6, r3
 800d1d2:	2000      	movs	r0, #0
 800d1d4:	690d      	ldr	r5, [r1, #16]
 800d1d6:	f101 0c14 	add.w	ip, r1, #20
 800d1da:	f8dc 3000 	ldr.w	r3, [ip]
 800d1de:	3001      	adds	r0, #1
 800d1e0:	b299      	uxth	r1, r3
 800d1e2:	fb02 6101 	mla	r1, r2, r1, r6
 800d1e6:	0c1e      	lsrs	r6, r3, #16
 800d1e8:	0c0b      	lsrs	r3, r1, #16
 800d1ea:	fb02 3306 	mla	r3, r2, r6, r3
 800d1ee:	b289      	uxth	r1, r1
 800d1f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d1f4:	4285      	cmp	r5, r0
 800d1f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d1fa:	f84c 1b04 	str.w	r1, [ip], #4
 800d1fe:	dcec      	bgt.n	800d1da <__multadd+0x12>
 800d200:	b30e      	cbz	r6, 800d246 <__multadd+0x7e>
 800d202:	68a3      	ldr	r3, [r4, #8]
 800d204:	42ab      	cmp	r3, r5
 800d206:	dc19      	bgt.n	800d23c <__multadd+0x74>
 800d208:	6861      	ldr	r1, [r4, #4]
 800d20a:	4638      	mov	r0, r7
 800d20c:	3101      	adds	r1, #1
 800d20e:	f7ff ff79 	bl	800d104 <_Balloc>
 800d212:	4680      	mov	r8, r0
 800d214:	b928      	cbnz	r0, 800d222 <__multadd+0x5a>
 800d216:	4602      	mov	r2, r0
 800d218:	21ba      	movs	r1, #186	@ 0xba
 800d21a:	4b0c      	ldr	r3, [pc, #48]	@ (800d24c <__multadd+0x84>)
 800d21c:	480c      	ldr	r0, [pc, #48]	@ (800d250 <__multadd+0x88>)
 800d21e:	f000 fd29 	bl	800dc74 <__assert_func>
 800d222:	6922      	ldr	r2, [r4, #16]
 800d224:	f104 010c 	add.w	r1, r4, #12
 800d228:	3202      	adds	r2, #2
 800d22a:	0092      	lsls	r2, r2, #2
 800d22c:	300c      	adds	r0, #12
 800d22e:	f000 fd13 	bl	800dc58 <memcpy>
 800d232:	4621      	mov	r1, r4
 800d234:	4638      	mov	r0, r7
 800d236:	f7ff ffa5 	bl	800d184 <_Bfree>
 800d23a:	4644      	mov	r4, r8
 800d23c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d240:	3501      	adds	r5, #1
 800d242:	615e      	str	r6, [r3, #20]
 800d244:	6125      	str	r5, [r4, #16]
 800d246:	4620      	mov	r0, r4
 800d248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d24c:	0800ea28 	.word	0x0800ea28
 800d250:	0800ea39 	.word	0x0800ea39

0800d254 <__hi0bits>:
 800d254:	4603      	mov	r3, r0
 800d256:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d25a:	bf3a      	itte	cc
 800d25c:	0403      	lslcc	r3, r0, #16
 800d25e:	2010      	movcc	r0, #16
 800d260:	2000      	movcs	r0, #0
 800d262:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d266:	bf3c      	itt	cc
 800d268:	021b      	lslcc	r3, r3, #8
 800d26a:	3008      	addcc	r0, #8
 800d26c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d270:	bf3c      	itt	cc
 800d272:	011b      	lslcc	r3, r3, #4
 800d274:	3004      	addcc	r0, #4
 800d276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d27a:	bf3c      	itt	cc
 800d27c:	009b      	lslcc	r3, r3, #2
 800d27e:	3002      	addcc	r0, #2
 800d280:	2b00      	cmp	r3, #0
 800d282:	db05      	blt.n	800d290 <__hi0bits+0x3c>
 800d284:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d288:	f100 0001 	add.w	r0, r0, #1
 800d28c:	bf08      	it	eq
 800d28e:	2020      	moveq	r0, #32
 800d290:	4770      	bx	lr

0800d292 <__lo0bits>:
 800d292:	6803      	ldr	r3, [r0, #0]
 800d294:	4602      	mov	r2, r0
 800d296:	f013 0007 	ands.w	r0, r3, #7
 800d29a:	d00b      	beq.n	800d2b4 <__lo0bits+0x22>
 800d29c:	07d9      	lsls	r1, r3, #31
 800d29e:	d421      	bmi.n	800d2e4 <__lo0bits+0x52>
 800d2a0:	0798      	lsls	r0, r3, #30
 800d2a2:	bf49      	itett	mi
 800d2a4:	085b      	lsrmi	r3, r3, #1
 800d2a6:	089b      	lsrpl	r3, r3, #2
 800d2a8:	2001      	movmi	r0, #1
 800d2aa:	6013      	strmi	r3, [r2, #0]
 800d2ac:	bf5c      	itt	pl
 800d2ae:	2002      	movpl	r0, #2
 800d2b0:	6013      	strpl	r3, [r2, #0]
 800d2b2:	4770      	bx	lr
 800d2b4:	b299      	uxth	r1, r3
 800d2b6:	b909      	cbnz	r1, 800d2bc <__lo0bits+0x2a>
 800d2b8:	2010      	movs	r0, #16
 800d2ba:	0c1b      	lsrs	r3, r3, #16
 800d2bc:	b2d9      	uxtb	r1, r3
 800d2be:	b909      	cbnz	r1, 800d2c4 <__lo0bits+0x32>
 800d2c0:	3008      	adds	r0, #8
 800d2c2:	0a1b      	lsrs	r3, r3, #8
 800d2c4:	0719      	lsls	r1, r3, #28
 800d2c6:	bf04      	itt	eq
 800d2c8:	091b      	lsreq	r3, r3, #4
 800d2ca:	3004      	addeq	r0, #4
 800d2cc:	0799      	lsls	r1, r3, #30
 800d2ce:	bf04      	itt	eq
 800d2d0:	089b      	lsreq	r3, r3, #2
 800d2d2:	3002      	addeq	r0, #2
 800d2d4:	07d9      	lsls	r1, r3, #31
 800d2d6:	d403      	bmi.n	800d2e0 <__lo0bits+0x4e>
 800d2d8:	085b      	lsrs	r3, r3, #1
 800d2da:	f100 0001 	add.w	r0, r0, #1
 800d2de:	d003      	beq.n	800d2e8 <__lo0bits+0x56>
 800d2e0:	6013      	str	r3, [r2, #0]
 800d2e2:	4770      	bx	lr
 800d2e4:	2000      	movs	r0, #0
 800d2e6:	4770      	bx	lr
 800d2e8:	2020      	movs	r0, #32
 800d2ea:	4770      	bx	lr

0800d2ec <__i2b>:
 800d2ec:	b510      	push	{r4, lr}
 800d2ee:	460c      	mov	r4, r1
 800d2f0:	2101      	movs	r1, #1
 800d2f2:	f7ff ff07 	bl	800d104 <_Balloc>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	b928      	cbnz	r0, 800d306 <__i2b+0x1a>
 800d2fa:	f240 1145 	movw	r1, #325	@ 0x145
 800d2fe:	4b04      	ldr	r3, [pc, #16]	@ (800d310 <__i2b+0x24>)
 800d300:	4804      	ldr	r0, [pc, #16]	@ (800d314 <__i2b+0x28>)
 800d302:	f000 fcb7 	bl	800dc74 <__assert_func>
 800d306:	2301      	movs	r3, #1
 800d308:	6144      	str	r4, [r0, #20]
 800d30a:	6103      	str	r3, [r0, #16]
 800d30c:	bd10      	pop	{r4, pc}
 800d30e:	bf00      	nop
 800d310:	0800ea28 	.word	0x0800ea28
 800d314:	0800ea39 	.word	0x0800ea39

0800d318 <__multiply>:
 800d318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d31c:	4614      	mov	r4, r2
 800d31e:	690a      	ldr	r2, [r1, #16]
 800d320:	6923      	ldr	r3, [r4, #16]
 800d322:	460f      	mov	r7, r1
 800d324:	429a      	cmp	r2, r3
 800d326:	bfa2      	ittt	ge
 800d328:	4623      	movge	r3, r4
 800d32a:	460c      	movge	r4, r1
 800d32c:	461f      	movge	r7, r3
 800d32e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d332:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d336:	68a3      	ldr	r3, [r4, #8]
 800d338:	6861      	ldr	r1, [r4, #4]
 800d33a:	eb0a 0609 	add.w	r6, sl, r9
 800d33e:	42b3      	cmp	r3, r6
 800d340:	b085      	sub	sp, #20
 800d342:	bfb8      	it	lt
 800d344:	3101      	addlt	r1, #1
 800d346:	f7ff fedd 	bl	800d104 <_Balloc>
 800d34a:	b930      	cbnz	r0, 800d35a <__multiply+0x42>
 800d34c:	4602      	mov	r2, r0
 800d34e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d352:	4b43      	ldr	r3, [pc, #268]	@ (800d460 <__multiply+0x148>)
 800d354:	4843      	ldr	r0, [pc, #268]	@ (800d464 <__multiply+0x14c>)
 800d356:	f000 fc8d 	bl	800dc74 <__assert_func>
 800d35a:	f100 0514 	add.w	r5, r0, #20
 800d35e:	462b      	mov	r3, r5
 800d360:	2200      	movs	r2, #0
 800d362:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d366:	4543      	cmp	r3, r8
 800d368:	d321      	bcc.n	800d3ae <__multiply+0x96>
 800d36a:	f107 0114 	add.w	r1, r7, #20
 800d36e:	f104 0214 	add.w	r2, r4, #20
 800d372:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d376:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d37a:	9302      	str	r3, [sp, #8]
 800d37c:	1b13      	subs	r3, r2, r4
 800d37e:	3b15      	subs	r3, #21
 800d380:	f023 0303 	bic.w	r3, r3, #3
 800d384:	3304      	adds	r3, #4
 800d386:	f104 0715 	add.w	r7, r4, #21
 800d38a:	42ba      	cmp	r2, r7
 800d38c:	bf38      	it	cc
 800d38e:	2304      	movcc	r3, #4
 800d390:	9301      	str	r3, [sp, #4]
 800d392:	9b02      	ldr	r3, [sp, #8]
 800d394:	9103      	str	r1, [sp, #12]
 800d396:	428b      	cmp	r3, r1
 800d398:	d80c      	bhi.n	800d3b4 <__multiply+0x9c>
 800d39a:	2e00      	cmp	r6, #0
 800d39c:	dd03      	ble.n	800d3a6 <__multiply+0x8e>
 800d39e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d05a      	beq.n	800d45c <__multiply+0x144>
 800d3a6:	6106      	str	r6, [r0, #16]
 800d3a8:	b005      	add	sp, #20
 800d3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ae:	f843 2b04 	str.w	r2, [r3], #4
 800d3b2:	e7d8      	b.n	800d366 <__multiply+0x4e>
 800d3b4:	f8b1 a000 	ldrh.w	sl, [r1]
 800d3b8:	f1ba 0f00 	cmp.w	sl, #0
 800d3bc:	d023      	beq.n	800d406 <__multiply+0xee>
 800d3be:	46a9      	mov	r9, r5
 800d3c0:	f04f 0c00 	mov.w	ip, #0
 800d3c4:	f104 0e14 	add.w	lr, r4, #20
 800d3c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d3cc:	f8d9 3000 	ldr.w	r3, [r9]
 800d3d0:	fa1f fb87 	uxth.w	fp, r7
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	fb0a 330b 	mla	r3, sl, fp, r3
 800d3da:	4463      	add	r3, ip
 800d3dc:	f8d9 c000 	ldr.w	ip, [r9]
 800d3e0:	0c3f      	lsrs	r7, r7, #16
 800d3e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d3e6:	fb0a c707 	mla	r7, sl, r7, ip
 800d3ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d3f4:	4572      	cmp	r2, lr
 800d3f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d3fa:	f849 3b04 	str.w	r3, [r9], #4
 800d3fe:	d8e3      	bhi.n	800d3c8 <__multiply+0xb0>
 800d400:	9b01      	ldr	r3, [sp, #4]
 800d402:	f845 c003 	str.w	ip, [r5, r3]
 800d406:	9b03      	ldr	r3, [sp, #12]
 800d408:	3104      	adds	r1, #4
 800d40a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d40e:	f1b9 0f00 	cmp.w	r9, #0
 800d412:	d021      	beq.n	800d458 <__multiply+0x140>
 800d414:	46ae      	mov	lr, r5
 800d416:	f04f 0a00 	mov.w	sl, #0
 800d41a:	682b      	ldr	r3, [r5, #0]
 800d41c:	f104 0c14 	add.w	ip, r4, #20
 800d420:	f8bc b000 	ldrh.w	fp, [ip]
 800d424:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d428:	b29b      	uxth	r3, r3
 800d42a:	fb09 770b 	mla	r7, r9, fp, r7
 800d42e:	4457      	add	r7, sl
 800d430:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d434:	f84e 3b04 	str.w	r3, [lr], #4
 800d438:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d43c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d440:	f8be 3000 	ldrh.w	r3, [lr]
 800d444:	4562      	cmp	r2, ip
 800d446:	fb09 330a 	mla	r3, r9, sl, r3
 800d44a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d44e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d452:	d8e5      	bhi.n	800d420 <__multiply+0x108>
 800d454:	9f01      	ldr	r7, [sp, #4]
 800d456:	51eb      	str	r3, [r5, r7]
 800d458:	3504      	adds	r5, #4
 800d45a:	e79a      	b.n	800d392 <__multiply+0x7a>
 800d45c:	3e01      	subs	r6, #1
 800d45e:	e79c      	b.n	800d39a <__multiply+0x82>
 800d460:	0800ea28 	.word	0x0800ea28
 800d464:	0800ea39 	.word	0x0800ea39

0800d468 <__pow5mult>:
 800d468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d46c:	4615      	mov	r5, r2
 800d46e:	f012 0203 	ands.w	r2, r2, #3
 800d472:	4607      	mov	r7, r0
 800d474:	460e      	mov	r6, r1
 800d476:	d007      	beq.n	800d488 <__pow5mult+0x20>
 800d478:	4c25      	ldr	r4, [pc, #148]	@ (800d510 <__pow5mult+0xa8>)
 800d47a:	3a01      	subs	r2, #1
 800d47c:	2300      	movs	r3, #0
 800d47e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d482:	f7ff fea1 	bl	800d1c8 <__multadd>
 800d486:	4606      	mov	r6, r0
 800d488:	10ad      	asrs	r5, r5, #2
 800d48a:	d03d      	beq.n	800d508 <__pow5mult+0xa0>
 800d48c:	69fc      	ldr	r4, [r7, #28]
 800d48e:	b97c      	cbnz	r4, 800d4b0 <__pow5mult+0x48>
 800d490:	2010      	movs	r0, #16
 800d492:	f7ff fd81 	bl	800cf98 <malloc>
 800d496:	4602      	mov	r2, r0
 800d498:	61f8      	str	r0, [r7, #28]
 800d49a:	b928      	cbnz	r0, 800d4a8 <__pow5mult+0x40>
 800d49c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d4a0:	4b1c      	ldr	r3, [pc, #112]	@ (800d514 <__pow5mult+0xac>)
 800d4a2:	481d      	ldr	r0, [pc, #116]	@ (800d518 <__pow5mult+0xb0>)
 800d4a4:	f000 fbe6 	bl	800dc74 <__assert_func>
 800d4a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4ac:	6004      	str	r4, [r0, #0]
 800d4ae:	60c4      	str	r4, [r0, #12]
 800d4b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d4b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4b8:	b94c      	cbnz	r4, 800d4ce <__pow5mult+0x66>
 800d4ba:	f240 2171 	movw	r1, #625	@ 0x271
 800d4be:	4638      	mov	r0, r7
 800d4c0:	f7ff ff14 	bl	800d2ec <__i2b>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	4604      	mov	r4, r0
 800d4c8:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4cc:	6003      	str	r3, [r0, #0]
 800d4ce:	f04f 0900 	mov.w	r9, #0
 800d4d2:	07eb      	lsls	r3, r5, #31
 800d4d4:	d50a      	bpl.n	800d4ec <__pow5mult+0x84>
 800d4d6:	4631      	mov	r1, r6
 800d4d8:	4622      	mov	r2, r4
 800d4da:	4638      	mov	r0, r7
 800d4dc:	f7ff ff1c 	bl	800d318 <__multiply>
 800d4e0:	4680      	mov	r8, r0
 800d4e2:	4631      	mov	r1, r6
 800d4e4:	4638      	mov	r0, r7
 800d4e6:	f7ff fe4d 	bl	800d184 <_Bfree>
 800d4ea:	4646      	mov	r6, r8
 800d4ec:	106d      	asrs	r5, r5, #1
 800d4ee:	d00b      	beq.n	800d508 <__pow5mult+0xa0>
 800d4f0:	6820      	ldr	r0, [r4, #0]
 800d4f2:	b938      	cbnz	r0, 800d504 <__pow5mult+0x9c>
 800d4f4:	4622      	mov	r2, r4
 800d4f6:	4621      	mov	r1, r4
 800d4f8:	4638      	mov	r0, r7
 800d4fa:	f7ff ff0d 	bl	800d318 <__multiply>
 800d4fe:	6020      	str	r0, [r4, #0]
 800d500:	f8c0 9000 	str.w	r9, [r0]
 800d504:	4604      	mov	r4, r0
 800d506:	e7e4      	b.n	800d4d2 <__pow5mult+0x6a>
 800d508:	4630      	mov	r0, r6
 800d50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d50e:	bf00      	nop
 800d510:	0800ea94 	.word	0x0800ea94
 800d514:	0800e9b9 	.word	0x0800e9b9
 800d518:	0800ea39 	.word	0x0800ea39

0800d51c <__lshift>:
 800d51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d520:	460c      	mov	r4, r1
 800d522:	4607      	mov	r7, r0
 800d524:	4691      	mov	r9, r2
 800d526:	6923      	ldr	r3, [r4, #16]
 800d528:	6849      	ldr	r1, [r1, #4]
 800d52a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d52e:	68a3      	ldr	r3, [r4, #8]
 800d530:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d534:	f108 0601 	add.w	r6, r8, #1
 800d538:	42b3      	cmp	r3, r6
 800d53a:	db0b      	blt.n	800d554 <__lshift+0x38>
 800d53c:	4638      	mov	r0, r7
 800d53e:	f7ff fde1 	bl	800d104 <_Balloc>
 800d542:	4605      	mov	r5, r0
 800d544:	b948      	cbnz	r0, 800d55a <__lshift+0x3e>
 800d546:	4602      	mov	r2, r0
 800d548:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d54c:	4b27      	ldr	r3, [pc, #156]	@ (800d5ec <__lshift+0xd0>)
 800d54e:	4828      	ldr	r0, [pc, #160]	@ (800d5f0 <__lshift+0xd4>)
 800d550:	f000 fb90 	bl	800dc74 <__assert_func>
 800d554:	3101      	adds	r1, #1
 800d556:	005b      	lsls	r3, r3, #1
 800d558:	e7ee      	b.n	800d538 <__lshift+0x1c>
 800d55a:	2300      	movs	r3, #0
 800d55c:	f100 0114 	add.w	r1, r0, #20
 800d560:	f100 0210 	add.w	r2, r0, #16
 800d564:	4618      	mov	r0, r3
 800d566:	4553      	cmp	r3, sl
 800d568:	db33      	blt.n	800d5d2 <__lshift+0xb6>
 800d56a:	6920      	ldr	r0, [r4, #16]
 800d56c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d570:	f104 0314 	add.w	r3, r4, #20
 800d574:	f019 091f 	ands.w	r9, r9, #31
 800d578:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d57c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d580:	d02b      	beq.n	800d5da <__lshift+0xbe>
 800d582:	468a      	mov	sl, r1
 800d584:	2200      	movs	r2, #0
 800d586:	f1c9 0e20 	rsb	lr, r9, #32
 800d58a:	6818      	ldr	r0, [r3, #0]
 800d58c:	fa00 f009 	lsl.w	r0, r0, r9
 800d590:	4310      	orrs	r0, r2
 800d592:	f84a 0b04 	str.w	r0, [sl], #4
 800d596:	f853 2b04 	ldr.w	r2, [r3], #4
 800d59a:	459c      	cmp	ip, r3
 800d59c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d5a0:	d8f3      	bhi.n	800d58a <__lshift+0x6e>
 800d5a2:	ebac 0304 	sub.w	r3, ip, r4
 800d5a6:	3b15      	subs	r3, #21
 800d5a8:	f023 0303 	bic.w	r3, r3, #3
 800d5ac:	3304      	adds	r3, #4
 800d5ae:	f104 0015 	add.w	r0, r4, #21
 800d5b2:	4584      	cmp	ip, r0
 800d5b4:	bf38      	it	cc
 800d5b6:	2304      	movcc	r3, #4
 800d5b8:	50ca      	str	r2, [r1, r3]
 800d5ba:	b10a      	cbz	r2, 800d5c0 <__lshift+0xa4>
 800d5bc:	f108 0602 	add.w	r6, r8, #2
 800d5c0:	3e01      	subs	r6, #1
 800d5c2:	4638      	mov	r0, r7
 800d5c4:	4621      	mov	r1, r4
 800d5c6:	612e      	str	r6, [r5, #16]
 800d5c8:	f7ff fddc 	bl	800d184 <_Bfree>
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	e7c5      	b.n	800d566 <__lshift+0x4a>
 800d5da:	3904      	subs	r1, #4
 800d5dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5e0:	459c      	cmp	ip, r3
 800d5e2:	f841 2f04 	str.w	r2, [r1, #4]!
 800d5e6:	d8f9      	bhi.n	800d5dc <__lshift+0xc0>
 800d5e8:	e7ea      	b.n	800d5c0 <__lshift+0xa4>
 800d5ea:	bf00      	nop
 800d5ec:	0800ea28 	.word	0x0800ea28
 800d5f0:	0800ea39 	.word	0x0800ea39

0800d5f4 <__mcmp>:
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	690a      	ldr	r2, [r1, #16]
 800d5f8:	6900      	ldr	r0, [r0, #16]
 800d5fa:	b530      	push	{r4, r5, lr}
 800d5fc:	1a80      	subs	r0, r0, r2
 800d5fe:	d10e      	bne.n	800d61e <__mcmp+0x2a>
 800d600:	3314      	adds	r3, #20
 800d602:	3114      	adds	r1, #20
 800d604:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d608:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d60c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d610:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d614:	4295      	cmp	r5, r2
 800d616:	d003      	beq.n	800d620 <__mcmp+0x2c>
 800d618:	d205      	bcs.n	800d626 <__mcmp+0x32>
 800d61a:	f04f 30ff 	mov.w	r0, #4294967295
 800d61e:	bd30      	pop	{r4, r5, pc}
 800d620:	42a3      	cmp	r3, r4
 800d622:	d3f3      	bcc.n	800d60c <__mcmp+0x18>
 800d624:	e7fb      	b.n	800d61e <__mcmp+0x2a>
 800d626:	2001      	movs	r0, #1
 800d628:	e7f9      	b.n	800d61e <__mcmp+0x2a>
	...

0800d62c <__mdiff>:
 800d62c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d630:	4689      	mov	r9, r1
 800d632:	4606      	mov	r6, r0
 800d634:	4611      	mov	r1, r2
 800d636:	4648      	mov	r0, r9
 800d638:	4614      	mov	r4, r2
 800d63a:	f7ff ffdb 	bl	800d5f4 <__mcmp>
 800d63e:	1e05      	subs	r5, r0, #0
 800d640:	d112      	bne.n	800d668 <__mdiff+0x3c>
 800d642:	4629      	mov	r1, r5
 800d644:	4630      	mov	r0, r6
 800d646:	f7ff fd5d 	bl	800d104 <_Balloc>
 800d64a:	4602      	mov	r2, r0
 800d64c:	b928      	cbnz	r0, 800d65a <__mdiff+0x2e>
 800d64e:	f240 2137 	movw	r1, #567	@ 0x237
 800d652:	4b3e      	ldr	r3, [pc, #248]	@ (800d74c <__mdiff+0x120>)
 800d654:	483e      	ldr	r0, [pc, #248]	@ (800d750 <__mdiff+0x124>)
 800d656:	f000 fb0d 	bl	800dc74 <__assert_func>
 800d65a:	2301      	movs	r3, #1
 800d65c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d660:	4610      	mov	r0, r2
 800d662:	b003      	add	sp, #12
 800d664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d668:	bfbc      	itt	lt
 800d66a:	464b      	movlt	r3, r9
 800d66c:	46a1      	movlt	r9, r4
 800d66e:	4630      	mov	r0, r6
 800d670:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d674:	bfba      	itte	lt
 800d676:	461c      	movlt	r4, r3
 800d678:	2501      	movlt	r5, #1
 800d67a:	2500      	movge	r5, #0
 800d67c:	f7ff fd42 	bl	800d104 <_Balloc>
 800d680:	4602      	mov	r2, r0
 800d682:	b918      	cbnz	r0, 800d68c <__mdiff+0x60>
 800d684:	f240 2145 	movw	r1, #581	@ 0x245
 800d688:	4b30      	ldr	r3, [pc, #192]	@ (800d74c <__mdiff+0x120>)
 800d68a:	e7e3      	b.n	800d654 <__mdiff+0x28>
 800d68c:	f100 0b14 	add.w	fp, r0, #20
 800d690:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d694:	f109 0310 	add.w	r3, r9, #16
 800d698:	60c5      	str	r5, [r0, #12]
 800d69a:	f04f 0c00 	mov.w	ip, #0
 800d69e:	f109 0514 	add.w	r5, r9, #20
 800d6a2:	46d9      	mov	r9, fp
 800d6a4:	6926      	ldr	r6, [r4, #16]
 800d6a6:	f104 0e14 	add.w	lr, r4, #20
 800d6aa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d6ae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d6b2:	9301      	str	r3, [sp, #4]
 800d6b4:	9b01      	ldr	r3, [sp, #4]
 800d6b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d6ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d6be:	b281      	uxth	r1, r0
 800d6c0:	9301      	str	r3, [sp, #4]
 800d6c2:	fa1f f38a 	uxth.w	r3, sl
 800d6c6:	1a5b      	subs	r3, r3, r1
 800d6c8:	0c00      	lsrs	r0, r0, #16
 800d6ca:	4463      	add	r3, ip
 800d6cc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d6d0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d6da:	4576      	cmp	r6, lr
 800d6dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d6e0:	f849 3b04 	str.w	r3, [r9], #4
 800d6e4:	d8e6      	bhi.n	800d6b4 <__mdiff+0x88>
 800d6e6:	1b33      	subs	r3, r6, r4
 800d6e8:	3b15      	subs	r3, #21
 800d6ea:	f023 0303 	bic.w	r3, r3, #3
 800d6ee:	3415      	adds	r4, #21
 800d6f0:	3304      	adds	r3, #4
 800d6f2:	42a6      	cmp	r6, r4
 800d6f4:	bf38      	it	cc
 800d6f6:	2304      	movcc	r3, #4
 800d6f8:	441d      	add	r5, r3
 800d6fa:	445b      	add	r3, fp
 800d6fc:	461e      	mov	r6, r3
 800d6fe:	462c      	mov	r4, r5
 800d700:	4544      	cmp	r4, r8
 800d702:	d30e      	bcc.n	800d722 <__mdiff+0xf6>
 800d704:	f108 0103 	add.w	r1, r8, #3
 800d708:	1b49      	subs	r1, r1, r5
 800d70a:	f021 0103 	bic.w	r1, r1, #3
 800d70e:	3d03      	subs	r5, #3
 800d710:	45a8      	cmp	r8, r5
 800d712:	bf38      	it	cc
 800d714:	2100      	movcc	r1, #0
 800d716:	440b      	add	r3, r1
 800d718:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d71c:	b199      	cbz	r1, 800d746 <__mdiff+0x11a>
 800d71e:	6117      	str	r7, [r2, #16]
 800d720:	e79e      	b.n	800d660 <__mdiff+0x34>
 800d722:	46e6      	mov	lr, ip
 800d724:	f854 1b04 	ldr.w	r1, [r4], #4
 800d728:	fa1f fc81 	uxth.w	ip, r1
 800d72c:	44f4      	add	ip, lr
 800d72e:	0c08      	lsrs	r0, r1, #16
 800d730:	4471      	add	r1, lr
 800d732:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d736:	b289      	uxth	r1, r1
 800d738:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d73c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d740:	f846 1b04 	str.w	r1, [r6], #4
 800d744:	e7dc      	b.n	800d700 <__mdiff+0xd4>
 800d746:	3f01      	subs	r7, #1
 800d748:	e7e6      	b.n	800d718 <__mdiff+0xec>
 800d74a:	bf00      	nop
 800d74c:	0800ea28 	.word	0x0800ea28
 800d750:	0800ea39 	.word	0x0800ea39

0800d754 <__d2b>:
 800d754:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d758:	2101      	movs	r1, #1
 800d75a:	4690      	mov	r8, r2
 800d75c:	4699      	mov	r9, r3
 800d75e:	9e08      	ldr	r6, [sp, #32]
 800d760:	f7ff fcd0 	bl	800d104 <_Balloc>
 800d764:	4604      	mov	r4, r0
 800d766:	b930      	cbnz	r0, 800d776 <__d2b+0x22>
 800d768:	4602      	mov	r2, r0
 800d76a:	f240 310f 	movw	r1, #783	@ 0x30f
 800d76e:	4b23      	ldr	r3, [pc, #140]	@ (800d7fc <__d2b+0xa8>)
 800d770:	4823      	ldr	r0, [pc, #140]	@ (800d800 <__d2b+0xac>)
 800d772:	f000 fa7f 	bl	800dc74 <__assert_func>
 800d776:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d77a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d77e:	b10d      	cbz	r5, 800d784 <__d2b+0x30>
 800d780:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d784:	9301      	str	r3, [sp, #4]
 800d786:	f1b8 0300 	subs.w	r3, r8, #0
 800d78a:	d024      	beq.n	800d7d6 <__d2b+0x82>
 800d78c:	4668      	mov	r0, sp
 800d78e:	9300      	str	r3, [sp, #0]
 800d790:	f7ff fd7f 	bl	800d292 <__lo0bits>
 800d794:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d798:	b1d8      	cbz	r0, 800d7d2 <__d2b+0x7e>
 800d79a:	f1c0 0320 	rsb	r3, r0, #32
 800d79e:	fa02 f303 	lsl.w	r3, r2, r3
 800d7a2:	430b      	orrs	r3, r1
 800d7a4:	40c2      	lsrs	r2, r0
 800d7a6:	6163      	str	r3, [r4, #20]
 800d7a8:	9201      	str	r2, [sp, #4]
 800d7aa:	9b01      	ldr	r3, [sp, #4]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	bf0c      	ite	eq
 800d7b0:	2201      	moveq	r2, #1
 800d7b2:	2202      	movne	r2, #2
 800d7b4:	61a3      	str	r3, [r4, #24]
 800d7b6:	6122      	str	r2, [r4, #16]
 800d7b8:	b1ad      	cbz	r5, 800d7e6 <__d2b+0x92>
 800d7ba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d7be:	4405      	add	r5, r0
 800d7c0:	6035      	str	r5, [r6, #0]
 800d7c2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d7c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7c8:	6018      	str	r0, [r3, #0]
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	b002      	add	sp, #8
 800d7ce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d7d2:	6161      	str	r1, [r4, #20]
 800d7d4:	e7e9      	b.n	800d7aa <__d2b+0x56>
 800d7d6:	a801      	add	r0, sp, #4
 800d7d8:	f7ff fd5b 	bl	800d292 <__lo0bits>
 800d7dc:	9b01      	ldr	r3, [sp, #4]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	6163      	str	r3, [r4, #20]
 800d7e2:	3020      	adds	r0, #32
 800d7e4:	e7e7      	b.n	800d7b6 <__d2b+0x62>
 800d7e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d7ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d7ee:	6030      	str	r0, [r6, #0]
 800d7f0:	6918      	ldr	r0, [r3, #16]
 800d7f2:	f7ff fd2f 	bl	800d254 <__hi0bits>
 800d7f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d7fa:	e7e4      	b.n	800d7c6 <__d2b+0x72>
 800d7fc:	0800ea28 	.word	0x0800ea28
 800d800:	0800ea39 	.word	0x0800ea39

0800d804 <__ssputs_r>:
 800d804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d808:	461f      	mov	r7, r3
 800d80a:	688e      	ldr	r6, [r1, #8]
 800d80c:	4682      	mov	sl, r0
 800d80e:	42be      	cmp	r6, r7
 800d810:	460c      	mov	r4, r1
 800d812:	4690      	mov	r8, r2
 800d814:	680b      	ldr	r3, [r1, #0]
 800d816:	d82d      	bhi.n	800d874 <__ssputs_r+0x70>
 800d818:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d81c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d820:	d026      	beq.n	800d870 <__ssputs_r+0x6c>
 800d822:	6965      	ldr	r5, [r4, #20]
 800d824:	6909      	ldr	r1, [r1, #16]
 800d826:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d82a:	eba3 0901 	sub.w	r9, r3, r1
 800d82e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d832:	1c7b      	adds	r3, r7, #1
 800d834:	444b      	add	r3, r9
 800d836:	106d      	asrs	r5, r5, #1
 800d838:	429d      	cmp	r5, r3
 800d83a:	bf38      	it	cc
 800d83c:	461d      	movcc	r5, r3
 800d83e:	0553      	lsls	r3, r2, #21
 800d840:	d527      	bpl.n	800d892 <__ssputs_r+0x8e>
 800d842:	4629      	mov	r1, r5
 800d844:	f7ff fbd2 	bl	800cfec <_malloc_r>
 800d848:	4606      	mov	r6, r0
 800d84a:	b360      	cbz	r0, 800d8a6 <__ssputs_r+0xa2>
 800d84c:	464a      	mov	r2, r9
 800d84e:	6921      	ldr	r1, [r4, #16]
 800d850:	f000 fa02 	bl	800dc58 <memcpy>
 800d854:	89a3      	ldrh	r3, [r4, #12]
 800d856:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d85a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d85e:	81a3      	strh	r3, [r4, #12]
 800d860:	6126      	str	r6, [r4, #16]
 800d862:	444e      	add	r6, r9
 800d864:	6026      	str	r6, [r4, #0]
 800d866:	463e      	mov	r6, r7
 800d868:	6165      	str	r5, [r4, #20]
 800d86a:	eba5 0509 	sub.w	r5, r5, r9
 800d86e:	60a5      	str	r5, [r4, #8]
 800d870:	42be      	cmp	r6, r7
 800d872:	d900      	bls.n	800d876 <__ssputs_r+0x72>
 800d874:	463e      	mov	r6, r7
 800d876:	4632      	mov	r2, r6
 800d878:	4641      	mov	r1, r8
 800d87a:	6820      	ldr	r0, [r4, #0]
 800d87c:	f000 f9c2 	bl	800dc04 <memmove>
 800d880:	2000      	movs	r0, #0
 800d882:	68a3      	ldr	r3, [r4, #8]
 800d884:	1b9b      	subs	r3, r3, r6
 800d886:	60a3      	str	r3, [r4, #8]
 800d888:	6823      	ldr	r3, [r4, #0]
 800d88a:	4433      	add	r3, r6
 800d88c:	6023      	str	r3, [r4, #0]
 800d88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d892:	462a      	mov	r2, r5
 800d894:	f000 fa32 	bl	800dcfc <_realloc_r>
 800d898:	4606      	mov	r6, r0
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d1e0      	bne.n	800d860 <__ssputs_r+0x5c>
 800d89e:	4650      	mov	r0, sl
 800d8a0:	6921      	ldr	r1, [r4, #16]
 800d8a2:	f7ff fb31 	bl	800cf08 <_free_r>
 800d8a6:	230c      	movs	r3, #12
 800d8a8:	f8ca 3000 	str.w	r3, [sl]
 800d8ac:	89a3      	ldrh	r3, [r4, #12]
 800d8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d8b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8b6:	81a3      	strh	r3, [r4, #12]
 800d8b8:	e7e9      	b.n	800d88e <__ssputs_r+0x8a>
	...

0800d8bc <_svfiprintf_r>:
 800d8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c0:	4698      	mov	r8, r3
 800d8c2:	898b      	ldrh	r3, [r1, #12]
 800d8c4:	4607      	mov	r7, r0
 800d8c6:	061b      	lsls	r3, r3, #24
 800d8c8:	460d      	mov	r5, r1
 800d8ca:	4614      	mov	r4, r2
 800d8cc:	b09d      	sub	sp, #116	@ 0x74
 800d8ce:	d510      	bpl.n	800d8f2 <_svfiprintf_r+0x36>
 800d8d0:	690b      	ldr	r3, [r1, #16]
 800d8d2:	b973      	cbnz	r3, 800d8f2 <_svfiprintf_r+0x36>
 800d8d4:	2140      	movs	r1, #64	@ 0x40
 800d8d6:	f7ff fb89 	bl	800cfec <_malloc_r>
 800d8da:	6028      	str	r0, [r5, #0]
 800d8dc:	6128      	str	r0, [r5, #16]
 800d8de:	b930      	cbnz	r0, 800d8ee <_svfiprintf_r+0x32>
 800d8e0:	230c      	movs	r3, #12
 800d8e2:	603b      	str	r3, [r7, #0]
 800d8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e8:	b01d      	add	sp, #116	@ 0x74
 800d8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ee:	2340      	movs	r3, #64	@ 0x40
 800d8f0:	616b      	str	r3, [r5, #20]
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8f6:	2320      	movs	r3, #32
 800d8f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d8fc:	2330      	movs	r3, #48	@ 0x30
 800d8fe:	f04f 0901 	mov.w	r9, #1
 800d902:	f8cd 800c 	str.w	r8, [sp, #12]
 800d906:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800daa0 <_svfiprintf_r+0x1e4>
 800d90a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d90e:	4623      	mov	r3, r4
 800d910:	469a      	mov	sl, r3
 800d912:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d916:	b10a      	cbz	r2, 800d91c <_svfiprintf_r+0x60>
 800d918:	2a25      	cmp	r2, #37	@ 0x25
 800d91a:	d1f9      	bne.n	800d910 <_svfiprintf_r+0x54>
 800d91c:	ebba 0b04 	subs.w	fp, sl, r4
 800d920:	d00b      	beq.n	800d93a <_svfiprintf_r+0x7e>
 800d922:	465b      	mov	r3, fp
 800d924:	4622      	mov	r2, r4
 800d926:	4629      	mov	r1, r5
 800d928:	4638      	mov	r0, r7
 800d92a:	f7ff ff6b 	bl	800d804 <__ssputs_r>
 800d92e:	3001      	adds	r0, #1
 800d930:	f000 80a7 	beq.w	800da82 <_svfiprintf_r+0x1c6>
 800d934:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d936:	445a      	add	r2, fp
 800d938:	9209      	str	r2, [sp, #36]	@ 0x24
 800d93a:	f89a 3000 	ldrb.w	r3, [sl]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	f000 809f 	beq.w	800da82 <_svfiprintf_r+0x1c6>
 800d944:	2300      	movs	r3, #0
 800d946:	f04f 32ff 	mov.w	r2, #4294967295
 800d94a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d94e:	f10a 0a01 	add.w	sl, sl, #1
 800d952:	9304      	str	r3, [sp, #16]
 800d954:	9307      	str	r3, [sp, #28]
 800d956:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d95a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d95c:	4654      	mov	r4, sl
 800d95e:	2205      	movs	r2, #5
 800d960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d964:	484e      	ldr	r0, [pc, #312]	@ (800daa0 <_svfiprintf_r+0x1e4>)
 800d966:	f7fe fc70 	bl	800c24a <memchr>
 800d96a:	9a04      	ldr	r2, [sp, #16]
 800d96c:	b9d8      	cbnz	r0, 800d9a6 <_svfiprintf_r+0xea>
 800d96e:	06d0      	lsls	r0, r2, #27
 800d970:	bf44      	itt	mi
 800d972:	2320      	movmi	r3, #32
 800d974:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d978:	0711      	lsls	r1, r2, #28
 800d97a:	bf44      	itt	mi
 800d97c:	232b      	movmi	r3, #43	@ 0x2b
 800d97e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d982:	f89a 3000 	ldrb.w	r3, [sl]
 800d986:	2b2a      	cmp	r3, #42	@ 0x2a
 800d988:	d015      	beq.n	800d9b6 <_svfiprintf_r+0xfa>
 800d98a:	4654      	mov	r4, sl
 800d98c:	2000      	movs	r0, #0
 800d98e:	f04f 0c0a 	mov.w	ip, #10
 800d992:	9a07      	ldr	r2, [sp, #28]
 800d994:	4621      	mov	r1, r4
 800d996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d99a:	3b30      	subs	r3, #48	@ 0x30
 800d99c:	2b09      	cmp	r3, #9
 800d99e:	d94b      	bls.n	800da38 <_svfiprintf_r+0x17c>
 800d9a0:	b1b0      	cbz	r0, 800d9d0 <_svfiprintf_r+0x114>
 800d9a2:	9207      	str	r2, [sp, #28]
 800d9a4:	e014      	b.n	800d9d0 <_svfiprintf_r+0x114>
 800d9a6:	eba0 0308 	sub.w	r3, r0, r8
 800d9aa:	fa09 f303 	lsl.w	r3, r9, r3
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	46a2      	mov	sl, r4
 800d9b2:	9304      	str	r3, [sp, #16]
 800d9b4:	e7d2      	b.n	800d95c <_svfiprintf_r+0xa0>
 800d9b6:	9b03      	ldr	r3, [sp, #12]
 800d9b8:	1d19      	adds	r1, r3, #4
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	9103      	str	r1, [sp, #12]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	bfbb      	ittet	lt
 800d9c2:	425b      	neglt	r3, r3
 800d9c4:	f042 0202 	orrlt.w	r2, r2, #2
 800d9c8:	9307      	strge	r3, [sp, #28]
 800d9ca:	9307      	strlt	r3, [sp, #28]
 800d9cc:	bfb8      	it	lt
 800d9ce:	9204      	strlt	r2, [sp, #16]
 800d9d0:	7823      	ldrb	r3, [r4, #0]
 800d9d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d9d4:	d10a      	bne.n	800d9ec <_svfiprintf_r+0x130>
 800d9d6:	7863      	ldrb	r3, [r4, #1]
 800d9d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9da:	d132      	bne.n	800da42 <_svfiprintf_r+0x186>
 800d9dc:	9b03      	ldr	r3, [sp, #12]
 800d9de:	3402      	adds	r4, #2
 800d9e0:	1d1a      	adds	r2, r3, #4
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	9203      	str	r2, [sp, #12]
 800d9e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d9ea:	9305      	str	r3, [sp, #20]
 800d9ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800daa4 <_svfiprintf_r+0x1e8>
 800d9f0:	2203      	movs	r2, #3
 800d9f2:	4650      	mov	r0, sl
 800d9f4:	7821      	ldrb	r1, [r4, #0]
 800d9f6:	f7fe fc28 	bl	800c24a <memchr>
 800d9fa:	b138      	cbz	r0, 800da0c <_svfiprintf_r+0x150>
 800d9fc:	2240      	movs	r2, #64	@ 0x40
 800d9fe:	9b04      	ldr	r3, [sp, #16]
 800da00:	eba0 000a 	sub.w	r0, r0, sl
 800da04:	4082      	lsls	r2, r0
 800da06:	4313      	orrs	r3, r2
 800da08:	3401      	adds	r4, #1
 800da0a:	9304      	str	r3, [sp, #16]
 800da0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da10:	2206      	movs	r2, #6
 800da12:	4825      	ldr	r0, [pc, #148]	@ (800daa8 <_svfiprintf_r+0x1ec>)
 800da14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da18:	f7fe fc17 	bl	800c24a <memchr>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	d036      	beq.n	800da8e <_svfiprintf_r+0x1d2>
 800da20:	4b22      	ldr	r3, [pc, #136]	@ (800daac <_svfiprintf_r+0x1f0>)
 800da22:	bb1b      	cbnz	r3, 800da6c <_svfiprintf_r+0x1b0>
 800da24:	9b03      	ldr	r3, [sp, #12]
 800da26:	3307      	adds	r3, #7
 800da28:	f023 0307 	bic.w	r3, r3, #7
 800da2c:	3308      	adds	r3, #8
 800da2e:	9303      	str	r3, [sp, #12]
 800da30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da32:	4433      	add	r3, r6
 800da34:	9309      	str	r3, [sp, #36]	@ 0x24
 800da36:	e76a      	b.n	800d90e <_svfiprintf_r+0x52>
 800da38:	460c      	mov	r4, r1
 800da3a:	2001      	movs	r0, #1
 800da3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800da40:	e7a8      	b.n	800d994 <_svfiprintf_r+0xd8>
 800da42:	2300      	movs	r3, #0
 800da44:	f04f 0c0a 	mov.w	ip, #10
 800da48:	4619      	mov	r1, r3
 800da4a:	3401      	adds	r4, #1
 800da4c:	9305      	str	r3, [sp, #20]
 800da4e:	4620      	mov	r0, r4
 800da50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da54:	3a30      	subs	r2, #48	@ 0x30
 800da56:	2a09      	cmp	r2, #9
 800da58:	d903      	bls.n	800da62 <_svfiprintf_r+0x1a6>
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d0c6      	beq.n	800d9ec <_svfiprintf_r+0x130>
 800da5e:	9105      	str	r1, [sp, #20]
 800da60:	e7c4      	b.n	800d9ec <_svfiprintf_r+0x130>
 800da62:	4604      	mov	r4, r0
 800da64:	2301      	movs	r3, #1
 800da66:	fb0c 2101 	mla	r1, ip, r1, r2
 800da6a:	e7f0      	b.n	800da4e <_svfiprintf_r+0x192>
 800da6c:	ab03      	add	r3, sp, #12
 800da6e:	9300      	str	r3, [sp, #0]
 800da70:	462a      	mov	r2, r5
 800da72:	4638      	mov	r0, r7
 800da74:	4b0e      	ldr	r3, [pc, #56]	@ (800dab0 <_svfiprintf_r+0x1f4>)
 800da76:	a904      	add	r1, sp, #16
 800da78:	f7fd fe84 	bl	800b784 <_printf_float>
 800da7c:	1c42      	adds	r2, r0, #1
 800da7e:	4606      	mov	r6, r0
 800da80:	d1d6      	bne.n	800da30 <_svfiprintf_r+0x174>
 800da82:	89ab      	ldrh	r3, [r5, #12]
 800da84:	065b      	lsls	r3, r3, #25
 800da86:	f53f af2d 	bmi.w	800d8e4 <_svfiprintf_r+0x28>
 800da8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da8c:	e72c      	b.n	800d8e8 <_svfiprintf_r+0x2c>
 800da8e:	ab03      	add	r3, sp, #12
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	462a      	mov	r2, r5
 800da94:	4638      	mov	r0, r7
 800da96:	4b06      	ldr	r3, [pc, #24]	@ (800dab0 <_svfiprintf_r+0x1f4>)
 800da98:	a904      	add	r1, sp, #16
 800da9a:	f7fe f911 	bl	800bcc0 <_printf_i>
 800da9e:	e7ed      	b.n	800da7c <_svfiprintf_r+0x1c0>
 800daa0:	0800eb90 	.word	0x0800eb90
 800daa4:	0800eb96 	.word	0x0800eb96
 800daa8:	0800eb9a 	.word	0x0800eb9a
 800daac:	0800b785 	.word	0x0800b785
 800dab0:	0800d805 	.word	0x0800d805

0800dab4 <__sflush_r>:
 800dab4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daba:	0716      	lsls	r6, r2, #28
 800dabc:	4605      	mov	r5, r0
 800dabe:	460c      	mov	r4, r1
 800dac0:	d454      	bmi.n	800db6c <__sflush_r+0xb8>
 800dac2:	684b      	ldr	r3, [r1, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	dc02      	bgt.n	800dace <__sflush_r+0x1a>
 800dac8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800daca:	2b00      	cmp	r3, #0
 800dacc:	dd48      	ble.n	800db60 <__sflush_r+0xac>
 800dace:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dad0:	2e00      	cmp	r6, #0
 800dad2:	d045      	beq.n	800db60 <__sflush_r+0xac>
 800dad4:	2300      	movs	r3, #0
 800dad6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dada:	682f      	ldr	r7, [r5, #0]
 800dadc:	6a21      	ldr	r1, [r4, #32]
 800dade:	602b      	str	r3, [r5, #0]
 800dae0:	d030      	beq.n	800db44 <__sflush_r+0x90>
 800dae2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dae4:	89a3      	ldrh	r3, [r4, #12]
 800dae6:	0759      	lsls	r1, r3, #29
 800dae8:	d505      	bpl.n	800daf6 <__sflush_r+0x42>
 800daea:	6863      	ldr	r3, [r4, #4]
 800daec:	1ad2      	subs	r2, r2, r3
 800daee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800daf0:	b10b      	cbz	r3, 800daf6 <__sflush_r+0x42>
 800daf2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800daf4:	1ad2      	subs	r2, r2, r3
 800daf6:	2300      	movs	r3, #0
 800daf8:	4628      	mov	r0, r5
 800dafa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dafc:	6a21      	ldr	r1, [r4, #32]
 800dafe:	47b0      	blx	r6
 800db00:	1c43      	adds	r3, r0, #1
 800db02:	89a3      	ldrh	r3, [r4, #12]
 800db04:	d106      	bne.n	800db14 <__sflush_r+0x60>
 800db06:	6829      	ldr	r1, [r5, #0]
 800db08:	291d      	cmp	r1, #29
 800db0a:	d82b      	bhi.n	800db64 <__sflush_r+0xb0>
 800db0c:	4a28      	ldr	r2, [pc, #160]	@ (800dbb0 <__sflush_r+0xfc>)
 800db0e:	410a      	asrs	r2, r1
 800db10:	07d6      	lsls	r6, r2, #31
 800db12:	d427      	bmi.n	800db64 <__sflush_r+0xb0>
 800db14:	2200      	movs	r2, #0
 800db16:	6062      	str	r2, [r4, #4]
 800db18:	6922      	ldr	r2, [r4, #16]
 800db1a:	04d9      	lsls	r1, r3, #19
 800db1c:	6022      	str	r2, [r4, #0]
 800db1e:	d504      	bpl.n	800db2a <__sflush_r+0x76>
 800db20:	1c42      	adds	r2, r0, #1
 800db22:	d101      	bne.n	800db28 <__sflush_r+0x74>
 800db24:	682b      	ldr	r3, [r5, #0]
 800db26:	b903      	cbnz	r3, 800db2a <__sflush_r+0x76>
 800db28:	6560      	str	r0, [r4, #84]	@ 0x54
 800db2a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db2c:	602f      	str	r7, [r5, #0]
 800db2e:	b1b9      	cbz	r1, 800db60 <__sflush_r+0xac>
 800db30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db34:	4299      	cmp	r1, r3
 800db36:	d002      	beq.n	800db3e <__sflush_r+0x8a>
 800db38:	4628      	mov	r0, r5
 800db3a:	f7ff f9e5 	bl	800cf08 <_free_r>
 800db3e:	2300      	movs	r3, #0
 800db40:	6363      	str	r3, [r4, #52]	@ 0x34
 800db42:	e00d      	b.n	800db60 <__sflush_r+0xac>
 800db44:	2301      	movs	r3, #1
 800db46:	4628      	mov	r0, r5
 800db48:	47b0      	blx	r6
 800db4a:	4602      	mov	r2, r0
 800db4c:	1c50      	adds	r0, r2, #1
 800db4e:	d1c9      	bne.n	800dae4 <__sflush_r+0x30>
 800db50:	682b      	ldr	r3, [r5, #0]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d0c6      	beq.n	800dae4 <__sflush_r+0x30>
 800db56:	2b1d      	cmp	r3, #29
 800db58:	d001      	beq.n	800db5e <__sflush_r+0xaa>
 800db5a:	2b16      	cmp	r3, #22
 800db5c:	d11d      	bne.n	800db9a <__sflush_r+0xe6>
 800db5e:	602f      	str	r7, [r5, #0]
 800db60:	2000      	movs	r0, #0
 800db62:	e021      	b.n	800dba8 <__sflush_r+0xf4>
 800db64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db68:	b21b      	sxth	r3, r3
 800db6a:	e01a      	b.n	800dba2 <__sflush_r+0xee>
 800db6c:	690f      	ldr	r7, [r1, #16]
 800db6e:	2f00      	cmp	r7, #0
 800db70:	d0f6      	beq.n	800db60 <__sflush_r+0xac>
 800db72:	0793      	lsls	r3, r2, #30
 800db74:	bf18      	it	ne
 800db76:	2300      	movne	r3, #0
 800db78:	680e      	ldr	r6, [r1, #0]
 800db7a:	bf08      	it	eq
 800db7c:	694b      	ldreq	r3, [r1, #20]
 800db7e:	1bf6      	subs	r6, r6, r7
 800db80:	600f      	str	r7, [r1, #0]
 800db82:	608b      	str	r3, [r1, #8]
 800db84:	2e00      	cmp	r6, #0
 800db86:	ddeb      	ble.n	800db60 <__sflush_r+0xac>
 800db88:	4633      	mov	r3, r6
 800db8a:	463a      	mov	r2, r7
 800db8c:	4628      	mov	r0, r5
 800db8e:	6a21      	ldr	r1, [r4, #32]
 800db90:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800db94:	47e0      	blx	ip
 800db96:	2800      	cmp	r0, #0
 800db98:	dc07      	bgt.n	800dbaa <__sflush_r+0xf6>
 800db9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dba2:	f04f 30ff 	mov.w	r0, #4294967295
 800dba6:	81a3      	strh	r3, [r4, #12]
 800dba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbaa:	4407      	add	r7, r0
 800dbac:	1a36      	subs	r6, r6, r0
 800dbae:	e7e9      	b.n	800db84 <__sflush_r+0xd0>
 800dbb0:	dfbffffe 	.word	0xdfbffffe

0800dbb4 <_fflush_r>:
 800dbb4:	b538      	push	{r3, r4, r5, lr}
 800dbb6:	690b      	ldr	r3, [r1, #16]
 800dbb8:	4605      	mov	r5, r0
 800dbba:	460c      	mov	r4, r1
 800dbbc:	b913      	cbnz	r3, 800dbc4 <_fflush_r+0x10>
 800dbbe:	2500      	movs	r5, #0
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	bd38      	pop	{r3, r4, r5, pc}
 800dbc4:	b118      	cbz	r0, 800dbce <_fflush_r+0x1a>
 800dbc6:	6a03      	ldr	r3, [r0, #32]
 800dbc8:	b90b      	cbnz	r3, 800dbce <_fflush_r+0x1a>
 800dbca:	f7fe fa25 	bl	800c018 <__sinit>
 800dbce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d0f3      	beq.n	800dbbe <_fflush_r+0xa>
 800dbd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dbd8:	07d0      	lsls	r0, r2, #31
 800dbda:	d404      	bmi.n	800dbe6 <_fflush_r+0x32>
 800dbdc:	0599      	lsls	r1, r3, #22
 800dbde:	d402      	bmi.n	800dbe6 <_fflush_r+0x32>
 800dbe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbe2:	f7fe fb30 	bl	800c246 <__retarget_lock_acquire_recursive>
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	4621      	mov	r1, r4
 800dbea:	f7ff ff63 	bl	800dab4 <__sflush_r>
 800dbee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dbf0:	4605      	mov	r5, r0
 800dbf2:	07da      	lsls	r2, r3, #31
 800dbf4:	d4e4      	bmi.n	800dbc0 <_fflush_r+0xc>
 800dbf6:	89a3      	ldrh	r3, [r4, #12]
 800dbf8:	059b      	lsls	r3, r3, #22
 800dbfa:	d4e1      	bmi.n	800dbc0 <_fflush_r+0xc>
 800dbfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbfe:	f7fe fb23 	bl	800c248 <__retarget_lock_release_recursive>
 800dc02:	e7dd      	b.n	800dbc0 <_fflush_r+0xc>

0800dc04 <memmove>:
 800dc04:	4288      	cmp	r0, r1
 800dc06:	b510      	push	{r4, lr}
 800dc08:	eb01 0402 	add.w	r4, r1, r2
 800dc0c:	d902      	bls.n	800dc14 <memmove+0x10>
 800dc0e:	4284      	cmp	r4, r0
 800dc10:	4623      	mov	r3, r4
 800dc12:	d807      	bhi.n	800dc24 <memmove+0x20>
 800dc14:	1e43      	subs	r3, r0, #1
 800dc16:	42a1      	cmp	r1, r4
 800dc18:	d008      	beq.n	800dc2c <memmove+0x28>
 800dc1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc22:	e7f8      	b.n	800dc16 <memmove+0x12>
 800dc24:	4601      	mov	r1, r0
 800dc26:	4402      	add	r2, r0
 800dc28:	428a      	cmp	r2, r1
 800dc2a:	d100      	bne.n	800dc2e <memmove+0x2a>
 800dc2c:	bd10      	pop	{r4, pc}
 800dc2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc36:	e7f7      	b.n	800dc28 <memmove+0x24>

0800dc38 <_sbrk_r>:
 800dc38:	b538      	push	{r3, r4, r5, lr}
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	4d05      	ldr	r5, [pc, #20]	@ (800dc54 <_sbrk_r+0x1c>)
 800dc3e:	4604      	mov	r4, r0
 800dc40:	4608      	mov	r0, r1
 800dc42:	602b      	str	r3, [r5, #0]
 800dc44:	f7f4 ff70 	bl	8002b28 <_sbrk>
 800dc48:	1c43      	adds	r3, r0, #1
 800dc4a:	d102      	bne.n	800dc52 <_sbrk_r+0x1a>
 800dc4c:	682b      	ldr	r3, [r5, #0]
 800dc4e:	b103      	cbz	r3, 800dc52 <_sbrk_r+0x1a>
 800dc50:	6023      	str	r3, [r4, #0]
 800dc52:	bd38      	pop	{r3, r4, r5, pc}
 800dc54:	2000293c 	.word	0x2000293c

0800dc58 <memcpy>:
 800dc58:	440a      	add	r2, r1
 800dc5a:	4291      	cmp	r1, r2
 800dc5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc60:	d100      	bne.n	800dc64 <memcpy+0xc>
 800dc62:	4770      	bx	lr
 800dc64:	b510      	push	{r4, lr}
 800dc66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc6a:	4291      	cmp	r1, r2
 800dc6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc70:	d1f9      	bne.n	800dc66 <memcpy+0xe>
 800dc72:	bd10      	pop	{r4, pc}

0800dc74 <__assert_func>:
 800dc74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc76:	4614      	mov	r4, r2
 800dc78:	461a      	mov	r2, r3
 800dc7a:	4b09      	ldr	r3, [pc, #36]	@ (800dca0 <__assert_func+0x2c>)
 800dc7c:	4605      	mov	r5, r0
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	68d8      	ldr	r0, [r3, #12]
 800dc82:	b954      	cbnz	r4, 800dc9a <__assert_func+0x26>
 800dc84:	4b07      	ldr	r3, [pc, #28]	@ (800dca4 <__assert_func+0x30>)
 800dc86:	461c      	mov	r4, r3
 800dc88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc8c:	9100      	str	r1, [sp, #0]
 800dc8e:	462b      	mov	r3, r5
 800dc90:	4905      	ldr	r1, [pc, #20]	@ (800dca8 <__assert_func+0x34>)
 800dc92:	f000 f86f 	bl	800dd74 <fiprintf>
 800dc96:	f000 f87f 	bl	800dd98 <abort>
 800dc9a:	4b04      	ldr	r3, [pc, #16]	@ (800dcac <__assert_func+0x38>)
 800dc9c:	e7f4      	b.n	800dc88 <__assert_func+0x14>
 800dc9e:	bf00      	nop
 800dca0:	20000030 	.word	0x20000030
 800dca4:	0800ebe6 	.word	0x0800ebe6
 800dca8:	0800ebb8 	.word	0x0800ebb8
 800dcac:	0800ebab 	.word	0x0800ebab

0800dcb0 <_calloc_r>:
 800dcb0:	b570      	push	{r4, r5, r6, lr}
 800dcb2:	fba1 5402 	umull	r5, r4, r1, r2
 800dcb6:	b93c      	cbnz	r4, 800dcc8 <_calloc_r+0x18>
 800dcb8:	4629      	mov	r1, r5
 800dcba:	f7ff f997 	bl	800cfec <_malloc_r>
 800dcbe:	4606      	mov	r6, r0
 800dcc0:	b928      	cbnz	r0, 800dcce <_calloc_r+0x1e>
 800dcc2:	2600      	movs	r6, #0
 800dcc4:	4630      	mov	r0, r6
 800dcc6:	bd70      	pop	{r4, r5, r6, pc}
 800dcc8:	220c      	movs	r2, #12
 800dcca:	6002      	str	r2, [r0, #0]
 800dccc:	e7f9      	b.n	800dcc2 <_calloc_r+0x12>
 800dcce:	462a      	mov	r2, r5
 800dcd0:	4621      	mov	r1, r4
 800dcd2:	f7fe fa3a 	bl	800c14a <memset>
 800dcd6:	e7f5      	b.n	800dcc4 <_calloc_r+0x14>

0800dcd8 <__ascii_mbtowc>:
 800dcd8:	b082      	sub	sp, #8
 800dcda:	b901      	cbnz	r1, 800dcde <__ascii_mbtowc+0x6>
 800dcdc:	a901      	add	r1, sp, #4
 800dcde:	b142      	cbz	r2, 800dcf2 <__ascii_mbtowc+0x1a>
 800dce0:	b14b      	cbz	r3, 800dcf6 <__ascii_mbtowc+0x1e>
 800dce2:	7813      	ldrb	r3, [r2, #0]
 800dce4:	600b      	str	r3, [r1, #0]
 800dce6:	7812      	ldrb	r2, [r2, #0]
 800dce8:	1e10      	subs	r0, r2, #0
 800dcea:	bf18      	it	ne
 800dcec:	2001      	movne	r0, #1
 800dcee:	b002      	add	sp, #8
 800dcf0:	4770      	bx	lr
 800dcf2:	4610      	mov	r0, r2
 800dcf4:	e7fb      	b.n	800dcee <__ascii_mbtowc+0x16>
 800dcf6:	f06f 0001 	mvn.w	r0, #1
 800dcfa:	e7f8      	b.n	800dcee <__ascii_mbtowc+0x16>

0800dcfc <_realloc_r>:
 800dcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd00:	4680      	mov	r8, r0
 800dd02:	4615      	mov	r5, r2
 800dd04:	460c      	mov	r4, r1
 800dd06:	b921      	cbnz	r1, 800dd12 <_realloc_r+0x16>
 800dd08:	4611      	mov	r1, r2
 800dd0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd0e:	f7ff b96d 	b.w	800cfec <_malloc_r>
 800dd12:	b92a      	cbnz	r2, 800dd20 <_realloc_r+0x24>
 800dd14:	f7ff f8f8 	bl	800cf08 <_free_r>
 800dd18:	2400      	movs	r4, #0
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd20:	f000 f841 	bl	800dda6 <_malloc_usable_size_r>
 800dd24:	4285      	cmp	r5, r0
 800dd26:	4606      	mov	r6, r0
 800dd28:	d802      	bhi.n	800dd30 <_realloc_r+0x34>
 800dd2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dd2e:	d8f4      	bhi.n	800dd1a <_realloc_r+0x1e>
 800dd30:	4629      	mov	r1, r5
 800dd32:	4640      	mov	r0, r8
 800dd34:	f7ff f95a 	bl	800cfec <_malloc_r>
 800dd38:	4607      	mov	r7, r0
 800dd3a:	2800      	cmp	r0, #0
 800dd3c:	d0ec      	beq.n	800dd18 <_realloc_r+0x1c>
 800dd3e:	42b5      	cmp	r5, r6
 800dd40:	462a      	mov	r2, r5
 800dd42:	4621      	mov	r1, r4
 800dd44:	bf28      	it	cs
 800dd46:	4632      	movcs	r2, r6
 800dd48:	f7ff ff86 	bl	800dc58 <memcpy>
 800dd4c:	4621      	mov	r1, r4
 800dd4e:	4640      	mov	r0, r8
 800dd50:	f7ff f8da 	bl	800cf08 <_free_r>
 800dd54:	463c      	mov	r4, r7
 800dd56:	e7e0      	b.n	800dd1a <_realloc_r+0x1e>

0800dd58 <__ascii_wctomb>:
 800dd58:	4603      	mov	r3, r0
 800dd5a:	4608      	mov	r0, r1
 800dd5c:	b141      	cbz	r1, 800dd70 <__ascii_wctomb+0x18>
 800dd5e:	2aff      	cmp	r2, #255	@ 0xff
 800dd60:	d904      	bls.n	800dd6c <__ascii_wctomb+0x14>
 800dd62:	228a      	movs	r2, #138	@ 0x8a
 800dd64:	f04f 30ff 	mov.w	r0, #4294967295
 800dd68:	601a      	str	r2, [r3, #0]
 800dd6a:	4770      	bx	lr
 800dd6c:	2001      	movs	r0, #1
 800dd6e:	700a      	strb	r2, [r1, #0]
 800dd70:	4770      	bx	lr
	...

0800dd74 <fiprintf>:
 800dd74:	b40e      	push	{r1, r2, r3}
 800dd76:	b503      	push	{r0, r1, lr}
 800dd78:	4601      	mov	r1, r0
 800dd7a:	ab03      	add	r3, sp, #12
 800dd7c:	4805      	ldr	r0, [pc, #20]	@ (800dd94 <fiprintf+0x20>)
 800dd7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd82:	6800      	ldr	r0, [r0, #0]
 800dd84:	9301      	str	r3, [sp, #4]
 800dd86:	f000 f83d 	bl	800de04 <_vfiprintf_r>
 800dd8a:	b002      	add	sp, #8
 800dd8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd90:	b003      	add	sp, #12
 800dd92:	4770      	bx	lr
 800dd94:	20000030 	.word	0x20000030

0800dd98 <abort>:
 800dd98:	2006      	movs	r0, #6
 800dd9a:	b508      	push	{r3, lr}
 800dd9c:	f000 fa06 	bl	800e1ac <raise>
 800dda0:	2001      	movs	r0, #1
 800dda2:	f7f4 fe4c 	bl	8002a3e <_exit>

0800dda6 <_malloc_usable_size_r>:
 800dda6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddaa:	1f18      	subs	r0, r3, #4
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	bfbc      	itt	lt
 800ddb0:	580b      	ldrlt	r3, [r1, r0]
 800ddb2:	18c0      	addlt	r0, r0, r3
 800ddb4:	4770      	bx	lr

0800ddb6 <__sfputc_r>:
 800ddb6:	6893      	ldr	r3, [r2, #8]
 800ddb8:	b410      	push	{r4}
 800ddba:	3b01      	subs	r3, #1
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	6093      	str	r3, [r2, #8]
 800ddc0:	da07      	bge.n	800ddd2 <__sfputc_r+0x1c>
 800ddc2:	6994      	ldr	r4, [r2, #24]
 800ddc4:	42a3      	cmp	r3, r4
 800ddc6:	db01      	blt.n	800ddcc <__sfputc_r+0x16>
 800ddc8:	290a      	cmp	r1, #10
 800ddca:	d102      	bne.n	800ddd2 <__sfputc_r+0x1c>
 800ddcc:	bc10      	pop	{r4}
 800ddce:	f000 b931 	b.w	800e034 <__swbuf_r>
 800ddd2:	6813      	ldr	r3, [r2, #0]
 800ddd4:	1c58      	adds	r0, r3, #1
 800ddd6:	6010      	str	r0, [r2, #0]
 800ddd8:	7019      	strb	r1, [r3, #0]
 800ddda:	4608      	mov	r0, r1
 800dddc:	bc10      	pop	{r4}
 800ddde:	4770      	bx	lr

0800dde0 <__sfputs_r>:
 800dde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dde2:	4606      	mov	r6, r0
 800dde4:	460f      	mov	r7, r1
 800dde6:	4614      	mov	r4, r2
 800dde8:	18d5      	adds	r5, r2, r3
 800ddea:	42ac      	cmp	r4, r5
 800ddec:	d101      	bne.n	800ddf2 <__sfputs_r+0x12>
 800ddee:	2000      	movs	r0, #0
 800ddf0:	e007      	b.n	800de02 <__sfputs_r+0x22>
 800ddf2:	463a      	mov	r2, r7
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddfa:	f7ff ffdc 	bl	800ddb6 <__sfputc_r>
 800ddfe:	1c43      	adds	r3, r0, #1
 800de00:	d1f3      	bne.n	800ddea <__sfputs_r+0xa>
 800de02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800de04 <_vfiprintf_r>:
 800de04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de08:	460d      	mov	r5, r1
 800de0a:	4614      	mov	r4, r2
 800de0c:	4698      	mov	r8, r3
 800de0e:	4606      	mov	r6, r0
 800de10:	b09d      	sub	sp, #116	@ 0x74
 800de12:	b118      	cbz	r0, 800de1c <_vfiprintf_r+0x18>
 800de14:	6a03      	ldr	r3, [r0, #32]
 800de16:	b90b      	cbnz	r3, 800de1c <_vfiprintf_r+0x18>
 800de18:	f7fe f8fe 	bl	800c018 <__sinit>
 800de1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de1e:	07d9      	lsls	r1, r3, #31
 800de20:	d405      	bmi.n	800de2e <_vfiprintf_r+0x2a>
 800de22:	89ab      	ldrh	r3, [r5, #12]
 800de24:	059a      	lsls	r2, r3, #22
 800de26:	d402      	bmi.n	800de2e <_vfiprintf_r+0x2a>
 800de28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de2a:	f7fe fa0c 	bl	800c246 <__retarget_lock_acquire_recursive>
 800de2e:	89ab      	ldrh	r3, [r5, #12]
 800de30:	071b      	lsls	r3, r3, #28
 800de32:	d501      	bpl.n	800de38 <_vfiprintf_r+0x34>
 800de34:	692b      	ldr	r3, [r5, #16]
 800de36:	b99b      	cbnz	r3, 800de60 <_vfiprintf_r+0x5c>
 800de38:	4629      	mov	r1, r5
 800de3a:	4630      	mov	r0, r6
 800de3c:	f000 f938 	bl	800e0b0 <__swsetup_r>
 800de40:	b170      	cbz	r0, 800de60 <_vfiprintf_r+0x5c>
 800de42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de44:	07dc      	lsls	r4, r3, #31
 800de46:	d504      	bpl.n	800de52 <_vfiprintf_r+0x4e>
 800de48:	f04f 30ff 	mov.w	r0, #4294967295
 800de4c:	b01d      	add	sp, #116	@ 0x74
 800de4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de52:	89ab      	ldrh	r3, [r5, #12]
 800de54:	0598      	lsls	r0, r3, #22
 800de56:	d4f7      	bmi.n	800de48 <_vfiprintf_r+0x44>
 800de58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de5a:	f7fe f9f5 	bl	800c248 <__retarget_lock_release_recursive>
 800de5e:	e7f3      	b.n	800de48 <_vfiprintf_r+0x44>
 800de60:	2300      	movs	r3, #0
 800de62:	9309      	str	r3, [sp, #36]	@ 0x24
 800de64:	2320      	movs	r3, #32
 800de66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800de6a:	2330      	movs	r3, #48	@ 0x30
 800de6c:	f04f 0901 	mov.w	r9, #1
 800de70:	f8cd 800c 	str.w	r8, [sp, #12]
 800de74:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e020 <_vfiprintf_r+0x21c>
 800de78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de7c:	4623      	mov	r3, r4
 800de7e:	469a      	mov	sl, r3
 800de80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de84:	b10a      	cbz	r2, 800de8a <_vfiprintf_r+0x86>
 800de86:	2a25      	cmp	r2, #37	@ 0x25
 800de88:	d1f9      	bne.n	800de7e <_vfiprintf_r+0x7a>
 800de8a:	ebba 0b04 	subs.w	fp, sl, r4
 800de8e:	d00b      	beq.n	800dea8 <_vfiprintf_r+0xa4>
 800de90:	465b      	mov	r3, fp
 800de92:	4622      	mov	r2, r4
 800de94:	4629      	mov	r1, r5
 800de96:	4630      	mov	r0, r6
 800de98:	f7ff ffa2 	bl	800dde0 <__sfputs_r>
 800de9c:	3001      	adds	r0, #1
 800de9e:	f000 80a7 	beq.w	800dff0 <_vfiprintf_r+0x1ec>
 800dea2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dea4:	445a      	add	r2, fp
 800dea6:	9209      	str	r2, [sp, #36]	@ 0x24
 800dea8:	f89a 3000 	ldrb.w	r3, [sl]
 800deac:	2b00      	cmp	r3, #0
 800deae:	f000 809f 	beq.w	800dff0 <_vfiprintf_r+0x1ec>
 800deb2:	2300      	movs	r3, #0
 800deb4:	f04f 32ff 	mov.w	r2, #4294967295
 800deb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800debc:	f10a 0a01 	add.w	sl, sl, #1
 800dec0:	9304      	str	r3, [sp, #16]
 800dec2:	9307      	str	r3, [sp, #28]
 800dec4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dec8:	931a      	str	r3, [sp, #104]	@ 0x68
 800deca:	4654      	mov	r4, sl
 800decc:	2205      	movs	r2, #5
 800dece:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ded2:	4853      	ldr	r0, [pc, #332]	@ (800e020 <_vfiprintf_r+0x21c>)
 800ded4:	f7fe f9b9 	bl	800c24a <memchr>
 800ded8:	9a04      	ldr	r2, [sp, #16]
 800deda:	b9d8      	cbnz	r0, 800df14 <_vfiprintf_r+0x110>
 800dedc:	06d1      	lsls	r1, r2, #27
 800dede:	bf44      	itt	mi
 800dee0:	2320      	movmi	r3, #32
 800dee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dee6:	0713      	lsls	r3, r2, #28
 800dee8:	bf44      	itt	mi
 800deea:	232b      	movmi	r3, #43	@ 0x2b
 800deec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800def0:	f89a 3000 	ldrb.w	r3, [sl]
 800def4:	2b2a      	cmp	r3, #42	@ 0x2a
 800def6:	d015      	beq.n	800df24 <_vfiprintf_r+0x120>
 800def8:	4654      	mov	r4, sl
 800defa:	2000      	movs	r0, #0
 800defc:	f04f 0c0a 	mov.w	ip, #10
 800df00:	9a07      	ldr	r2, [sp, #28]
 800df02:	4621      	mov	r1, r4
 800df04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df08:	3b30      	subs	r3, #48	@ 0x30
 800df0a:	2b09      	cmp	r3, #9
 800df0c:	d94b      	bls.n	800dfa6 <_vfiprintf_r+0x1a2>
 800df0e:	b1b0      	cbz	r0, 800df3e <_vfiprintf_r+0x13a>
 800df10:	9207      	str	r2, [sp, #28]
 800df12:	e014      	b.n	800df3e <_vfiprintf_r+0x13a>
 800df14:	eba0 0308 	sub.w	r3, r0, r8
 800df18:	fa09 f303 	lsl.w	r3, r9, r3
 800df1c:	4313      	orrs	r3, r2
 800df1e:	46a2      	mov	sl, r4
 800df20:	9304      	str	r3, [sp, #16]
 800df22:	e7d2      	b.n	800deca <_vfiprintf_r+0xc6>
 800df24:	9b03      	ldr	r3, [sp, #12]
 800df26:	1d19      	adds	r1, r3, #4
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	9103      	str	r1, [sp, #12]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	bfbb      	ittet	lt
 800df30:	425b      	neglt	r3, r3
 800df32:	f042 0202 	orrlt.w	r2, r2, #2
 800df36:	9307      	strge	r3, [sp, #28]
 800df38:	9307      	strlt	r3, [sp, #28]
 800df3a:	bfb8      	it	lt
 800df3c:	9204      	strlt	r2, [sp, #16]
 800df3e:	7823      	ldrb	r3, [r4, #0]
 800df40:	2b2e      	cmp	r3, #46	@ 0x2e
 800df42:	d10a      	bne.n	800df5a <_vfiprintf_r+0x156>
 800df44:	7863      	ldrb	r3, [r4, #1]
 800df46:	2b2a      	cmp	r3, #42	@ 0x2a
 800df48:	d132      	bne.n	800dfb0 <_vfiprintf_r+0x1ac>
 800df4a:	9b03      	ldr	r3, [sp, #12]
 800df4c:	3402      	adds	r4, #2
 800df4e:	1d1a      	adds	r2, r3, #4
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	9203      	str	r2, [sp, #12]
 800df54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df58:	9305      	str	r3, [sp, #20]
 800df5a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e024 <_vfiprintf_r+0x220>
 800df5e:	2203      	movs	r2, #3
 800df60:	4650      	mov	r0, sl
 800df62:	7821      	ldrb	r1, [r4, #0]
 800df64:	f7fe f971 	bl	800c24a <memchr>
 800df68:	b138      	cbz	r0, 800df7a <_vfiprintf_r+0x176>
 800df6a:	2240      	movs	r2, #64	@ 0x40
 800df6c:	9b04      	ldr	r3, [sp, #16]
 800df6e:	eba0 000a 	sub.w	r0, r0, sl
 800df72:	4082      	lsls	r2, r0
 800df74:	4313      	orrs	r3, r2
 800df76:	3401      	adds	r4, #1
 800df78:	9304      	str	r3, [sp, #16]
 800df7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df7e:	2206      	movs	r2, #6
 800df80:	4829      	ldr	r0, [pc, #164]	@ (800e028 <_vfiprintf_r+0x224>)
 800df82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df86:	f7fe f960 	bl	800c24a <memchr>
 800df8a:	2800      	cmp	r0, #0
 800df8c:	d03f      	beq.n	800e00e <_vfiprintf_r+0x20a>
 800df8e:	4b27      	ldr	r3, [pc, #156]	@ (800e02c <_vfiprintf_r+0x228>)
 800df90:	bb1b      	cbnz	r3, 800dfda <_vfiprintf_r+0x1d6>
 800df92:	9b03      	ldr	r3, [sp, #12]
 800df94:	3307      	adds	r3, #7
 800df96:	f023 0307 	bic.w	r3, r3, #7
 800df9a:	3308      	adds	r3, #8
 800df9c:	9303      	str	r3, [sp, #12]
 800df9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfa0:	443b      	add	r3, r7
 800dfa2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfa4:	e76a      	b.n	800de7c <_vfiprintf_r+0x78>
 800dfa6:	460c      	mov	r4, r1
 800dfa8:	2001      	movs	r0, #1
 800dfaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfae:	e7a8      	b.n	800df02 <_vfiprintf_r+0xfe>
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	f04f 0c0a 	mov.w	ip, #10
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	3401      	adds	r4, #1
 800dfba:	9305      	str	r3, [sp, #20]
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfc2:	3a30      	subs	r2, #48	@ 0x30
 800dfc4:	2a09      	cmp	r2, #9
 800dfc6:	d903      	bls.n	800dfd0 <_vfiprintf_r+0x1cc>
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d0c6      	beq.n	800df5a <_vfiprintf_r+0x156>
 800dfcc:	9105      	str	r1, [sp, #20]
 800dfce:	e7c4      	b.n	800df5a <_vfiprintf_r+0x156>
 800dfd0:	4604      	mov	r4, r0
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfd8:	e7f0      	b.n	800dfbc <_vfiprintf_r+0x1b8>
 800dfda:	ab03      	add	r3, sp, #12
 800dfdc:	9300      	str	r3, [sp, #0]
 800dfde:	462a      	mov	r2, r5
 800dfe0:	4630      	mov	r0, r6
 800dfe2:	4b13      	ldr	r3, [pc, #76]	@ (800e030 <_vfiprintf_r+0x22c>)
 800dfe4:	a904      	add	r1, sp, #16
 800dfe6:	f7fd fbcd 	bl	800b784 <_printf_float>
 800dfea:	4607      	mov	r7, r0
 800dfec:	1c78      	adds	r0, r7, #1
 800dfee:	d1d6      	bne.n	800df9e <_vfiprintf_r+0x19a>
 800dff0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dff2:	07d9      	lsls	r1, r3, #31
 800dff4:	d405      	bmi.n	800e002 <_vfiprintf_r+0x1fe>
 800dff6:	89ab      	ldrh	r3, [r5, #12]
 800dff8:	059a      	lsls	r2, r3, #22
 800dffa:	d402      	bmi.n	800e002 <_vfiprintf_r+0x1fe>
 800dffc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dffe:	f7fe f923 	bl	800c248 <__retarget_lock_release_recursive>
 800e002:	89ab      	ldrh	r3, [r5, #12]
 800e004:	065b      	lsls	r3, r3, #25
 800e006:	f53f af1f 	bmi.w	800de48 <_vfiprintf_r+0x44>
 800e00a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e00c:	e71e      	b.n	800de4c <_vfiprintf_r+0x48>
 800e00e:	ab03      	add	r3, sp, #12
 800e010:	9300      	str	r3, [sp, #0]
 800e012:	462a      	mov	r2, r5
 800e014:	4630      	mov	r0, r6
 800e016:	4b06      	ldr	r3, [pc, #24]	@ (800e030 <_vfiprintf_r+0x22c>)
 800e018:	a904      	add	r1, sp, #16
 800e01a:	f7fd fe51 	bl	800bcc0 <_printf_i>
 800e01e:	e7e4      	b.n	800dfea <_vfiprintf_r+0x1e6>
 800e020:	0800eb90 	.word	0x0800eb90
 800e024:	0800eb96 	.word	0x0800eb96
 800e028:	0800eb9a 	.word	0x0800eb9a
 800e02c:	0800b785 	.word	0x0800b785
 800e030:	0800dde1 	.word	0x0800dde1

0800e034 <__swbuf_r>:
 800e034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e036:	460e      	mov	r6, r1
 800e038:	4614      	mov	r4, r2
 800e03a:	4605      	mov	r5, r0
 800e03c:	b118      	cbz	r0, 800e046 <__swbuf_r+0x12>
 800e03e:	6a03      	ldr	r3, [r0, #32]
 800e040:	b90b      	cbnz	r3, 800e046 <__swbuf_r+0x12>
 800e042:	f7fd ffe9 	bl	800c018 <__sinit>
 800e046:	69a3      	ldr	r3, [r4, #24]
 800e048:	60a3      	str	r3, [r4, #8]
 800e04a:	89a3      	ldrh	r3, [r4, #12]
 800e04c:	071a      	lsls	r2, r3, #28
 800e04e:	d501      	bpl.n	800e054 <__swbuf_r+0x20>
 800e050:	6923      	ldr	r3, [r4, #16]
 800e052:	b943      	cbnz	r3, 800e066 <__swbuf_r+0x32>
 800e054:	4621      	mov	r1, r4
 800e056:	4628      	mov	r0, r5
 800e058:	f000 f82a 	bl	800e0b0 <__swsetup_r>
 800e05c:	b118      	cbz	r0, 800e066 <__swbuf_r+0x32>
 800e05e:	f04f 37ff 	mov.w	r7, #4294967295
 800e062:	4638      	mov	r0, r7
 800e064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e066:	6823      	ldr	r3, [r4, #0]
 800e068:	6922      	ldr	r2, [r4, #16]
 800e06a:	b2f6      	uxtb	r6, r6
 800e06c:	1a98      	subs	r0, r3, r2
 800e06e:	6963      	ldr	r3, [r4, #20]
 800e070:	4637      	mov	r7, r6
 800e072:	4283      	cmp	r3, r0
 800e074:	dc05      	bgt.n	800e082 <__swbuf_r+0x4e>
 800e076:	4621      	mov	r1, r4
 800e078:	4628      	mov	r0, r5
 800e07a:	f7ff fd9b 	bl	800dbb4 <_fflush_r>
 800e07e:	2800      	cmp	r0, #0
 800e080:	d1ed      	bne.n	800e05e <__swbuf_r+0x2a>
 800e082:	68a3      	ldr	r3, [r4, #8]
 800e084:	3b01      	subs	r3, #1
 800e086:	60a3      	str	r3, [r4, #8]
 800e088:	6823      	ldr	r3, [r4, #0]
 800e08a:	1c5a      	adds	r2, r3, #1
 800e08c:	6022      	str	r2, [r4, #0]
 800e08e:	701e      	strb	r6, [r3, #0]
 800e090:	6962      	ldr	r2, [r4, #20]
 800e092:	1c43      	adds	r3, r0, #1
 800e094:	429a      	cmp	r2, r3
 800e096:	d004      	beq.n	800e0a2 <__swbuf_r+0x6e>
 800e098:	89a3      	ldrh	r3, [r4, #12]
 800e09a:	07db      	lsls	r3, r3, #31
 800e09c:	d5e1      	bpl.n	800e062 <__swbuf_r+0x2e>
 800e09e:	2e0a      	cmp	r6, #10
 800e0a0:	d1df      	bne.n	800e062 <__swbuf_r+0x2e>
 800e0a2:	4621      	mov	r1, r4
 800e0a4:	4628      	mov	r0, r5
 800e0a6:	f7ff fd85 	bl	800dbb4 <_fflush_r>
 800e0aa:	2800      	cmp	r0, #0
 800e0ac:	d0d9      	beq.n	800e062 <__swbuf_r+0x2e>
 800e0ae:	e7d6      	b.n	800e05e <__swbuf_r+0x2a>

0800e0b0 <__swsetup_r>:
 800e0b0:	b538      	push	{r3, r4, r5, lr}
 800e0b2:	4b29      	ldr	r3, [pc, #164]	@ (800e158 <__swsetup_r+0xa8>)
 800e0b4:	4605      	mov	r5, r0
 800e0b6:	6818      	ldr	r0, [r3, #0]
 800e0b8:	460c      	mov	r4, r1
 800e0ba:	b118      	cbz	r0, 800e0c4 <__swsetup_r+0x14>
 800e0bc:	6a03      	ldr	r3, [r0, #32]
 800e0be:	b90b      	cbnz	r3, 800e0c4 <__swsetup_r+0x14>
 800e0c0:	f7fd ffaa 	bl	800c018 <__sinit>
 800e0c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0c8:	0719      	lsls	r1, r3, #28
 800e0ca:	d422      	bmi.n	800e112 <__swsetup_r+0x62>
 800e0cc:	06da      	lsls	r2, r3, #27
 800e0ce:	d407      	bmi.n	800e0e0 <__swsetup_r+0x30>
 800e0d0:	2209      	movs	r2, #9
 800e0d2:	602a      	str	r2, [r5, #0]
 800e0d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0dc:	81a3      	strh	r3, [r4, #12]
 800e0de:	e033      	b.n	800e148 <__swsetup_r+0x98>
 800e0e0:	0758      	lsls	r0, r3, #29
 800e0e2:	d512      	bpl.n	800e10a <__swsetup_r+0x5a>
 800e0e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e0e6:	b141      	cbz	r1, 800e0fa <__swsetup_r+0x4a>
 800e0e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e0ec:	4299      	cmp	r1, r3
 800e0ee:	d002      	beq.n	800e0f6 <__swsetup_r+0x46>
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	f7fe ff09 	bl	800cf08 <_free_r>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e0fa:	89a3      	ldrh	r3, [r4, #12]
 800e0fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e100:	81a3      	strh	r3, [r4, #12]
 800e102:	2300      	movs	r3, #0
 800e104:	6063      	str	r3, [r4, #4]
 800e106:	6923      	ldr	r3, [r4, #16]
 800e108:	6023      	str	r3, [r4, #0]
 800e10a:	89a3      	ldrh	r3, [r4, #12]
 800e10c:	f043 0308 	orr.w	r3, r3, #8
 800e110:	81a3      	strh	r3, [r4, #12]
 800e112:	6923      	ldr	r3, [r4, #16]
 800e114:	b94b      	cbnz	r3, 800e12a <__swsetup_r+0x7a>
 800e116:	89a3      	ldrh	r3, [r4, #12]
 800e118:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e11c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e120:	d003      	beq.n	800e12a <__swsetup_r+0x7a>
 800e122:	4621      	mov	r1, r4
 800e124:	4628      	mov	r0, r5
 800e126:	f000 f882 	bl	800e22e <__smakebuf_r>
 800e12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e12e:	f013 0201 	ands.w	r2, r3, #1
 800e132:	d00a      	beq.n	800e14a <__swsetup_r+0x9a>
 800e134:	2200      	movs	r2, #0
 800e136:	60a2      	str	r2, [r4, #8]
 800e138:	6962      	ldr	r2, [r4, #20]
 800e13a:	4252      	negs	r2, r2
 800e13c:	61a2      	str	r2, [r4, #24]
 800e13e:	6922      	ldr	r2, [r4, #16]
 800e140:	b942      	cbnz	r2, 800e154 <__swsetup_r+0xa4>
 800e142:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e146:	d1c5      	bne.n	800e0d4 <__swsetup_r+0x24>
 800e148:	bd38      	pop	{r3, r4, r5, pc}
 800e14a:	0799      	lsls	r1, r3, #30
 800e14c:	bf58      	it	pl
 800e14e:	6962      	ldrpl	r2, [r4, #20]
 800e150:	60a2      	str	r2, [r4, #8]
 800e152:	e7f4      	b.n	800e13e <__swsetup_r+0x8e>
 800e154:	2000      	movs	r0, #0
 800e156:	e7f7      	b.n	800e148 <__swsetup_r+0x98>
 800e158:	20000030 	.word	0x20000030

0800e15c <_raise_r>:
 800e15c:	291f      	cmp	r1, #31
 800e15e:	b538      	push	{r3, r4, r5, lr}
 800e160:	4605      	mov	r5, r0
 800e162:	460c      	mov	r4, r1
 800e164:	d904      	bls.n	800e170 <_raise_r+0x14>
 800e166:	2316      	movs	r3, #22
 800e168:	6003      	str	r3, [r0, #0]
 800e16a:	f04f 30ff 	mov.w	r0, #4294967295
 800e16e:	bd38      	pop	{r3, r4, r5, pc}
 800e170:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e172:	b112      	cbz	r2, 800e17a <_raise_r+0x1e>
 800e174:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e178:	b94b      	cbnz	r3, 800e18e <_raise_r+0x32>
 800e17a:	4628      	mov	r0, r5
 800e17c:	f000 f830 	bl	800e1e0 <_getpid_r>
 800e180:	4622      	mov	r2, r4
 800e182:	4601      	mov	r1, r0
 800e184:	4628      	mov	r0, r5
 800e186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e18a:	f000 b817 	b.w	800e1bc <_kill_r>
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d00a      	beq.n	800e1a8 <_raise_r+0x4c>
 800e192:	1c59      	adds	r1, r3, #1
 800e194:	d103      	bne.n	800e19e <_raise_r+0x42>
 800e196:	2316      	movs	r3, #22
 800e198:	6003      	str	r3, [r0, #0]
 800e19a:	2001      	movs	r0, #1
 800e19c:	e7e7      	b.n	800e16e <_raise_r+0x12>
 800e19e:	2100      	movs	r1, #0
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e1a6:	4798      	blx	r3
 800e1a8:	2000      	movs	r0, #0
 800e1aa:	e7e0      	b.n	800e16e <_raise_r+0x12>

0800e1ac <raise>:
 800e1ac:	4b02      	ldr	r3, [pc, #8]	@ (800e1b8 <raise+0xc>)
 800e1ae:	4601      	mov	r1, r0
 800e1b0:	6818      	ldr	r0, [r3, #0]
 800e1b2:	f7ff bfd3 	b.w	800e15c <_raise_r>
 800e1b6:	bf00      	nop
 800e1b8:	20000030 	.word	0x20000030

0800e1bc <_kill_r>:
 800e1bc:	b538      	push	{r3, r4, r5, lr}
 800e1be:	2300      	movs	r3, #0
 800e1c0:	4d06      	ldr	r5, [pc, #24]	@ (800e1dc <_kill_r+0x20>)
 800e1c2:	4604      	mov	r4, r0
 800e1c4:	4608      	mov	r0, r1
 800e1c6:	4611      	mov	r1, r2
 800e1c8:	602b      	str	r3, [r5, #0]
 800e1ca:	f7f4 fc28 	bl	8002a1e <_kill>
 800e1ce:	1c43      	adds	r3, r0, #1
 800e1d0:	d102      	bne.n	800e1d8 <_kill_r+0x1c>
 800e1d2:	682b      	ldr	r3, [r5, #0]
 800e1d4:	b103      	cbz	r3, 800e1d8 <_kill_r+0x1c>
 800e1d6:	6023      	str	r3, [r4, #0]
 800e1d8:	bd38      	pop	{r3, r4, r5, pc}
 800e1da:	bf00      	nop
 800e1dc:	2000293c 	.word	0x2000293c

0800e1e0 <_getpid_r>:
 800e1e0:	f7f4 bc16 	b.w	8002a10 <_getpid>

0800e1e4 <__swhatbuf_r>:
 800e1e4:	b570      	push	{r4, r5, r6, lr}
 800e1e6:	460c      	mov	r4, r1
 800e1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1ec:	4615      	mov	r5, r2
 800e1ee:	2900      	cmp	r1, #0
 800e1f0:	461e      	mov	r6, r3
 800e1f2:	b096      	sub	sp, #88	@ 0x58
 800e1f4:	da0c      	bge.n	800e210 <__swhatbuf_r+0x2c>
 800e1f6:	89a3      	ldrh	r3, [r4, #12]
 800e1f8:	2100      	movs	r1, #0
 800e1fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e1fe:	bf14      	ite	ne
 800e200:	2340      	movne	r3, #64	@ 0x40
 800e202:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e206:	2000      	movs	r0, #0
 800e208:	6031      	str	r1, [r6, #0]
 800e20a:	602b      	str	r3, [r5, #0]
 800e20c:	b016      	add	sp, #88	@ 0x58
 800e20e:	bd70      	pop	{r4, r5, r6, pc}
 800e210:	466a      	mov	r2, sp
 800e212:	f000 f849 	bl	800e2a8 <_fstat_r>
 800e216:	2800      	cmp	r0, #0
 800e218:	dbed      	blt.n	800e1f6 <__swhatbuf_r+0x12>
 800e21a:	9901      	ldr	r1, [sp, #4]
 800e21c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e220:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e224:	4259      	negs	r1, r3
 800e226:	4159      	adcs	r1, r3
 800e228:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e22c:	e7eb      	b.n	800e206 <__swhatbuf_r+0x22>

0800e22e <__smakebuf_r>:
 800e22e:	898b      	ldrh	r3, [r1, #12]
 800e230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e232:	079d      	lsls	r5, r3, #30
 800e234:	4606      	mov	r6, r0
 800e236:	460c      	mov	r4, r1
 800e238:	d507      	bpl.n	800e24a <__smakebuf_r+0x1c>
 800e23a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e23e:	6023      	str	r3, [r4, #0]
 800e240:	6123      	str	r3, [r4, #16]
 800e242:	2301      	movs	r3, #1
 800e244:	6163      	str	r3, [r4, #20]
 800e246:	b003      	add	sp, #12
 800e248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e24a:	466a      	mov	r2, sp
 800e24c:	ab01      	add	r3, sp, #4
 800e24e:	f7ff ffc9 	bl	800e1e4 <__swhatbuf_r>
 800e252:	9f00      	ldr	r7, [sp, #0]
 800e254:	4605      	mov	r5, r0
 800e256:	4639      	mov	r1, r7
 800e258:	4630      	mov	r0, r6
 800e25a:	f7fe fec7 	bl	800cfec <_malloc_r>
 800e25e:	b948      	cbnz	r0, 800e274 <__smakebuf_r+0x46>
 800e260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e264:	059a      	lsls	r2, r3, #22
 800e266:	d4ee      	bmi.n	800e246 <__smakebuf_r+0x18>
 800e268:	f023 0303 	bic.w	r3, r3, #3
 800e26c:	f043 0302 	orr.w	r3, r3, #2
 800e270:	81a3      	strh	r3, [r4, #12]
 800e272:	e7e2      	b.n	800e23a <__smakebuf_r+0xc>
 800e274:	89a3      	ldrh	r3, [r4, #12]
 800e276:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e27a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e27e:	81a3      	strh	r3, [r4, #12]
 800e280:	9b01      	ldr	r3, [sp, #4]
 800e282:	6020      	str	r0, [r4, #0]
 800e284:	b15b      	cbz	r3, 800e29e <__smakebuf_r+0x70>
 800e286:	4630      	mov	r0, r6
 800e288:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e28c:	f000 f81e 	bl	800e2cc <_isatty_r>
 800e290:	b128      	cbz	r0, 800e29e <__smakebuf_r+0x70>
 800e292:	89a3      	ldrh	r3, [r4, #12]
 800e294:	f023 0303 	bic.w	r3, r3, #3
 800e298:	f043 0301 	orr.w	r3, r3, #1
 800e29c:	81a3      	strh	r3, [r4, #12]
 800e29e:	89a3      	ldrh	r3, [r4, #12]
 800e2a0:	431d      	orrs	r5, r3
 800e2a2:	81a5      	strh	r5, [r4, #12]
 800e2a4:	e7cf      	b.n	800e246 <__smakebuf_r+0x18>
	...

0800e2a8 <_fstat_r>:
 800e2a8:	b538      	push	{r3, r4, r5, lr}
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	4d06      	ldr	r5, [pc, #24]	@ (800e2c8 <_fstat_r+0x20>)
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	4608      	mov	r0, r1
 800e2b2:	4611      	mov	r1, r2
 800e2b4:	602b      	str	r3, [r5, #0]
 800e2b6:	f7f4 fc11 	bl	8002adc <_fstat>
 800e2ba:	1c43      	adds	r3, r0, #1
 800e2bc:	d102      	bne.n	800e2c4 <_fstat_r+0x1c>
 800e2be:	682b      	ldr	r3, [r5, #0]
 800e2c0:	b103      	cbz	r3, 800e2c4 <_fstat_r+0x1c>
 800e2c2:	6023      	str	r3, [r4, #0]
 800e2c4:	bd38      	pop	{r3, r4, r5, pc}
 800e2c6:	bf00      	nop
 800e2c8:	2000293c 	.word	0x2000293c

0800e2cc <_isatty_r>:
 800e2cc:	b538      	push	{r3, r4, r5, lr}
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	4d05      	ldr	r5, [pc, #20]	@ (800e2e8 <_isatty_r+0x1c>)
 800e2d2:	4604      	mov	r4, r0
 800e2d4:	4608      	mov	r0, r1
 800e2d6:	602b      	str	r3, [r5, #0]
 800e2d8:	f7f4 fc0f 	bl	8002afa <_isatty>
 800e2dc:	1c43      	adds	r3, r0, #1
 800e2de:	d102      	bne.n	800e2e6 <_isatty_r+0x1a>
 800e2e0:	682b      	ldr	r3, [r5, #0]
 800e2e2:	b103      	cbz	r3, 800e2e6 <_isatty_r+0x1a>
 800e2e4:	6023      	str	r3, [r4, #0]
 800e2e6:	bd38      	pop	{r3, r4, r5, pc}
 800e2e8:	2000293c 	.word	0x2000293c

0800e2ec <_init>:
 800e2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ee:	bf00      	nop
 800e2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2f2:	bc08      	pop	{r3}
 800e2f4:	469e      	mov	lr, r3
 800e2f6:	4770      	bx	lr

0800e2f8 <_fini>:
 800e2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2fa:	bf00      	nop
 800e2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2fe:	bc08      	pop	{r3}
 800e300:	469e      	mov	lr, r3
 800e302:	4770      	bx	lr
