
DataLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db94  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001730  0800dca8  0800dca8  0000eca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3d8  0800f3d8  000111f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f3d8  0800f3d8  000103d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3e0  0800f3e0  000111f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3e0  0800f3e0  000103e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f3e4  0800f3e4  000103e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800f3e8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b14  200001f4  0800f5dc  000111f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002d08  0800f5dc  00011d08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a76  00000000  00000000  0001121d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a1e  00000000  00000000  00026c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  0002a6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000116f  00000000  00000000  0002bd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b6a8  00000000  00000000  0002ce8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d4e1  00000000  00000000  00048537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009531f  00000000  00000000  00065a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fad37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f28  00000000  00000000  000fad7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00101ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800dc8c 	.word	0x0800dc8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800dc8c 	.word	0x0800dc8c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <bcd2bin>:
#include "ds1307.h"

extern I2C_HandleTypeDef hi2c1;


uint8_t bcd2bin(uint8_t data){
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
 return ((data>>4)*10)+(data&0x0F);
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	0092      	lsls	r2, r2, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 030f 	and.w	r3, r3, #15
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2db      	uxtb	r3, r3
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <rtc_write>:
	
	return data;
}

void rtc_write(uint8_t address,uint8_t data)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af04      	add	r7, sp, #16
 8000cda:	4603      	mov	r3, r0
 8000cdc:	460a      	mov	r2, r1
 8000cde:	71fb      	strb	r3, [r7, #7]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,address,I2C_MEMADD_SIZE_8BIT,&data,1,100)!=HAL_OK){
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	2364      	movs	r3, #100	@ 0x64
 8000cea:	9302      	str	r3, [sp, #8]
 8000cec:	2301      	movs	r3, #1
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	1dbb      	adds	r3, r7, #6
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	f64f 71d0 	movw	r1, #65488	@ 0xffd0
 8000cfa:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <rtc_write+0x44>)
 8000cfc:	f003 fc44 	bl	8004588 <HAL_I2C_Mem_Write>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <rtc_write+0x3a>
		Error_Handler(__FILE__,__LINE__);
 8000d06:	211c      	movs	r1, #28
 8000d08:	4804      	ldr	r0, [pc, #16]	@ (8000d1c <rtc_write+0x48>)
 8000d0a:	f001 fa53 	bl	80021b4 <Error_Handler>
	}
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20002368 	.word	0x20002368
 8000d1c:	0800dca8 	.word	0x0800dca8

08000d20 <rtc_init>:

void rtc_init(uint8_t rs,uint8_t sqwe,uint8_t out)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	71bb      	strb	r3, [r7, #6]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	717b      	strb	r3, [r7, #5]
	rs&=3;
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 0303 	and.w	r3, r3, #3
 8000d38:	71fb      	strb	r3, [r7, #7]
	if (sqwe) rs|=0x10;
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d003      	beq.n	8000d48 <rtc_init+0x28>
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	71fb      	strb	r3, [r7, #7]
	if (out) rs|=0x80;
 8000d48:	797b      	ldrb	r3, [r7, #5]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <rtc_init+0x36>
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d54:	71fb      	strb	r3, [r7, #7]
	
	rtc_write(0x07,rs);
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	2007      	movs	r0, #7
 8000d5c:	f7ff ffba 	bl	8000cd4 <rtc_write>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <rtc_get_time>:

void rtc_get_time(uint8_t *hour,uint8_t *min,uint8_t *sec)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	@ 0x28
 8000d6c:	af04      	add	r7, sp, #16
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
	uint8_t data[3];
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 8000d74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2301      	movs	r3, #1
 8000d86:	2200      	movs	r2, #0
 8000d88:	f64f 71d0 	movw	r1, #65488	@ 0xffd0
 8000d8c:	4812      	ldr	r0, [pc, #72]	@ (8000dd8 <rtc_get_time+0x70>)
 8000d8e:	f003 fcf5 	bl	800477c <HAL_I2C_Mem_Read>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d003      	beq.n	8000da0 <rtc_get_time+0x38>
		Error_Handler(__FILE__,__LINE__);
 8000d98:	212d      	movs	r1, #45	@ 0x2d
 8000d9a:	4810      	ldr	r0, [pc, #64]	@ (8000ddc <rtc_get_time+0x74>)
 8000d9c:	f001 fa0a 	bl	80021b4 <Error_Handler>
	}	

	*sec=bcd2bin(data[0]);
 8000da0:	7d3b      	ldrb	r3, [r7, #20]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff7e 	bl	8000ca4 <bcd2bin>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	701a      	strb	r2, [r3, #0]
	*min=bcd2bin(data[1]);
 8000db0:	7d7b      	ldrb	r3, [r7, #21]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff76 	bl	8000ca4 <bcd2bin>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	701a      	strb	r2, [r3, #0]
	*hour=bcd2bin(data[2]);
 8000dc0:	7dbb      	ldrb	r3, [r7, #22]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff6e 	bl	8000ca4 <bcd2bin>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	701a      	strb	r2, [r3, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20002368 	.word	0x20002368
 8000ddc:	0800dca8 	.word	0x0800dca8

08000de0 <rtc_get_date>:
		Error_Handler(__FILE__,__LINE__);
	}
}

void rtc_get_date(uint8_t *week_day,uint8_t *day,uint8_t *month,uint8_t *year)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	@ 0x28
 8000de4:	af04      	add	r7, sp, #16
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	603b      	str	r3, [r7, #0]
	uint8_t data[4]={0,0,0,0};
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x03,I2C_MEMADD_SIZE_8BIT,data,4,1000)!=HAL_OK){
 8000df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df6:	9302      	str	r3, [sp, #8]
 8000df8:	2304      	movs	r3, #4
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2301      	movs	r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	f64f 71d0 	movw	r1, #65488	@ 0xffd0
 8000e0a:	4814      	ldr	r0, [pc, #80]	@ (8000e5c <rtc_get_date+0x7c>)
 8000e0c:	f003 fcb6 	bl	800477c <HAL_I2C_Mem_Read>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <rtc_get_date+0x3e>
		Error_Handler(__FILE__,__LINE__);
 8000e16:	2141      	movs	r1, #65	@ 0x41
 8000e18:	4811      	ldr	r0, [pc, #68]	@ (8000e60 <rtc_get_date+0x80>)
 8000e1a:	f001 f9cb 	bl	80021b4 <Error_Handler>
	}
	
	*week_day=data[0];
 8000e1e:	7d3a      	ldrb	r2, [r7, #20]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	701a      	strb	r2, [r3, #0]
	*day=bcd2bin(data[1]);
 8000e24:	7d7b      	ldrb	r3, [r7, #21]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff3c 	bl	8000ca4 <bcd2bin>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	701a      	strb	r2, [r3, #0]
	*month=bcd2bin(data[2]);
 8000e34:	7dbb      	ldrb	r3, [r7, #22]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ff34 	bl	8000ca4 <bcd2bin>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461a      	mov	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	701a      	strb	r2, [r3, #0]
	*year=bcd2bin(data[3]);
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff2c 	bl	8000ca4 <bcd2bin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	461a      	mov	r2, r3
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	701a      	strb	r2, [r3, #0]
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20002368 	.word	0x20002368
 8000e60:	0800dca8 	.word	0x0800dca8

08000e64 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e6e:	4804      	ldr	r0, [pc, #16]	@ (8000e80 <SELECT+0x1c>)
 8000e70:	f003 f916 	bl	80040a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f001 ffdd 	bl	8002e34 <HAL_Delay>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40010800 	.word	0x40010800

08000e84 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e8e:	4804      	ldr	r0, [pc, #16]	@ (8000ea0 <DESELECT+0x1c>)
 8000e90:	f003 f906 	bl	80040a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e94:	2001      	movs	r0, #1
 8000e96:	f001 ffcd 	bl	8002e34 <HAL_Delay>
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40010800 	.word	0x40010800

08000ea4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000eae:	bf00      	nop
 8000eb0:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <SPI_TxByte+0x30>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d1f8      	bne.n	8000eb0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000ebe:	1df9      	adds	r1, r7, #7
 8000ec0:	2364      	movs	r3, #100	@ 0x64
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4803      	ldr	r0, [pc, #12]	@ (8000ed4 <SPI_TxByte+0x30>)
 8000ec6:	f005 f967 	bl	8006198 <HAL_SPI_Transmit>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20002410 	.word	0x20002410

08000ed8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ee4:	bf00      	nop
 8000ee6:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <SPI_TxBuffer+0x30>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d1f8      	bne.n	8000ee6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000ef4:	887a      	ldrh	r2, [r7, #2]
 8000ef6:	2364      	movs	r3, #100	@ 0x64
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <SPI_TxBuffer+0x30>)
 8000efc:	f005 f94c 	bl	8006198 <HAL_SPI_Transmit>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20002410 	.word	0x20002410

08000f0c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000f12:	23ff      	movs	r3, #255	@ 0xff
 8000f14:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f16:	bf00      	nop
 8000f18:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <SPI_RxByte+0x34>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d1f8      	bne.n	8000f18 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000f26:	1dba      	adds	r2, r7, #6
 8000f28:	1df9      	adds	r1, r7, #7
 8000f2a:	2364      	movs	r3, #100	@ 0x64
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <SPI_RxByte+0x34>)
 8000f32:	f005 fa75 	bl	8006420 <HAL_SPI_TransmitReceive>

	return data;
 8000f36:	79bb      	ldrb	r3, [r7, #6]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20002410 	.word	0x20002410

08000f44 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000f4c:	f7ff ffde 	bl	8000f0c <SPI_RxByte>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	701a      	strb	r2, [r3, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <SD_ReadyWait+0x30>)
 8000f68:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f6c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000f6e:	f7ff ffcd 	bl	8000f0c <SPI_RxByte>
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2bff      	cmp	r3, #255	@ 0xff
 8000f7a:	d003      	beq.n	8000f84 <SD_ReadyWait+0x24>
 8000f7c:	4b04      	ldr	r3, [pc, #16]	@ (8000f90 <SD_ReadyWait+0x30>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1f4      	bne.n	8000f6e <SD_ReadyWait+0xe>

	return res;
 8000f84:	79fb      	ldrb	r3, [r7, #7]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000212 	.word	0x20000212

08000f94 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000f9a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000f9e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000fa0:	f7ff ff70 	bl	8000e84 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	e005      	b.n	8000fb6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000faa:	20ff      	movs	r0, #255	@ 0xff
 8000fac:	f7ff ff7a 	bl	8000ea4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b09      	cmp	r3, #9
 8000fba:	ddf6      	ble.n	8000faa <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000fbc:	f7ff ff52 	bl	8000e64 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000fc0:	2340      	movs	r3, #64	@ 0x40
 8000fc2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000fd4:	2395      	movs	r3, #149	@ 0x95
 8000fd6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2106      	movs	r1, #6
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff7b 	bl	8000ed8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000fe2:	e002      	b.n	8000fea <SD_PowerOn+0x56>
	{
		cnt--;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000fea:	f7ff ff8f 	bl	8000f0c <SPI_RxByte>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d002      	beq.n	8000ffa <SD_PowerOn+0x66>
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f4      	bne.n	8000fe4 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000ffa:	f7ff ff43 	bl	8000e84 <DESELECT>
	SPI_TxByte(0XFF);
 8000ffe:	20ff      	movs	r0, #255	@ 0xff
 8001000:	f7ff ff50 	bl	8000ea4 <SPI_TxByte>

	PowerFlag = 1;
 8001004:	4b03      	ldr	r3, [pc, #12]	@ (8001014 <SD_PowerOn+0x80>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000215 	.word	0x20000215

08001018 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800101c:	4b03      	ldr	r3, [pc, #12]	@ (800102c <SD_PowerOff+0x14>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000215 	.word	0x20000215

08001030 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001034:	4b02      	ldr	r3, [pc, #8]	@ (8001040 <SD_CheckPower+0x10>)
 8001036:	781b      	ldrb	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	20000215 	.word	0x20000215

08001044 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800104e:	4b13      	ldr	r3, [pc, #76]	@ (800109c <SD_RxDataBlock+0x58>)
 8001050:	22c8      	movs	r2, #200	@ 0xc8
 8001052:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001054:	f7ff ff5a 	bl	8000f0c <SPI_RxByte>
 8001058:	4603      	mov	r3, r0
 800105a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2bff      	cmp	r3, #255	@ 0xff
 8001060:	d103      	bne.n	800106a <SD_RxDataBlock+0x26>
 8001062:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <SD_RxDataBlock+0x58>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f4      	bne.n	8001054 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	2bfe      	cmp	r3, #254	@ 0xfe
 800106e:	d001      	beq.n	8001074 <SD_RxDataBlock+0x30>
 8001070:	2300      	movs	r3, #0
 8001072:	e00f      	b.n	8001094 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff62 	bl	8000f44 <SPI_RxBytePtr>
	} while(len--);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	1e5a      	subs	r2, r3, #1
 8001084:	603a      	str	r2, [r7, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f4      	bne.n	8001074 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800108a:	f7ff ff3f 	bl	8000f0c <SPI_RxByte>
	SPI_RxByte();
 800108e:	f7ff ff3d 	bl	8000f0c <SPI_RxByte>

	return TRUE;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000210 	.word	0x20000210

080010a0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80010b0:	f7ff ff56 	bl	8000f60 <SD_ReadyWait>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2bff      	cmp	r3, #255	@ 0xff
 80010b8:	d001      	beq.n	80010be <SD_TxDataBlock+0x1e>
 80010ba:	2300      	movs	r3, #0
 80010bc:	e02f      	b.n	800111e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff feef 	bl	8000ea4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	2bfd      	cmp	r3, #253	@ 0xfd
 80010ca:	d020      	beq.n	800110e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80010cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff01 	bl	8000ed8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80010d6:	f7ff ff19 	bl	8000f0c <SPI_RxByte>
		SPI_RxByte();
 80010da:	f7ff ff17 	bl	8000f0c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80010de:	e00b      	b.n	80010f8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80010e0:	f7ff ff14 	bl	8000f0c <SPI_RxByte>
 80010e4:	4603      	mov	r3, r0
 80010e6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	d006      	beq.n	8001100 <SD_TxDataBlock+0x60>
			i++;
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	3301      	adds	r3, #1
 80010f6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80010f8:	7bbb      	ldrb	r3, [r7, #14]
 80010fa:	2b40      	cmp	r3, #64	@ 0x40
 80010fc:	d9f0      	bls.n	80010e0 <SD_TxDataBlock+0x40>
 80010fe:	e000      	b.n	8001102 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001100:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001102:	bf00      	nop
 8001104:	f7ff ff02 	bl	8000f0c <SPI_RxByte>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0fa      	beq.n	8001104 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	f003 031f 	and.w	r3, r3, #31
 8001114:	2b05      	cmp	r3, #5
 8001116:	d101      	bne.n	800111c <SD_TxDataBlock+0x7c>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <SD_TxDataBlock+0x7e>

	return FALSE;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	6039      	str	r1, [r7, #0]
 8001130:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001132:	f7ff ff15 	bl	8000f60 <SD_ReadyWait>
 8001136:	4603      	mov	r3, r0
 8001138:	2bff      	cmp	r3, #255	@ 0xff
 800113a:	d001      	beq.n	8001140 <SD_SendCmd+0x1a>
 800113c:	23ff      	movs	r3, #255	@ 0xff
 800113e:	e042      	b.n	80011c6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff feae 	bl	8000ea4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	0e1b      	lsrs	r3, r3, #24
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fea8 	bl	8000ea4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	0c1b      	lsrs	r3, r3, #16
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fea2 	bl	8000ea4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	0a1b      	lsrs	r3, r3, #8
 8001164:	b2db      	uxtb	r3, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fe9c 	bl	8000ea4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fe97 	bl	8000ea4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b40      	cmp	r3, #64	@ 0x40
 800117a:	d102      	bne.n	8001182 <SD_SendCmd+0x5c>
 800117c:	2395      	movs	r3, #149	@ 0x95
 800117e:	73fb      	strb	r3, [r7, #15]
 8001180:	e007      	b.n	8001192 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b48      	cmp	r3, #72	@ 0x48
 8001186:	d102      	bne.n	800118e <SD_SendCmd+0x68>
 8001188:	2387      	movs	r3, #135	@ 0x87
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e001      	b.n	8001192 <SD_SendCmd+0x6c>
	else crc = 1;
 800118e:	2301      	movs	r3, #1
 8001190:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fe85 	bl	8000ea4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b4c      	cmp	r3, #76	@ 0x4c
 800119e:	d101      	bne.n	80011a4 <SD_SendCmd+0x7e>
 80011a0:	f7ff feb4 	bl	8000f0c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80011a4:	230a      	movs	r3, #10
 80011a6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80011a8:	f7ff feb0 	bl	8000f0c <SPI_RxByte>
 80011ac:	4603      	mov	r3, r0
 80011ae:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80011b0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	da05      	bge.n	80011c4 <SD_SendCmd+0x9e>
 80011b8:	7bbb      	ldrb	r3, [r7, #14]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	73bb      	strb	r3, [r7, #14]
 80011be:	7bbb      	ldrb	r3, [r7, #14]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f1      	bne.n	80011a8 <SD_SendCmd+0x82>

	return res;
 80011c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SD_disk_initialize+0x14>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e0d1      	b.n	8001388 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80011e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001390 <SD_disk_initialize+0x1c0>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <SD_disk_initialize+0x2a>
 80011f2:	4b67      	ldr	r3, [pc, #412]	@ (8001390 <SD_disk_initialize+0x1c0>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	e0c6      	b.n	8001388 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80011fa:	f7ff fecb 	bl	8000f94 <SD_PowerOn>

	/* slave select */
	SELECT();
 80011fe:	f7ff fe31 	bl	8000e64 <SELECT>

	/* check disk type */
	type = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001206:	2100      	movs	r1, #0
 8001208:	2040      	movs	r0, #64	@ 0x40
 800120a:	f7ff ff8c 	bl	8001126 <SD_SendCmd>
 800120e:	4603      	mov	r3, r0
 8001210:	2b01      	cmp	r3, #1
 8001212:	f040 80a1 	bne.w	8001358 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001216:	4b5f      	ldr	r3, [pc, #380]	@ (8001394 <SD_disk_initialize+0x1c4>)
 8001218:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800121c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800121e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001222:	2048      	movs	r0, #72	@ 0x48
 8001224:	f7ff ff7f 	bl	8001126 <SD_SendCmd>
 8001228:	4603      	mov	r3, r0
 800122a:	2b01      	cmp	r3, #1
 800122c:	d155      	bne.n	80012da <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e00c      	b.n	800124e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001234:	7bfc      	ldrb	r4, [r7, #15]
 8001236:	f7ff fe69 	bl	8000f0c <SPI_RxByte>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	f104 0310 	add.w	r3, r4, #16
 8001242:	443b      	add	r3, r7
 8001244:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	3301      	adds	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	2b03      	cmp	r3, #3
 8001252:	d9ef      	bls.n	8001234 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001254:	7abb      	ldrb	r3, [r7, #10]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d17e      	bne.n	8001358 <SD_disk_initialize+0x188>
 800125a:	7afb      	ldrb	r3, [r7, #11]
 800125c:	2baa      	cmp	r3, #170	@ 0xaa
 800125e:	d17b      	bne.n	8001358 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001260:	2100      	movs	r1, #0
 8001262:	2077      	movs	r0, #119	@ 0x77
 8001264:	f7ff ff5f 	bl	8001126 <SD_SendCmd>
 8001268:	4603      	mov	r3, r0
 800126a:	2b01      	cmp	r3, #1
 800126c:	d807      	bhi.n	800127e <SD_disk_initialize+0xae>
 800126e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001272:	2069      	movs	r0, #105	@ 0x69
 8001274:	f7ff ff57 	bl	8001126 <SD_SendCmd>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d004      	beq.n	8001288 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800127e:	4b45      	ldr	r3, [pc, #276]	@ (8001394 <SD_disk_initialize+0x1c4>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1ec      	bne.n	8001260 <SD_disk_initialize+0x90>
 8001286:	e000      	b.n	800128a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001288:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800128a:	4b42      	ldr	r3, [pc, #264]	@ (8001394 <SD_disk_initialize+0x1c4>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d062      	beq.n	8001358 <SD_disk_initialize+0x188>
 8001292:	2100      	movs	r1, #0
 8001294:	207a      	movs	r0, #122	@ 0x7a
 8001296:	f7ff ff46 	bl	8001126 <SD_SendCmd>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d15b      	bne.n	8001358 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	e00c      	b.n	80012c0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80012a6:	7bfc      	ldrb	r4, [r7, #15]
 80012a8:	f7ff fe30 	bl	8000f0c <SPI_RxByte>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	f104 0310 	add.w	r3, r4, #16
 80012b4:	443b      	add	r3, r7
 80012b6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	3301      	adds	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d9ef      	bls.n	80012a6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80012c6:	7a3b      	ldrb	r3, [r7, #8]
 80012c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SD_disk_initialize+0x104>
 80012d0:	230c      	movs	r3, #12
 80012d2:	e000      	b.n	80012d6 <SD_disk_initialize+0x106>
 80012d4:	2304      	movs	r3, #4
 80012d6:	73bb      	strb	r3, [r7, #14]
 80012d8:	e03e      	b.n	8001358 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80012da:	2100      	movs	r1, #0
 80012dc:	2077      	movs	r0, #119	@ 0x77
 80012de:	f7ff ff22 	bl	8001126 <SD_SendCmd>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d808      	bhi.n	80012fa <SD_disk_initialize+0x12a>
 80012e8:	2100      	movs	r1, #0
 80012ea:	2069      	movs	r0, #105	@ 0x69
 80012ec:	f7ff ff1b 	bl	8001126 <SD_SendCmd>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d801      	bhi.n	80012fa <SD_disk_initialize+0x12a>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e000      	b.n	80012fc <SD_disk_initialize+0x12c>
 80012fa:	2301      	movs	r3, #1
 80012fc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d10e      	bne.n	8001322 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001304:	2100      	movs	r1, #0
 8001306:	2077      	movs	r0, #119	@ 0x77
 8001308:	f7ff ff0d 	bl	8001126 <SD_SendCmd>
 800130c:	4603      	mov	r3, r0
 800130e:	2b01      	cmp	r3, #1
 8001310:	d80e      	bhi.n	8001330 <SD_disk_initialize+0x160>
 8001312:	2100      	movs	r1, #0
 8001314:	2069      	movs	r0, #105	@ 0x69
 8001316:	f7ff ff06 	bl	8001126 <SD_SendCmd>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d107      	bne.n	8001330 <SD_disk_initialize+0x160>
 8001320:	e00c      	b.n	800133c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001322:	2100      	movs	r1, #0
 8001324:	2041      	movs	r0, #65	@ 0x41
 8001326:	f7ff fefe 	bl	8001126 <SD_SendCmd>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <SD_disk_initialize+0x1c4>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1e2      	bne.n	80012fe <SD_disk_initialize+0x12e>
 8001338:	e000      	b.n	800133c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800133a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <SD_disk_initialize+0x1c4>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d007      	beq.n	8001354 <SD_disk_initialize+0x184>
 8001344:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001348:	2050      	movs	r0, #80	@ 0x50
 800134a:	f7ff feec 	bl	8001126 <SD_SendCmd>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SD_disk_initialize+0x188>
 8001354:	2300      	movs	r3, #0
 8001356:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001358:	4a0f      	ldr	r2, [pc, #60]	@ (8001398 <SD_disk_initialize+0x1c8>)
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800135e:	f7ff fd91 	bl	8000e84 <DESELECT>
	SPI_RxByte();
 8001362:	f7ff fdd3 	bl	8000f0c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d008      	beq.n	800137e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800136c:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <SD_disk_initialize+0x1c0>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f023 0301 	bic.w	r3, r3, #1
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <SD_disk_initialize+0x1c0>)
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	e001      	b.n	8001382 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800137e:	f7ff fe4b 	bl	8001018 <SD_PowerOff>
	}

	return Stat;
 8001382:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <SD_disk_initialize+0x1c0>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}
 8001390:	20000000 	.word	0x20000000
 8001394:	20000210 	.word	0x20000210
 8001398:	20000214 	.word	0x20000214

0800139c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SD_disk_status+0x14>
 80013ac:	2301      	movs	r3, #1
 80013ae:	e002      	b.n	80013b6 <SD_disk_status+0x1a>
	return Stat;
 80013b0:	4b03      	ldr	r3, [pc, #12]	@ (80013c0 <SD_disk_status+0x24>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b2db      	uxtb	r3, r3
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	20000000 	.word	0x20000000

080013c4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	4603      	mov	r3, r0
 80013d2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <SD_disk_read+0x1c>
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <SD_disk_read+0x20>
 80013e0:	2304      	movs	r3, #4
 80013e2:	e051      	b.n	8001488 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80013e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <SD_disk_read+0xcc>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SD_disk_read+0x32>
 80013f2:	2303      	movs	r3, #3
 80013f4:	e048      	b.n	8001488 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80013f6:	4b27      	ldr	r3, [pc, #156]	@ (8001494 <SD_disk_read+0xd0>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <SD_disk_read+0x44>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	025b      	lsls	r3, r3, #9
 8001406:	607b      	str	r3, [r7, #4]

	SELECT();
 8001408:	f7ff fd2c 	bl	8000e64 <SELECT>

	if (count == 1)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d111      	bne.n	8001436 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	2051      	movs	r0, #81	@ 0x51
 8001416:	f7ff fe86 	bl	8001126 <SD_SendCmd>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d129      	bne.n	8001474 <SD_disk_read+0xb0>
 8001420:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f7ff fe0d 	bl	8001044 <SD_RxDataBlock>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d021      	beq.n	8001474 <SD_disk_read+0xb0>
 8001430:	2300      	movs	r3, #0
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	e01e      	b.n	8001474 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	2052      	movs	r0, #82	@ 0x52
 800143a:	f7ff fe74 	bl	8001126 <SD_SendCmd>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d117      	bne.n	8001474 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001444:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001448:	68b8      	ldr	r0, [r7, #8]
 800144a:	f7ff fdfb 	bl	8001044 <SD_RxDataBlock>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00a      	beq.n	800146a <SD_disk_read+0xa6>
				buff += 512;
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800145a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	3b01      	subs	r3, #1
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1ed      	bne.n	8001444 <SD_disk_read+0x80>
 8001468:	e000      	b.n	800146c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800146a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800146c:	2100      	movs	r1, #0
 800146e:	204c      	movs	r0, #76	@ 0x4c
 8001470:	f7ff fe59 	bl	8001126 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001474:	f7ff fd06 	bl	8000e84 <DESELECT>
	SPI_RxByte();
 8001478:	f7ff fd48 	bl	8000f0c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	bf14      	ite	ne
 8001482:	2301      	movne	r3, #1
 8001484:	2300      	moveq	r3, #0
 8001486:	b2db      	uxtb	r3, r3
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000000 	.word	0x20000000
 8001494:	20000214 	.word	0x20000214

08001498 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	4603      	mov	r3, r0
 80014a6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <SD_disk_write+0x1c>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <SD_disk_write+0x20>
 80014b4:	2304      	movs	r3, #4
 80014b6:	e06b      	b.n	8001590 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014b8:	4b37      	ldr	r3, [pc, #220]	@ (8001598 <SD_disk_write+0x100>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SD_disk_write+0x32>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e062      	b.n	8001590 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80014ca:	4b33      	ldr	r3, [pc, #204]	@ (8001598 <SD_disk_write+0x100>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SD_disk_write+0x44>
 80014d8:	2302      	movs	r3, #2
 80014da:	e059      	b.n	8001590 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80014dc:	4b2f      	ldr	r3, [pc, #188]	@ (800159c <SD_disk_write+0x104>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <SD_disk_write+0x56>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	025b      	lsls	r3, r3, #9
 80014ec:	607b      	str	r3, [r7, #4]

	SELECT();
 80014ee:	f7ff fcb9 	bl	8000e64 <SELECT>

	if (count == 1)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d110      	bne.n	800151a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	2058      	movs	r0, #88	@ 0x58
 80014fc:	f7ff fe13 	bl	8001126 <SD_SendCmd>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d13a      	bne.n	800157c <SD_disk_write+0xe4>
 8001506:	21fe      	movs	r1, #254	@ 0xfe
 8001508:	68b8      	ldr	r0, [r7, #8]
 800150a:	f7ff fdc9 	bl	80010a0 <SD_TxDataBlock>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d033      	beq.n	800157c <SD_disk_write+0xe4>
			count = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	e030      	b.n	800157c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800151a:	4b20      	ldr	r3, [pc, #128]	@ (800159c <SD_disk_write+0x104>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001526:	2100      	movs	r1, #0
 8001528:	2077      	movs	r0, #119	@ 0x77
 800152a:	f7ff fdfc 	bl	8001126 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800152e:	6839      	ldr	r1, [r7, #0]
 8001530:	2057      	movs	r0, #87	@ 0x57
 8001532:	f7ff fdf8 	bl	8001126 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	2059      	movs	r0, #89	@ 0x59
 800153a:	f7ff fdf4 	bl	8001126 <SD_SendCmd>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d11b      	bne.n	800157c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001544:	21fc      	movs	r1, #252	@ 0xfc
 8001546:	68b8      	ldr	r0, [r7, #8]
 8001548:	f7ff fdaa 	bl	80010a0 <SD_TxDataBlock>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00a      	beq.n	8001568 <SD_disk_write+0xd0>
				buff += 512;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001558:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	3b01      	subs	r3, #1
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1ee      	bne.n	8001544 <SD_disk_write+0xac>
 8001566:	e000      	b.n	800156a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001568:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800156a:	21fd      	movs	r1, #253	@ 0xfd
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff fd97 	bl	80010a0 <SD_TxDataBlock>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <SD_disk_write+0xe4>
			{
				count = 1;
 8001578:	2301      	movs	r3, #1
 800157a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800157c:	f7ff fc82 	bl	8000e84 <DESELECT>
	SPI_RxByte();
 8001580:	f7ff fcc4 	bl	8000f0c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	bf14      	ite	ne
 800158a:	2301      	movne	r3, #1
 800158c:	2300      	moveq	r3, #0
 800158e:	b2db      	uxtb	r3, r3
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000000 	.word	0x20000000
 800159c:	20000214 	.word	0x20000214

080015a0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b08b      	sub	sp, #44	@ 0x2c
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	603a      	str	r2, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	460b      	mov	r3, r1
 80015ae:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SD_disk_ioctl+0x1e>
 80015ba:	2304      	movs	r3, #4
 80015bc:	e113      	b.n	80017e6 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80015c4:	79bb      	ldrb	r3, [r7, #6]
 80015c6:	2b05      	cmp	r3, #5
 80015c8:	d124      	bne.n	8001614 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d012      	beq.n	80015f8 <SD_disk_ioctl+0x58>
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	dc1a      	bgt.n	800160c <SD_disk_ioctl+0x6c>
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <SD_disk_ioctl+0x40>
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d006      	beq.n	80015ec <SD_disk_ioctl+0x4c>
 80015de:	e015      	b.n	800160c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80015e0:	f7ff fd1a 	bl	8001018 <SD_PowerOff>
			res = RES_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80015ea:	e0fa      	b.n	80017e2 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80015ec:	f7ff fcd2 	bl	8000f94 <SD_PowerOn>
			res = RES_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80015f6:	e0f4      	b.n	80017e2 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	1c5c      	adds	r4, r3, #1
 80015fc:	f7ff fd18 	bl	8001030 <SD_CheckPower>
 8001600:	4603      	mov	r3, r0
 8001602:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001604:	2300      	movs	r3, #0
 8001606:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800160a:	e0ea      	b.n	80017e2 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 800160c:	2304      	movs	r3, #4
 800160e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001612:	e0e6      	b.n	80017e2 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001614:	4b76      	ldr	r3, [pc, #472]	@ (80017f0 <SD_disk_ioctl+0x250>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <SD_disk_ioctl+0x86>
 8001622:	2303      	movs	r3, #3
 8001624:	e0df      	b.n	80017e6 <SD_disk_ioctl+0x246>

		SELECT();
 8001626:	f7ff fc1d 	bl	8000e64 <SELECT>

		switch (ctrl)
 800162a:	79bb      	ldrb	r3, [r7, #6]
 800162c:	2b0d      	cmp	r3, #13
 800162e:	f200 80c9 	bhi.w	80017c4 <SD_disk_ioctl+0x224>
 8001632:	a201      	add	r2, pc, #4	@ (adr r2, 8001638 <SD_disk_ioctl+0x98>)
 8001634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001638:	0800172f 	.word	0x0800172f
 800163c:	08001671 	.word	0x08001671
 8001640:	0800171f 	.word	0x0800171f
 8001644:	080017c5 	.word	0x080017c5
 8001648:	080017c5 	.word	0x080017c5
 800164c:	080017c5 	.word	0x080017c5
 8001650:	080017c5 	.word	0x080017c5
 8001654:	080017c5 	.word	0x080017c5
 8001658:	080017c5 	.word	0x080017c5
 800165c:	080017c5 	.word	0x080017c5
 8001660:	080017c5 	.word	0x080017c5
 8001664:	08001741 	.word	0x08001741
 8001668:	08001765 	.word	0x08001765
 800166c:	08001789 	.word	0x08001789
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001670:	2100      	movs	r1, #0
 8001672:	2049      	movs	r0, #73	@ 0x49
 8001674:	f7ff fd57 	bl	8001126 <SD_SendCmd>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	f040 80a6 	bne.w	80017cc <SD_disk_ioctl+0x22c>
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	2110      	movs	r1, #16
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fcdc 	bl	8001044 <SD_RxDataBlock>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 809c 	beq.w	80017cc <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001694:	7b3b      	ldrb	r3, [r7, #12]
 8001696:	099b      	lsrs	r3, r3, #6
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b01      	cmp	r3, #1
 800169c:	d10d      	bne.n	80016ba <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800169e:	7d7b      	ldrb	r3, [r7, #21]
 80016a0:	461a      	mov	r2, r3
 80016a2:	7d3b      	ldrb	r3, [r7, #20]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	3301      	adds	r3, #1
 80016ae:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80016b0:	8bfb      	ldrh	r3, [r7, #30]
 80016b2:	029a      	lsls	r2, r3, #10
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e02d      	b.n	8001716 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80016ba:	7c7b      	ldrb	r3, [r7, #17]
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	7dbb      	ldrb	r3, [r7, #22]
 80016c4:	09db      	lsrs	r3, r3, #7
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	7d7b      	ldrb	r3, [r7, #21]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f003 0306 	and.w	r3, r3, #6
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4413      	add	r3, r2
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	3302      	adds	r3, #2
 80016de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80016e2:	7d3b      	ldrb	r3, [r7, #20]
 80016e4:	099b      	lsrs	r3, r3, #6
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	7cfb      	ldrb	r3, [r7, #19]
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	7cbb      	ldrb	r3, [r7, #18]
 80016f6:	029b      	lsls	r3, r3, #10
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4413      	add	r3, r2
 8001702:	b29b      	uxth	r3, r3
 8001704:	3301      	adds	r3, #1
 8001706:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001708:	8bfa      	ldrh	r2, [r7, #30]
 800170a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800170e:	3b09      	subs	r3, #9
 8001710:	409a      	lsls	r2, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 800171c:	e056      	b.n	80017cc <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001724:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800172c:	e055      	b.n	80017da <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800172e:	f7ff fc17 	bl	8000f60 <SD_ReadyWait>
 8001732:	4603      	mov	r3, r0
 8001734:	2bff      	cmp	r3, #255	@ 0xff
 8001736:	d14b      	bne.n	80017d0 <SD_disk_ioctl+0x230>
 8001738:	2300      	movs	r3, #0
 800173a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800173e:	e047      	b.n	80017d0 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001740:	2100      	movs	r1, #0
 8001742:	2049      	movs	r0, #73	@ 0x49
 8001744:	f7ff fcef 	bl	8001126 <SD_SendCmd>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d142      	bne.n	80017d4 <SD_disk_ioctl+0x234>
 800174e:	2110      	movs	r1, #16
 8001750:	6a38      	ldr	r0, [r7, #32]
 8001752:	f7ff fc77 	bl	8001044 <SD_RxDataBlock>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d03b      	beq.n	80017d4 <SD_disk_ioctl+0x234>
 800175c:	2300      	movs	r3, #0
 800175e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001762:	e037      	b.n	80017d4 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001764:	2100      	movs	r1, #0
 8001766:	204a      	movs	r0, #74	@ 0x4a
 8001768:	f7ff fcdd 	bl	8001126 <SD_SendCmd>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d132      	bne.n	80017d8 <SD_disk_ioctl+0x238>
 8001772:	2110      	movs	r1, #16
 8001774:	6a38      	ldr	r0, [r7, #32]
 8001776:	f7ff fc65 	bl	8001044 <SD_RxDataBlock>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d02b      	beq.n	80017d8 <SD_disk_ioctl+0x238>
 8001780:	2300      	movs	r3, #0
 8001782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001786:	e027      	b.n	80017d8 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001788:	2100      	movs	r1, #0
 800178a:	207a      	movs	r0, #122	@ 0x7a
 800178c:	f7ff fccb 	bl	8001126 <SD_SendCmd>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d116      	bne.n	80017c4 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001796:	2300      	movs	r3, #0
 8001798:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800179c:	e00b      	b.n	80017b6 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 800179e:	6a3c      	ldr	r4, [r7, #32]
 80017a0:	1c63      	adds	r3, r4, #1
 80017a2:	623b      	str	r3, [r7, #32]
 80017a4:	f7ff fbb2 	bl	8000f0c <SPI_RxByte>
 80017a8:	4603      	mov	r3, r0
 80017aa:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80017ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017b0:	3301      	adds	r3, #1
 80017b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80017b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d9ef      	bls.n	800179e <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 80017c4:	2304      	movs	r3, #4
 80017c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80017ca:	e006      	b.n	80017da <SD_disk_ioctl+0x23a>
			break;
 80017cc:	bf00      	nop
 80017ce:	e004      	b.n	80017da <SD_disk_ioctl+0x23a>
			break;
 80017d0:	bf00      	nop
 80017d2:	e002      	b.n	80017da <SD_disk_ioctl+0x23a>
			break;
 80017d4:	bf00      	nop
 80017d6:	e000      	b.n	80017da <SD_disk_ioctl+0x23a>
			break;
 80017d8:	bf00      	nop
		}

		DESELECT();
 80017da:	f7ff fb53 	bl	8000e84 <DESELECT>
		SPI_RxByte();
 80017de:	f7ff fb95 	bl	8000f0c <SPI_RxByte>
	}

	return res;
 80017e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	372c      	adds	r7, #44	@ 0x2c
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000000 	.word	0x20000000

080017f4 <get_time>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_time(){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
	rtc_get_time(&hour, &min, &sec);
 80017f8:	4a06      	ldr	r2, [pc, #24]	@ (8001814 <get_time+0x20>)
 80017fa:	4907      	ldr	r1, [pc, #28]	@ (8001818 <get_time+0x24>)
 80017fc:	4807      	ldr	r0, [pc, #28]	@ (800181c <get_time+0x28>)
 80017fe:	f7ff fab3 	bl	8000d68 <rtc_get_time>
	rtc_get_date(&week_day, &day, &month, &year);
 8001802:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <get_time+0x2c>)
 8001804:	4a07      	ldr	r2, [pc, #28]	@ (8001824 <get_time+0x30>)
 8001806:	4908      	ldr	r1, [pc, #32]	@ (8001828 <get_time+0x34>)
 8001808:	4808      	ldr	r0, [pc, #32]	@ (800182c <get_time+0x38>)
 800180a:	f7ff fae9 	bl	8000de0 <rtc_get_date>
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20002570 	.word	0x20002570
 8001818:	20002571 	.word	0x20002571
 800181c:	20002572 	.word	0x20002572
 8001820:	20002576 	.word	0x20002576
 8001824:	20002575 	.word	0x20002575
 8001828:	20002574 	.word	0x20002574
 800182c:	20002573 	.word	0x20002573

08001830 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 10; i++) {
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	e00a      	b.n	8001854 <HAL_ADC_ConvCpltCallback+0x24>
		adc[i] = buf[i];
 800183e:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <HAL_ADC_ConvCpltCallback+0x38>)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001846:	4909      	ldr	r1, [pc, #36]	@ (800186c <HAL_ADC_ConvCpltCallback+0x3c>)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3301      	adds	r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b09      	cmp	r3, #9
 8001858:	ddf1      	ble.n	800183e <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 800185a:	bf00      	nop
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	200024f8 	.word	0x200024f8
 800186c:	20002520 	.word	0x20002520

08001870 <save_data_to_csv>:

void save_data_to_csv()
{
 8001870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001874:	b0ab      	sub	sp, #172	@ 0xac
 8001876:	af18      	add	r7, sp, #96	@ 0x60
	get_time();
 8001878:	f7ff ffbc 	bl	80017f4 <get_time>

    // Mount the filesystem
    f_mount(&fs, "", 0);
 800187c:	2200      	movs	r2, #0
 800187e:	4956      	ldr	r1, [pc, #344]	@ (80019d8 <save_data_to_csv+0x168>)
 8001880:	4856      	ldr	r0, [pc, #344]	@ (80019dc <save_data_to_csv+0x16c>)
 8001882:	f008 f8f5 	bl	8009a70 <f_mount>

    // Open the CSV file
    if (f_open(&fil, "data.csv", FA_OPEN_ALWAYS | FA_WRITE | FA_READ) == FR_OK)
 8001886:	2213      	movs	r2, #19
 8001888:	4955      	ldr	r1, [pc, #340]	@ (80019e0 <save_data_to_csv+0x170>)
 800188a:	4856      	ldr	r0, [pc, #344]	@ (80019e4 <save_data_to_csv+0x174>)
 800188c:	f008 f93a 	bl	8009b04 <f_open>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	f040 8096 	bne.w	80019c4 <save_data_to_csv+0x154>
    {
        // Move the file pointer to the end
        f_lseek(&fil, fil.fsize);
 8001898:	4b52      	ldr	r3, [pc, #328]	@ (80019e4 <save_data_to_csv+0x174>)
 800189a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4619      	mov	r1, r3
 80018a2:	4850      	ldr	r0, [pc, #320]	@ (80019e4 <save_data_to_csv+0x174>)
 80018a4:	f008 ff74 	bl	800a790 <f_lseek>

        // Format the battery values into a CSV format with 2 decimal places
        sprintf(buffer, "%02d-%02d-%02d %02d:%02d:%02d,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n", year + 2000, month, day, hour, min, sec, bat1, bat2, bat3, bat4, bat5, bat6, bat7, bat8, bat9, bat10);
 80018a8:	4b4f      	ldr	r3, [pc, #316]	@ (80019e8 <save_data_to_csv+0x178>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	f503 66fa 	add.w	r6, r3, #2000	@ 0x7d0
 80018b0:	4b4e      	ldr	r3, [pc, #312]	@ (80019ec <save_data_to_csv+0x17c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80018b6:	4b4e      	ldr	r3, [pc, #312]	@ (80019f0 <save_data_to_csv+0x180>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80018bc:	4b4d      	ldr	r3, [pc, #308]	@ (80019f4 <save_data_to_csv+0x184>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018c2:	4b4d      	ldr	r3, [pc, #308]	@ (80019f8 <save_data_to_csv+0x188>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018c8:	4b4c      	ldr	r3, [pc, #304]	@ (80019fc <save_data_to_csv+0x18c>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80018ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001a00 <save_data_to_csv+0x190>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fda8 	bl	8000428 <__aeabi_f2d>
 80018d8:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 80018dc:	4b49      	ldr	r3, [pc, #292]	@ (8001a04 <save_data_to_csv+0x194>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fda1 	bl	8000428 <__aeabi_f2d>
 80018e6:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80018ea:	4b47      	ldr	r3, [pc, #284]	@ (8001a08 <save_data_to_csv+0x198>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fd9a 	bl	8000428 <__aeabi_f2d>
 80018f4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80018f8:	4b44      	ldr	r3, [pc, #272]	@ (8001a0c <save_data_to_csv+0x19c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fd93 	bl	8000428 <__aeabi_f2d>
 8001902:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001906:	4b42      	ldr	r3, [pc, #264]	@ (8001a10 <save_data_to_csv+0x1a0>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fd8c 	bl	8000428 <__aeabi_f2d>
 8001910:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001914:	4b3f      	ldr	r3, [pc, #252]	@ (8001a14 <save_data_to_csv+0x1a4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fd85 	bl	8000428 <__aeabi_f2d>
 800191e:	e9c7 0100 	strd	r0, r1, [r7]
 8001922:	4b3d      	ldr	r3, [pc, #244]	@ (8001a18 <save_data_to_csv+0x1a8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fd7e 	bl	8000428 <__aeabi_f2d>
 800192c:	4682      	mov	sl, r0
 800192e:	468b      	mov	fp, r1
 8001930:	4b3a      	ldr	r3, [pc, #232]	@ (8001a1c <save_data_to_csv+0x1ac>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fd77 	bl	8000428 <__aeabi_f2d>
 800193a:	4680      	mov	r8, r0
 800193c:	4689      	mov	r9, r1
 800193e:	4b38      	ldr	r3, [pc, #224]	@ (8001a20 <save_data_to_csv+0x1b0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fd70 	bl	8000428 <__aeabi_f2d>
 8001948:	4604      	mov	r4, r0
 800194a:	460d      	mov	r5, r1
 800194c:	4b35      	ldr	r3, [pc, #212]	@ (8001a24 <save_data_to_csv+0x1b4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fd69 	bl	8000428 <__aeabi_f2d>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 800195e:	e9cd 4514 	strd	r4, r5, [sp, #80]	@ 0x50
 8001962:	e9cd 8912 	strd	r8, r9, [sp, #72]	@ 0x48
 8001966:	e9cd ab10 	strd	sl, fp, [sp, #64]	@ 0x40
 800196a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800196e:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8001972:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001976:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800197a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800197e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001986:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800198a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800198e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001992:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001996:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800199a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800199c:	9203      	str	r2, [sp, #12]
 800199e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80019a0:	9202      	str	r2, [sp, #8]
 80019a2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019a4:	9201      	str	r2, [sp, #4]
 80019a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80019a8:	9200      	str	r2, [sp, #0]
 80019aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019ac:	4632      	mov	r2, r6
 80019ae:	491e      	ldr	r1, [pc, #120]	@ (8001a28 <save_data_to_csv+0x1b8>)
 80019b0:	481e      	ldr	r0, [pc, #120]	@ (8001a2c <save_data_to_csv+0x1bc>)
 80019b2:	f00a f835 	bl	800ba20 <siprintf>


        // Write the formatted string to the file
        f_puts(buffer, &fil);
 80019b6:	490b      	ldr	r1, [pc, #44]	@ (80019e4 <save_data_to_csv+0x174>)
 80019b8:	481c      	ldr	r0, [pc, #112]	@ (8001a2c <save_data_to_csv+0x1bc>)
 80019ba:	f009 fa17 	bl	800adec <f_puts>

        // Close the file
        f_close(&fil);
 80019be:	4809      	ldr	r0, [pc, #36]	@ (80019e4 <save_data_to_csv+0x174>)
 80019c0:	f008 febb 	bl	800a73a <f_close>
    else{
//    	Error_Handler();
    }

    // Unmount the filesystem
    f_mount(NULL, "", 1);
 80019c4:	2201      	movs	r2, #1
 80019c6:	4904      	ldr	r1, [pc, #16]	@ (80019d8 <save_data_to_csv+0x168>)
 80019c8:	2000      	movs	r0, #0
 80019ca:	f008 f851 	bl	8009a70 <f_mount>
}
 80019ce:	bf00      	nop
 80019d0:	374c      	adds	r7, #76	@ 0x4c
 80019d2:	46bd      	mov	sp, r7
 80019d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019d8:	0800dcc0 	.word	0x0800dcc0
 80019dc:	20000218 	.word	0x20000218
 80019e0:	0800dcc4 	.word	0x0800dcc4
 80019e4:	20001248 	.word	0x20001248
 80019e8:	20002576 	.word	0x20002576
 80019ec:	20002575 	.word	0x20002575
 80019f0:	20002574 	.word	0x20002574
 80019f4:	20002572 	.word	0x20002572
 80019f8:	20002571 	.word	0x20002571
 80019fc:	20002570 	.word	0x20002570
 8001a00:	20002548 	.word	0x20002548
 8001a04:	2000254c 	.word	0x2000254c
 8001a08:	20002550 	.word	0x20002550
 8001a0c:	20002554 	.word	0x20002554
 8001a10:	20002558 	.word	0x20002558
 8001a14:	2000255c 	.word	0x2000255c
 8001a18:	20002560 	.word	0x20002560
 8001a1c:	20002564 	.word	0x20002564
 8001a20:	20002568 	.word	0x20002568
 8001a24:	2000256c 	.word	0x2000256c
 8001a28:	0800dcd0 	.word	0x0800dcd0
 8001a2c:	20002274 	.word	0x20002274

08001a30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a4d      	ldr	r2, [pc, #308]	@ (8001b74 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d159      	bne.n	8001af6 <HAL_TIM_PeriodElapsedCallback+0xc6>
		HAL_ADC_Start_DMA(&hadc1, buf, 12);
 8001a42:	220c      	movs	r2, #12
 8001a44:	494c      	ldr	r1, [pc, #304]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001a46:	484d      	ldr	r0, [pc, #308]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001a48:	f001 faf0 	bl	800302c <HAL_ADC_Start_DMA>

		bat1 = adc[0];		//A5
 8001a4c:	4b4c      	ldr	r3, [pc, #304]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff f8cf 	bl	8000bf4 <__aeabi_ui2f>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4a4a      	ldr	r2, [pc, #296]	@ (8001b84 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001a5a:	6013      	str	r3, [r2, #0]
		bat2 = adc[1];		//A6
 8001a5c:	4b48      	ldr	r3, [pc, #288]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff f8c7 	bl	8000bf4 <__aeabi_ui2f>
 8001a66:	4603      	mov	r3, r0
 8001a68:	4a47      	ldr	r2, [pc, #284]	@ (8001b88 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001a6a:	6013      	str	r3, [r2, #0]
		bat3 = adc[2];		//A7
 8001a6c:	4b44      	ldr	r3, [pc, #272]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff f8bf 	bl	8000bf4 <__aeabi_ui2f>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4a44      	ldr	r2, [pc, #272]	@ (8001b8c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001a7a:	6013      	str	r3, [r2, #0]
		bat4 = adc[3];		//B0
 8001a7c:	4b40      	ldr	r3, [pc, #256]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff f8b7 	bl	8000bf4 <__aeabi_ui2f>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4a41      	ldr	r2, [pc, #260]	@ (8001b90 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001a8a:	6013      	str	r3, [r2, #0]
		bat5 = adc[4];		//B1
 8001a8c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff f8af 	bl	8000bf4 <__aeabi_ui2f>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4a3e      	ldr	r2, [pc, #248]	@ (8001b94 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001a9a:	6013      	str	r3, [r2, #0]
		bat6 = adc[5];		//A0
 8001a9c:	4b38      	ldr	r3, [pc, #224]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff f8a7 	bl	8000bf4 <__aeabi_ui2f>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4a3b      	ldr	r2, [pc, #236]	@ (8001b98 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001aaa:	6013      	str	r3, [r2, #0]
		bat7 = adc[6];		//A1
 8001aac:	4b34      	ldr	r3, [pc, #208]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff f89f 	bl	8000bf4 <__aeabi_ui2f>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a38      	ldr	r2, [pc, #224]	@ (8001b9c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001aba:	6013      	str	r3, [r2, #0]
		bat8 = adc[7];		//A2
 8001abc:	4b30      	ldr	r3, [pc, #192]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff f897 	bl	8000bf4 <__aeabi_ui2f>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4a35      	ldr	r2, [pc, #212]	@ (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001aca:	6013      	str	r3, [r2, #0]
		bat9 = adc[8];		//A3
 8001acc:	4b2c      	ldr	r3, [pc, #176]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff f88f 	bl	8000bf4 <__aeabi_ui2f>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	4a32      	ldr	r2, [pc, #200]	@ (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001ada:	6013      	str	r3, [r2, #0]
		bat10 = adc[9];		//A4
 8001adc:	4b28      	ldr	r3, [pc, #160]	@ (8001b80 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff f887 	bl	8000bf4 <__aeabi_ui2f>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4a2f      	ldr	r2, [pc, #188]	@ (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001aea:	6013      	str	r3, [r2, #0]

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001aec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001af0:	482e      	ldr	r0, [pc, #184]	@ (8001bac <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001af2:	f002 faed 	bl	80040d0 <HAL_GPIO_TogglePin>

	}

	if(htim->Instance == TIM2){
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001afe:	d135      	bne.n	8001b6c <HAL_TIM_PeriodElapsedCallback+0x13c>
		get_time();
 8001b00:	f7ff fe78 	bl	80017f4 <get_time>

		SSD1306_Clear();
 8001b04:	f000 fd87 	bl	8002616 <SSD1306_Clear>
		SSD1306_GotoXY(0, 0);
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f000 fcca 	bl	80024a4 <SSD1306_GotoXY>

		sprintf(buffer, "%02d/%02d/%02d", day, month, year + 2000);
 8001b10:	4b27      	ldr	r3, [pc, #156]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b27      	ldr	r3, [pc, #156]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4b26      	ldr	r3, [pc, #152]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	460b      	mov	r3, r1
 8001b28:	4924      	ldr	r1, [pc, #144]	@ (8001bbc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001b2a:	4825      	ldr	r0, [pc, #148]	@ (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001b2c:	f009 ff78 	bl	800ba20 <siprintf>
		SSD1306_Puts(buffer, &Font_11x18, 1);
 8001b30:	2201      	movs	r2, #1
 8001b32:	4924      	ldr	r1, [pc, #144]	@ (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001b34:	4822      	ldr	r0, [pc, #136]	@ (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001b36:	f000 fd49 	bl	80025cc <SSD1306_Puts>

		SSD1306_GotoXY(0, 30);
 8001b3a:	211e      	movs	r1, #30
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f000 fcb1 	bl	80024a4 <SSD1306_GotoXY>

		sprintf(buffer, "%02d:%02d:%02d", hour, min, sec);
 8001b42:	4b21      	ldr	r3, [pc, #132]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b20      	ldr	r3, [pc, #128]	@ (8001bcc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4b20      	ldr	r3, [pc, #128]	@ (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	460b      	mov	r3, r1
 8001b56:	491f      	ldr	r1, [pc, #124]	@ (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001b58:	4819      	ldr	r0, [pc, #100]	@ (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001b5a:	f009 ff61 	bl	800ba20 <siprintf>
		SSD1306_Puts(buffer, &Font_11x18, 1);
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4918      	ldr	r1, [pc, #96]	@ (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001b62:	4817      	ldr	r0, [pc, #92]	@ (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001b64:	f000 fd32 	bl	80025cc <SSD1306_Puts>

		SSD1306_UpdateScreen();
 8001b68:	f000 fbf8 	bl	800235c <SSD1306_UpdateScreen>
	}
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40000400 	.word	0x40000400
 8001b78:	200024f8 	.word	0x200024f8
 8001b7c:	200022f4 	.word	0x200022f4
 8001b80:	20002520 	.word	0x20002520
 8001b84:	20002548 	.word	0x20002548
 8001b88:	2000254c 	.word	0x2000254c
 8001b8c:	20002550 	.word	0x20002550
 8001b90:	20002554 	.word	0x20002554
 8001b94:	20002558 	.word	0x20002558
 8001b98:	2000255c 	.word	0x2000255c
 8001b9c:	20002560 	.word	0x20002560
 8001ba0:	20002564 	.word	0x20002564
 8001ba4:	20002568 	.word	0x20002568
 8001ba8:	2000256c 	.word	0x2000256c
 8001bac:	40011000 	.word	0x40011000
 8001bb0:	20002574 	.word	0x20002574
 8001bb4:	20002575 	.word	0x20002575
 8001bb8:	20002576 	.word	0x20002576
 8001bbc:	0800dd24 	.word	0x0800dd24
 8001bc0:	20002274 	.word	0x20002274
 8001bc4:	20000004 	.word	0x20000004
 8001bc8:	20002572 	.word	0x20002572
 8001bcc:	20002571 	.word	0x20002571
 8001bd0:	20002570 	.word	0x20002570
 8001bd4:	0800dd34 	.word	0x0800dd34

08001bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bdc:	f001 f8c8 	bl	8002d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001be0:	f000 f82c 	bl	8001c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be4:	f000 fa84 	bl	80020f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001be8:	f000 fa64 	bl	80020b4 <MX_DMA_Init>
  MX_TIM3_Init();
 8001bec:	f000 fa14 	bl	8002018 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001bf0:	f000 f874 	bl	8001cdc <MX_ADC1_Init>
  MX_SPI2_Init();
 8001bf4:	f000 f98c 	bl	8001f10 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001bf8:	f005 fa66 	bl	80070c8 <MX_FATFS_Init>
  MX_TIM2_Init();
 8001bfc:	f000 f9be 	bl	8001f7c <MX_TIM2_Init>
  MX_I2C1_Init();
 8001c00:	f000 f92a 	bl	8001e58 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001c04:	f000 f956 	bl	8001eb4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001c08:	480a      	ldr	r0, [pc, #40]	@ (8001c34 <main+0x5c>)
 8001c0a:	f004 febb 	bl	8006984 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001c0e:	480a      	ldr	r0, [pc, #40]	@ (8001c38 <main+0x60>)
 8001c10:	f004 feb8 	bl	8006984 <HAL_TIM_Base_Start_IT>

  rtc_init(3, 1, 1);
 8001c14:	2201      	movs	r2, #1
 8001c16:	2101      	movs	r1, #1
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f7ff f881 	bl	8000d20 <rtc_init>
  SSD1306_Init();
 8001c1e:	f000 fad9 	bl	80021d4 <SSD1306_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  save_data_to_csv();
 8001c22:	f7ff fe25 	bl	8001870 <save_data_to_csv>
	  HAL_Delay(1000);
 8001c26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c2a:	f001 f903 	bl	8002e34 <HAL_Delay>
	  save_data_to_csv();
 8001c2e:	bf00      	nop
 8001c30:	e7f7      	b.n	8001c22 <main+0x4a>
 8001c32:	bf00      	nop
 8001c34:	200024b0 	.word	0x200024b0
 8001c38:	20002468 	.word	0x20002468

08001c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b094      	sub	sp, #80	@ 0x50
 8001c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c46:	2228      	movs	r2, #40	@ 0x28
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f009 ff4b 	bl	800bae6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c70:	2301      	movs	r3, #1
 8001c72:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c74:	2310      	movs	r3, #16
 8001c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 fd53 	bl	800572c <HAL_RCC_OscConfig>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001c8c:	f000 fa92 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c90:	230f      	movs	r3, #15
 8001c92:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 ffc0 	bl	8005c30 <HAL_RCC_ClockConfig>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001cb6:	f000 fa7d 	bl	80021b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f004 f92d 	bl	8005f24 <HAL_RCCEx_PeriphCLKConfig>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001cd0:	f000 fa70 	bl	80021b4 <Error_Handler>
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	3750      	adds	r7, #80	@ 0x50
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001cec:	4b58      	ldr	r3, [pc, #352]	@ (8001e50 <MX_ADC1_Init+0x174>)
 8001cee:	4a59      	ldr	r2, [pc, #356]	@ (8001e54 <MX_ADC1_Init+0x178>)
 8001cf0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001cf2:	4b57      	ldr	r3, [pc, #348]	@ (8001e50 <MX_ADC1_Init+0x174>)
 8001cf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cf8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cfa:	4b55      	ldr	r3, [pc, #340]	@ (8001e50 <MX_ADC1_Init+0x174>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d00:	4b53      	ldr	r3, [pc, #332]	@ (8001e50 <MX_ADC1_Init+0x174>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d06:	4b52      	ldr	r3, [pc, #328]	@ (8001e50 <MX_ADC1_Init+0x174>)
 8001d08:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001d0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d0e:	4b50      	ldr	r3, [pc, #320]	@ (8001e50 <MX_ADC1_Init+0x174>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 10;
 8001d14:	4b4e      	ldr	r3, [pc, #312]	@ (8001e50 <MX_ADC1_Init+0x174>)
 8001d16:	220a      	movs	r2, #10
 8001d18:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d1a:	484d      	ldr	r0, [pc, #308]	@ (8001e50 <MX_ADC1_Init+0x174>)
 8001d1c:	f001 f8ae 	bl	8002e7c <HAL_ADC_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001d26:	f000 fa45 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4845      	ldr	r0, [pc, #276]	@ (8001e50 <MX_ADC1_Init+0x174>)
 8001d3c:	f001 fb2e 	bl	800339c <HAL_ADC_ConfigChannel>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001d46:	f000 fa35 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	4619      	mov	r1, r3
 8001d56:	483e      	ldr	r0, [pc, #248]	@ (8001e50 <MX_ADC1_Init+0x174>)
 8001d58:	f001 fb20 	bl	800339c <HAL_ADC_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001d62:	f000 fa27 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d66:	2302      	movs	r3, #2
 8001d68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	4619      	mov	r1, r3
 8001d72:	4837      	ldr	r0, [pc, #220]	@ (8001e50 <MX_ADC1_Init+0x174>)
 8001d74:	f001 fb12 	bl	800339c <HAL_ADC_ConfigChannel>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001d7e:	f000 fa19 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001d82:	2303      	movs	r3, #3
 8001d84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001d86:	2304      	movs	r3, #4
 8001d88:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4830      	ldr	r0, [pc, #192]	@ (8001e50 <MX_ADC1_Init+0x174>)
 8001d90:	f001 fb04 	bl	800339c <HAL_ADC_ConfigChannel>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001d9a:	f000 fa0b 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d9e:	2304      	movs	r3, #4
 8001da0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001da2:	2305      	movs	r3, #5
 8001da4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4829      	ldr	r0, [pc, #164]	@ (8001e50 <MX_ADC1_Init+0x174>)
 8001dac:	f001 faf6 	bl	800339c <HAL_ADC_ConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001db6:	f000 f9fd 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001dba:	2305      	movs	r3, #5
 8001dbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001dbe:	2306      	movs	r3, #6
 8001dc0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4822      	ldr	r0, [pc, #136]	@ (8001e50 <MX_ADC1_Init+0x174>)
 8001dc8:	f001 fae8 	bl	800339c <HAL_ADC_ConfigChannel>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001dd2:	f000 f9ef 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001dda:	2307      	movs	r3, #7
 8001ddc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	4619      	mov	r1, r3
 8001de2:	481b      	ldr	r0, [pc, #108]	@ (8001e50 <MX_ADC1_Init+0x174>)
 8001de4:	f001 fada 	bl	800339c <HAL_ADC_ConfigChannel>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001dee:	f000 f9e1 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001df2:	2307      	movs	r3, #7
 8001df4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001df6:	2308      	movs	r3, #8
 8001df8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4814      	ldr	r0, [pc, #80]	@ (8001e50 <MX_ADC1_Init+0x174>)
 8001e00:	f001 facc 	bl	800339c <HAL_ADC_ConfigChannel>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001e0a:	f000 f9d3 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001e0e:	2308      	movs	r3, #8
 8001e10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001e12:	2309      	movs	r3, #9
 8001e14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	4619      	mov	r1, r3
 8001e1a:	480d      	ldr	r0, [pc, #52]	@ (8001e50 <MX_ADC1_Init+0x174>)
 8001e1c:	f001 fabe 	bl	800339c <HAL_ADC_ConfigChannel>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8001e26:	f000 f9c5 	bl	80021b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001e2a:	2309      	movs	r3, #9
 8001e2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001e2e:	230a      	movs	r3, #10
 8001e30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	4619      	mov	r1, r3
 8001e36:	4806      	ldr	r0, [pc, #24]	@ (8001e50 <MX_ADC1_Init+0x174>)
 8001e38:	f001 fab0 	bl	800339c <HAL_ADC_ConfigChannel>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 8001e42:	f000 f9b7 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200022f4 	.word	0x200022f4
 8001e54:	40012400 	.word	0x40012400

08001e58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e5e:	4a13      	ldr	r2, [pc, #76]	@ (8001eac <MX_I2C1_Init+0x54>)
 8001e60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e62:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e64:	4a12      	ldr	r2, [pc, #72]	@ (8001eb0 <MX_I2C1_Init+0x58>)
 8001e66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e82:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e88:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e94:	4804      	ldr	r0, [pc, #16]	@ (8001ea8 <MX_I2C1_Init+0x50>)
 8001e96:	f002 f935 	bl	8004104 <HAL_I2C_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ea0:	f000 f988 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20002368 	.word	0x20002368
 8001eac:	40005400 	.word	0x40005400
 8001eb0:	00061a80 	.word	0x00061a80

08001eb4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001eba:	4a13      	ldr	r2, [pc, #76]	@ (8001f08 <MX_I2C2_Init+0x54>)
 8001ebc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001ebe:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001ec0:	4a12      	ldr	r2, [pc, #72]	@ (8001f0c <MX_I2C2_Init+0x58>)
 8001ec2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001ed2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ed6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001ede:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ee4:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eea:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ef0:	4804      	ldr	r0, [pc, #16]	@ (8001f04 <MX_I2C2_Init+0x50>)
 8001ef2:	f002 f907 	bl	8004104 <HAL_I2C_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001efc:	f000 f95a 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	200023bc 	.word	0x200023bc
 8001f08:	40005800 	.word	0x40005800
 8001f0c:	00061a80 	.word	0x00061a80

08001f10 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f14:	4b17      	ldr	r3, [pc, #92]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f16:	4a18      	ldr	r2, [pc, #96]	@ (8001f78 <MX_SPI2_Init+0x68>)
 8001f18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f1a:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f22:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f28:	4b12      	ldr	r3, [pc, #72]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f40:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f42:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f44:	2210      	movs	r2, #16
 8001f46:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f4e:	4b09      	ldr	r3, [pc, #36]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f54:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f5c:	220a      	movs	r2, #10
 8001f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f60:	4804      	ldr	r0, [pc, #16]	@ (8001f74 <MX_SPI2_Init+0x64>)
 8001f62:	f004 f895 	bl	8006090 <HAL_SPI_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f6c:	f000 f922 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20002410 	.word	0x20002410
 8001f78:	40003800 	.word	0x40003800

08001f7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f82:	f107 0308 	add.w	r3, r7, #8
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f90:	463b      	mov	r3, r7
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f98:	4b1e      	ldr	r3, [pc, #120]	@ (8002014 <MX_TIM2_Init+0x98>)
 8001f9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8002014 <MX_TIM2_Init+0x98>)
 8001fa2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001fa6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8002014 <MX_TIM2_Init+0x98>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8001fae:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <MX_TIM2_Init+0x98>)
 8001fb0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001fb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb6:	4b17      	ldr	r3, [pc, #92]	@ (8002014 <MX_TIM2_Init+0x98>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fbc:	4b15      	ldr	r3, [pc, #84]	@ (8002014 <MX_TIM2_Init+0x98>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fc2:	4814      	ldr	r0, [pc, #80]	@ (8002014 <MX_TIM2_Init+0x98>)
 8001fc4:	f004 fc8f 	bl	80068e6 <HAL_TIM_Base_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001fce:	f000 f8f1 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fd8:	f107 0308 	add.w	r3, r7, #8
 8001fdc:	4619      	mov	r1, r3
 8001fde:	480d      	ldr	r0, [pc, #52]	@ (8002014 <MX_TIM2_Init+0x98>)
 8001fe0:	f004 fe12 	bl	8006c08 <HAL_TIM_ConfigClockSource>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001fea:	f000 f8e3 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4806      	ldr	r0, [pc, #24]	@ (8002014 <MX_TIM2_Init+0x98>)
 8001ffc:	f004 fff4 	bl	8006fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002006:	f000 f8d5 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20002468 	.word	0x20002468

08002018 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201e:	f107 0308 	add.w	r3, r7, #8
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800202c:	463b      	mov	r3, r7
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002034:	4b1d      	ldr	r3, [pc, #116]	@ (80020ac <MX_TIM3_Init+0x94>)
 8002036:	4a1e      	ldr	r2, [pc, #120]	@ (80020b0 <MX_TIM3_Init+0x98>)
 8002038:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 800203a:	4b1c      	ldr	r3, [pc, #112]	@ (80020ac <MX_TIM3_Init+0x94>)
 800203c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002040:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002042:	4b1a      	ldr	r3, [pc, #104]	@ (80020ac <MX_TIM3_Init+0x94>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002048:	4b18      	ldr	r3, [pc, #96]	@ (80020ac <MX_TIM3_Init+0x94>)
 800204a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800204e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002050:	4b16      	ldr	r3, [pc, #88]	@ (80020ac <MX_TIM3_Init+0x94>)
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002056:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <MX_TIM3_Init+0x94>)
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800205c:	4813      	ldr	r0, [pc, #76]	@ (80020ac <MX_TIM3_Init+0x94>)
 800205e:	f004 fc42 	bl	80068e6 <HAL_TIM_Base_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002068:	f000 f8a4 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800206c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002070:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002072:	f107 0308 	add.w	r3, r7, #8
 8002076:	4619      	mov	r1, r3
 8002078:	480c      	ldr	r0, [pc, #48]	@ (80020ac <MX_TIM3_Init+0x94>)
 800207a:	f004 fdc5 	bl	8006c08 <HAL_TIM_ConfigClockSource>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002084:	f000 f896 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002088:	2300      	movs	r3, #0
 800208a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002090:	463b      	mov	r3, r7
 8002092:	4619      	mov	r1, r3
 8002094:	4805      	ldr	r0, [pc, #20]	@ (80020ac <MX_TIM3_Init+0x94>)
 8002096:	f004 ffa7 	bl	8006fe8 <HAL_TIMEx_MasterConfigSynchronization>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80020a0:	f000 f888 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020a4:	bf00      	nop
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200024b0 	.word	0x200024b0
 80020b0:	40000400 	.word	0x40000400

080020b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020ba:	4b0c      	ldr	r3, [pc, #48]	@ (80020ec <MX_DMA_Init+0x38>)
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	4a0b      	ldr	r2, [pc, #44]	@ (80020ec <MX_DMA_Init+0x38>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6153      	str	r3, [r2, #20]
 80020c6:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <MX_DMA_Init+0x38>)
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2100      	movs	r1, #0
 80020d6:	200b      	movs	r0, #11
 80020d8:	f001 fc39 	bl	800394e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80020dc:	200b      	movs	r0, #11
 80020de:	f001 fc52 	bl	8003986 <HAL_NVIC_EnableIRQ>

}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000

080020f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f6:	f107 0310 	add.w	r3, r7, #16
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002104:	4b28      	ldr	r3, [pc, #160]	@ (80021a8 <MX_GPIO_Init+0xb8>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a27      	ldr	r2, [pc, #156]	@ (80021a8 <MX_GPIO_Init+0xb8>)
 800210a:	f043 0310 	orr.w	r3, r3, #16
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b25      	ldr	r3, [pc, #148]	@ (80021a8 <MX_GPIO_Init+0xb8>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800211c:	4b22      	ldr	r3, [pc, #136]	@ (80021a8 <MX_GPIO_Init+0xb8>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a21      	ldr	r2, [pc, #132]	@ (80021a8 <MX_GPIO_Init+0xb8>)
 8002122:	f043 0304 	orr.w	r3, r3, #4
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	4b1f      	ldr	r3, [pc, #124]	@ (80021a8 <MX_GPIO_Init+0xb8>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002134:	4b1c      	ldr	r3, [pc, #112]	@ (80021a8 <MX_GPIO_Init+0xb8>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	4a1b      	ldr	r2, [pc, #108]	@ (80021a8 <MX_GPIO_Init+0xb8>)
 800213a:	f043 0308 	orr.w	r3, r3, #8
 800213e:	6193      	str	r3, [r2, #24]
 8002140:	4b19      	ldr	r3, [pc, #100]	@ (80021a8 <MX_GPIO_Init+0xb8>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800214c:	2200      	movs	r2, #0
 800214e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002152:	4816      	ldr	r0, [pc, #88]	@ (80021ac <MX_GPIO_Init+0xbc>)
 8002154:	f001 ffa4 	bl	80040a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002158:	2200      	movs	r2, #0
 800215a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800215e:	4814      	ldr	r0, [pc, #80]	@ (80021b0 <MX_GPIO_Init+0xc0>)
 8002160:	f001 ff9e 	bl	80040a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002164:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002168:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216a:	2301      	movs	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2302      	movs	r3, #2
 8002174:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	4619      	mov	r1, r3
 800217c:	480b      	ldr	r0, [pc, #44]	@ (80021ac <MX_GPIO_Init+0xbc>)
 800217e:	f001 fe0b 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002182:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002186:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002188:	2301      	movs	r3, #1
 800218a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2302      	movs	r3, #2
 8002192:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002194:	f107 0310 	add.w	r3, r7, #16
 8002198:	4619      	mov	r1, r3
 800219a:	4805      	ldr	r0, [pc, #20]	@ (80021b0 <MX_GPIO_Init+0xc0>)
 800219c:	f001 fdfc 	bl	8003d98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021a0:	bf00      	nop
 80021a2:	3720      	adds	r7, #32
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40011000 	.word	0x40011000
 80021b0:	40010800 	.word	0x40010800

080021b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80021bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021c0:	4803      	ldr	r0, [pc, #12]	@ (80021d0 <Error_Handler+0x1c>)
 80021c2:	f001 ff85 	bl	80040d0 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80021c6:	2064      	movs	r0, #100	@ 0x64
 80021c8:	f000 fe34 	bl	8002e34 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80021cc:	bf00      	nop
 80021ce:	e7f5      	b.n	80021bc <Error_Handler+0x8>
 80021d0:	40011000 	.word	0x40011000

080021d4 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80021da:	f000 fa25 	bl	8002628 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80021de:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80021e2:	2201      	movs	r2, #1
 80021e4:	2178      	movs	r1, #120	@ 0x78
 80021e6:	485b      	ldr	r0, [pc, #364]	@ (8002354 <SSD1306_Init+0x180>)
 80021e8:	f002 fd3c 	bl	8004c64 <HAL_I2C_IsDeviceReady>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	e0a9      	b.n	800234a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80021f6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80021fa:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021fc:	e002      	b.n	8002204 <SSD1306_Init+0x30>
		p--;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3b01      	subs	r3, #1
 8002202:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f9      	bne.n	80021fe <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800220a:	22ae      	movs	r2, #174	@ 0xae
 800220c:	2100      	movs	r1, #0
 800220e:	2078      	movs	r0, #120	@ 0x78
 8002210:	f000 fa84 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002214:	2220      	movs	r2, #32
 8002216:	2100      	movs	r1, #0
 8002218:	2078      	movs	r0, #120	@ 0x78
 800221a:	f000 fa7f 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800221e:	2210      	movs	r2, #16
 8002220:	2100      	movs	r1, #0
 8002222:	2078      	movs	r0, #120	@ 0x78
 8002224:	f000 fa7a 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002228:	22b0      	movs	r2, #176	@ 0xb0
 800222a:	2100      	movs	r1, #0
 800222c:	2078      	movs	r0, #120	@ 0x78
 800222e:	f000 fa75 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002232:	22c8      	movs	r2, #200	@ 0xc8
 8002234:	2100      	movs	r1, #0
 8002236:	2078      	movs	r0, #120	@ 0x78
 8002238:	f000 fa70 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800223c:	2200      	movs	r2, #0
 800223e:	2100      	movs	r1, #0
 8002240:	2078      	movs	r0, #120	@ 0x78
 8002242:	f000 fa6b 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002246:	2210      	movs	r2, #16
 8002248:	2100      	movs	r1, #0
 800224a:	2078      	movs	r0, #120	@ 0x78
 800224c:	f000 fa66 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002250:	2240      	movs	r2, #64	@ 0x40
 8002252:	2100      	movs	r1, #0
 8002254:	2078      	movs	r0, #120	@ 0x78
 8002256:	f000 fa61 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800225a:	2281      	movs	r2, #129	@ 0x81
 800225c:	2100      	movs	r1, #0
 800225e:	2078      	movs	r0, #120	@ 0x78
 8002260:	f000 fa5c 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002264:	22ff      	movs	r2, #255	@ 0xff
 8002266:	2100      	movs	r1, #0
 8002268:	2078      	movs	r0, #120	@ 0x78
 800226a:	f000 fa57 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800226e:	22a1      	movs	r2, #161	@ 0xa1
 8002270:	2100      	movs	r1, #0
 8002272:	2078      	movs	r0, #120	@ 0x78
 8002274:	f000 fa52 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002278:	22a6      	movs	r2, #166	@ 0xa6
 800227a:	2100      	movs	r1, #0
 800227c:	2078      	movs	r0, #120	@ 0x78
 800227e:	f000 fa4d 	bl	800271c <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002282:	22a8      	movs	r2, #168	@ 0xa8
 8002284:	2100      	movs	r1, #0
 8002286:	2078      	movs	r0, #120	@ 0x78
 8002288:	f000 fa48 	bl	800271c <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 800228c:	223f      	movs	r2, #63	@ 0x3f
 800228e:	2100      	movs	r1, #0
 8002290:	2078      	movs	r0, #120	@ 0x78
 8002292:	f000 fa43 	bl	800271c <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002296:	22a4      	movs	r2, #164	@ 0xa4
 8002298:	2100      	movs	r1, #0
 800229a:	2078      	movs	r0, #120	@ 0x78
 800229c:	f000 fa3e 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80022a0:	22d3      	movs	r2, #211	@ 0xd3
 80022a2:	2100      	movs	r1, #0
 80022a4:	2078      	movs	r0, #120	@ 0x78
 80022a6:	f000 fa39 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	2078      	movs	r0, #120	@ 0x78
 80022b0:	f000 fa34 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80022b4:	22d5      	movs	r2, #213	@ 0xd5
 80022b6:	2100      	movs	r1, #0
 80022b8:	2078      	movs	r0, #120	@ 0x78
 80022ba:	f000 fa2f 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80022be:	22f0      	movs	r2, #240	@ 0xf0
 80022c0:	2100      	movs	r1, #0
 80022c2:	2078      	movs	r0, #120	@ 0x78
 80022c4:	f000 fa2a 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80022c8:	22d9      	movs	r2, #217	@ 0xd9
 80022ca:	2100      	movs	r1, #0
 80022cc:	2078      	movs	r0, #120	@ 0x78
 80022ce:	f000 fa25 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80022d2:	2222      	movs	r2, #34	@ 0x22
 80022d4:	2100      	movs	r1, #0
 80022d6:	2078      	movs	r0, #120	@ 0x78
 80022d8:	f000 fa20 	bl	800271c <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80022dc:	22da      	movs	r2, #218	@ 0xda
 80022de:	2100      	movs	r1, #0
 80022e0:	2078      	movs	r0, #120	@ 0x78
 80022e2:	f000 fa1b 	bl	800271c <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 80022e6:	2212      	movs	r2, #18
 80022e8:	2100      	movs	r1, #0
 80022ea:	2078      	movs	r0, #120	@ 0x78
 80022ec:	f000 fa16 	bl	800271c <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80022f0:	22db      	movs	r2, #219	@ 0xdb
 80022f2:	2100      	movs	r1, #0
 80022f4:	2078      	movs	r0, #120	@ 0x78
 80022f6:	f000 fa11 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80022fa:	2220      	movs	r2, #32
 80022fc:	2100      	movs	r1, #0
 80022fe:	2078      	movs	r0, #120	@ 0x78
 8002300:	f000 fa0c 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002304:	228d      	movs	r2, #141	@ 0x8d
 8002306:	2100      	movs	r1, #0
 8002308:	2078      	movs	r0, #120	@ 0x78
 800230a:	f000 fa07 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800230e:	2214      	movs	r2, #20
 8002310:	2100      	movs	r1, #0
 8002312:	2078      	movs	r0, #120	@ 0x78
 8002314:	f000 fa02 	bl	800271c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002318:	22af      	movs	r2, #175	@ 0xaf
 800231a:	2100      	movs	r1, #0
 800231c:	2078      	movs	r0, #120	@ 0x78
 800231e:	f000 f9fd 	bl	800271c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002322:	222e      	movs	r2, #46	@ 0x2e
 8002324:	2100      	movs	r1, #0
 8002326:	2078      	movs	r0, #120	@ 0x78
 8002328:	f000 f9f8 	bl	800271c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800232c:	2000      	movs	r0, #0
 800232e:	f000 f843 	bl	80023b8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002332:	f000 f813 	bl	800235c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002336:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <SSD1306_Init+0x184>)
 8002338:	2200      	movs	r2, #0
 800233a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <SSD1306_Init+0x184>)
 800233e:	2200      	movs	r2, #0
 8002340:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002342:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <SSD1306_Init+0x184>)
 8002344:	2201      	movs	r2, #1
 8002346:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002348:	2301      	movs	r3, #1
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	200023bc 	.word	0x200023bc
 8002358:	20002978 	.word	0x20002978

0800235c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002362:	2300      	movs	r3, #0
 8002364:	71fb      	strb	r3, [r7, #7]
 8002366:	e01d      	b.n	80023a4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	3b50      	subs	r3, #80	@ 0x50
 800236c:	b2db      	uxtb	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	2100      	movs	r1, #0
 8002372:	2078      	movs	r0, #120	@ 0x78
 8002374:	f000 f9d2 	bl	800271c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002378:	2200      	movs	r2, #0
 800237a:	2100      	movs	r1, #0
 800237c:	2078      	movs	r0, #120	@ 0x78
 800237e:	f000 f9cd 	bl	800271c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002382:	2210      	movs	r2, #16
 8002384:	2100      	movs	r1, #0
 8002386:	2078      	movs	r0, #120	@ 0x78
 8002388:	f000 f9c8 	bl	800271c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	01db      	lsls	r3, r3, #7
 8002390:	4a08      	ldr	r2, [pc, #32]	@ (80023b4 <SSD1306_UpdateScreen+0x58>)
 8002392:	441a      	add	r2, r3
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	2140      	movs	r1, #64	@ 0x40
 8002398:	2078      	movs	r0, #120	@ 0x78
 800239a:	f000 f959 	bl	8002650 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	3301      	adds	r3, #1
 80023a2:	71fb      	strb	r3, [r7, #7]
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	2b07      	cmp	r3, #7
 80023a8:	d9de      	bls.n	8002368 <SSD1306_UpdateScreen+0xc>
	}
}
 80023aa:	bf00      	nop
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	20002578 	.word	0x20002578

080023b8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <SSD1306_Fill+0x14>
 80023c8:	2300      	movs	r3, #0
 80023ca:	e000      	b.n	80023ce <SSD1306_Fill+0x16>
 80023cc:	23ff      	movs	r3, #255	@ 0xff
 80023ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023d2:	4619      	mov	r1, r3
 80023d4:	4803      	ldr	r0, [pc, #12]	@ (80023e4 <SSD1306_Fill+0x2c>)
 80023d6:	f009 fb86 	bl	800bae6 <memset>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20002578 	.word	0x20002578

080023e8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	80fb      	strh	r3, [r7, #6]
 80023f2:	460b      	mov	r3, r1
 80023f4:	80bb      	strh	r3, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	70fb      	strb	r3, [r7, #3]
	if (
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80023fe:	d848      	bhi.n	8002492 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002400:	88bb      	ldrh	r3, [r7, #4]
 8002402:	2b3f      	cmp	r3, #63	@ 0x3f
 8002404:	d845      	bhi.n	8002492 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002406:	4b25      	ldr	r3, [pc, #148]	@ (800249c <SSD1306_DrawPixel+0xb4>)
 8002408:	791b      	ldrb	r3, [r3, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d006      	beq.n	800241c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d11a      	bne.n	8002458 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002422:	88fa      	ldrh	r2, [r7, #6]
 8002424:	88bb      	ldrh	r3, [r7, #4]
 8002426:	08db      	lsrs	r3, r3, #3
 8002428:	b298      	uxth	r0, r3
 800242a:	4603      	mov	r3, r0
 800242c:	01db      	lsls	r3, r3, #7
 800242e:	4413      	add	r3, r2
 8002430:	4a1b      	ldr	r2, [pc, #108]	@ (80024a0 <SSD1306_DrawPixel+0xb8>)
 8002432:	5cd3      	ldrb	r3, [r2, r3]
 8002434:	b25a      	sxtb	r2, r3
 8002436:	88bb      	ldrh	r3, [r7, #4]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	2101      	movs	r1, #1
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	b25b      	sxtb	r3, r3
 8002444:	4313      	orrs	r3, r2
 8002446:	b259      	sxtb	r1, r3
 8002448:	88fa      	ldrh	r2, [r7, #6]
 800244a:	4603      	mov	r3, r0
 800244c:	01db      	lsls	r3, r3, #7
 800244e:	4413      	add	r3, r2
 8002450:	b2c9      	uxtb	r1, r1
 8002452:	4a13      	ldr	r2, [pc, #76]	@ (80024a0 <SSD1306_DrawPixel+0xb8>)
 8002454:	54d1      	strb	r1, [r2, r3]
 8002456:	e01d      	b.n	8002494 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002458:	88fa      	ldrh	r2, [r7, #6]
 800245a:	88bb      	ldrh	r3, [r7, #4]
 800245c:	08db      	lsrs	r3, r3, #3
 800245e:	b298      	uxth	r0, r3
 8002460:	4603      	mov	r3, r0
 8002462:	01db      	lsls	r3, r3, #7
 8002464:	4413      	add	r3, r2
 8002466:	4a0e      	ldr	r2, [pc, #56]	@ (80024a0 <SSD1306_DrawPixel+0xb8>)
 8002468:	5cd3      	ldrb	r3, [r2, r3]
 800246a:	b25a      	sxtb	r2, r3
 800246c:	88bb      	ldrh	r3, [r7, #4]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	2101      	movs	r1, #1
 8002474:	fa01 f303 	lsl.w	r3, r1, r3
 8002478:	b25b      	sxtb	r3, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	b25b      	sxtb	r3, r3
 800247e:	4013      	ands	r3, r2
 8002480:	b259      	sxtb	r1, r3
 8002482:	88fa      	ldrh	r2, [r7, #6]
 8002484:	4603      	mov	r3, r0
 8002486:	01db      	lsls	r3, r3, #7
 8002488:	4413      	add	r3, r2
 800248a:	b2c9      	uxtb	r1, r1
 800248c:	4a04      	ldr	r2, [pc, #16]	@ (80024a0 <SSD1306_DrawPixel+0xb8>)
 800248e:	54d1      	strb	r1, [r2, r3]
 8002490:	e000      	b.n	8002494 <SSD1306_DrawPixel+0xac>
		return;
 8002492:	bf00      	nop
	}
}
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	20002978 	.word	0x20002978
 80024a0:	20002578 	.word	0x20002578

080024a4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	460a      	mov	r2, r1
 80024ae:	80fb      	strh	r3, [r7, #6]
 80024b0:	4613      	mov	r3, r2
 80024b2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80024b4:	4a05      	ldr	r2, [pc, #20]	@ (80024cc <SSD1306_GotoXY+0x28>)
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80024ba:	4a04      	ldr	r2, [pc, #16]	@ (80024cc <SSD1306_GotoXY+0x28>)
 80024bc:	88bb      	ldrh	r3, [r7, #4]
 80024be:	8053      	strh	r3, [r2, #2]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20002978 	.word	0x20002978

080024d0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
 80024dc:	4613      	mov	r3, r2
 80024de:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80024e0:	4b39      	ldr	r3, [pc, #228]	@ (80025c8 <SSD1306_Putc+0xf8>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	4413      	add	r3, r2
	if (
 80024ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80024ee:	dc07      	bgt.n	8002500 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80024f0:	4b35      	ldr	r3, [pc, #212]	@ (80025c8 <SSD1306_Putc+0xf8>)
 80024f2:	885b      	ldrh	r3, [r3, #2]
 80024f4:	461a      	mov	r2, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	785b      	ldrb	r3, [r3, #1]
 80024fa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80024fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80024fe:	dd01      	ble.n	8002504 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002500:	2300      	movs	r3, #0
 8002502:	e05d      	b.n	80025c0 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	e04b      	b.n	80025a2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	3b20      	subs	r3, #32
 8002512:	6839      	ldr	r1, [r7, #0]
 8002514:	7849      	ldrb	r1, [r1, #1]
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4619      	mov	r1, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	440b      	add	r3, r1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4413      	add	r3, r2
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002528:	2300      	movs	r3, #0
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	e030      	b.n	8002590 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d010      	beq.n	8002560 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800253e:	4b22      	ldr	r3, [pc, #136]	@ (80025c8 <SSD1306_Putc+0xf8>)
 8002540:	881a      	ldrh	r2, [r3, #0]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	b29b      	uxth	r3, r3
 8002546:	4413      	add	r3, r2
 8002548:	b298      	uxth	r0, r3
 800254a:	4b1f      	ldr	r3, [pc, #124]	@ (80025c8 <SSD1306_Putc+0xf8>)
 800254c:	885a      	ldrh	r2, [r3, #2]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	b29b      	uxth	r3, r3
 8002552:	4413      	add	r3, r2
 8002554:	b29b      	uxth	r3, r3
 8002556:	79ba      	ldrb	r2, [r7, #6]
 8002558:	4619      	mov	r1, r3
 800255a:	f7ff ff45 	bl	80023e8 <SSD1306_DrawPixel>
 800255e:	e014      	b.n	800258a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002560:	4b19      	ldr	r3, [pc, #100]	@ (80025c8 <SSD1306_Putc+0xf8>)
 8002562:	881a      	ldrh	r2, [r3, #0]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	b29b      	uxth	r3, r3
 8002568:	4413      	add	r3, r2
 800256a:	b298      	uxth	r0, r3
 800256c:	4b16      	ldr	r3, [pc, #88]	@ (80025c8 <SSD1306_Putc+0xf8>)
 800256e:	885a      	ldrh	r2, [r3, #2]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	b29b      	uxth	r3, r3
 8002574:	4413      	add	r3, r2
 8002576:	b299      	uxth	r1, r3
 8002578:	79bb      	ldrb	r3, [r7, #6]
 800257a:	2b00      	cmp	r3, #0
 800257c:	bf0c      	ite	eq
 800257e:	2301      	moveq	r3, #1
 8002580:	2300      	movne	r3, #0
 8002582:	b2db      	uxtb	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	f7ff ff2f 	bl	80023e8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	3301      	adds	r3, #1
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	4293      	cmp	r3, r2
 800259a:	d3c8      	bcc.n	800252e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	3301      	adds	r3, #1
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	785b      	ldrb	r3, [r3, #1]
 80025a6:	461a      	mov	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d3ad      	bcc.n	800250a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80025ae:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <SSD1306_Putc+0xf8>)
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	7812      	ldrb	r2, [r2, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <SSD1306_Putc+0xf8>)
 80025bc:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80025be:	79fb      	ldrb	r3, [r7, #7]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20002978 	.word	0x20002978

080025cc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	4613      	mov	r3, r2
 80025d8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80025da:	e012      	b.n	8002602 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	79fa      	ldrb	r2, [r7, #7]
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff73 	bl	80024d0 <SSD1306_Putc>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461a      	mov	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d002      	beq.n	80025fc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	e008      	b.n	800260e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3301      	adds	r3, #1
 8002600:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1e8      	bne.n	80025dc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	781b      	ldrb	r3, [r3, #0]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800261a:	2000      	movs	r0, #0
 800261c:	f7ff fecc 	bl	80023b8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002620:	f7ff fe9c 	bl	800235c <SSD1306_UpdateScreen>
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}

08002628 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
	//MX_i2c2_Init();
	uint32_t p = 250000;
 800262e:	4b07      	ldr	r3, [pc, #28]	@ (800264c <ssd1306_I2C_Init+0x24>)
 8002630:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002632:	e002      	b.n	800263a <ssd1306_I2C_Init+0x12>
		p--;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3b01      	subs	r3, #1
 8002638:	607b      	str	r3, [r7, #4]
	while(p>0)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1f9      	bne.n	8002634 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_i2c2_Init();
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	0003d090 	.word	0x0003d090

08002650 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b0c7      	sub	sp, #284	@ 0x11c
 8002654:	af02      	add	r7, sp, #8
 8002656:	4604      	mov	r4, r0
 8002658:	4608      	mov	r0, r1
 800265a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800265e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8002662:	600a      	str	r2, [r1, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800266a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800266e:	4622      	mov	r2, r4
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002676:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800267a:	4602      	mov	r2, r0
 800267c:	701a      	strb	r2, [r3, #0]
 800267e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002682:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002686:	460a      	mov	r2, r1
 8002688:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800268a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800268e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002692:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002696:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800269a:	7812      	ldrb	r2, [r2, #0]
 800269c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80026a4:	e015      	b.n	80026d2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80026a6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80026aa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80026ae:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	441a      	add	r2, r3
 80026b6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80026ba:	3301      	adds	r3, #1
 80026bc:	7811      	ldrb	r1, [r2, #0]
 80026be:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80026c2:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80026c6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80026c8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80026cc:	3301      	adds	r3, #1
 80026ce:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80026d2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80026dc:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80026e0:	8812      	ldrh	r2, [r2, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d8df      	bhi.n	80026a6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 80026e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026ea:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b299      	uxth	r1, r3
 80026f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80026f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	b29b      	uxth	r3, r3
 8002700:	f107 020c 	add.w	r2, r7, #12
 8002704:	200a      	movs	r0, #10
 8002706:	9000      	str	r0, [sp, #0]
 8002708:	4803      	ldr	r0, [pc, #12]	@ (8002718 <ssd1306_I2C_WriteMulti+0xc8>)
 800270a:	f001 fe3f 	bl	800438c <HAL_I2C_Master_Transmit>
}
 800270e:	bf00      	nop
 8002710:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8002714:	46bd      	mov	sp, r7
 8002716:	bd90      	pop	{r4, r7, pc}
 8002718:	200023bc 	.word	0x200023bc

0800271c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af02      	add	r7, sp, #8
 8002722:	4603      	mov	r3, r0
 8002724:	71fb      	strb	r3, [r7, #7]
 8002726:	460b      	mov	r3, r1
 8002728:	71bb      	strb	r3, [r7, #6]
 800272a:	4613      	mov	r3, r2
 800272c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800272e:	79bb      	ldrb	r3, [r7, #6]
 8002730:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002732:	797b      	ldrb	r3, [r7, #5]
 8002734:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	b299      	uxth	r1, r3
 800273a:	f107 020c 	add.w	r2, r7, #12
 800273e:	230a      	movs	r3, #10
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	2302      	movs	r3, #2
 8002744:	4803      	ldr	r0, [pc, #12]	@ (8002754 <ssd1306_I2C_Write+0x38>)
 8002746:	f001 fe21 	bl	800438c <HAL_I2C_Master_Transmit>
}
 800274a:	bf00      	nop
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200023bc 	.word	0x200023bc

08002758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800275e:	4b15      	ldr	r3, [pc, #84]	@ (80027b4 <HAL_MspInit+0x5c>)
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	4a14      	ldr	r2, [pc, #80]	@ (80027b4 <HAL_MspInit+0x5c>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6193      	str	r3, [r2, #24]
 800276a:	4b12      	ldr	r3, [pc, #72]	@ (80027b4 <HAL_MspInit+0x5c>)
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	4b0f      	ldr	r3, [pc, #60]	@ (80027b4 <HAL_MspInit+0x5c>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	4a0e      	ldr	r2, [pc, #56]	@ (80027b4 <HAL_MspInit+0x5c>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002780:	61d3      	str	r3, [r2, #28]
 8002782:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <HAL_MspInit+0x5c>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800278e:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <HAL_MspInit+0x60>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	4a04      	ldr	r2, [pc, #16]	@ (80027b8 <HAL_MspInit+0x60>)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40010000 	.word	0x40010000

080027bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08a      	sub	sp, #40	@ 0x28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	f107 0318 	add.w	r3, r7, #24
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a37      	ldr	r2, [pc, #220]	@ (80028b4 <HAL_ADC_MspInit+0xf8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d167      	bne.n	80028ac <HAL_ADC_MspInit+0xf0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027dc:	4b36      	ldr	r3, [pc, #216]	@ (80028b8 <HAL_ADC_MspInit+0xfc>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	4a35      	ldr	r2, [pc, #212]	@ (80028b8 <HAL_ADC_MspInit+0xfc>)
 80027e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027e6:	6193      	str	r3, [r2, #24]
 80027e8:	4b33      	ldr	r3, [pc, #204]	@ (80028b8 <HAL_ADC_MspInit+0xfc>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f4:	4b30      	ldr	r3, [pc, #192]	@ (80028b8 <HAL_ADC_MspInit+0xfc>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	4a2f      	ldr	r2, [pc, #188]	@ (80028b8 <HAL_ADC_MspInit+0xfc>)
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	6193      	str	r3, [r2, #24]
 8002800:	4b2d      	ldr	r3, [pc, #180]	@ (80028b8 <HAL_ADC_MspInit+0xfc>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800280c:	4b2a      	ldr	r3, [pc, #168]	@ (80028b8 <HAL_ADC_MspInit+0xfc>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	4a29      	ldr	r2, [pc, #164]	@ (80028b8 <HAL_ADC_MspInit+0xfc>)
 8002812:	f043 0308 	orr.w	r3, r3, #8
 8002816:	6193      	str	r3, [r2, #24]
 8002818:	4b27      	ldr	r3, [pc, #156]	@ (80028b8 <HAL_ADC_MspInit+0xfc>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002824:	23ff      	movs	r3, #255	@ 0xff
 8002826:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002828:	2303      	movs	r3, #3
 800282a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282c:	f107 0318 	add.w	r3, r7, #24
 8002830:	4619      	mov	r1, r3
 8002832:	4822      	ldr	r0, [pc, #136]	@ (80028bc <HAL_ADC_MspInit+0x100>)
 8002834:	f001 fab0 	bl	8003d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002838:	2303      	movs	r3, #3
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800283c:	2303      	movs	r3, #3
 800283e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002840:	f107 0318 	add.w	r3, r7, #24
 8002844:	4619      	mov	r1, r3
 8002846:	481e      	ldr	r0, [pc, #120]	@ (80028c0 <HAL_ADC_MspInit+0x104>)
 8002848:	f001 faa6 	bl	8003d98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800284c:	4b1d      	ldr	r3, [pc, #116]	@ (80028c4 <HAL_ADC_MspInit+0x108>)
 800284e:	4a1e      	ldr	r2, [pc, #120]	@ (80028c8 <HAL_ADC_MspInit+0x10c>)
 8002850:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002852:	4b1c      	ldr	r3, [pc, #112]	@ (80028c4 <HAL_ADC_MspInit+0x108>)
 8002854:	2200      	movs	r2, #0
 8002856:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002858:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <HAL_ADC_MspInit+0x108>)
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800285e:	4b19      	ldr	r3, [pc, #100]	@ (80028c4 <HAL_ADC_MspInit+0x108>)
 8002860:	2280      	movs	r2, #128	@ 0x80
 8002862:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002864:	4b17      	ldr	r3, [pc, #92]	@ (80028c4 <HAL_ADC_MspInit+0x108>)
 8002866:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800286a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800286c:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <HAL_ADC_MspInit+0x108>)
 800286e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002872:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002874:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <HAL_ADC_MspInit+0x108>)
 8002876:	2200      	movs	r2, #0
 8002878:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800287a:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <HAL_ADC_MspInit+0x108>)
 800287c:	2200      	movs	r2, #0
 800287e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002880:	4810      	ldr	r0, [pc, #64]	@ (80028c4 <HAL_ADC_MspInit+0x108>)
 8002882:	f001 f89b 	bl	80039bc <HAL_DMA_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 800288c:	f7ff fc92 	bl	80021b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a0c      	ldr	r2, [pc, #48]	@ (80028c4 <HAL_ADC_MspInit+0x108>)
 8002894:	621a      	str	r2, [r3, #32]
 8002896:	4a0b      	ldr	r2, [pc, #44]	@ (80028c4 <HAL_ADC_MspInit+0x108>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2100      	movs	r1, #0
 80028a0:	2012      	movs	r0, #18
 80028a2:	f001 f854 	bl	800394e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80028a6:	2012      	movs	r0, #18
 80028a8:	f001 f86d 	bl	8003986 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80028ac:	bf00      	nop
 80028ae:	3728      	adds	r7, #40	@ 0x28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40012400 	.word	0x40012400
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40010800 	.word	0x40010800
 80028c0:	40010c00 	.word	0x40010c00
 80028c4:	20002324 	.word	0x20002324
 80028c8:	40020008 	.word	0x40020008

080028cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	@ 0x28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	f107 0318 	add.w	r3, r7, #24
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002994 <HAL_I2C_MspInit+0xc8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d124      	bne.n	8002936 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002998 <HAL_I2C_MspInit+0xcc>)
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	4a29      	ldr	r2, [pc, #164]	@ (8002998 <HAL_I2C_MspInit+0xcc>)
 80028f2:	f043 0308 	orr.w	r3, r3, #8
 80028f6:	6193      	str	r3, [r2, #24]
 80028f8:	4b27      	ldr	r3, [pc, #156]	@ (8002998 <HAL_I2C_MspInit+0xcc>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002904:	23c0      	movs	r3, #192	@ 0xc0
 8002906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002908:	2312      	movs	r3, #18
 800290a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800290c:	2303      	movs	r3, #3
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002910:	f107 0318 	add.w	r3, r7, #24
 8002914:	4619      	mov	r1, r3
 8002916:	4821      	ldr	r0, [pc, #132]	@ (800299c <HAL_I2C_MspInit+0xd0>)
 8002918:	f001 fa3e 	bl	8003d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800291c:	4b1e      	ldr	r3, [pc, #120]	@ (8002998 <HAL_I2C_MspInit+0xcc>)
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	4a1d      	ldr	r2, [pc, #116]	@ (8002998 <HAL_I2C_MspInit+0xcc>)
 8002922:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002926:	61d3      	str	r3, [r2, #28]
 8002928:	4b1b      	ldr	r3, [pc, #108]	@ (8002998 <HAL_I2C_MspInit+0xcc>)
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002934:	e029      	b.n	800298a <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a19      	ldr	r2, [pc, #100]	@ (80029a0 <HAL_I2C_MspInit+0xd4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d124      	bne.n	800298a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002940:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <HAL_I2C_MspInit+0xcc>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	4a14      	ldr	r2, [pc, #80]	@ (8002998 <HAL_I2C_MspInit+0xcc>)
 8002946:	f043 0308 	orr.w	r3, r3, #8
 800294a:	6193      	str	r3, [r2, #24]
 800294c:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <HAL_I2C_MspInit+0xcc>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002958:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800295c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800295e:	2312      	movs	r3, #18
 8002960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002962:	2303      	movs	r3, #3
 8002964:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002966:	f107 0318 	add.w	r3, r7, #24
 800296a:	4619      	mov	r1, r3
 800296c:	480b      	ldr	r0, [pc, #44]	@ (800299c <HAL_I2C_MspInit+0xd0>)
 800296e:	f001 fa13 	bl	8003d98 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002972:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <HAL_I2C_MspInit+0xcc>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	4a08      	ldr	r2, [pc, #32]	@ (8002998 <HAL_I2C_MspInit+0xcc>)
 8002978:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800297c:	61d3      	str	r3, [r2, #28]
 800297e:	4b06      	ldr	r3, [pc, #24]	@ (8002998 <HAL_I2C_MspInit+0xcc>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	68bb      	ldr	r3, [r7, #8]
}
 800298a:	bf00      	nop
 800298c:	3728      	adds	r7, #40	@ 0x28
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40005400 	.word	0x40005400
 8002998:	40021000 	.word	0x40021000
 800299c:	40010c00 	.word	0x40010c00
 80029a0:	40005800 	.word	0x40005800

080029a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 0310 	add.w	r3, r7, #16
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a1c      	ldr	r2, [pc, #112]	@ (8002a30 <HAL_SPI_MspInit+0x8c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d131      	bne.n	8002a28 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a34 <HAL_SPI_MspInit+0x90>)
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a34 <HAL_SPI_MspInit+0x90>)
 80029ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029ce:	61d3      	str	r3, [r2, #28]
 80029d0:	4b18      	ldr	r3, [pc, #96]	@ (8002a34 <HAL_SPI_MspInit+0x90>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029dc:	4b15      	ldr	r3, [pc, #84]	@ (8002a34 <HAL_SPI_MspInit+0x90>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4a14      	ldr	r2, [pc, #80]	@ (8002a34 <HAL_SPI_MspInit+0x90>)
 80029e2:	f043 0308 	orr.w	r3, r3, #8
 80029e6:	6193      	str	r3, [r2, #24]
 80029e8:	4b12      	ldr	r3, [pc, #72]	@ (8002a34 <HAL_SPI_MspInit+0x90>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80029f4:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80029f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029fe:	2303      	movs	r3, #3
 8002a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a02:	f107 0310 	add.w	r3, r7, #16
 8002a06:	4619      	mov	r1, r3
 8002a08:	480b      	ldr	r0, [pc, #44]	@ (8002a38 <HAL_SPI_MspInit+0x94>)
 8002a0a:	f001 f9c5 	bl	8003d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002a0e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1c:	f107 0310 	add.w	r3, r7, #16
 8002a20:	4619      	mov	r1, r3
 8002a22:	4805      	ldr	r0, [pc, #20]	@ (8002a38 <HAL_SPI_MspInit+0x94>)
 8002a24:	f001 f9b8 	bl	8003d98 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002a28:	bf00      	nop
 8002a2a:	3720      	adds	r7, #32
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40003800 	.word	0x40003800
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40010c00 	.word	0x40010c00

08002a3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a4c:	d114      	bne.n	8002a78 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a4e:	4b19      	ldr	r3, [pc, #100]	@ (8002ab4 <HAL_TIM_Base_MspInit+0x78>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	4a18      	ldr	r2, [pc, #96]	@ (8002ab4 <HAL_TIM_Base_MspInit+0x78>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	61d3      	str	r3, [r2, #28]
 8002a5a:	4b16      	ldr	r3, [pc, #88]	@ (8002ab4 <HAL_TIM_Base_MspInit+0x78>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2100      	movs	r1, #0
 8002a6a:	201c      	movs	r0, #28
 8002a6c:	f000 ff6f 	bl	800394e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a70:	201c      	movs	r0, #28
 8002a72:	f000 ff88 	bl	8003986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a76:	e018      	b.n	8002aaa <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab8 <HAL_TIM_Base_MspInit+0x7c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d113      	bne.n	8002aaa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a82:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab4 <HAL_TIM_Base_MspInit+0x78>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab4 <HAL_TIM_Base_MspInit+0x78>)
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	61d3      	str	r3, [r2, #28]
 8002a8e:	4b09      	ldr	r3, [pc, #36]	@ (8002ab4 <HAL_TIM_Base_MspInit+0x78>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	201d      	movs	r0, #29
 8002aa0:	f000 ff55 	bl	800394e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002aa4:	201d      	movs	r0, #29
 8002aa6:	f000 ff6e 	bl	8003986 <HAL_NVIC_EnableIRQ>
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40000400 	.word	0x40000400

08002abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ac0:	bf00      	nop
 8002ac2:	e7fd      	b.n	8002ac0 <NMI_Handler+0x4>

08002ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <HardFault_Handler+0x4>

08002acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ad0:	bf00      	nop
 8002ad2:	e7fd      	b.n	8002ad0 <MemManage_Handler+0x4>

08002ad4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ad8:	bf00      	nop
 8002ada:	e7fd      	b.n	8002ad8 <BusFault_Handler+0x4>

08002adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae0:	bf00      	nop
 8002ae2:	e7fd      	b.n	8002ae0 <UsageFault_Handler+0x4>

08002ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr

08002afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	if(Timer1 > 0)
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <SysTick_Handler+0x34>)
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <SysTick_Handler+0x18>
		Timer1--;
 8002b14:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <SysTick_Handler+0x34>)
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	4b07      	ldr	r3, [pc, #28]	@ (8002b3c <SysTick_Handler+0x34>)
 8002b1e:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8002b20:	4b07      	ldr	r3, [pc, #28]	@ (8002b40 <SysTick_Handler+0x38>)
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <SysTick_Handler+0x2c>
		Timer2--;
 8002b28:	4b05      	ldr	r3, [pc, #20]	@ (8002b40 <SysTick_Handler+0x38>)
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	4b03      	ldr	r3, [pc, #12]	@ (8002b40 <SysTick_Handler+0x38>)
 8002b32:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b34:	f000 f962 	bl	8002dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	20000210 	.word	0x20000210
 8002b40:	20000212 	.word	0x20000212

08002b44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b48:	4802      	ldr	r0, [pc, #8]	@ (8002b54 <DMA1_Channel1_IRQHandler+0x10>)
 8002b4a:	f000 fff1 	bl	8003b30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20002324 	.word	0x20002324

08002b58 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b5c:	4802      	ldr	r0, [pc, #8]	@ (8002b68 <ADC1_2_IRQHandler+0x10>)
 8002b5e:	f000 fb43 	bl	80031e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	200022f4 	.word	0x200022f4

08002b6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b70:	4802      	ldr	r0, [pc, #8]	@ (8002b7c <TIM2_IRQHandler+0x10>)
 8002b72:	f003 ff59 	bl	8006a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20002468 	.word	0x20002468

08002b80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b84:	4802      	ldr	r0, [pc, #8]	@ (8002b90 <TIM3_IRQHandler+0x10>)
 8002b86:	f003 ff4f 	bl	8006a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	200024b0 	.word	0x200024b0

08002b94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return 1;
 8002b98:	2301      	movs	r3, #1
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <_kill>:

int _kill(int pid, int sig)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bac:	f008 ffee 	bl	800bb8c <__errno>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2216      	movs	r2, #22
 8002bb4:	601a      	str	r2, [r3, #0]
  return -1;
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <_exit>:

void _exit (int status)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bca:	f04f 31ff 	mov.w	r1, #4294967295
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ffe7 	bl	8002ba2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <_exit+0x12>

08002bd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	e00a      	b.n	8002c00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bea:	f3af 8000 	nop.w
 8002bee:	4601      	mov	r1, r0
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	60ba      	str	r2, [r7, #8]
 8002bf6:	b2ca      	uxtb	r2, r1
 8002bf8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	dbf0      	blt.n	8002bea <_read+0x12>
  }

  return len;
 8002c08:	687b      	ldr	r3, [r7, #4]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	e009      	b.n	8002c38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	60ba      	str	r2, [r7, #8]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	3301      	adds	r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	dbf1      	blt.n	8002c24 <_write+0x12>
  }
  return len;
 8002c40:	687b      	ldr	r3, [r7, #4]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <_close>:

int _close(int file)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c70:	605a      	str	r2, [r3, #4]
  return 0;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <_isatty>:

int _isatty(int file)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c86:	2301      	movs	r3, #1
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b085      	sub	sp, #20
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
	...

08002cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb4:	4a14      	ldr	r2, [pc, #80]	@ (8002d08 <_sbrk+0x5c>)
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <_sbrk+0x60>)
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc0:	4b13      	ldr	r3, [pc, #76]	@ (8002d10 <_sbrk+0x64>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d102      	bne.n	8002cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cc8:	4b11      	ldr	r3, [pc, #68]	@ (8002d10 <_sbrk+0x64>)
 8002cca:	4a12      	ldr	r2, [pc, #72]	@ (8002d14 <_sbrk+0x68>)
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cce:	4b10      	ldr	r3, [pc, #64]	@ (8002d10 <_sbrk+0x64>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d207      	bcs.n	8002cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cdc:	f008 ff56 	bl	800bb8c <__errno>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cea:	e009      	b.n	8002d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cec:	4b08      	ldr	r3, [pc, #32]	@ (8002d10 <_sbrk+0x64>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cf2:	4b07      	ldr	r3, [pc, #28]	@ (8002d10 <_sbrk+0x64>)
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	4a05      	ldr	r2, [pc, #20]	@ (8002d10 <_sbrk+0x64>)
 8002cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20005000 	.word	0x20005000
 8002d0c:	00000400 	.word	0x00000400
 8002d10:	20002980 	.word	0x20002980
 8002d14:	20002d08 	.word	0x20002d08

08002d18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d24:	f7ff fff8 	bl	8002d18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d28:	480b      	ldr	r0, [pc, #44]	@ (8002d58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d2a:	490c      	ldr	r1, [pc, #48]	@ (8002d5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d2c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d30:	e002      	b.n	8002d38 <LoopCopyDataInit>

08002d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d36:	3304      	adds	r3, #4

08002d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d3c:	d3f9      	bcc.n	8002d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d3e:	4a09      	ldr	r2, [pc, #36]	@ (8002d64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d40:	4c09      	ldr	r4, [pc, #36]	@ (8002d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d44:	e001      	b.n	8002d4a <LoopFillZerobss>

08002d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d48:	3204      	adds	r2, #4

08002d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d4c:	d3fb      	bcc.n	8002d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d4e:	f008 ff23 	bl	800bb98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d52:	f7fe ff41 	bl	8001bd8 <main>
  bx lr
 8002d56:	4770      	bx	lr
  ldr r0, =_sdata
 8002d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d5c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002d60:	0800f3e8 	.word	0x0800f3e8
  ldr r2, =_sbss
 8002d64:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002d68:	20002d08 	.word	0x20002d08

08002d6c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d6c:	e7fe      	b.n	8002d6c <CAN1_RX1_IRQHandler>
	...

08002d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d74:	4b08      	ldr	r3, [pc, #32]	@ (8002d98 <HAL_Init+0x28>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a07      	ldr	r2, [pc, #28]	@ (8002d98 <HAL_Init+0x28>)
 8002d7a:	f043 0310 	orr.w	r3, r3, #16
 8002d7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d80:	2003      	movs	r0, #3
 8002d82:	f000 fdd9 	bl	8003938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d86:	200f      	movs	r0, #15
 8002d88:	f000 f808 	bl	8002d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d8c:	f7ff fce4 	bl	8002758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40022000 	.word	0x40022000

08002d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002da4:	4b12      	ldr	r3, [pc, #72]	@ (8002df0 <HAL_InitTick+0x54>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b12      	ldr	r3, [pc, #72]	@ (8002df4 <HAL_InitTick+0x58>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	4619      	mov	r1, r3
 8002dae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fdf1 	bl	80039a2 <HAL_SYSTICK_Config>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00e      	b.n	8002de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b0f      	cmp	r3, #15
 8002dce:	d80a      	bhi.n	8002de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	f000 fdb9 	bl	800394e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ddc:	4a06      	ldr	r2, [pc, #24]	@ (8002df8 <HAL_InitTick+0x5c>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e000      	b.n	8002de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	2000000c 	.word	0x2000000c
 8002df4:	20000014 	.word	0x20000014
 8002df8:	20000010 	.word	0x20000010

08002dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e00:	4b05      	ldr	r3, [pc, #20]	@ (8002e18 <HAL_IncTick+0x1c>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <HAL_IncTick+0x20>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	4a03      	ldr	r2, [pc, #12]	@ (8002e1c <HAL_IncTick+0x20>)
 8002e0e:	6013      	str	r3, [r2, #0]
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	20000014 	.word	0x20000014
 8002e1c:	20002984 	.word	0x20002984

08002e20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return uwTick;
 8002e24:	4b02      	ldr	r3, [pc, #8]	@ (8002e30 <HAL_GetTick+0x10>)
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	20002984 	.word	0x20002984

08002e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7ff fff0 	bl	8002e20 <HAL_GetTick>
 8002e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d005      	beq.n	8002e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e78 <HAL_Delay+0x44>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4413      	add	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e5a:	bf00      	nop
 8002e5c:	f7ff ffe0 	bl	8002e20 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d8f7      	bhi.n	8002e5c <HAL_Delay+0x28>
  {
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000014 	.word	0x20000014

08002e7c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e0be      	b.n	800301c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff fc7e 	bl	80027bc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fbbd 	bl	8003640 <ADC_ConversionStop_Disable>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ece:	f003 0310 	and.w	r3, r3, #16
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f040 8099 	bne.w	800300a <HAL_ADC_Init+0x18e>
 8002ed8:	7dfb      	ldrb	r3, [r7, #23]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f040 8095 	bne.w	800300a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ee8:	f023 0302 	bic.w	r3, r3, #2
 8002eec:	f043 0202 	orr.w	r2, r3, #2
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002efc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	7b1b      	ldrb	r3, [r3, #12]
 8002f02:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f04:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f14:	d003      	beq.n	8002f1e <HAL_ADC_Init+0xa2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d102      	bne.n	8002f24 <HAL_ADC_Init+0xa8>
 8002f1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f22:	e000      	b.n	8002f26 <HAL_ADC_Init+0xaa>
 8002f24:	2300      	movs	r3, #0
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	7d1b      	ldrb	r3, [r3, #20]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d119      	bne.n	8002f68 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	7b1b      	ldrb	r3, [r3, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d109      	bne.n	8002f50 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	3b01      	subs	r3, #1
 8002f42:	035a      	lsls	r2, r3, #13
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	e00b      	b.n	8002f68 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f54:	f043 0220 	orr.w	r2, r3, #32
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f60:	f043 0201 	orr.w	r2, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	4b28      	ldr	r3, [pc, #160]	@ (8003024 <HAL_ADC_Init+0x1a8>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f98:	d003      	beq.n	8002fa2 <HAL_ADC_Init+0x126>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d104      	bne.n	8002fac <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	051b      	lsls	r3, r3, #20
 8002faa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	4b18      	ldr	r3, [pc, #96]	@ (8003028 <HAL_ADC_Init+0x1ac>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d10b      	bne.n	8002fe8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fda:	f023 0303 	bic.w	r3, r3, #3
 8002fde:	f043 0201 	orr.w	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fe6:	e018      	b.n	800301a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fec:	f023 0312 	bic.w	r3, r3, #18
 8002ff0:	f043 0210 	orr.w	r2, r3, #16
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffc:	f043 0201 	orr.w	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003008:	e007      	b.n	800301a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300e:	f043 0210 	orr.w	r2, r3, #16
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800301a:	7dfb      	ldrb	r3, [r7, #23]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	ffe1f7fd 	.word	0xffe1f7fd
 8003028:	ff1f0efe 	.word	0xff1f0efe

0800302c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a64      	ldr	r2, [pc, #400]	@ (80031d4 <HAL_ADC_Start_DMA+0x1a8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d004      	beq.n	8003050 <HAL_ADC_Start_DMA+0x24>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a63      	ldr	r2, [pc, #396]	@ (80031d8 <HAL_ADC_Start_DMA+0x1ac>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d106      	bne.n	800305e <HAL_ADC_Start_DMA+0x32>
 8003050:	4b60      	ldr	r3, [pc, #384]	@ (80031d4 <HAL_ADC_Start_DMA+0x1a8>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003058:	2b00      	cmp	r3, #0
 800305a:	f040 80b3 	bne.w	80031c4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_ADC_Start_DMA+0x40>
 8003068:	2302      	movs	r3, #2
 800306a:	e0ae      	b.n	80031ca <HAL_ADC_Start_DMA+0x19e>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fa89 	bl	800358c <ADC_Enable>
 800307a:	4603      	mov	r3, r0
 800307c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800307e:	7dfb      	ldrb	r3, [r7, #23]
 8003080:	2b00      	cmp	r3, #0
 8003082:	f040 809a 	bne.w	80031ba <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800308e:	f023 0301 	bic.w	r3, r3, #1
 8003092:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a4e      	ldr	r2, [pc, #312]	@ (80031d8 <HAL_ADC_Start_DMA+0x1ac>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d105      	bne.n	80030b0 <HAL_ADC_Start_DMA+0x84>
 80030a4:	4b4b      	ldr	r3, [pc, #300]	@ (80031d4 <HAL_ADC_Start_DMA+0x1a8>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d115      	bne.n	80030dc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d026      	beq.n	8003118 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80030d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030da:	e01d      	b.n	8003118 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a39      	ldr	r2, [pc, #228]	@ (80031d4 <HAL_ADC_Start_DMA+0x1a8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <HAL_ADC_Start_DMA+0xd0>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a38      	ldr	r2, [pc, #224]	@ (80031d8 <HAL_ADC_Start_DMA+0x1ac>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d10d      	bne.n	8003118 <HAL_ADC_Start_DMA+0xec>
 80030fc:	4b35      	ldr	r3, [pc, #212]	@ (80031d4 <HAL_ADC_Start_DMA+0x1a8>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003104:	2b00      	cmp	r3, #0
 8003106:	d007      	beq.n	8003118 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003110:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d006      	beq.n	8003132 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003128:	f023 0206 	bic.w	r2, r3, #6
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003130:	e002      	b.n	8003138 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	4a25      	ldr	r2, [pc, #148]	@ (80031dc <HAL_ADC_Start_DMA+0x1b0>)
 8003146:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4a24      	ldr	r2, [pc, #144]	@ (80031e0 <HAL_ADC_Start_DMA+0x1b4>)
 800314e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	4a23      	ldr	r2, [pc, #140]	@ (80031e4 <HAL_ADC_Start_DMA+0x1b8>)
 8003156:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0202 	mvn.w	r2, #2
 8003160:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003170:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a18      	ldr	r0, [r3, #32]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	334c      	adds	r3, #76	@ 0x4c
 800317c:	4619      	mov	r1, r3
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f000 fc75 	bl	8003a70 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003190:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003194:	d108      	bne.n	80031a8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80031a4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80031a6:	e00f      	b.n	80031c8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80031b6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80031b8:	e006      	b.n	80031c8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80031c2:	e001      	b.n	80031c8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40012400 	.word	0x40012400
 80031d8:	40012800 	.word	0x40012800
 80031dc:	080036c3 	.word	0x080036c3
 80031e0:	0800373f 	.word	0x0800373f
 80031e4:	0800375b 	.word	0x0800375b

080031e8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b00      	cmp	r3, #0
 8003208:	d03e      	beq.n	8003288 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d039      	beq.n	8003288 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	2b00      	cmp	r3, #0
 800321e:	d105      	bne.n	800322c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003224:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003236:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800323a:	d11d      	bne.n	8003278 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003240:	2b00      	cmp	r3, #0
 8003242:	d119      	bne.n	8003278 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0220 	bic.w	r2, r2, #32
 8003252:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003258:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003264:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003270:	f043 0201 	orr.w	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7fe fad9 	bl	8001830 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f06f 0212 	mvn.w	r2, #18
 8003286:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328e:	2b00      	cmp	r3, #0
 8003290:	d04d      	beq.n	800332e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d048      	beq.n	800332e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d105      	bne.n	80032b4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ac:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80032be:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80032c2:	d012      	beq.n	80032ea <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d125      	bne.n	800331e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80032dc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80032e0:	d11d      	bne.n	800331e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d119      	bne.n	800331e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032f8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330e:	2b00      	cmp	r3, #0
 8003310:	d105      	bne.n	800331e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003316:	f043 0201 	orr.w	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fa35 	bl	800378e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 020c 	mvn.w	r2, #12
 800332c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d012      	beq.n	800335e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00d      	beq.n	800335e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003346:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f812 	bl	8003378 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f06f 0201 	mvn.w	r2, #1
 800335c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800335e:	bf00      	nop
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr

0800338a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x20>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e0dc      	b.n	8003576 <HAL_ADC_ConfigChannel+0x1da>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b06      	cmp	r3, #6
 80033ca:	d81c      	bhi.n	8003406 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	3b05      	subs	r3, #5
 80033de:	221f      	movs	r2, #31
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	4019      	ands	r1, r3
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	3b05      	subs	r3, #5
 80033f8:	fa00 f203 	lsl.w	r2, r0, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	635a      	str	r2, [r3, #52]	@ 0x34
 8003404:	e03c      	b.n	8003480 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b0c      	cmp	r3, #12
 800340c:	d81c      	bhi.n	8003448 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	3b23      	subs	r3, #35	@ 0x23
 8003420:	221f      	movs	r2, #31
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	4019      	ands	r1, r3
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	3b23      	subs	r3, #35	@ 0x23
 800343a:	fa00 f203 	lsl.w	r2, r0, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	631a      	str	r2, [r3, #48]	@ 0x30
 8003446:	e01b      	b.n	8003480 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	3b41      	subs	r3, #65	@ 0x41
 800345a:	221f      	movs	r2, #31
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	4019      	ands	r1, r3
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	3b41      	subs	r3, #65	@ 0x41
 8003474:	fa00 f203 	lsl.w	r2, r0, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b09      	cmp	r3, #9
 8003486:	d91c      	bls.n	80034c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68d9      	ldr	r1, [r3, #12]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4613      	mov	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4413      	add	r3, r2
 8003498:	3b1e      	subs	r3, #30
 800349a:	2207      	movs	r2, #7
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	4019      	ands	r1, r3
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	6898      	ldr	r0, [r3, #8]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4413      	add	r3, r2
 80034b2:	3b1e      	subs	r3, #30
 80034b4:	fa00 f203 	lsl.w	r2, r0, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	60da      	str	r2, [r3, #12]
 80034c0:	e019      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6919      	ldr	r1, [r3, #16]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4613      	mov	r3, r2
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	4413      	add	r3, r2
 80034d2:	2207      	movs	r2, #7
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	4019      	ands	r1, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	6898      	ldr	r0, [r3, #8]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4613      	mov	r3, r2
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	4413      	add	r3, r2
 80034ea:	fa00 f203 	lsl.w	r2, r0, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b10      	cmp	r3, #16
 80034fc:	d003      	beq.n	8003506 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003502:	2b11      	cmp	r3, #17
 8003504:	d132      	bne.n	800356c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1d      	ldr	r2, [pc, #116]	@ (8003580 <HAL_ADC_ConfigChannel+0x1e4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d125      	bne.n	800355c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d126      	bne.n	800356c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800352c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b10      	cmp	r3, #16
 8003534:	d11a      	bne.n	800356c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003536:	4b13      	ldr	r3, [pc, #76]	@ (8003584 <HAL_ADC_ConfigChannel+0x1e8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a13      	ldr	r2, [pc, #76]	@ (8003588 <HAL_ADC_ConfigChannel+0x1ec>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	0c9a      	lsrs	r2, r3, #18
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800354c:	e002      	b.n	8003554 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	3b01      	subs	r3, #1
 8003552:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f9      	bne.n	800354e <HAL_ADC_ConfigChannel+0x1b2>
 800355a:	e007      	b.n	800356c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003574:	7bfb      	ldrb	r3, [r7, #15]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr
 8003580:	40012400 	.word	0x40012400
 8003584:	2000000c 	.word	0x2000000c
 8003588:	431bde83 	.word	0x431bde83

0800358c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d040      	beq.n	800362c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0201 	orr.w	r2, r2, #1
 80035b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003638 <ADC_Enable+0xac>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1f      	ldr	r2, [pc, #124]	@ (800363c <ADC_Enable+0xb0>)
 80035c0:	fba2 2303 	umull	r2, r3, r2, r3
 80035c4:	0c9b      	lsrs	r3, r3, #18
 80035c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035c8:	e002      	b.n	80035d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f9      	bne.n	80035ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035d6:	f7ff fc23 	bl	8002e20 <HAL_GetTick>
 80035da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035dc:	e01f      	b.n	800361e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035de:	f7ff fc1f 	bl	8002e20 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d918      	bls.n	800361e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d011      	beq.n	800361e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	f043 0210 	orr.w	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360a:	f043 0201 	orr.w	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e007      	b.n	800362e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b01      	cmp	r3, #1
 800362a:	d1d8      	bne.n	80035de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	2000000c 	.word	0x2000000c
 800363c:	431bde83 	.word	0x431bde83

08003640 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b01      	cmp	r3, #1
 8003658:	d12e      	bne.n	80036b8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0201 	bic.w	r2, r2, #1
 8003668:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800366a:	f7ff fbd9 	bl	8002e20 <HAL_GetTick>
 800366e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003670:	e01b      	b.n	80036aa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003672:	f7ff fbd5 	bl	8002e20 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d914      	bls.n	80036aa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d10d      	bne.n	80036aa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003692:	f043 0210 	orr.w	r2, r3, #16
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369e:	f043 0201 	orr.w	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e007      	b.n	80036ba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d0dc      	beq.n	8003672 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ce:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d127      	bne.n	800372c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80036f2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80036f6:	d115      	bne.n	8003724 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d111      	bne.n	8003724 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003704:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003710:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d105      	bne.n	8003724 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	f043 0201 	orr.w	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f7fe f883 	bl	8001830 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800372a:	e004      	b.n	8003736 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	4798      	blx	r3
}
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f7ff fe0a 	bl	8003366 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003752:	bf00      	nop
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800376c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003778:	f043 0204 	orr.w	r2, r3, #4
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7ff fe02 	bl	800338a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr

080037a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b0:	4b0c      	ldr	r3, [pc, #48]	@ (80037e4 <__NVIC_SetPriorityGrouping+0x44>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037bc:	4013      	ands	r3, r2
 80037be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d2:	4a04      	ldr	r2, [pc, #16]	@ (80037e4 <__NVIC_SetPriorityGrouping+0x44>)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	60d3      	str	r3, [r2, #12]
}
 80037d8:	bf00      	nop
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037ec:	4b04      	ldr	r3, [pc, #16]	@ (8003800 <__NVIC_GetPriorityGrouping+0x18>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	0a1b      	lsrs	r3, r3, #8
 80037f2:	f003 0307 	and.w	r3, r3, #7
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	2b00      	cmp	r3, #0
 8003814:	db0b      	blt.n	800382e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	f003 021f 	and.w	r2, r3, #31
 800381c:	4906      	ldr	r1, [pc, #24]	@ (8003838 <__NVIC_EnableIRQ+0x34>)
 800381e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	2001      	movs	r0, #1
 8003826:	fa00 f202 	lsl.w	r2, r0, r2
 800382a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr
 8003838:	e000e100 	.word	0xe000e100

0800383c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	6039      	str	r1, [r7, #0]
 8003846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384c:	2b00      	cmp	r3, #0
 800384e:	db0a      	blt.n	8003866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	b2da      	uxtb	r2, r3
 8003854:	490c      	ldr	r1, [pc, #48]	@ (8003888 <__NVIC_SetPriority+0x4c>)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	0112      	lsls	r2, r2, #4
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	440b      	add	r3, r1
 8003860:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003864:	e00a      	b.n	800387c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	b2da      	uxtb	r2, r3
 800386a:	4908      	ldr	r1, [pc, #32]	@ (800388c <__NVIC_SetPriority+0x50>)
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	3b04      	subs	r3, #4
 8003874:	0112      	lsls	r2, r2, #4
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	440b      	add	r3, r1
 800387a:	761a      	strb	r2, [r3, #24]
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	e000e100 	.word	0xe000e100
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003890:	b480      	push	{r7}
 8003892:	b089      	sub	sp, #36	@ 0x24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f1c3 0307 	rsb	r3, r3, #7
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	bf28      	it	cs
 80038ae:	2304      	movcs	r3, #4
 80038b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3304      	adds	r3, #4
 80038b6:	2b06      	cmp	r3, #6
 80038b8:	d902      	bls.n	80038c0 <NVIC_EncodePriority+0x30>
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3b03      	subs	r3, #3
 80038be:	e000      	b.n	80038c2 <NVIC_EncodePriority+0x32>
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c4:	f04f 32ff 	mov.w	r2, #4294967295
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43da      	mvns	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	401a      	ands	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038d8:	f04f 31ff 	mov.w	r1, #4294967295
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	fa01 f303 	lsl.w	r3, r1, r3
 80038e2:	43d9      	mvns	r1, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e8:	4313      	orrs	r3, r2
         );
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3724      	adds	r7, #36	@ 0x24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3b01      	subs	r3, #1
 8003900:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003904:	d301      	bcc.n	800390a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003906:	2301      	movs	r3, #1
 8003908:	e00f      	b.n	800392a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800390a:	4a0a      	ldr	r2, [pc, #40]	@ (8003934 <SysTick_Config+0x40>)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3b01      	subs	r3, #1
 8003910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003912:	210f      	movs	r1, #15
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	f7ff ff90 	bl	800383c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800391c:	4b05      	ldr	r3, [pc, #20]	@ (8003934 <SysTick_Config+0x40>)
 800391e:	2200      	movs	r2, #0
 8003920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003922:	4b04      	ldr	r3, [pc, #16]	@ (8003934 <SysTick_Config+0x40>)
 8003924:	2207      	movs	r2, #7
 8003926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	e000e010 	.word	0xe000e010

08003938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ff2d 	bl	80037a0 <__NVIC_SetPriorityGrouping>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800394e:	b580      	push	{r7, lr}
 8003950:	b086      	sub	sp, #24
 8003952:	af00      	add	r7, sp, #0
 8003954:	4603      	mov	r3, r0
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800395c:	2300      	movs	r3, #0
 800395e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003960:	f7ff ff42 	bl	80037e8 <__NVIC_GetPriorityGrouping>
 8003964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	68b9      	ldr	r1, [r7, #8]
 800396a:	6978      	ldr	r0, [r7, #20]
 800396c:	f7ff ff90 	bl	8003890 <NVIC_EncodePriority>
 8003970:	4602      	mov	r2, r0
 8003972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003976:	4611      	mov	r1, r2
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff ff5f 	bl	800383c <__NVIC_SetPriority>
}
 800397e:	bf00      	nop
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	4603      	mov	r3, r0
 800398e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff ff35 	bl	8003804 <__NVIC_EnableIRQ>
}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff ffa2 	bl	80038f4 <SysTick_Config>
 80039b0:	4603      	mov	r3, r0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e043      	b.n	8003a5a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	4b22      	ldr	r3, [pc, #136]	@ (8003a64 <HAL_DMA_Init+0xa8>)
 80039da:	4413      	add	r3, r2
 80039dc:	4a22      	ldr	r2, [pc, #136]	@ (8003a68 <HAL_DMA_Init+0xac>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	091b      	lsrs	r3, r3, #4
 80039e4:	009a      	lsls	r2, r3, #2
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a1f      	ldr	r2, [pc, #124]	@ (8003a6c <HAL_DMA_Init+0xb0>)
 80039ee:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003a06:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003a0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr
 8003a64:	bffdfff8 	.word	0xbffdfff8
 8003a68:	cccccccd 	.word	0xcccccccd
 8003a6c:	40020000 	.word	0x40020000

08003a70 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_DMA_Start_IT+0x20>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e04b      	b.n	8003b28 <HAL_DMA_Start_IT+0xb8>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d13a      	bne.n	8003b1a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0201 	bic.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 f937 	bl	8003d3c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d008      	beq.n	8003ae8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 020e 	orr.w	r2, r2, #14
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	e00f      	b.n	8003b08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0204 	bic.w	r2, r2, #4
 8003af6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 020a 	orr.w	r2, r2, #10
 8003b06:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	e005      	b.n	8003b26 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b22:	2302      	movs	r3, #2
 8003b24:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d04f      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xc8>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d04a      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d107      	bne.n	8003b80 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0204 	bic.w	r2, r2, #4
 8003b7e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a66      	ldr	r2, [pc, #408]	@ (8003d20 <HAL_DMA_IRQHandler+0x1f0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d029      	beq.n	8003bde <HAL_DMA_IRQHandler+0xae>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a65      	ldr	r2, [pc, #404]	@ (8003d24 <HAL_DMA_IRQHandler+0x1f4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d022      	beq.n	8003bda <HAL_DMA_IRQHandler+0xaa>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a63      	ldr	r2, [pc, #396]	@ (8003d28 <HAL_DMA_IRQHandler+0x1f8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d01a      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0xa4>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a62      	ldr	r2, [pc, #392]	@ (8003d2c <HAL_DMA_IRQHandler+0x1fc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d012      	beq.n	8003bce <HAL_DMA_IRQHandler+0x9e>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a60      	ldr	r2, [pc, #384]	@ (8003d30 <HAL_DMA_IRQHandler+0x200>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0x98>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a5f      	ldr	r2, [pc, #380]	@ (8003d34 <HAL_DMA_IRQHandler+0x204>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d102      	bne.n	8003bc2 <HAL_DMA_IRQHandler+0x92>
 8003bbc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003bc0:	e00e      	b.n	8003be0 <HAL_DMA_IRQHandler+0xb0>
 8003bc2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003bc6:	e00b      	b.n	8003be0 <HAL_DMA_IRQHandler+0xb0>
 8003bc8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003bcc:	e008      	b.n	8003be0 <HAL_DMA_IRQHandler+0xb0>
 8003bce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003bd2:	e005      	b.n	8003be0 <HAL_DMA_IRQHandler+0xb0>
 8003bd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bd8:	e002      	b.n	8003be0 <HAL_DMA_IRQHandler+0xb0>
 8003bda:	2340      	movs	r3, #64	@ 0x40
 8003bdc:	e000      	b.n	8003be0 <HAL_DMA_IRQHandler+0xb0>
 8003bde:	2304      	movs	r3, #4
 8003be0:	4a55      	ldr	r2, [pc, #340]	@ (8003d38 <HAL_DMA_IRQHandler+0x208>)
 8003be2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8094 	beq.w	8003d16 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003bf6:	e08e      	b.n	8003d16 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d056      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x186>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d051      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10b      	bne.n	8003c38 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 020a 	bic.w	r2, r2, #10
 8003c2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a38      	ldr	r2, [pc, #224]	@ (8003d20 <HAL_DMA_IRQHandler+0x1f0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d029      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x166>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a37      	ldr	r2, [pc, #220]	@ (8003d24 <HAL_DMA_IRQHandler+0x1f4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d022      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x162>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a35      	ldr	r2, [pc, #212]	@ (8003d28 <HAL_DMA_IRQHandler+0x1f8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d01a      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x15c>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a34      	ldr	r2, [pc, #208]	@ (8003d2c <HAL_DMA_IRQHandler+0x1fc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d012      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x156>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a32      	ldr	r2, [pc, #200]	@ (8003d30 <HAL_DMA_IRQHandler+0x200>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00a      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x150>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a31      	ldr	r2, [pc, #196]	@ (8003d34 <HAL_DMA_IRQHandler+0x204>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d102      	bne.n	8003c7a <HAL_DMA_IRQHandler+0x14a>
 8003c74:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003c78:	e00e      	b.n	8003c98 <HAL_DMA_IRQHandler+0x168>
 8003c7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c7e:	e00b      	b.n	8003c98 <HAL_DMA_IRQHandler+0x168>
 8003c80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c84:	e008      	b.n	8003c98 <HAL_DMA_IRQHandler+0x168>
 8003c86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c8a:	e005      	b.n	8003c98 <HAL_DMA_IRQHandler+0x168>
 8003c8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c90:	e002      	b.n	8003c98 <HAL_DMA_IRQHandler+0x168>
 8003c92:	2320      	movs	r3, #32
 8003c94:	e000      	b.n	8003c98 <HAL_DMA_IRQHandler+0x168>
 8003c96:	2302      	movs	r3, #2
 8003c98:	4a27      	ldr	r2, [pc, #156]	@ (8003d38 <HAL_DMA_IRQHandler+0x208>)
 8003c9a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d034      	beq.n	8003d16 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003cb4:	e02f      	b.n	8003d16 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cba:	2208      	movs	r2, #8
 8003cbc:	409a      	lsls	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d028      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x1e8>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d023      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 020e 	bic.w	r2, r2, #14
 8003cde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce8:	2101      	movs	r1, #1
 8003cea:	fa01 f202 	lsl.w	r2, r1, r2
 8003cee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d004      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	4798      	blx	r3
    }
  }
  return;
 8003d16:	bf00      	nop
 8003d18:	bf00      	nop
}
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40020008 	.word	0x40020008
 8003d24:	4002001c 	.word	0x4002001c
 8003d28:	40020030 	.word	0x40020030
 8003d2c:	40020044 	.word	0x40020044
 8003d30:	40020058 	.word	0x40020058
 8003d34:	4002006c 	.word	0x4002006c
 8003d38:	40020000 	.word	0x40020000

08003d3c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d52:	2101      	movs	r1, #1
 8003d54:	fa01 f202 	lsl.w	r2, r1, r2
 8003d58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b10      	cmp	r3, #16
 8003d68:	d108      	bne.n	8003d7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d7a:	e007      	b.n	8003d8c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	60da      	str	r2, [r3, #12]
}
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b08b      	sub	sp, #44	@ 0x2c
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003da2:	2300      	movs	r3, #0
 8003da4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003da6:	2300      	movs	r3, #0
 8003da8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003daa:	e169      	b.n	8004080 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003dac:	2201      	movs	r2, #1
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	f040 8158 	bne.w	800407a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4a9a      	ldr	r2, [pc, #616]	@ (8004038 <HAL_GPIO_Init+0x2a0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d05e      	beq.n	8003e92 <HAL_GPIO_Init+0xfa>
 8003dd4:	4a98      	ldr	r2, [pc, #608]	@ (8004038 <HAL_GPIO_Init+0x2a0>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d875      	bhi.n	8003ec6 <HAL_GPIO_Init+0x12e>
 8003dda:	4a98      	ldr	r2, [pc, #608]	@ (800403c <HAL_GPIO_Init+0x2a4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d058      	beq.n	8003e92 <HAL_GPIO_Init+0xfa>
 8003de0:	4a96      	ldr	r2, [pc, #600]	@ (800403c <HAL_GPIO_Init+0x2a4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d86f      	bhi.n	8003ec6 <HAL_GPIO_Init+0x12e>
 8003de6:	4a96      	ldr	r2, [pc, #600]	@ (8004040 <HAL_GPIO_Init+0x2a8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d052      	beq.n	8003e92 <HAL_GPIO_Init+0xfa>
 8003dec:	4a94      	ldr	r2, [pc, #592]	@ (8004040 <HAL_GPIO_Init+0x2a8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d869      	bhi.n	8003ec6 <HAL_GPIO_Init+0x12e>
 8003df2:	4a94      	ldr	r2, [pc, #592]	@ (8004044 <HAL_GPIO_Init+0x2ac>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d04c      	beq.n	8003e92 <HAL_GPIO_Init+0xfa>
 8003df8:	4a92      	ldr	r2, [pc, #584]	@ (8004044 <HAL_GPIO_Init+0x2ac>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d863      	bhi.n	8003ec6 <HAL_GPIO_Init+0x12e>
 8003dfe:	4a92      	ldr	r2, [pc, #584]	@ (8004048 <HAL_GPIO_Init+0x2b0>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d046      	beq.n	8003e92 <HAL_GPIO_Init+0xfa>
 8003e04:	4a90      	ldr	r2, [pc, #576]	@ (8004048 <HAL_GPIO_Init+0x2b0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d85d      	bhi.n	8003ec6 <HAL_GPIO_Init+0x12e>
 8003e0a:	2b12      	cmp	r3, #18
 8003e0c:	d82a      	bhi.n	8003e64 <HAL_GPIO_Init+0xcc>
 8003e0e:	2b12      	cmp	r3, #18
 8003e10:	d859      	bhi.n	8003ec6 <HAL_GPIO_Init+0x12e>
 8003e12:	a201      	add	r2, pc, #4	@ (adr r2, 8003e18 <HAL_GPIO_Init+0x80>)
 8003e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e18:	08003e93 	.word	0x08003e93
 8003e1c:	08003e6d 	.word	0x08003e6d
 8003e20:	08003e7f 	.word	0x08003e7f
 8003e24:	08003ec1 	.word	0x08003ec1
 8003e28:	08003ec7 	.word	0x08003ec7
 8003e2c:	08003ec7 	.word	0x08003ec7
 8003e30:	08003ec7 	.word	0x08003ec7
 8003e34:	08003ec7 	.word	0x08003ec7
 8003e38:	08003ec7 	.word	0x08003ec7
 8003e3c:	08003ec7 	.word	0x08003ec7
 8003e40:	08003ec7 	.word	0x08003ec7
 8003e44:	08003ec7 	.word	0x08003ec7
 8003e48:	08003ec7 	.word	0x08003ec7
 8003e4c:	08003ec7 	.word	0x08003ec7
 8003e50:	08003ec7 	.word	0x08003ec7
 8003e54:	08003ec7 	.word	0x08003ec7
 8003e58:	08003ec7 	.word	0x08003ec7
 8003e5c:	08003e75 	.word	0x08003e75
 8003e60:	08003e89 	.word	0x08003e89
 8003e64:	4a79      	ldr	r2, [pc, #484]	@ (800404c <HAL_GPIO_Init+0x2b4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e6a:	e02c      	b.n	8003ec6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	623b      	str	r3, [r7, #32]
          break;
 8003e72:	e029      	b.n	8003ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	623b      	str	r3, [r7, #32]
          break;
 8003e7c:	e024      	b.n	8003ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	3308      	adds	r3, #8
 8003e84:	623b      	str	r3, [r7, #32]
          break;
 8003e86:	e01f      	b.n	8003ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	330c      	adds	r3, #12
 8003e8e:	623b      	str	r3, [r7, #32]
          break;
 8003e90:	e01a      	b.n	8003ec8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d102      	bne.n	8003ea0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e9a:	2304      	movs	r3, #4
 8003e9c:	623b      	str	r3, [r7, #32]
          break;
 8003e9e:	e013      	b.n	8003ec8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d105      	bne.n	8003eb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ea8:	2308      	movs	r3, #8
 8003eaa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	611a      	str	r2, [r3, #16]
          break;
 8003eb2:	e009      	b.n	8003ec8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	615a      	str	r2, [r3, #20]
          break;
 8003ebe:	e003      	b.n	8003ec8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	623b      	str	r3, [r7, #32]
          break;
 8003ec4:	e000      	b.n	8003ec8 <HAL_GPIO_Init+0x130>
          break;
 8003ec6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	2bff      	cmp	r3, #255	@ 0xff
 8003ecc:	d801      	bhi.n	8003ed2 <HAL_GPIO_Init+0x13a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	e001      	b.n	8003ed6 <HAL_GPIO_Init+0x13e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2bff      	cmp	r3, #255	@ 0xff
 8003edc:	d802      	bhi.n	8003ee4 <HAL_GPIO_Init+0x14c>
 8003ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	e002      	b.n	8003eea <HAL_GPIO_Init+0x152>
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	3b08      	subs	r3, #8
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	210f      	movs	r1, #15
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	401a      	ands	r2, r3
 8003efc:	6a39      	ldr	r1, [r7, #32]
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	fa01 f303 	lsl.w	r3, r1, r3
 8003f04:	431a      	orrs	r2, r3
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 80b1 	beq.w	800407a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f18:	4b4d      	ldr	r3, [pc, #308]	@ (8004050 <HAL_GPIO_Init+0x2b8>)
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	4a4c      	ldr	r2, [pc, #304]	@ (8004050 <HAL_GPIO_Init+0x2b8>)
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	6193      	str	r3, [r2, #24]
 8003f24:	4b4a      	ldr	r3, [pc, #296]	@ (8004050 <HAL_GPIO_Init+0x2b8>)
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f30:	4a48      	ldr	r2, [pc, #288]	@ (8004054 <HAL_GPIO_Init+0x2bc>)
 8003f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f34:	089b      	lsrs	r3, r3, #2
 8003f36:	3302      	adds	r3, #2
 8003f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	220f      	movs	r2, #15
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4013      	ands	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a40      	ldr	r2, [pc, #256]	@ (8004058 <HAL_GPIO_Init+0x2c0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d013      	beq.n	8003f84 <HAL_GPIO_Init+0x1ec>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a3f      	ldr	r2, [pc, #252]	@ (800405c <HAL_GPIO_Init+0x2c4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00d      	beq.n	8003f80 <HAL_GPIO_Init+0x1e8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a3e      	ldr	r2, [pc, #248]	@ (8004060 <HAL_GPIO_Init+0x2c8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d007      	beq.n	8003f7c <HAL_GPIO_Init+0x1e4>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a3d      	ldr	r2, [pc, #244]	@ (8004064 <HAL_GPIO_Init+0x2cc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d101      	bne.n	8003f78 <HAL_GPIO_Init+0x1e0>
 8003f74:	2303      	movs	r3, #3
 8003f76:	e006      	b.n	8003f86 <HAL_GPIO_Init+0x1ee>
 8003f78:	2304      	movs	r3, #4
 8003f7a:	e004      	b.n	8003f86 <HAL_GPIO_Init+0x1ee>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e002      	b.n	8003f86 <HAL_GPIO_Init+0x1ee>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <HAL_GPIO_Init+0x1ee>
 8003f84:	2300      	movs	r3, #0
 8003f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f88:	f002 0203 	and.w	r2, r2, #3
 8003f8c:	0092      	lsls	r2, r2, #2
 8003f8e:	4093      	lsls	r3, r2
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f96:	492f      	ldr	r1, [pc, #188]	@ (8004054 <HAL_GPIO_Init+0x2bc>)
 8003f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9a:	089b      	lsrs	r3, r3, #2
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d006      	beq.n	8003fbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8004068 <HAL_GPIO_Init+0x2d0>)
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	492c      	ldr	r1, [pc, #176]	@ (8004068 <HAL_GPIO_Init+0x2d0>)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	608b      	str	r3, [r1, #8]
 8003fbc:	e006      	b.n	8003fcc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8004068 <HAL_GPIO_Init+0x2d0>)
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	4928      	ldr	r1, [pc, #160]	@ (8004068 <HAL_GPIO_Init+0x2d0>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d006      	beq.n	8003fe6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003fd8:	4b23      	ldr	r3, [pc, #140]	@ (8004068 <HAL_GPIO_Init+0x2d0>)
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	4922      	ldr	r1, [pc, #136]	@ (8004068 <HAL_GPIO_Init+0x2d0>)
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60cb      	str	r3, [r1, #12]
 8003fe4:	e006      	b.n	8003ff4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003fe6:	4b20      	ldr	r3, [pc, #128]	@ (8004068 <HAL_GPIO_Init+0x2d0>)
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	491e      	ldr	r1, [pc, #120]	@ (8004068 <HAL_GPIO_Init+0x2d0>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d006      	beq.n	800400e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004000:	4b19      	ldr	r3, [pc, #100]	@ (8004068 <HAL_GPIO_Init+0x2d0>)
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	4918      	ldr	r1, [pc, #96]	@ (8004068 <HAL_GPIO_Init+0x2d0>)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	4313      	orrs	r3, r2
 800400a:	604b      	str	r3, [r1, #4]
 800400c:	e006      	b.n	800401c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800400e:	4b16      	ldr	r3, [pc, #88]	@ (8004068 <HAL_GPIO_Init+0x2d0>)
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	43db      	mvns	r3, r3
 8004016:	4914      	ldr	r1, [pc, #80]	@ (8004068 <HAL_GPIO_Init+0x2d0>)
 8004018:	4013      	ands	r3, r2
 800401a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d021      	beq.n	800406c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004028:	4b0f      	ldr	r3, [pc, #60]	@ (8004068 <HAL_GPIO_Init+0x2d0>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	490e      	ldr	r1, [pc, #56]	@ (8004068 <HAL_GPIO_Init+0x2d0>)
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]
 8004034:	e021      	b.n	800407a <HAL_GPIO_Init+0x2e2>
 8004036:	bf00      	nop
 8004038:	10320000 	.word	0x10320000
 800403c:	10310000 	.word	0x10310000
 8004040:	10220000 	.word	0x10220000
 8004044:	10210000 	.word	0x10210000
 8004048:	10120000 	.word	0x10120000
 800404c:	10110000 	.word	0x10110000
 8004050:	40021000 	.word	0x40021000
 8004054:	40010000 	.word	0x40010000
 8004058:	40010800 	.word	0x40010800
 800405c:	40010c00 	.word	0x40010c00
 8004060:	40011000 	.word	0x40011000
 8004064:	40011400 	.word	0x40011400
 8004068:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800406c:	4b0b      	ldr	r3, [pc, #44]	@ (800409c <HAL_GPIO_Init+0x304>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	43db      	mvns	r3, r3
 8004074:	4909      	ldr	r1, [pc, #36]	@ (800409c <HAL_GPIO_Init+0x304>)
 8004076:	4013      	ands	r3, r2
 8004078:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	3301      	adds	r3, #1
 800407e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004086:	fa22 f303 	lsr.w	r3, r2, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	f47f ae8e 	bne.w	8003dac <HAL_GPIO_Init+0x14>
  }
}
 8004090:	bf00      	nop
 8004092:	bf00      	nop
 8004094:	372c      	adds	r7, #44	@ 0x2c
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr
 800409c:	40010400 	.word	0x40010400

080040a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	807b      	strh	r3, [r7, #2]
 80040ac:	4613      	mov	r3, r2
 80040ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040b0:	787b      	ldrb	r3, [r7, #1]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040b6:	887a      	ldrh	r2, [r7, #2]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80040bc:	e003      	b.n	80040c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040be:	887b      	ldrh	r3, [r7, #2]
 80040c0:	041a      	lsls	r2, r3, #16
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	611a      	str	r2, [r3, #16]
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr

080040d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040e2:	887a      	ldrh	r2, [r7, #2]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4013      	ands	r3, r2
 80040e8:	041a      	lsls	r2, r3, #16
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	43d9      	mvns	r1, r3
 80040ee:	887b      	ldrh	r3, [r7, #2]
 80040f0:	400b      	ands	r3, r1
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	611a      	str	r2, [r3, #16]
}
 80040f8:	bf00      	nop
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr
	...

08004104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e12b      	b.n	800436e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fe fbce 	bl	80028cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2224      	movs	r2, #36	@ 0x24
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0201 	bic.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004168:	f001 feaa 	bl	8005ec0 <HAL_RCC_GetPCLK1Freq>
 800416c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	4a81      	ldr	r2, [pc, #516]	@ (8004378 <HAL_I2C_Init+0x274>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d807      	bhi.n	8004188 <HAL_I2C_Init+0x84>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4a80      	ldr	r2, [pc, #512]	@ (800437c <HAL_I2C_Init+0x278>)
 800417c:	4293      	cmp	r3, r2
 800417e:	bf94      	ite	ls
 8004180:	2301      	movls	r3, #1
 8004182:	2300      	movhi	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	e006      	b.n	8004196 <HAL_I2C_Init+0x92>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4a7d      	ldr	r2, [pc, #500]	@ (8004380 <HAL_I2C_Init+0x27c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	bf94      	ite	ls
 8004190:	2301      	movls	r3, #1
 8004192:	2300      	movhi	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e0e7      	b.n	800436e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4a78      	ldr	r2, [pc, #480]	@ (8004384 <HAL_I2C_Init+0x280>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	0c9b      	lsrs	r3, r3, #18
 80041a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4a6a      	ldr	r2, [pc, #424]	@ (8004378 <HAL_I2C_Init+0x274>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d802      	bhi.n	80041d8 <HAL_I2C_Init+0xd4>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	3301      	adds	r3, #1
 80041d6:	e009      	b.n	80041ec <HAL_I2C_Init+0xe8>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	4a69      	ldr	r2, [pc, #420]	@ (8004388 <HAL_I2C_Init+0x284>)
 80041e4:	fba2 2303 	umull	r2, r3, r2, r3
 80041e8:	099b      	lsrs	r3, r3, #6
 80041ea:	3301      	adds	r3, #1
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	430b      	orrs	r3, r1
 80041f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80041fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	495c      	ldr	r1, [pc, #368]	@ (8004378 <HAL_I2C_Init+0x274>)
 8004208:	428b      	cmp	r3, r1
 800420a:	d819      	bhi.n	8004240 <HAL_I2C_Init+0x13c>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	1e59      	subs	r1, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	fbb1 f3f3 	udiv	r3, r1, r3
 800421a:	1c59      	adds	r1, r3, #1
 800421c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004220:	400b      	ands	r3, r1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_I2C_Init+0x138>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1e59      	subs	r1, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	fbb1 f3f3 	udiv	r3, r1, r3
 8004234:	3301      	adds	r3, #1
 8004236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423a:	e051      	b.n	80042e0 <HAL_I2C_Init+0x1dc>
 800423c:	2304      	movs	r3, #4
 800423e:	e04f      	b.n	80042e0 <HAL_I2C_Init+0x1dc>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d111      	bne.n	800426c <HAL_I2C_Init+0x168>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	1e58      	subs	r0, r3, #1
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6859      	ldr	r1, [r3, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	440b      	add	r3, r1
 8004256:	fbb0 f3f3 	udiv	r3, r0, r3
 800425a:	3301      	adds	r3, #1
 800425c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004260:	2b00      	cmp	r3, #0
 8004262:	bf0c      	ite	eq
 8004264:	2301      	moveq	r3, #1
 8004266:	2300      	movne	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	e012      	b.n	8004292 <HAL_I2C_Init+0x18e>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	1e58      	subs	r0, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6859      	ldr	r1, [r3, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	0099      	lsls	r1, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004282:	3301      	adds	r3, #1
 8004284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004288:	2b00      	cmp	r3, #0
 800428a:	bf0c      	ite	eq
 800428c:	2301      	moveq	r3, #1
 800428e:	2300      	movne	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_I2C_Init+0x196>
 8004296:	2301      	movs	r3, #1
 8004298:	e022      	b.n	80042e0 <HAL_I2C_Init+0x1dc>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10e      	bne.n	80042c0 <HAL_I2C_Init+0x1bc>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	1e58      	subs	r0, r3, #1
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6859      	ldr	r1, [r3, #4]
 80042aa:	460b      	mov	r3, r1
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	440b      	add	r3, r1
 80042b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80042b4:	3301      	adds	r3, #1
 80042b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042be:	e00f      	b.n	80042e0 <HAL_I2C_Init+0x1dc>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	1e58      	subs	r0, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6859      	ldr	r1, [r3, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	0099      	lsls	r1, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042d6:	3301      	adds	r3, #1
 80042d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	6809      	ldr	r1, [r1, #0]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69da      	ldr	r2, [r3, #28]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800430e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6911      	ldr	r1, [r2, #16]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68d2      	ldr	r2, [r2, #12]
 800431a:	4311      	orrs	r1, r2
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	430b      	orrs	r3, r1
 8004322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2220      	movs	r2, #32
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	000186a0 	.word	0x000186a0
 800437c:	001e847f 	.word	0x001e847f
 8004380:	003d08ff 	.word	0x003d08ff
 8004384:	431bde83 	.word	0x431bde83
 8004388:	10624dd3 	.word	0x10624dd3

0800438c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af02      	add	r7, sp, #8
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	607a      	str	r2, [r7, #4]
 8004396:	461a      	mov	r2, r3
 8004398:	460b      	mov	r3, r1
 800439a:	817b      	strh	r3, [r7, #10]
 800439c:	4613      	mov	r3, r2
 800439e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043a0:	f7fe fd3e 	bl	8002e20 <HAL_GetTick>
 80043a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	f040 80e0 	bne.w	8004574 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	2319      	movs	r3, #25
 80043ba:	2201      	movs	r2, #1
 80043bc:	4970      	ldr	r1, [pc, #448]	@ (8004580 <HAL_I2C_Master_Transmit+0x1f4>)
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 ff7e 	bl	80052c0 <I2C_WaitOnFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80043ca:	2302      	movs	r3, #2
 80043cc:	e0d3      	b.n	8004576 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_I2C_Master_Transmit+0x50>
 80043d8:	2302      	movs	r3, #2
 80043da:	e0cc      	b.n	8004576 <HAL_I2C_Master_Transmit+0x1ea>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d007      	beq.n	8004402 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0201 	orr.w	r2, r2, #1
 8004400:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004410:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2221      	movs	r2, #33	@ 0x21
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2210      	movs	r2, #16
 800441e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	893a      	ldrh	r2, [r7, #8]
 8004432:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	4a50      	ldr	r2, [pc, #320]	@ (8004584 <HAL_I2C_Master_Transmit+0x1f8>)
 8004442:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004444:	8979      	ldrh	r1, [r7, #10]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	6a3a      	ldr	r2, [r7, #32]
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fd38 	bl	8004ec0 <I2C_MasterRequestWrite>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e08d      	b.n	8004576 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445a:	2300      	movs	r3, #0
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	613b      	str	r3, [r7, #16]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004470:	e066      	b.n	8004540 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	6a39      	ldr	r1, [r7, #32]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f001 f83c 	bl	80054f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00d      	beq.n	800449e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	2b04      	cmp	r3, #4
 8004488:	d107      	bne.n	800449a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004498:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e06b      	b.n	8004576 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	781a      	ldrb	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d11b      	bne.n	8004514 <HAL_I2C_Master_Transmit+0x188>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d017      	beq.n	8004514 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	781a      	ldrb	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	6a39      	ldr	r1, [r7, #32]
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f001 f833 	bl	8005584 <I2C_WaitOnBTFFlagUntilTimeout>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00d      	beq.n	8004540 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004528:	2b04      	cmp	r3, #4
 800452a:	d107      	bne.n	800453c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800453a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e01a      	b.n	8004576 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004544:	2b00      	cmp	r3, #0
 8004546:	d194      	bne.n	8004472 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	e000      	b.n	8004576 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004574:	2302      	movs	r3, #2
  }
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	00100002 	.word	0x00100002
 8004584:	ffff0000 	.word	0xffff0000

08004588 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	4608      	mov	r0, r1
 8004592:	4611      	mov	r1, r2
 8004594:	461a      	mov	r2, r3
 8004596:	4603      	mov	r3, r0
 8004598:	817b      	strh	r3, [r7, #10]
 800459a:	460b      	mov	r3, r1
 800459c:	813b      	strh	r3, [r7, #8]
 800459e:	4613      	mov	r3, r2
 80045a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045a2:	f7fe fc3d 	bl	8002e20 <HAL_GetTick>
 80045a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	f040 80d9 	bne.w	8004768 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	2319      	movs	r3, #25
 80045bc:	2201      	movs	r2, #1
 80045be:	496d      	ldr	r1, [pc, #436]	@ (8004774 <HAL_I2C_Mem_Write+0x1ec>)
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 fe7d 	bl	80052c0 <I2C_WaitOnFlagUntilTimeout>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80045cc:	2302      	movs	r3, #2
 80045ce:	e0cc      	b.n	800476a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_I2C_Mem_Write+0x56>
 80045da:	2302      	movs	r3, #2
 80045dc:	e0c5      	b.n	800476a <HAL_I2C_Mem_Write+0x1e2>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d007      	beq.n	8004604 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004612:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2221      	movs	r2, #33	@ 0x21
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2240      	movs	r2, #64	@ 0x40
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6a3a      	ldr	r2, [r7, #32]
 800462e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004634:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4a4d      	ldr	r2, [pc, #308]	@ (8004778 <HAL_I2C_Mem_Write+0x1f0>)
 8004644:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004646:	88f8      	ldrh	r0, [r7, #6]
 8004648:	893a      	ldrh	r2, [r7, #8]
 800464a:	8979      	ldrh	r1, [r7, #10]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	9301      	str	r3, [sp, #4]
 8004650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	4603      	mov	r3, r0
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 fcb4 	bl	8004fc4 <I2C_RequestMemoryWrite>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d052      	beq.n	8004708 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e081      	b.n	800476a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 ff42 	bl	80054f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00d      	beq.n	8004692 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	2b04      	cmp	r3, #4
 800467c:	d107      	bne.n	800468e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800468c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e06b      	b.n	800476a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004696:	781a      	ldrb	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d11b      	bne.n	8004708 <HAL_I2C_Mem_Write+0x180>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d017      	beq.n	8004708 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046dc:	781a      	ldrb	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1aa      	bne.n	8004666 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 ff35 	bl	8005584 <I2C_WaitOnBTFFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00d      	beq.n	800473c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004724:	2b04      	cmp	r3, #4
 8004726:	d107      	bne.n	8004738 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004736:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e016      	b.n	800476a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800474a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	e000      	b.n	800476a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004768:	2302      	movs	r3, #2
  }
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	00100002 	.word	0x00100002
 8004778:	ffff0000 	.word	0xffff0000

0800477c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b08c      	sub	sp, #48	@ 0x30
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	4608      	mov	r0, r1
 8004786:	4611      	mov	r1, r2
 8004788:	461a      	mov	r2, r3
 800478a:	4603      	mov	r3, r0
 800478c:	817b      	strh	r3, [r7, #10]
 800478e:	460b      	mov	r3, r1
 8004790:	813b      	strh	r3, [r7, #8]
 8004792:	4613      	mov	r3, r2
 8004794:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800479a:	f7fe fb41 	bl	8002e20 <HAL_GetTick>
 800479e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	f040 8250 	bne.w	8004c4e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	2319      	movs	r3, #25
 80047b4:	2201      	movs	r2, #1
 80047b6:	4982      	ldr	r1, [pc, #520]	@ (80049c0 <HAL_I2C_Mem_Read+0x244>)
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fd81 	bl	80052c0 <I2C_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80047c4:	2302      	movs	r3, #2
 80047c6:	e243      	b.n	8004c50 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_I2C_Mem_Read+0x5a>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e23c      	b.n	8004c50 <HAL_I2C_Mem_Read+0x4d4>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d007      	beq.n	80047fc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800480a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2222      	movs	r2, #34	@ 0x22
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2240      	movs	r2, #64	@ 0x40
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004826:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800482c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4a62      	ldr	r2, [pc, #392]	@ (80049c4 <HAL_I2C_Mem_Read+0x248>)
 800483c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800483e:	88f8      	ldrh	r0, [r7, #6]
 8004840:	893a      	ldrh	r2, [r7, #8]
 8004842:	8979      	ldrh	r1, [r7, #10]
 8004844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004846:	9301      	str	r3, [sp, #4]
 8004848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	4603      	mov	r3, r0
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 fc4e 	bl	80050f0 <I2C_RequestMemoryRead>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e1f8      	b.n	8004c50 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004862:	2b00      	cmp	r3, #0
 8004864:	d113      	bne.n	800488e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	61fb      	str	r3, [r7, #28]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	61fb      	str	r3, [r7, #28]
 800487a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	e1cc      	b.n	8004c28 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004892:	2b01      	cmp	r3, #1
 8004894:	d11e      	bne.n	80048d4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80048a6:	b672      	cpsid	i
}
 80048a8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048aa:	2300      	movs	r3, #0
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	61bb      	str	r3, [r7, #24]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80048d0:	b662      	cpsie	i
}
 80048d2:	e035      	b.n	8004940 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d11e      	bne.n	800491a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80048ec:	b672      	cpsid	i
}
 80048ee:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004914:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004916:	b662      	cpsie	i
}
 8004918:	e012      	b.n	8004940 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004928:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492a:	2300      	movs	r3, #0
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	613b      	str	r3, [r7, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	613b      	str	r3, [r7, #16]
 800493e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004940:	e172      	b.n	8004c28 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004946:	2b03      	cmp	r3, #3
 8004948:	f200 811f 	bhi.w	8004b8a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004950:	2b01      	cmp	r3, #1
 8004952:	d123      	bne.n	800499c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004956:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f000 fe5b 	bl	8005614 <I2C_WaitOnRXNEFlagUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e173      	b.n	8004c50 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800499a:	e145      	b.n	8004c28 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d152      	bne.n	8004a4a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a6:	9300      	str	r3, [sp, #0]
 80049a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049aa:	2200      	movs	r2, #0
 80049ac:	4906      	ldr	r1, [pc, #24]	@ (80049c8 <HAL_I2C_Mem_Read+0x24c>)
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 fc86 	bl	80052c0 <I2C_WaitOnFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d008      	beq.n	80049cc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e148      	b.n	8004c50 <HAL_I2C_Mem_Read+0x4d4>
 80049be:	bf00      	nop
 80049c0:	00100002 	.word	0x00100002
 80049c4:	ffff0000 	.word	0xffff0000
 80049c8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80049cc:	b672      	cpsid	i
}
 80049ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004a12:	b662      	cpsie	i
}
 8004a14:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a48:	e0ee      	b.n	8004c28 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a50:	2200      	movs	r2, #0
 8004a52:	4981      	ldr	r1, [pc, #516]	@ (8004c58 <HAL_I2C_Mem_Read+0x4dc>)
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fc33 	bl	80052c0 <I2C_WaitOnFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0f5      	b.n	8004c50 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a74:	b672      	cpsid	i
}
 8004a76:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004aaa:	4b6c      	ldr	r3, [pc, #432]	@ (8004c5c <HAL_I2C_Mem_Read+0x4e0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	08db      	lsrs	r3, r3, #3
 8004ab0:	4a6b      	ldr	r2, [pc, #428]	@ (8004c60 <HAL_I2C_Mem_Read+0x4e4>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	0a1a      	lsrs	r2, r3, #8
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	00da      	lsls	r2, r3, #3
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d118      	bne.n	8004b02 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	f043 0220 	orr.w	r2, r3, #32
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004af2:	b662      	cpsie	i
}
 8004af4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e0a6      	b.n	8004c50 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d1d9      	bne.n	8004ac4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004b52:	b662      	cpsie	i
}
 8004b54:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b88:	e04e      	b.n	8004c28 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b8c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fd40 	bl	8005614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e058      	b.n	8004c50 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d124      	bne.n	8004c28 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d107      	bne.n	8004bf6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bf4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f47f ae88 	bne.w	8004942 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e000      	b.n	8004c50 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004c4e:	2302      	movs	r3, #2
  }
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3728      	adds	r7, #40	@ 0x28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	00010004 	.word	0x00010004
 8004c5c:	2000000c 	.word	0x2000000c
 8004c60:	14f8b589 	.word	0x14f8b589

08004c64 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08a      	sub	sp, #40	@ 0x28
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	607a      	str	r2, [r7, #4]
 8004c6e:	603b      	str	r3, [r7, #0]
 8004c70:	460b      	mov	r3, r1
 8004c72:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004c74:	f7fe f8d4 	bl	8002e20 <HAL_GetTick>
 8004c78:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	f040 8111 	bne.w	8004eae <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	2319      	movs	r3, #25
 8004c92:	2201      	movs	r2, #1
 8004c94:	4988      	ldr	r1, [pc, #544]	@ (8004eb8 <HAL_I2C_IsDeviceReady+0x254>)
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 fb12 	bl	80052c0 <I2C_WaitOnFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e104      	b.n	8004eb0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_I2C_IsDeviceReady+0x50>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e0fd      	b.n	8004eb0 <HAL_I2C_IsDeviceReady+0x24c>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d007      	beq.n	8004cda <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0201 	orr.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ce8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2224      	movs	r2, #36	@ 0x24
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4a70      	ldr	r2, [pc, #448]	@ (8004ebc <HAL_I2C_IsDeviceReady+0x258>)
 8004cfc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d0c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fad0 	bl	80052c0 <I2C_WaitOnFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00d      	beq.n	8004d42 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d34:	d103      	bne.n	8004d3e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d3c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e0b6      	b.n	8004eb0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d42:	897b      	ldrh	r3, [r7, #10]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	461a      	mov	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d50:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004d52:	f7fe f865 	bl	8002e20 <HAL_GetTick>
 8004d56:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	bf0c      	ite	eq
 8004d66:	2301      	moveq	r3, #1
 8004d68:	2300      	movne	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d7c:	bf0c      	ite	eq
 8004d7e:	2301      	moveq	r3, #1
 8004d80:	2300      	movne	r3, #0
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004d86:	e025      	b.n	8004dd4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d88:	f7fe f84a 	bl	8002e20 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d302      	bcc.n	8004d9e <HAL_I2C_IsDeviceReady+0x13a>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d103      	bne.n	8004da6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	22a0      	movs	r2, #160	@ 0xa0
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	bf0c      	ite	eq
 8004db4:	2301      	moveq	r3, #1
 8004db6:	2300      	movne	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dca:	bf0c      	ite	eq
 8004dcc:	2301      	moveq	r3, #1
 8004dce:	2300      	movne	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2ba0      	cmp	r3, #160	@ 0xa0
 8004dde:	d005      	beq.n	8004dec <HAL_I2C_IsDeviceReady+0x188>
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d102      	bne.n	8004dec <HAL_I2C_IsDeviceReady+0x188>
 8004de6:	7dbb      	ldrb	r3, [r7, #22]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0cd      	beq.n	8004d88 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d129      	bne.n	8004e56 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e10:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e12:	2300      	movs	r3, #0
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	613b      	str	r3, [r7, #16]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	2319      	movs	r3, #25
 8004e2e:	2201      	movs	r2, #1
 8004e30:	4921      	ldr	r1, [pc, #132]	@ (8004eb8 <HAL_I2C_IsDeviceReady+0x254>)
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 fa44 	bl	80052c0 <I2C_WaitOnFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e036      	b.n	8004eb0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	e02c      	b.n	8004eb0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e64:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e6e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	2319      	movs	r3, #25
 8004e76:	2201      	movs	r2, #1
 8004e78:	490f      	ldr	r1, [pc, #60]	@ (8004eb8 <HAL_I2C_IsDeviceReady+0x254>)
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fa20 	bl	80052c0 <I2C_WaitOnFlagUntilTimeout>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e012      	b.n	8004eb0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	f4ff af32 	bcc.w	8004cfe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e000      	b.n	8004eb0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004eae:	2302      	movs	r3, #2
  }
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3720      	adds	r7, #32
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	00100002 	.word	0x00100002
 8004ebc:	ffff0000 	.word	0xffff0000

08004ec0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	607a      	str	r2, [r7, #4]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d006      	beq.n	8004eea <I2C_MasterRequestWrite+0x2a>
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d003      	beq.n	8004eea <I2C_MasterRequestWrite+0x2a>
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ee8:	d108      	bne.n	8004efc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	e00b      	b.n	8004f14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f00:	2b12      	cmp	r3, #18
 8004f02:	d107      	bne.n	8004f14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f9cd 	bl	80052c0 <I2C_WaitOnFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00d      	beq.n	8004f48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f3a:	d103      	bne.n	8004f44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e035      	b.n	8004fb4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f50:	d108      	bne.n	8004f64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f52:	897b      	ldrh	r3, [r7, #10]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f60:	611a      	str	r2, [r3, #16]
 8004f62:	e01b      	b.n	8004f9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f64:	897b      	ldrh	r3, [r7, #10]
 8004f66:	11db      	asrs	r3, r3, #7
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	f003 0306 	and.w	r3, r3, #6
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	f063 030f 	orn	r3, r3, #15
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	490e      	ldr	r1, [pc, #56]	@ (8004fbc <I2C_MasterRequestWrite+0xfc>)
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 fa16 	bl	80053b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e010      	b.n	8004fb4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f92:	897b      	ldrh	r3, [r7, #10]
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	4907      	ldr	r1, [pc, #28]	@ (8004fc0 <I2C_MasterRequestWrite+0x100>)
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fa06 	bl	80053b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3718      	adds	r7, #24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	00010008 	.word	0x00010008
 8004fc0:	00010002 	.word	0x00010002

08004fc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	4608      	mov	r0, r1
 8004fce:	4611      	mov	r1, r2
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	817b      	strh	r3, [r7, #10]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	813b      	strh	r3, [r7, #8]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 f960 	bl	80052c0 <I2C_WaitOnFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00d      	beq.n	8005022 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005010:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005014:	d103      	bne.n	800501e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800501c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e05f      	b.n	80050e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005022:	897b      	ldrh	r3, [r7, #10]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	461a      	mov	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005030:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	6a3a      	ldr	r2, [r7, #32]
 8005036:	492d      	ldr	r1, [pc, #180]	@ (80050ec <I2C_RequestMemoryWrite+0x128>)
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f9bb 	bl	80053b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e04c      	b.n	80050e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800505e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005060:	6a39      	ldr	r1, [r7, #32]
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 fa46 	bl	80054f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00d      	beq.n	800508a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005072:	2b04      	cmp	r3, #4
 8005074:	d107      	bne.n	8005086 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005084:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e02b      	b.n	80050e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d105      	bne.n	800509c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005090:	893b      	ldrh	r3, [r7, #8]
 8005092:	b2da      	uxtb	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	611a      	str	r2, [r3, #16]
 800509a:	e021      	b.n	80050e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800509c:	893b      	ldrh	r3, [r7, #8]
 800509e:	0a1b      	lsrs	r3, r3, #8
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ac:	6a39      	ldr	r1, [r7, #32]
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 fa20 	bl	80054f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00d      	beq.n	80050d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d107      	bne.n	80050d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e005      	b.n	80050e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050d6:	893b      	ldrh	r3, [r7, #8]
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	00010002 	.word	0x00010002

080050f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	4608      	mov	r0, r1
 80050fa:	4611      	mov	r1, r2
 80050fc:	461a      	mov	r2, r3
 80050fe:	4603      	mov	r3, r0
 8005100:	817b      	strh	r3, [r7, #10]
 8005102:	460b      	mov	r3, r1
 8005104:	813b      	strh	r3, [r7, #8]
 8005106:	4613      	mov	r3, r2
 8005108:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005118:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005128:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	2200      	movs	r2, #0
 8005132:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 f8c2 	bl	80052c0 <I2C_WaitOnFlagUntilTimeout>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00d      	beq.n	800515e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800514c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005150:	d103      	bne.n	800515a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005158:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e0aa      	b.n	80052b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800515e:	897b      	ldrh	r3, [r7, #10]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	461a      	mov	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800516c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	6a3a      	ldr	r2, [r7, #32]
 8005172:	4952      	ldr	r1, [pc, #328]	@ (80052bc <I2C_RequestMemoryRead+0x1cc>)
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 f91d 	bl	80053b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e097      	b.n	80052b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800519a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800519c:	6a39      	ldr	r1, [r7, #32]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f9a8 	bl	80054f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00d      	beq.n	80051c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d107      	bne.n	80051c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e076      	b.n	80052b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051c6:	88fb      	ldrh	r3, [r7, #6]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d105      	bne.n	80051d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051cc:	893b      	ldrh	r3, [r7, #8]
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	611a      	str	r2, [r3, #16]
 80051d6:	e021      	b.n	800521c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051d8:	893b      	ldrh	r3, [r7, #8]
 80051da:	0a1b      	lsrs	r3, r3, #8
 80051dc:	b29b      	uxth	r3, r3
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e8:	6a39      	ldr	r1, [r7, #32]
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f982 	bl	80054f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00d      	beq.n	8005212 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d107      	bne.n	800520e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800520c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e050      	b.n	80052b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005212:	893b      	ldrh	r3, [r7, #8]
 8005214:	b2da      	uxtb	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800521c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800521e:	6a39      	ldr	r1, [r7, #32]
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f967 	bl	80054f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00d      	beq.n	8005248 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005230:	2b04      	cmp	r3, #4
 8005232:	d107      	bne.n	8005244 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005242:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e035      	b.n	80052b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005256:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	2200      	movs	r2, #0
 8005260:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 f82b 	bl	80052c0 <I2C_WaitOnFlagUntilTimeout>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00d      	beq.n	800528c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800527a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800527e:	d103      	bne.n	8005288 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005286:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e013      	b.n	80052b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800528c:	897b      	ldrh	r3, [r7, #10]
 800528e:	b2db      	uxtb	r3, r3
 8005290:	f043 0301 	orr.w	r3, r3, #1
 8005294:	b2da      	uxtb	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529e:	6a3a      	ldr	r2, [r7, #32]
 80052a0:	4906      	ldr	r1, [pc, #24]	@ (80052bc <I2C_RequestMemoryRead+0x1cc>)
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f886 	bl	80053b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3718      	adds	r7, #24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	00010002 	.word	0x00010002

080052c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	4613      	mov	r3, r2
 80052ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052d0:	e048      	b.n	8005364 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d044      	beq.n	8005364 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052da:	f7fd fda1 	bl	8002e20 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d302      	bcc.n	80052f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d139      	bne.n	8005364 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	0c1b      	lsrs	r3, r3, #16
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d10d      	bne.n	8005316 <I2C_WaitOnFlagUntilTimeout+0x56>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	43da      	mvns	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4013      	ands	r3, r2
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	bf0c      	ite	eq
 800530c:	2301      	moveq	r3, #1
 800530e:	2300      	movne	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	461a      	mov	r2, r3
 8005314:	e00c      	b.n	8005330 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	43da      	mvns	r2, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	4013      	ands	r3, r2
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	bf0c      	ite	eq
 8005328:	2301      	moveq	r3, #1
 800532a:	2300      	movne	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	461a      	mov	r2, r3
 8005330:	79fb      	ldrb	r3, [r7, #7]
 8005332:	429a      	cmp	r2, r3
 8005334:	d116      	bne.n	8005364 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005350:	f043 0220 	orr.w	r2, r3, #32
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e023      	b.n	80053ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	0c1b      	lsrs	r3, r3, #16
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b01      	cmp	r3, #1
 800536c:	d10d      	bne.n	800538a <I2C_WaitOnFlagUntilTimeout+0xca>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	43da      	mvns	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4013      	ands	r3, r2
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	bf0c      	ite	eq
 8005380:	2301      	moveq	r3, #1
 8005382:	2300      	movne	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	461a      	mov	r2, r3
 8005388:	e00c      	b.n	80053a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	43da      	mvns	r2, r3
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	4013      	ands	r3, r2
 8005396:	b29b      	uxth	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	bf0c      	ite	eq
 800539c:	2301      	moveq	r3, #1
 800539e:	2300      	movne	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	461a      	mov	r2, r3
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d093      	beq.n	80052d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053c2:	e071      	b.n	80054a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053d2:	d123      	bne.n	800541c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80053ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005408:	f043 0204 	orr.w	r2, r3, #4
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e067      	b.n	80054ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d041      	beq.n	80054a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005424:	f7fd fcfc 	bl	8002e20 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	429a      	cmp	r2, r3
 8005432:	d302      	bcc.n	800543a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d136      	bne.n	80054a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	0c1b      	lsrs	r3, r3, #16
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d10c      	bne.n	800545e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	43da      	mvns	r2, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4013      	ands	r3, r2
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	bf14      	ite	ne
 8005456:	2301      	movne	r3, #1
 8005458:	2300      	moveq	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	e00b      	b.n	8005476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	43da      	mvns	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4013      	ands	r3, r2
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	bf14      	ite	ne
 8005470:	2301      	movne	r3, #1
 8005472:	2300      	moveq	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d016      	beq.n	80054a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005494:	f043 0220 	orr.w	r2, r3, #32
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e021      	b.n	80054ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	0c1b      	lsrs	r3, r3, #16
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d10c      	bne.n	80054cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	43da      	mvns	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	4013      	ands	r3, r2
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bf14      	ite	ne
 80054c4:	2301      	movne	r3, #1
 80054c6:	2300      	moveq	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	e00b      	b.n	80054e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	43da      	mvns	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	4013      	ands	r3, r2
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bf14      	ite	ne
 80054de:	2301      	movne	r3, #1
 80054e0:	2300      	moveq	r3, #0
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f47f af6d 	bne.w	80053c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005500:	e034      	b.n	800556c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f8e3 	bl	80056ce <I2C_IsAcknowledgeFailed>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e034      	b.n	800557c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005518:	d028      	beq.n	800556c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800551a:	f7fd fc81 	bl	8002e20 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	429a      	cmp	r2, r3
 8005528:	d302      	bcc.n	8005530 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d11d      	bne.n	800556c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553a:	2b80      	cmp	r3, #128	@ 0x80
 800553c:	d016      	beq.n	800556c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005558:	f043 0220 	orr.w	r2, r3, #32
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e007      	b.n	800557c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005576:	2b80      	cmp	r3, #128	@ 0x80
 8005578:	d1c3      	bne.n	8005502 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005590:	e034      	b.n	80055fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 f89b 	bl	80056ce <I2C_IsAcknowledgeFailed>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e034      	b.n	800560c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d028      	beq.n	80055fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055aa:	f7fd fc39 	bl	8002e20 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d302      	bcc.n	80055c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d11d      	bne.n	80055fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d016      	beq.n	80055fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2220      	movs	r2, #32
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e8:	f043 0220 	orr.w	r2, r3, #32
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e007      	b.n	800560c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	f003 0304 	and.w	r3, r3, #4
 8005606:	2b04      	cmp	r3, #4
 8005608:	d1c3      	bne.n	8005592 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005620:	e049      	b.n	80056b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b10      	cmp	r3, #16
 800562e:	d119      	bne.n	8005664 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0210 	mvn.w	r2, #16
 8005638:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e030      	b.n	80056c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005664:	f7fd fbdc 	bl	8002e20 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	429a      	cmp	r2, r3
 8005672:	d302      	bcc.n	800567a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d11d      	bne.n	80056b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005684:	2b40      	cmp	r3, #64	@ 0x40
 8005686:	d016      	beq.n	80056b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	f043 0220 	orr.w	r2, r3, #32
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e007      	b.n	80056c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056c0:	2b40      	cmp	r3, #64	@ 0x40
 80056c2:	d1ae      	bne.n	8005622 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056e4:	d11b      	bne.n	800571e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80056ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570a:	f043 0204 	orr.w	r2, r3, #4
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e000      	b.n	8005720 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	bc80      	pop	{r7}
 8005728:	4770      	bx	lr
	...

0800572c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e272      	b.n	8005c24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 8087 	beq.w	800585a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800574c:	4b92      	ldr	r3, [pc, #584]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f003 030c 	and.w	r3, r3, #12
 8005754:	2b04      	cmp	r3, #4
 8005756:	d00c      	beq.n	8005772 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005758:	4b8f      	ldr	r3, [pc, #572]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 030c 	and.w	r3, r3, #12
 8005760:	2b08      	cmp	r3, #8
 8005762:	d112      	bne.n	800578a <HAL_RCC_OscConfig+0x5e>
 8005764:	4b8c      	ldr	r3, [pc, #560]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800576c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005770:	d10b      	bne.n	800578a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005772:	4b89      	ldr	r3, [pc, #548]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d06c      	beq.n	8005858 <HAL_RCC_OscConfig+0x12c>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d168      	bne.n	8005858 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e24c      	b.n	8005c24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005792:	d106      	bne.n	80057a2 <HAL_RCC_OscConfig+0x76>
 8005794:	4b80      	ldr	r3, [pc, #512]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a7f      	ldr	r2, [pc, #508]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 800579a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	e02e      	b.n	8005800 <HAL_RCC_OscConfig+0xd4>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10c      	bne.n	80057c4 <HAL_RCC_OscConfig+0x98>
 80057aa:	4b7b      	ldr	r3, [pc, #492]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a7a      	ldr	r2, [pc, #488]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 80057b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	4b78      	ldr	r3, [pc, #480]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a77      	ldr	r2, [pc, #476]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 80057bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	e01d      	b.n	8005800 <HAL_RCC_OscConfig+0xd4>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057cc:	d10c      	bne.n	80057e8 <HAL_RCC_OscConfig+0xbc>
 80057ce:	4b72      	ldr	r3, [pc, #456]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a71      	ldr	r2, [pc, #452]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 80057d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	4b6f      	ldr	r3, [pc, #444]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a6e      	ldr	r2, [pc, #440]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 80057e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	e00b      	b.n	8005800 <HAL_RCC_OscConfig+0xd4>
 80057e8:	4b6b      	ldr	r3, [pc, #428]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a6a      	ldr	r2, [pc, #424]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 80057ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	4b68      	ldr	r3, [pc, #416]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a67      	ldr	r2, [pc, #412]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 80057fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d013      	beq.n	8005830 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005808:	f7fd fb0a 	bl	8002e20 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005810:	f7fd fb06 	bl	8002e20 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b64      	cmp	r3, #100	@ 0x64
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e200      	b.n	8005c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005822:	4b5d      	ldr	r3, [pc, #372]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0f0      	beq.n	8005810 <HAL_RCC_OscConfig+0xe4>
 800582e:	e014      	b.n	800585a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005830:	f7fd faf6 	bl	8002e20 <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005838:	f7fd faf2 	bl	8002e20 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b64      	cmp	r3, #100	@ 0x64
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e1ec      	b.n	8005c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800584a:	4b53      	ldr	r3, [pc, #332]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f0      	bne.n	8005838 <HAL_RCC_OscConfig+0x10c>
 8005856:	e000      	b.n	800585a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d063      	beq.n	800592e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005866:	4b4c      	ldr	r3, [pc, #304]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f003 030c 	and.w	r3, r3, #12
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00b      	beq.n	800588a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005872:	4b49      	ldr	r3, [pc, #292]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f003 030c 	and.w	r3, r3, #12
 800587a:	2b08      	cmp	r3, #8
 800587c:	d11c      	bne.n	80058b8 <HAL_RCC_OscConfig+0x18c>
 800587e:	4b46      	ldr	r3, [pc, #280]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d116      	bne.n	80058b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800588a:	4b43      	ldr	r3, [pc, #268]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d005      	beq.n	80058a2 <HAL_RCC_OscConfig+0x176>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d001      	beq.n	80058a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e1c0      	b.n	8005c24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	4939      	ldr	r1, [pc, #228]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058b6:	e03a      	b.n	800592e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d020      	beq.n	8005902 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058c0:	4b36      	ldr	r3, [pc, #216]	@ (800599c <HAL_RCC_OscConfig+0x270>)
 80058c2:	2201      	movs	r2, #1
 80058c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c6:	f7fd faab 	bl	8002e20 <HAL_GetTick>
 80058ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058cc:	e008      	b.n	80058e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ce:	f7fd faa7 	bl	8002e20 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e1a1      	b.n	8005c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0f0      	beq.n	80058ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	4927      	ldr	r1, [pc, #156]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	600b      	str	r3, [r1, #0]
 8005900:	e015      	b.n	800592e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005902:	4b26      	ldr	r3, [pc, #152]	@ (800599c <HAL_RCC_OscConfig+0x270>)
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005908:	f7fd fa8a 	bl	8002e20 <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005910:	f7fd fa86 	bl	8002e20 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e180      	b.n	8005c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005922:	4b1d      	ldr	r3, [pc, #116]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1f0      	bne.n	8005910 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d03a      	beq.n	80059b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d019      	beq.n	8005976 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005942:	4b17      	ldr	r3, [pc, #92]	@ (80059a0 <HAL_RCC_OscConfig+0x274>)
 8005944:	2201      	movs	r2, #1
 8005946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005948:	f7fd fa6a 	bl	8002e20 <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800594e:	e008      	b.n	8005962 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005950:	f7fd fa66 	bl	8002e20 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e160      	b.n	8005c24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005962:	4b0d      	ldr	r3, [pc, #52]	@ (8005998 <HAL_RCC_OscConfig+0x26c>)
 8005964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0f0      	beq.n	8005950 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800596e:	2001      	movs	r0, #1
 8005970:	f000 faba 	bl	8005ee8 <RCC_Delay>
 8005974:	e01c      	b.n	80059b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005976:	4b0a      	ldr	r3, [pc, #40]	@ (80059a0 <HAL_RCC_OscConfig+0x274>)
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800597c:	f7fd fa50 	bl	8002e20 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005982:	e00f      	b.n	80059a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005984:	f7fd fa4c 	bl	8002e20 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d908      	bls.n	80059a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e146      	b.n	8005c24 <HAL_RCC_OscConfig+0x4f8>
 8005996:	bf00      	nop
 8005998:	40021000 	.word	0x40021000
 800599c:	42420000 	.word	0x42420000
 80059a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059a4:	4b92      	ldr	r3, [pc, #584]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 80059a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e9      	bne.n	8005984 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 80a6 	beq.w	8005b0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059be:	2300      	movs	r3, #0
 80059c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059c2:	4b8b      	ldr	r3, [pc, #556]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10d      	bne.n	80059ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ce:	4b88      	ldr	r3, [pc, #544]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	4a87      	ldr	r2, [pc, #540]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 80059d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059d8:	61d3      	str	r3, [r2, #28]
 80059da:	4b85      	ldr	r3, [pc, #532]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059e2:	60bb      	str	r3, [r7, #8]
 80059e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059e6:	2301      	movs	r3, #1
 80059e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ea:	4b82      	ldr	r3, [pc, #520]	@ (8005bf4 <HAL_RCC_OscConfig+0x4c8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d118      	bne.n	8005a28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059f6:	4b7f      	ldr	r3, [pc, #508]	@ (8005bf4 <HAL_RCC_OscConfig+0x4c8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a7e      	ldr	r2, [pc, #504]	@ (8005bf4 <HAL_RCC_OscConfig+0x4c8>)
 80059fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a02:	f7fd fa0d 	bl	8002e20 <HAL_GetTick>
 8005a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a0a:	f7fd fa09 	bl	8002e20 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b64      	cmp	r3, #100	@ 0x64
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e103      	b.n	8005c24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a1c:	4b75      	ldr	r3, [pc, #468]	@ (8005bf4 <HAL_RCC_OscConfig+0x4c8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0f0      	beq.n	8005a0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d106      	bne.n	8005a3e <HAL_RCC_OscConfig+0x312>
 8005a30:	4b6f      	ldr	r3, [pc, #444]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	4a6e      	ldr	r2, [pc, #440]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005a36:	f043 0301 	orr.w	r3, r3, #1
 8005a3a:	6213      	str	r3, [r2, #32]
 8005a3c:	e02d      	b.n	8005a9a <HAL_RCC_OscConfig+0x36e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10c      	bne.n	8005a60 <HAL_RCC_OscConfig+0x334>
 8005a46:	4b6a      	ldr	r3, [pc, #424]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	4a69      	ldr	r2, [pc, #420]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005a4c:	f023 0301 	bic.w	r3, r3, #1
 8005a50:	6213      	str	r3, [r2, #32]
 8005a52:	4b67      	ldr	r3, [pc, #412]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	4a66      	ldr	r2, [pc, #408]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005a58:	f023 0304 	bic.w	r3, r3, #4
 8005a5c:	6213      	str	r3, [r2, #32]
 8005a5e:	e01c      	b.n	8005a9a <HAL_RCC_OscConfig+0x36e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	2b05      	cmp	r3, #5
 8005a66:	d10c      	bne.n	8005a82 <HAL_RCC_OscConfig+0x356>
 8005a68:	4b61      	ldr	r3, [pc, #388]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	4a60      	ldr	r2, [pc, #384]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005a6e:	f043 0304 	orr.w	r3, r3, #4
 8005a72:	6213      	str	r3, [r2, #32]
 8005a74:	4b5e      	ldr	r3, [pc, #376]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	4a5d      	ldr	r2, [pc, #372]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005a7a:	f043 0301 	orr.w	r3, r3, #1
 8005a7e:	6213      	str	r3, [r2, #32]
 8005a80:	e00b      	b.n	8005a9a <HAL_RCC_OscConfig+0x36e>
 8005a82:	4b5b      	ldr	r3, [pc, #364]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	4a5a      	ldr	r2, [pc, #360]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005a88:	f023 0301 	bic.w	r3, r3, #1
 8005a8c:	6213      	str	r3, [r2, #32]
 8005a8e:	4b58      	ldr	r3, [pc, #352]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	4a57      	ldr	r2, [pc, #348]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005a94:	f023 0304 	bic.w	r3, r3, #4
 8005a98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d015      	beq.n	8005ace <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aa2:	f7fd f9bd 	bl	8002e20 <HAL_GetTick>
 8005aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aa8:	e00a      	b.n	8005ac0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aaa:	f7fd f9b9 	bl	8002e20 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e0b1      	b.n	8005c24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ac0:	4b4b      	ldr	r3, [pc, #300]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0ee      	beq.n	8005aaa <HAL_RCC_OscConfig+0x37e>
 8005acc:	e014      	b.n	8005af8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ace:	f7fd f9a7 	bl	8002e20 <HAL_GetTick>
 8005ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ad4:	e00a      	b.n	8005aec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad6:	f7fd f9a3 	bl	8002e20 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e09b      	b.n	8005c24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aec:	4b40      	ldr	r3, [pc, #256]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1ee      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d105      	bne.n	8005b0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005afe:	4b3c      	ldr	r3, [pc, #240]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	4a3b      	ldr	r2, [pc, #236]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005b04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 8087 	beq.w	8005c22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b14:	4b36      	ldr	r3, [pc, #216]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f003 030c 	and.w	r3, r3, #12
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d061      	beq.n	8005be4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d146      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b28:	4b33      	ldr	r3, [pc, #204]	@ (8005bf8 <HAL_RCC_OscConfig+0x4cc>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b2e:	f7fd f977 	bl	8002e20 <HAL_GetTick>
 8005b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b34:	e008      	b.n	8005b48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b36:	f7fd f973 	bl	8002e20 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e06d      	b.n	8005c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b48:	4b29      	ldr	r3, [pc, #164]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1f0      	bne.n	8005b36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b5c:	d108      	bne.n	8005b70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b5e:	4b24      	ldr	r3, [pc, #144]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	4921      	ldr	r1, [pc, #132]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b70:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a19      	ldr	r1, [r3, #32]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b80:	430b      	orrs	r3, r1
 8005b82:	491b      	ldr	r1, [pc, #108]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b88:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf8 <HAL_RCC_OscConfig+0x4cc>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b8e:	f7fd f947 	bl	8002e20 <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b94:	e008      	b.n	8005ba8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b96:	f7fd f943 	bl	8002e20 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e03d      	b.n	8005c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ba8:	4b11      	ldr	r3, [pc, #68]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0f0      	beq.n	8005b96 <HAL_RCC_OscConfig+0x46a>
 8005bb4:	e035      	b.n	8005c22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb6:	4b10      	ldr	r3, [pc, #64]	@ (8005bf8 <HAL_RCC_OscConfig+0x4cc>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bbc:	f7fd f930 	bl	8002e20 <HAL_GetTick>
 8005bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc4:	f7fd f92c 	bl	8002e20 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e026      	b.n	8005c24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bd6:	4b06      	ldr	r3, [pc, #24]	@ (8005bf0 <HAL_RCC_OscConfig+0x4c4>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f0      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x498>
 8005be2:	e01e      	b.n	8005c22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d107      	bne.n	8005bfc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e019      	b.n	8005c24 <HAL_RCC_OscConfig+0x4f8>
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	40007000 	.word	0x40007000
 8005bf8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005c2c <HAL_RCC_OscConfig+0x500>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d106      	bne.n	8005c1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d001      	beq.n	8005c22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3718      	adds	r7, #24
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	40021000 	.word	0x40021000

08005c30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e0d0      	b.n	8005de6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c44:	4b6a      	ldr	r3, [pc, #424]	@ (8005df0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d910      	bls.n	8005c74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c52:	4b67      	ldr	r3, [pc, #412]	@ (8005df0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f023 0207 	bic.w	r2, r3, #7
 8005c5a:	4965      	ldr	r1, [pc, #404]	@ (8005df0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c62:	4b63      	ldr	r3, [pc, #396]	@ (8005df0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d001      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e0b8      	b.n	8005de6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d020      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d005      	beq.n	8005c98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c8c:	4b59      	ldr	r3, [pc, #356]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	4a58      	ldr	r2, [pc, #352]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0308 	and.w	r3, r3, #8
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d005      	beq.n	8005cb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ca4:	4b53      	ldr	r3, [pc, #332]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	4a52      	ldr	r2, [pc, #328]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005caa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005cae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cb0:	4b50      	ldr	r3, [pc, #320]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	494d      	ldr	r1, [pc, #308]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d040      	beq.n	8005d50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d107      	bne.n	8005ce6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cd6:	4b47      	ldr	r3, [pc, #284]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d115      	bne.n	8005d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e07f      	b.n	8005de6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d107      	bne.n	8005cfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cee:	4b41      	ldr	r3, [pc, #260]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d109      	bne.n	8005d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e073      	b.n	8005de6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e06b      	b.n	8005de6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d0e:	4b39      	ldr	r3, [pc, #228]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f023 0203 	bic.w	r2, r3, #3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	4936      	ldr	r1, [pc, #216]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d20:	f7fd f87e 	bl	8002e20 <HAL_GetTick>
 8005d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d26:	e00a      	b.n	8005d3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d28:	f7fd f87a 	bl	8002e20 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e053      	b.n	8005de6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f003 020c 	and.w	r2, r3, #12
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d1eb      	bne.n	8005d28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d50:	4b27      	ldr	r3, [pc, #156]	@ (8005df0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d210      	bcs.n	8005d80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5e:	4b24      	ldr	r3, [pc, #144]	@ (8005df0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f023 0207 	bic.w	r2, r3, #7
 8005d66:	4922      	ldr	r1, [pc, #136]	@ (8005df0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d6e:	4b20      	ldr	r3, [pc, #128]	@ (8005df0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d001      	beq.n	8005d80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e032      	b.n	8005de6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d008      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d8c:	4b19      	ldr	r3, [pc, #100]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	4916      	ldr	r1, [pc, #88]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0308 	and.w	r3, r3, #8
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d009      	beq.n	8005dbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005daa:	4b12      	ldr	r3, [pc, #72]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	490e      	ldr	r1, [pc, #56]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005dbe:	f000 f821 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c4>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	091b      	lsrs	r3, r3, #4
 8005dca:	f003 030f 	and.w	r3, r3, #15
 8005dce:	490a      	ldr	r1, [pc, #40]	@ (8005df8 <HAL_RCC_ClockConfig+0x1c8>)
 8005dd0:	5ccb      	ldrb	r3, [r1, r3]
 8005dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd6:	4a09      	ldr	r2, [pc, #36]	@ (8005dfc <HAL_RCC_ClockConfig+0x1cc>)
 8005dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005dda:	4b09      	ldr	r3, [pc, #36]	@ (8005e00 <HAL_RCC_ClockConfig+0x1d0>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fc ffdc 	bl	8002d9c <HAL_InitTick>

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	40022000 	.word	0x40022000
 8005df4:	40021000 	.word	0x40021000
 8005df8:	0800eae8 	.word	0x0800eae8
 8005dfc:	2000000c 	.word	0x2000000c
 8005e00:	20000010 	.word	0x20000010

08005e04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60bb      	str	r3, [r7, #8]
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	2300      	movs	r3, #0
 8005e18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x94>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f003 030c 	and.w	r3, r3, #12
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d002      	beq.n	8005e34 <HAL_RCC_GetSysClockFreq+0x30>
 8005e2e:	2b08      	cmp	r3, #8
 8005e30:	d003      	beq.n	8005e3a <HAL_RCC_GetSysClockFreq+0x36>
 8005e32:	e027      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e34:	4b19      	ldr	r3, [pc, #100]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x98>)
 8005e36:	613b      	str	r3, [r7, #16]
      break;
 8005e38:	e027      	b.n	8005e8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	0c9b      	lsrs	r3, r3, #18
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	4a17      	ldr	r2, [pc, #92]	@ (8005ea0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005e44:	5cd3      	ldrb	r3, [r2, r3]
 8005e46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d010      	beq.n	8005e74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e52:	4b11      	ldr	r3, [pc, #68]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0x94>)
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	0c5b      	lsrs	r3, r3, #17
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	4a11      	ldr	r2, [pc, #68]	@ (8005ea4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005e5e:	5cd3      	ldrb	r3, [r2, r3]
 8005e60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a0d      	ldr	r2, [pc, #52]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x98>)
 8005e66:	fb03 f202 	mul.w	r2, r3, r2
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	e004      	b.n	8005e7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a0c      	ldr	r2, [pc, #48]	@ (8005ea8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005e78:	fb02 f303 	mul.w	r3, r2, r3
 8005e7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	613b      	str	r3, [r7, #16]
      break;
 8005e82:	e002      	b.n	8005e8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e84:	4b05      	ldr	r3, [pc, #20]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0x98>)
 8005e86:	613b      	str	r3, [r7, #16]
      break;
 8005e88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e8a:	693b      	ldr	r3, [r7, #16]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	371c      	adds	r7, #28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bc80      	pop	{r7}
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	007a1200 	.word	0x007a1200
 8005ea0:	0800eb00 	.word	0x0800eb00
 8005ea4:	0800eb10 	.word	0x0800eb10
 8005ea8:	003d0900 	.word	0x003d0900

08005eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eb0:	4b02      	ldr	r3, [pc, #8]	@ (8005ebc <HAL_RCC_GetHCLKFreq+0x10>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bc80      	pop	{r7}
 8005eba:	4770      	bx	lr
 8005ebc:	2000000c 	.word	0x2000000c

08005ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ec4:	f7ff fff2 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	4b05      	ldr	r3, [pc, #20]	@ (8005ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	0a1b      	lsrs	r3, r3, #8
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	4903      	ldr	r1, [pc, #12]	@ (8005ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ed6:	5ccb      	ldrb	r3, [r1, r3]
 8005ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	0800eaf8 	.word	0x0800eaf8

08005ee8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8005f1c <RCC_Delay+0x34>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8005f20 <RCC_Delay+0x38>)
 8005ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8005efa:	0a5b      	lsrs	r3, r3, #9
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	fb02 f303 	mul.w	r3, r2, r3
 8005f02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f04:	bf00      	nop
  }
  while (Delay --);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	1e5a      	subs	r2, r3, #1
 8005f0a:	60fa      	str	r2, [r7, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1f9      	bne.n	8005f04 <RCC_Delay+0x1c>
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr
 8005f1c:	2000000c 	.word	0x2000000c
 8005f20:	10624dd3 	.word	0x10624dd3

08005f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	2300      	movs	r3, #0
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d07d      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005f40:	2300      	movs	r3, #0
 8005f42:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f44:	4b4f      	ldr	r3, [pc, #316]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10d      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f50:	4b4c      	ldr	r3, [pc, #304]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	4a4b      	ldr	r2, [pc, #300]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f5a:	61d3      	str	r3, [r2, #28]
 8005f5c:	4b49      	ldr	r3, [pc, #292]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f64:	60bb      	str	r3, [r7, #8]
 8005f66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f6c:	4b46      	ldr	r3, [pc, #280]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d118      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f78:	4b43      	ldr	r3, [pc, #268]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a42      	ldr	r2, [pc, #264]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005f7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f84:	f7fc ff4c 	bl	8002e20 <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f8a:	e008      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f8c:	f7fc ff48 	bl	8002e20 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b64      	cmp	r3, #100	@ 0x64
 8005f98:	d901      	bls.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e06d      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0f0      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005faa:	4b36      	ldr	r3, [pc, #216]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fb2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d02e      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d027      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fd0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fd2:	4b2e      	ldr	r3, [pc, #184]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fd8:	4b2c      	ldr	r3, [pc, #176]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005fde:	4a29      	ldr	r2, [pc, #164]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d014      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fee:	f7fc ff17 	bl	8002e20 <HAL_GetTick>
 8005ff2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff4:	e00a      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ff6:	f7fc ff13 	bl	8002e20 <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006004:	4293      	cmp	r3, r2
 8006006:	d901      	bls.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e036      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800600c:	4b1d      	ldr	r3, [pc, #116]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800600e:	6a1b      	ldr	r3, [r3, #32]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d0ee      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006018:	4b1a      	ldr	r3, [pc, #104]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	4917      	ldr	r1, [pc, #92]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006026:	4313      	orrs	r3, r2
 8006028:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800602a:	7dfb      	ldrb	r3, [r7, #23]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d105      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006030:	4b14      	ldr	r3, [pc, #80]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006032:	69db      	ldr	r3, [r3, #28]
 8006034:	4a13      	ldr	r2, [pc, #76]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800603a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d008      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006048:	4b0e      	ldr	r3, [pc, #56]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	490b      	ldr	r1, [pc, #44]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006056:	4313      	orrs	r3, r2
 8006058:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0310 	and.w	r3, r3, #16
 8006062:	2b00      	cmp	r3, #0
 8006064:	d008      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006066:	4b07      	ldr	r3, [pc, #28]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	4904      	ldr	r1, [pc, #16]	@ (8006084 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006074:	4313      	orrs	r3, r2
 8006076:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	40021000 	.word	0x40021000
 8006088:	40007000 	.word	0x40007000
 800608c:	42420440 	.word	0x42420440

08006090 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e076      	b.n	8006190 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d108      	bne.n	80060bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060b2:	d009      	beq.n	80060c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	61da      	str	r2, [r3, #28]
 80060ba:	e005      	b.n	80060c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fc fc5e 	bl	80029a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006110:	431a      	orrs	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800611a:	431a      	orrs	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	431a      	orrs	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006142:	431a      	orrs	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800614c:	ea42 0103 	orr.w	r1, r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006154:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	0c1a      	lsrs	r2, r3, #16
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f002 0204 	and.w	r2, r2, #4
 800616e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	69da      	ldr	r2, [r3, #28]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800617e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	4613      	mov	r3, r2
 80061a6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061a8:	f7fc fe3a 	bl	8002e20 <HAL_GetTick>
 80061ac:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d001      	beq.n	80061c2 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80061be:	2302      	movs	r3, #2
 80061c0:	e12a      	b.n	8006418 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <HAL_SPI_Transmit+0x36>
 80061c8:	88fb      	ldrh	r3, [r7, #6]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e122      	b.n	8006418 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_SPI_Transmit+0x48>
 80061dc:	2302      	movs	r3, #2
 80061de:	e11b      	b.n	8006418 <HAL_SPI_Transmit+0x280>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2203      	movs	r2, #3
 80061ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	88fa      	ldrh	r2, [r7, #6]
 8006200:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	88fa      	ldrh	r2, [r7, #6]
 8006206:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800622e:	d10f      	bne.n	8006250 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800623e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800624e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800625a:	2b40      	cmp	r3, #64	@ 0x40
 800625c:	d007      	beq.n	800626e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800626c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006276:	d152      	bne.n	800631e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_SPI_Transmit+0xee>
 8006280:	8b7b      	ldrh	r3, [r7, #26]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d145      	bne.n	8006312 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800628a:	881a      	ldrh	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006296:	1c9a      	adds	r2, r3, #2
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	3b01      	subs	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80062aa:	e032      	b.n	8006312 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d112      	bne.n	80062e0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062be:	881a      	ldrh	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ca:	1c9a      	adds	r2, r3, #2
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b29a      	uxth	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80062de:	e018      	b.n	8006312 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062e0:	f7fc fd9e 	bl	8002e20 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d803      	bhi.n	80062f8 <HAL_SPI_Transmit+0x160>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f6:	d102      	bne.n	80062fe <HAL_SPI_Transmit+0x166>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d109      	bne.n	8006312 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e082      	b.n	8006418 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006316:	b29b      	uxth	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1c7      	bne.n	80062ac <HAL_SPI_Transmit+0x114>
 800631c:	e053      	b.n	80063c6 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <HAL_SPI_Transmit+0x194>
 8006326:	8b7b      	ldrh	r3, [r7, #26]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d147      	bne.n	80063bc <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	330c      	adds	r3, #12
 8006336:	7812      	ldrb	r2, [r2, #0]
 8006338:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006348:	b29b      	uxth	r3, r3
 800634a:	3b01      	subs	r3, #1
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006352:	e033      	b.n	80063bc <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b02      	cmp	r3, #2
 8006360:	d113      	bne.n	800638a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	330c      	adds	r3, #12
 800636c:	7812      	ldrb	r2, [r2, #0]
 800636e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006388:	e018      	b.n	80063bc <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800638a:	f7fc fd49 	bl	8002e20 <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	429a      	cmp	r2, r3
 8006398:	d803      	bhi.n	80063a2 <HAL_SPI_Transmit+0x20a>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a0:	d102      	bne.n	80063a8 <HAL_SPI_Transmit+0x210>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d109      	bne.n	80063bc <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e02d      	b.n	8006418 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1c6      	bne.n	8006354 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063c6:	69fa      	ldr	r2, [r7, #28]
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 fa5a 	bl	8006884 <SPI_EndRxTxTransaction>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2220      	movs	r2, #32
 80063da:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063e4:	2300      	movs	r3, #0
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006416:	2300      	movs	r3, #0
  }
}
 8006418:	4618      	mov	r0, r3
 800641a:	3720      	adds	r7, #32
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08a      	sub	sp, #40	@ 0x28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800642e:	2301      	movs	r3, #1
 8006430:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006432:	f7fc fcf5 	bl	8002e20 <HAL_GetTick>
 8006436:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800643e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006446:	887b      	ldrh	r3, [r7, #2]
 8006448:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800644a:	7ffb      	ldrb	r3, [r7, #31]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d00c      	beq.n	800646a <HAL_SPI_TransmitReceive+0x4a>
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006456:	d106      	bne.n	8006466 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d102      	bne.n	8006466 <HAL_SPI_TransmitReceive+0x46>
 8006460:	7ffb      	ldrb	r3, [r7, #31]
 8006462:	2b04      	cmp	r3, #4
 8006464:	d001      	beq.n	800646a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006466:	2302      	movs	r3, #2
 8006468:	e17f      	b.n	800676a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d005      	beq.n	800647c <HAL_SPI_TransmitReceive+0x5c>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <HAL_SPI_TransmitReceive+0x5c>
 8006476:	887b      	ldrh	r3, [r7, #2]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e174      	b.n	800676a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006486:	2b01      	cmp	r3, #1
 8006488:	d101      	bne.n	800648e <HAL_SPI_TransmitReceive+0x6e>
 800648a:	2302      	movs	r3, #2
 800648c:	e16d      	b.n	800676a <HAL_SPI_TransmitReceive+0x34a>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d003      	beq.n	80064aa <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2205      	movs	r2, #5
 80064a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	887a      	ldrh	r2, [r7, #2]
 80064ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	887a      	ldrh	r2, [r7, #2]
 80064c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	887a      	ldrh	r2, [r7, #2]
 80064cc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	887a      	ldrh	r2, [r7, #2]
 80064d2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ea:	2b40      	cmp	r3, #64	@ 0x40
 80064ec:	d007      	beq.n	80064fe <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006506:	d17e      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <HAL_SPI_TransmitReceive+0xf6>
 8006510:	8afb      	ldrh	r3, [r7, #22]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d16c      	bne.n	80065f0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800651a:	881a      	ldrh	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006526:	1c9a      	adds	r2, r3, #2
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800653a:	e059      	b.n	80065f0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b02      	cmp	r3, #2
 8006548:	d11b      	bne.n	8006582 <HAL_SPI_TransmitReceive+0x162>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800654e:	b29b      	uxth	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	d016      	beq.n	8006582 <HAL_SPI_TransmitReceive+0x162>
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	2b01      	cmp	r3, #1
 8006558:	d113      	bne.n	8006582 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800655e:	881a      	ldrh	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656a:	1c9a      	adds	r2, r3, #2
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b01      	cmp	r3, #1
 800658e:	d119      	bne.n	80065c4 <HAL_SPI_TransmitReceive+0x1a4>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d014      	beq.n	80065c4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68da      	ldr	r2, [r3, #12]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a4:	b292      	uxth	r2, r2
 80065a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ac:	1c9a      	adds	r2, r3, #2
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065c0:	2301      	movs	r3, #1
 80065c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065c4:	f7fc fc2c 	bl	8002e20 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d80d      	bhi.n	80065f0 <HAL_SPI_TransmitReceive+0x1d0>
 80065d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065da:	d009      	beq.n	80065f0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e0bc      	b.n	800676a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1a0      	bne.n	800653c <HAL_SPI_TransmitReceive+0x11c>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065fe:	b29b      	uxth	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	d19b      	bne.n	800653c <HAL_SPI_TransmitReceive+0x11c>
 8006604:	e082      	b.n	800670c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <HAL_SPI_TransmitReceive+0x1f4>
 800660e:	8afb      	ldrh	r3, [r7, #22]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d171      	bne.n	80066f8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	330c      	adds	r3, #12
 800661e:	7812      	ldrb	r2, [r2, #0]
 8006620:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006630:	b29b      	uxth	r3, r3
 8006632:	3b01      	subs	r3, #1
 8006634:	b29a      	uxth	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800663a:	e05d      	b.n	80066f8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b02      	cmp	r3, #2
 8006648:	d11c      	bne.n	8006684 <HAL_SPI_TransmitReceive+0x264>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800664e:	b29b      	uxth	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d017      	beq.n	8006684 <HAL_SPI_TransmitReceive+0x264>
 8006654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006656:	2b01      	cmp	r3, #1
 8006658:	d114      	bne.n	8006684 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	330c      	adds	r3, #12
 8006664:	7812      	ldrb	r2, [r2, #0]
 8006666:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b01      	cmp	r3, #1
 8006690:	d119      	bne.n	80066c6 <HAL_SPI_TransmitReceive+0x2a6>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006696:	b29b      	uxth	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	d014      	beq.n	80066c6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066c2:	2301      	movs	r3, #1
 80066c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066c6:	f7fc fbab 	bl	8002e20 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d803      	bhi.n	80066de <HAL_SPI_TransmitReceive+0x2be>
 80066d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066dc:	d102      	bne.n	80066e4 <HAL_SPI_TransmitReceive+0x2c4>
 80066de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d109      	bne.n	80066f8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e038      	b.n	800676a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d19c      	bne.n	800663c <HAL_SPI_TransmitReceive+0x21c>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006706:	b29b      	uxth	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d197      	bne.n	800663c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800670c:	6a3a      	ldr	r2, [r7, #32]
 800670e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f000 f8b7 	bl	8006884 <SPI_EndRxTxTransaction>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d008      	beq.n	800672e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2220      	movs	r2, #32
 8006720:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e01d      	b.n	800676a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10a      	bne.n	800674c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006736:	2300      	movs	r3, #0
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	613b      	str	r3, [r7, #16]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	613b      	str	r3, [r7, #16]
 800674a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e000      	b.n	800676a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006768:	2300      	movs	r3, #0
  }
}
 800676a:	4618      	mov	r0, r3
 800676c:	3728      	adds	r7, #40	@ 0x28
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
	...

08006774 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	603b      	str	r3, [r7, #0]
 8006780:	4613      	mov	r3, r2
 8006782:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006784:	f7fc fb4c 	bl	8002e20 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678c:	1a9b      	subs	r3, r3, r2
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	4413      	add	r3, r2
 8006792:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006794:	f7fc fb44 	bl	8002e20 <HAL_GetTick>
 8006798:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800679a:	4b39      	ldr	r3, [pc, #228]	@ (8006880 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	015b      	lsls	r3, r3, #5
 80067a0:	0d1b      	lsrs	r3, r3, #20
 80067a2:	69fa      	ldr	r2, [r7, #28]
 80067a4:	fb02 f303 	mul.w	r3, r2, r3
 80067a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067aa:	e054      	b.n	8006856 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b2:	d050      	beq.n	8006856 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067b4:	f7fc fb34 	bl	8002e20 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	69fa      	ldr	r2, [r7, #28]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d902      	bls.n	80067ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d13d      	bne.n	8006846 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067e2:	d111      	bne.n	8006808 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ec:	d004      	beq.n	80067f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067f6:	d107      	bne.n	8006808 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006806:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006810:	d10f      	bne.n	8006832 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006830:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e017      	b.n	8006876 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	3b01      	subs	r3, #1
 8006854:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	4013      	ands	r3, r2
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	429a      	cmp	r2, r3
 8006864:	bf0c      	ite	eq
 8006866:	2301      	moveq	r3, #1
 8006868:	2300      	movne	r3, #0
 800686a:	b2db      	uxtb	r3, r3
 800686c:	461a      	mov	r2, r3
 800686e:	79fb      	ldrb	r3, [r7, #7]
 8006870:	429a      	cmp	r2, r3
 8006872:	d19b      	bne.n	80067ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3720      	adds	r7, #32
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	2000000c 	.word	0x2000000c

08006884 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af02      	add	r7, sp, #8
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2201      	movs	r2, #1
 8006898:	2102      	movs	r1, #2
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f7ff ff6a 	bl	8006774 <SPI_WaitFlagStateUntilTimeout>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d007      	beq.n	80068b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068aa:	f043 0220 	orr.w	r2, r3, #32
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e013      	b.n	80068de <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2200      	movs	r2, #0
 80068be:	2180      	movs	r1, #128	@ 0x80
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f7ff ff57 	bl	8006774 <SPI_WaitFlagStateUntilTimeout>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d007      	beq.n	80068dc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068d0:	f043 0220 	orr.w	r2, r3, #32
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e000      	b.n	80068de <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b082      	sub	sp, #8
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e041      	b.n	800697c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d106      	bne.n	8006912 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7fc f895 	bl	8002a3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2202      	movs	r2, #2
 8006916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	3304      	adds	r3, #4
 8006922:	4619      	mov	r1, r3
 8006924:	4610      	mov	r0, r2
 8006926:	f000 fa5b 	bl	8006de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b01      	cmp	r3, #1
 8006996:	d001      	beq.n	800699c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e03a      	b.n	8006a12 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f042 0201 	orr.w	r2, r2, #1
 80069b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a18      	ldr	r2, [pc, #96]	@ (8006a1c <HAL_TIM_Base_Start_IT+0x98>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00e      	beq.n	80069dc <HAL_TIM_Base_Start_IT+0x58>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069c6:	d009      	beq.n	80069dc <HAL_TIM_Base_Start_IT+0x58>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a14      	ldr	r2, [pc, #80]	@ (8006a20 <HAL_TIM_Base_Start_IT+0x9c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d004      	beq.n	80069dc <HAL_TIM_Base_Start_IT+0x58>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a13      	ldr	r2, [pc, #76]	@ (8006a24 <HAL_TIM_Base_Start_IT+0xa0>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d111      	bne.n	8006a00 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f003 0307 	and.w	r3, r3, #7
 80069e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b06      	cmp	r3, #6
 80069ec:	d010      	beq.n	8006a10 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f042 0201 	orr.w	r2, r2, #1
 80069fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069fe:	e007      	b.n	8006a10 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f042 0201 	orr.w	r2, r2, #1
 8006a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bc80      	pop	{r7}
 8006a1a:	4770      	bx	lr
 8006a1c:	40012c00 	.word	0x40012c00
 8006a20:	40000400 	.word	0x40000400
 8006a24:	40000800 	.word	0x40000800

08006a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d020      	beq.n	8006a8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d01b      	beq.n	8006a8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f06f 0202 	mvn.w	r2, #2
 8006a5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	f003 0303 	and.w	r3, r3, #3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f998 	bl	8006da8 <HAL_TIM_IC_CaptureCallback>
 8006a78:	e005      	b.n	8006a86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f98b 	bl	8006d96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f99a 	bl	8006dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	f003 0304 	and.w	r3, r3, #4
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d020      	beq.n	8006ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d01b      	beq.n	8006ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f06f 0204 	mvn.w	r2, #4
 8006aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2202      	movs	r2, #2
 8006aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f972 	bl	8006da8 <HAL_TIM_IC_CaptureCallback>
 8006ac4:	e005      	b.n	8006ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f965 	bl	8006d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f974 	bl	8006dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	f003 0308 	and.w	r3, r3, #8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d020      	beq.n	8006b24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f003 0308 	and.w	r3, r3, #8
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d01b      	beq.n	8006b24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f06f 0208 	mvn.w	r2, #8
 8006af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2204      	movs	r2, #4
 8006afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	f003 0303 	and.w	r3, r3, #3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d003      	beq.n	8006b12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f94c 	bl	8006da8 <HAL_TIM_IC_CaptureCallback>
 8006b10:	e005      	b.n	8006b1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f93f 	bl	8006d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f94e 	bl	8006dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f003 0310 	and.w	r3, r3, #16
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d020      	beq.n	8006b70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f003 0310 	and.w	r3, r3, #16
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d01b      	beq.n	8006b70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f06f 0210 	mvn.w	r2, #16
 8006b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2208      	movs	r2, #8
 8006b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f926 	bl	8006da8 <HAL_TIM_IC_CaptureCallback>
 8006b5c:	e005      	b.n	8006b6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f919 	bl	8006d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f928 	bl	8006dba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00c      	beq.n	8006b94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d007      	beq.n	8006b94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f06f 0201 	mvn.w	r2, #1
 8006b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fa ff4e 	bl	8001a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00c      	beq.n	8006bb8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d007      	beq.n	8006bb8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fa7f 	bl	80070b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00c      	beq.n	8006bdc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d007      	beq.n	8006bdc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f8f8 	bl	8006dcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	f003 0320 	and.w	r3, r3, #32
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00c      	beq.n	8006c00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f003 0320 	and.w	r3, r3, #32
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d007      	beq.n	8006c00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f06f 0220 	mvn.w	r2, #32
 8006bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fa52 	bl	80070a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c00:	bf00      	nop
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c12:	2300      	movs	r3, #0
 8006c14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d101      	bne.n	8006c24 <HAL_TIM_ConfigClockSource+0x1c>
 8006c20:	2302      	movs	r3, #2
 8006c22:	e0b4      	b.n	8006d8e <HAL_TIM_ConfigClockSource+0x186>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c5c:	d03e      	beq.n	8006cdc <HAL_TIM_ConfigClockSource+0xd4>
 8006c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c62:	f200 8087 	bhi.w	8006d74 <HAL_TIM_ConfigClockSource+0x16c>
 8006c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c6a:	f000 8086 	beq.w	8006d7a <HAL_TIM_ConfigClockSource+0x172>
 8006c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c72:	d87f      	bhi.n	8006d74 <HAL_TIM_ConfigClockSource+0x16c>
 8006c74:	2b70      	cmp	r3, #112	@ 0x70
 8006c76:	d01a      	beq.n	8006cae <HAL_TIM_ConfigClockSource+0xa6>
 8006c78:	2b70      	cmp	r3, #112	@ 0x70
 8006c7a:	d87b      	bhi.n	8006d74 <HAL_TIM_ConfigClockSource+0x16c>
 8006c7c:	2b60      	cmp	r3, #96	@ 0x60
 8006c7e:	d050      	beq.n	8006d22 <HAL_TIM_ConfigClockSource+0x11a>
 8006c80:	2b60      	cmp	r3, #96	@ 0x60
 8006c82:	d877      	bhi.n	8006d74 <HAL_TIM_ConfigClockSource+0x16c>
 8006c84:	2b50      	cmp	r3, #80	@ 0x50
 8006c86:	d03c      	beq.n	8006d02 <HAL_TIM_ConfigClockSource+0xfa>
 8006c88:	2b50      	cmp	r3, #80	@ 0x50
 8006c8a:	d873      	bhi.n	8006d74 <HAL_TIM_ConfigClockSource+0x16c>
 8006c8c:	2b40      	cmp	r3, #64	@ 0x40
 8006c8e:	d058      	beq.n	8006d42 <HAL_TIM_ConfigClockSource+0x13a>
 8006c90:	2b40      	cmp	r3, #64	@ 0x40
 8006c92:	d86f      	bhi.n	8006d74 <HAL_TIM_ConfigClockSource+0x16c>
 8006c94:	2b30      	cmp	r3, #48	@ 0x30
 8006c96:	d064      	beq.n	8006d62 <HAL_TIM_ConfigClockSource+0x15a>
 8006c98:	2b30      	cmp	r3, #48	@ 0x30
 8006c9a:	d86b      	bhi.n	8006d74 <HAL_TIM_ConfigClockSource+0x16c>
 8006c9c:	2b20      	cmp	r3, #32
 8006c9e:	d060      	beq.n	8006d62 <HAL_TIM_ConfigClockSource+0x15a>
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	d867      	bhi.n	8006d74 <HAL_TIM_ConfigClockSource+0x16c>
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d05c      	beq.n	8006d62 <HAL_TIM_ConfigClockSource+0x15a>
 8006ca8:	2b10      	cmp	r3, #16
 8006caa:	d05a      	beq.n	8006d62 <HAL_TIM_ConfigClockSource+0x15a>
 8006cac:	e062      	b.n	8006d74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cbe:	f000 f974 	bl	8006faa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	609a      	str	r2, [r3, #8]
      break;
 8006cda:	e04f      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cec:	f000 f95d 	bl	8006faa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006cfe:	609a      	str	r2, [r3, #8]
      break;
 8006d00:	e03c      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f000 f8d4 	bl	8006ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2150      	movs	r1, #80	@ 0x50
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 f92b 	bl	8006f76 <TIM_ITRx_SetConfig>
      break;
 8006d20:	e02c      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f000 f8f2 	bl	8006f18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2160      	movs	r1, #96	@ 0x60
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 f91b 	bl	8006f76 <TIM_ITRx_SetConfig>
      break;
 8006d40:	e01c      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f000 f8b4 	bl	8006ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2140      	movs	r1, #64	@ 0x40
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 f90b 	bl	8006f76 <TIM_ITRx_SetConfig>
      break;
 8006d60:	e00c      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	f000 f902 	bl	8006f76 <TIM_ITRx_SetConfig>
      break;
 8006d72:	e003      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	73fb      	strb	r3, [r7, #15]
      break;
 8006d78:	e000      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d9e:	bf00      	nop
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bc80      	pop	{r7}
 8006da6:	4770      	bx	lr

08006da8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bc80      	pop	{r7}
 8006db8:	4770      	bx	lr

08006dba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bc80      	pop	{r7}
 8006dca:	4770      	bx	lr

08006dcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bc80      	pop	{r7}
 8006ddc:	4770      	bx	lr
	...

08006de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a2f      	ldr	r2, [pc, #188]	@ (8006eb0 <TIM_Base_SetConfig+0xd0>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00b      	beq.n	8006e10 <TIM_Base_SetConfig+0x30>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dfe:	d007      	beq.n	8006e10 <TIM_Base_SetConfig+0x30>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a2c      	ldr	r2, [pc, #176]	@ (8006eb4 <TIM_Base_SetConfig+0xd4>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d003      	beq.n	8006e10 <TIM_Base_SetConfig+0x30>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a2b      	ldr	r2, [pc, #172]	@ (8006eb8 <TIM_Base_SetConfig+0xd8>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d108      	bne.n	8006e22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a22      	ldr	r2, [pc, #136]	@ (8006eb0 <TIM_Base_SetConfig+0xd0>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00b      	beq.n	8006e42 <TIM_Base_SetConfig+0x62>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e30:	d007      	beq.n	8006e42 <TIM_Base_SetConfig+0x62>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a1f      	ldr	r2, [pc, #124]	@ (8006eb4 <TIM_Base_SetConfig+0xd4>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d003      	beq.n	8006e42 <TIM_Base_SetConfig+0x62>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8006eb8 <TIM_Base_SetConfig+0xd8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d108      	bne.n	8006e54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	689a      	ldr	r2, [r3, #8]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8006eb0 <TIM_Base_SetConfig+0xd0>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d103      	bne.n	8006e88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	691a      	ldr	r2, [r3, #16]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d005      	beq.n	8006ea6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	f023 0201 	bic.w	r2, r3, #1
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	611a      	str	r2, [r3, #16]
  }
}
 8006ea6:	bf00      	nop
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bc80      	pop	{r7}
 8006eae:	4770      	bx	lr
 8006eb0:	40012c00 	.word	0x40012c00
 8006eb4:	40000400 	.word	0x40000400
 8006eb8:	40000800 	.word	0x40000800

08006ebc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	f023 0201 	bic.w	r2, r3, #1
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	011b      	lsls	r3, r3, #4
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f023 030a 	bic.w	r3, r3, #10
 8006ef8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	621a      	str	r2, [r3, #32]
}
 8006f0e:	bf00      	nop
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bc80      	pop	{r7}
 8006f16:	4770      	bx	lr

08006f18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6a1b      	ldr	r3, [r3, #32]
 8006f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	f023 0210 	bic.w	r2, r3, #16
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	031b      	lsls	r3, r3, #12
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	011b      	lsls	r3, r3, #4
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	621a      	str	r2, [r3, #32]
}
 8006f6c:	bf00      	nop
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bc80      	pop	{r7}
 8006f74:	4770      	bx	lr

08006f76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f043 0307 	orr.w	r3, r3, #7
 8006f98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	609a      	str	r2, [r3, #8]
}
 8006fa0:	bf00      	nop
 8006fa2:	3714      	adds	r7, #20
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bc80      	pop	{r7}
 8006fa8:	4770      	bx	lr

08006faa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b087      	sub	sp, #28
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	607a      	str	r2, [r7, #4]
 8006fb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	021a      	lsls	r2, r3, #8
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	609a      	str	r2, [r3, #8]
}
 8006fde:	bf00      	nop
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bc80      	pop	{r7}
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d101      	bne.n	8007000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	e046      	b.n	800708e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a16      	ldr	r2, [pc, #88]	@ (8007098 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d00e      	beq.n	8007062 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800704c:	d009      	beq.n	8007062 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a12      	ldr	r2, [pc, #72]	@ (800709c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d004      	beq.n	8007062 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a10      	ldr	r2, [pc, #64]	@ (80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d10c      	bne.n	800707c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007068:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	4313      	orrs	r3, r2
 8007072:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	bc80      	pop	{r7}
 8007096:	4770      	bx	lr
 8007098:	40012c00 	.word	0x40012c00
 800709c:	40000400 	.word	0x40000400
 80070a0:	40000800 	.word	0x40000800

080070a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bc80      	pop	{r7}
 80070b4:	4770      	bx	lr

080070b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bc80      	pop	{r7}
 80070c6:	4770      	bx	lr

080070c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80070cc:	4904      	ldr	r1, [pc, #16]	@ (80070e0 <MX_FATFS_Init+0x18>)
 80070ce:	4805      	ldr	r0, [pc, #20]	@ (80070e4 <MX_FATFS_Init+0x1c>)
 80070d0:	f003 ff10 	bl	800aef4 <FATFS_LinkDriver>
 80070d4:	4603      	mov	r3, r0
 80070d6:	461a      	mov	r2, r3
 80070d8:	4b03      	ldr	r3, [pc, #12]	@ (80070e8 <MX_FATFS_Init+0x20>)
 80070da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80070dc:	bf00      	nop
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	2000298c 	.word	0x2000298c
 80070e4:	20000018 	.word	0x20000018
 80070e8:	20002988 	.word	0x20002988

080070ec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80070f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bc80      	pop	{r7}
 80070f8:	4770      	bx	lr

080070fa <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	4603      	mov	r3, r0
 8007102:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	4618      	mov	r0, r3
 8007108:	f7fa f862 	bl	80011d0 <SD_disk_initialize>
 800710c:	4603      	mov	r3, r0
 800710e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007110:	4618      	mov	r0, r3
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	4618      	mov	r0, r3
 8007126:	f7fa f939 	bl	800139c <SD_disk_status>
 800712a:	4603      	mov	r3, r0
 800712c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	603b      	str	r3, [r7, #0]
 8007142:	4603      	mov	r3, r0
 8007144:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8007146:	7bf8      	ldrb	r0, [r7, #15]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	68b9      	ldr	r1, [r7, #8]
 800714e:	f7fa f939 	bl	80013c4 <SD_disk_read>
 8007152:	4603      	mov	r3, r0
 8007154:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
 8007168:	603b      	str	r3, [r7, #0]
 800716a:	4603      	mov	r3, r0
 800716c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 800716e:	7bf8      	ldrb	r0, [r7, #15]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	68b9      	ldr	r1, [r7, #8]
 8007176:	f7fa f98f 	bl	8001498 <SD_disk_write>
 800717a:	4603      	mov	r3, r0
 800717c:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b082      	sub	sp, #8
 800718a:	af00      	add	r7, sp, #0
 800718c:	4603      	mov	r3, r0
 800718e:	603a      	str	r2, [r7, #0]
 8007190:	71fb      	strb	r3, [r7, #7]
 8007192:	460b      	mov	r3, r1
 8007194:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8007196:	79fb      	ldrb	r3, [r7, #7]
 8007198:	79b9      	ldrb	r1, [r7, #6]
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	4618      	mov	r0, r3
 800719e:	f7fa f9ff 	bl	80015a0 <SD_disk_ioctl>
 80071a2:	4603      	mov	r3, r0
 80071a4:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
	...

080071b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	4a08      	ldr	r2, [pc, #32]	@ (80071e0 <disk_status+0x30>)
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	79fa      	ldrb	r2, [r7, #7]
 80071c8:	4905      	ldr	r1, [pc, #20]	@ (80071e0 <disk_status+0x30>)
 80071ca:	440a      	add	r2, r1
 80071cc:	7a12      	ldrb	r2, [r2, #8]
 80071ce:	4610      	mov	r0, r2
 80071d0:	4798      	blx	r3
 80071d2:	4603      	mov	r3, r0
 80071d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	20002bb0 	.word	0x20002bb0

080071e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	4603      	mov	r3, r0
 80071ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	4a0d      	ldr	r2, [pc, #52]	@ (800722c <disk_initialize+0x48>)
 80071f6:	5cd3      	ldrb	r3, [r2, r3]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d111      	bne.n	8007220 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80071fc:	79fb      	ldrb	r3, [r7, #7]
 80071fe:	4a0b      	ldr	r2, [pc, #44]	@ (800722c <disk_initialize+0x48>)
 8007200:	2101      	movs	r1, #1
 8007202:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007204:	79fb      	ldrb	r3, [r7, #7]
 8007206:	4a09      	ldr	r2, [pc, #36]	@ (800722c <disk_initialize+0x48>)
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	79fa      	ldrb	r2, [r7, #7]
 8007212:	4906      	ldr	r1, [pc, #24]	@ (800722c <disk_initialize+0x48>)
 8007214:	440a      	add	r2, r1
 8007216:	7a12      	ldrb	r2, [r2, #8]
 8007218:	4610      	mov	r0, r2
 800721a:	4798      	blx	r3
 800721c:	4603      	mov	r3, r0
 800721e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007220:	7bfb      	ldrb	r3, [r7, #15]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20002bb0 	.word	0x20002bb0

08007230 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007230:	b590      	push	{r4, r7, lr}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	60b9      	str	r1, [r7, #8]
 8007238:	607a      	str	r2, [r7, #4]
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	4603      	mov	r3, r0
 800723e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007240:	7bfb      	ldrb	r3, [r7, #15]
 8007242:	4a0a      	ldr	r2, [pc, #40]	@ (800726c <disk_read+0x3c>)
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	689c      	ldr	r4, [r3, #8]
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	4a07      	ldr	r2, [pc, #28]	@ (800726c <disk_read+0x3c>)
 8007250:	4413      	add	r3, r2
 8007252:	7a18      	ldrb	r0, [r3, #8]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	68b9      	ldr	r1, [r7, #8]
 800725a:	47a0      	blx	r4
 800725c:	4603      	mov	r3, r0
 800725e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007260:	7dfb      	ldrb	r3, [r7, #23]
}
 8007262:	4618      	mov	r0, r3
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	bd90      	pop	{r4, r7, pc}
 800726a:	bf00      	nop
 800726c:	20002bb0 	.word	0x20002bb0

08007270 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007270:	b590      	push	{r4, r7, lr}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	607a      	str	r2, [r7, #4]
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	4603      	mov	r3, r0
 800727e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007280:	7bfb      	ldrb	r3, [r7, #15]
 8007282:	4a0a      	ldr	r2, [pc, #40]	@ (80072ac <disk_write+0x3c>)
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	68dc      	ldr	r4, [r3, #12]
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	4a07      	ldr	r2, [pc, #28]	@ (80072ac <disk_write+0x3c>)
 8007290:	4413      	add	r3, r2
 8007292:	7a18      	ldrb	r0, [r3, #8]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	68b9      	ldr	r1, [r7, #8]
 800729a:	47a0      	blx	r4
 800729c:	4603      	mov	r3, r0
 800729e:	75fb      	strb	r3, [r7, #23]
  return res;
 80072a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd90      	pop	{r4, r7, pc}
 80072aa:	bf00      	nop
 80072ac:	20002bb0 	.word	0x20002bb0

080072b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	4603      	mov	r3, r0
 80072b8:	603a      	str	r2, [r7, #0]
 80072ba:	71fb      	strb	r3, [r7, #7]
 80072bc:	460b      	mov	r3, r1
 80072be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80072c0:	79fb      	ldrb	r3, [r7, #7]
 80072c2:	4a09      	ldr	r2, [pc, #36]	@ (80072e8 <disk_ioctl+0x38>)
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	79fa      	ldrb	r2, [r7, #7]
 80072ce:	4906      	ldr	r1, [pc, #24]	@ (80072e8 <disk_ioctl+0x38>)
 80072d0:	440a      	add	r2, r1
 80072d2:	7a10      	ldrb	r0, [r2, #8]
 80072d4:	79b9      	ldrb	r1, [r7, #6]
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	4798      	blx	r3
 80072da:	4603      	mov	r3, r0
 80072dc:	73fb      	strb	r3, [r7, #15]
  return res;
 80072de:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	20002bb0 	.word	0x20002bb0

080072ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8007300:	e007      	b.n	8007312 <mem_cpy+0x26>
		*d++ = *s++;
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	1c53      	adds	r3, r2, #1
 8007306:	613b      	str	r3, [r7, #16]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	1c59      	adds	r1, r3, #1
 800730c:	6179      	str	r1, [r7, #20]
 800730e:	7812      	ldrb	r2, [r2, #0]
 8007310:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	1e5a      	subs	r2, r3, #1
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1f2      	bne.n	8007302 <mem_cpy+0x16>
}
 800731c:	bf00      	nop
 800731e:	bf00      	nop
 8007320:	371c      	adds	r7, #28
 8007322:	46bd      	mov	sp, r7
 8007324:	bc80      	pop	{r7}
 8007326:	4770      	bx	lr

08007328 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8007338:	e005      	b.n	8007346 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	617a      	str	r2, [r7, #20]
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	1e5a      	subs	r2, r3, #1
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1f4      	bne.n	800733a <mem_set+0x12>
}
 8007350:	bf00      	nop
 8007352:	bf00      	nop
 8007354:	371c      	adds	r7, #28
 8007356:	46bd      	mov	sp, r7
 8007358:	bc80      	pop	{r7}
 800735a:	4770      	bx	lr

0800735c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800735c:	b480      	push	{r7}
 800735e:	b089      	sub	sp, #36	@ 0x24
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	61fb      	str	r3, [r7, #28]
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8007374:	bf00      	nop
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	1e5a      	subs	r2, r3, #1
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00d      	beq.n	800739c <mem_cmp+0x40>
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	61fa      	str	r2, [r7, #28]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	4619      	mov	r1, r3
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	61ba      	str	r2, [r7, #24]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	1acb      	subs	r3, r1, r3
 8007394:	617b      	str	r3, [r7, #20]
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d0ec      	beq.n	8007376 <mem_cmp+0x1a>
	return r;
 800739c:	697b      	ldr	r3, [r7, #20]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3724      	adds	r7, #36	@ 0x24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bc80      	pop	{r7}
 80073a6:	4770      	bx	lr

080073a8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80073b2:	e002      	b.n	80073ba <chk_chr+0x12>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3301      	adds	r3, #1
 80073b8:	607b      	str	r3, [r7, #4]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d005      	beq.n	80073ce <chk_chr+0x26>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	461a      	mov	r2, r3
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d1f2      	bne.n	80073b4 <chk_chr+0xc>
	return *str;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	781b      	ldrb	r3, [r3, #0]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bc80      	pop	{r7}
 80073da:	4770      	bx	lr

080073dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80073e6:	2300      	movs	r3, #0
 80073e8:	60bb      	str	r3, [r7, #8]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	e03b      	b.n	8007468 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80073f0:	4931      	ldr	r1, [pc, #196]	@ (80074b8 <chk_lock+0xdc>)
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4613      	mov	r3, r2
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	440b      	add	r3, r1
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d02c      	beq.n	800745e <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8007404:	492c      	ldr	r1, [pc, #176]	@ (80074b8 <chk_lock+0xdc>)
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	4613      	mov	r3, r2
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	4413      	add	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	440b      	add	r3, r1
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	429a      	cmp	r2, r3
 800741e:	d120      	bne.n	8007462 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8007420:	4925      	ldr	r1, [pc, #148]	@ (80074b8 <chk_lock+0xdc>)
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	4613      	mov	r3, r2
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	440b      	add	r3, r1
 800742e:	3304      	adds	r3, #4
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007438:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800743a:	429a      	cmp	r2, r3
 800743c:	d111      	bne.n	8007462 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800743e:	491e      	ldr	r1, [pc, #120]	@ (80074b8 <chk_lock+0xdc>)
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4613      	mov	r3, r2
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	440b      	add	r3, r1
 800744c:	3308      	adds	r3, #8
 800744e:	881a      	ldrh	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007456:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8007458:	429a      	cmp	r2, r3
 800745a:	d102      	bne.n	8007462 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800745c:	e007      	b.n	800746e <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800745e:	2301      	movs	r3, #1
 8007460:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3301      	adds	r3, #1
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d9c0      	bls.n	80073f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b02      	cmp	r3, #2
 8007472:	d109      	bne.n	8007488 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d102      	bne.n	8007480 <chk_lock+0xa4>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b02      	cmp	r3, #2
 800747e:	d101      	bne.n	8007484 <chk_lock+0xa8>
 8007480:	2300      	movs	r3, #0
 8007482:	e013      	b.n	80074ac <chk_lock+0xd0>
 8007484:	2312      	movs	r3, #18
 8007486:	e011      	b.n	80074ac <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10b      	bne.n	80074a6 <chk_lock+0xca>
 800748e:	490a      	ldr	r1, [pc, #40]	@ (80074b8 <chk_lock+0xdc>)
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	4613      	mov	r3, r2
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	4413      	add	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	440b      	add	r3, r1
 800749c:	330a      	adds	r3, #10
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074a4:	d101      	bne.n	80074aa <chk_lock+0xce>
 80074a6:	2310      	movs	r3, #16
 80074a8:	e000      	b.n	80074ac <chk_lock+0xd0>
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bc80      	pop	{r7}
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	20002998 	.word	0x20002998

080074bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80074c2:	2300      	movs	r3, #0
 80074c4:	607b      	str	r3, [r7, #4]
 80074c6:	e002      	b.n	80074ce <enq_lock+0x12>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3301      	adds	r3, #1
 80074cc:	607b      	str	r3, [r7, #4]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d809      	bhi.n	80074e8 <enq_lock+0x2c>
 80074d4:	490a      	ldr	r1, [pc, #40]	@ (8007500 <enq_lock+0x44>)
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	4613      	mov	r3, r2
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	4413      	add	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	440b      	add	r3, r1
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1ef      	bne.n	80074c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	bf14      	ite	ne
 80074ee:	2301      	movne	r3, #1
 80074f0:	2300      	moveq	r3, #0
 80074f2:	b2db      	uxtb	r3, r3
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bc80      	pop	{r7}
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	20002998 	.word	0x20002998

08007504 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800750e:	2300      	movs	r3, #0
 8007510:	60fb      	str	r3, [r7, #12]
 8007512:	e02e      	b.n	8007572 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8007514:	4958      	ldr	r1, [pc, #352]	@ (8007678 <inc_lock+0x174>)
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	4613      	mov	r3, r2
 800751a:	005b      	lsls	r3, r3, #1
 800751c:	4413      	add	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	440b      	add	r3, r1
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	429a      	cmp	r2, r3
 800752e:	d11d      	bne.n	800756c <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8007530:	4951      	ldr	r1, [pc, #324]	@ (8007678 <inc_lock+0x174>)
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	4613      	mov	r3, r2
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	4413      	add	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	440b      	add	r3, r1
 800753e:	3304      	adds	r3, #4
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007548:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 800754a:	429a      	cmp	r2, r3
 800754c:	d10e      	bne.n	800756c <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 800754e:	494a      	ldr	r1, [pc, #296]	@ (8007678 <inc_lock+0x174>)
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	4613      	mov	r3, r2
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	4413      	add	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	440b      	add	r3, r1
 800755c:	3308      	adds	r3, #8
 800755e:	881a      	ldrh	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007566:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8007568:	429a      	cmp	r2, r3
 800756a:	d006      	beq.n	800757a <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	3301      	adds	r3, #1
 8007570:	60fb      	str	r3, [r7, #12]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d9cd      	bls.n	8007514 <inc_lock+0x10>
 8007578:	e000      	b.n	800757c <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 800757a:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2b02      	cmp	r3, #2
 8007580:	d148      	bne.n	8007614 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]
 8007586:	e002      	b.n	800758e <inc_lock+0x8a>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	3301      	adds	r3, #1
 800758c:	60fb      	str	r3, [r7, #12]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d809      	bhi.n	80075a8 <inc_lock+0xa4>
 8007594:	4938      	ldr	r1, [pc, #224]	@ (8007678 <inc_lock+0x174>)
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	4613      	mov	r3, r2
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	4413      	add	r3, r2
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	440b      	add	r3, r1
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1ef      	bne.n	8007588 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d101      	bne.n	80075b2 <inc_lock+0xae>
 80075ae:	2300      	movs	r3, #0
 80075b0:	e05d      	b.n	800766e <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075b8:	6819      	ldr	r1, [r3, #0]
 80075ba:	482f      	ldr	r0, [pc, #188]	@ (8007678 <inc_lock+0x174>)
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4613      	mov	r3, r2
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4403      	add	r3, r0
 80075c8:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075d0:	6899      	ldr	r1, [r3, #8]
 80075d2:	4829      	ldr	r0, [pc, #164]	@ (8007678 <inc_lock+0x174>)
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4613      	mov	r3, r2
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	4413      	add	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4403      	add	r3, r0
 80075e0:	3304      	adds	r3, #4
 80075e2:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075ea:	88d8      	ldrh	r0, [r3, #6]
 80075ec:	4922      	ldr	r1, [pc, #136]	@ (8007678 <inc_lock+0x174>)
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	4613      	mov	r3, r2
 80075f2:	005b      	lsls	r3, r3, #1
 80075f4:	4413      	add	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	440b      	add	r3, r1
 80075fa:	3308      	adds	r3, #8
 80075fc:	4602      	mov	r2, r0
 80075fe:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8007600:	491d      	ldr	r1, [pc, #116]	@ (8007678 <inc_lock+0x174>)
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	4613      	mov	r3, r2
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	4413      	add	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	440b      	add	r3, r1
 800760e:	330a      	adds	r3, #10
 8007610:	2200      	movs	r2, #0
 8007612:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00c      	beq.n	8007634 <inc_lock+0x130>
 800761a:	4917      	ldr	r1, [pc, #92]	@ (8007678 <inc_lock+0x174>)
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4613      	mov	r3, r2
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	4413      	add	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	440b      	add	r3, r1
 8007628:	330a      	adds	r3, #10
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <inc_lock+0x130>
 8007630:	2300      	movs	r3, #0
 8007632:	e01c      	b.n	800766e <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10b      	bne.n	8007652 <inc_lock+0x14e>
 800763a:	490f      	ldr	r1, [pc, #60]	@ (8007678 <inc_lock+0x174>)
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	4613      	mov	r3, r2
 8007640:	005b      	lsls	r3, r3, #1
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	440b      	add	r3, r1
 8007648:	330a      	adds	r3, #10
 800764a:	881b      	ldrh	r3, [r3, #0]
 800764c:	3301      	adds	r3, #1
 800764e:	b299      	uxth	r1, r3
 8007650:	e001      	b.n	8007656 <inc_lock+0x152>
 8007652:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007656:	4808      	ldr	r0, [pc, #32]	@ (8007678 <inc_lock+0x174>)
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	4613      	mov	r3, r2
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	4413      	add	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4403      	add	r3, r0
 8007664:	330a      	adds	r3, #10
 8007666:	460a      	mov	r2, r1
 8007668:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	3301      	adds	r3, #1
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	bc80      	pop	{r7}
 8007676:	4770      	bx	lr
 8007678:	20002998 	.word	0x20002998

0800767c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3b01      	subs	r3, #1
 8007688:	607b      	str	r3, [r7, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d82e      	bhi.n	80076ee <dec_lock+0x72>
		n = Files[i].ctr;
 8007690:	491b      	ldr	r1, [pc, #108]	@ (8007700 <dec_lock+0x84>)
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	4613      	mov	r3, r2
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	4413      	add	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	440b      	add	r3, r1
 800769e:	330a      	adds	r3, #10
 80076a0:	881b      	ldrh	r3, [r3, #0]
 80076a2:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80076a4:	89fb      	ldrh	r3, [r7, #14]
 80076a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076aa:	d101      	bne.n	80076b0 <dec_lock+0x34>
 80076ac:	2300      	movs	r3, #0
 80076ae:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80076b0:	89fb      	ldrh	r3, [r7, #14]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d002      	beq.n	80076bc <dec_lock+0x40>
 80076b6:	89fb      	ldrh	r3, [r7, #14]
 80076b8:	3b01      	subs	r3, #1
 80076ba:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80076bc:	4910      	ldr	r1, [pc, #64]	@ (8007700 <dec_lock+0x84>)
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	4613      	mov	r3, r2
 80076c2:	005b      	lsls	r3, r3, #1
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	440b      	add	r3, r1
 80076ca:	330a      	adds	r3, #10
 80076cc:	89fa      	ldrh	r2, [r7, #14]
 80076ce:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80076d0:	89fb      	ldrh	r3, [r7, #14]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d108      	bne.n	80076e8 <dec_lock+0x6c>
 80076d6:	490a      	ldr	r1, [pc, #40]	@ (8007700 <dec_lock+0x84>)
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	440b      	add	r3, r1
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	737b      	strb	r3, [r7, #13]
 80076ec:	e001      	b.n	80076f2 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80076ee:	2302      	movs	r3, #2
 80076f0:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80076f2:	7b7b      	ldrb	r3, [r7, #13]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bc80      	pop	{r7}
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	20002998 	.word	0x20002998

08007704 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800770c:	2300      	movs	r3, #0
 800770e:	60fb      	str	r3, [r7, #12]
 8007710:	e016      	b.n	8007740 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007712:	4910      	ldr	r1, [pc, #64]	@ (8007754 <clear_lock+0x50>)
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4613      	mov	r3, r2
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	4413      	add	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	440b      	add	r3, r1
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	429a      	cmp	r2, r3
 8007726:	d108      	bne.n	800773a <clear_lock+0x36>
 8007728:	490a      	ldr	r1, [pc, #40]	@ (8007754 <clear_lock+0x50>)
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	4613      	mov	r3, r2
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	4413      	add	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	440b      	add	r3, r1
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3301      	adds	r3, #1
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d9e5      	bls.n	8007712 <clear_lock+0xe>
	}
}
 8007746:	bf00      	nop
 8007748:	bf00      	nop
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	bc80      	pop	{r7}
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	20002998 	.word	0x20002998

08007758 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800776a:	791b      	ldrb	r3, [r3, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d040      	beq.n	80077f2 <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007778:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007780:	7858      	ldrb	r0, [r3, #1]
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	2301      	movs	r3, #1
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	f7ff fd72 	bl	8007270 <disk_write>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <sync_window+0x40>
			res = FR_DISK_ERR;
 8007792:	2301      	movs	r3, #1
 8007794:	73fb      	strb	r3, [r7, #15]
 8007796:	e02c      	b.n	80077f2 <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800779e:	2200      	movs	r2, #0
 80077a0:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	1ad2      	subs	r2, r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d21b      	bcs.n	80077f2 <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077c0:	78db      	ldrb	r3, [r3, #3]
 80077c2:	613b      	str	r3, [r7, #16]
 80077c4:	e012      	b.n	80077ec <sync_window+0x94>
					wsect += fs->fsize;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	4413      	add	r3, r2
 80077d2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077da:	7858      	ldrb	r0, [r3, #1]
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	2301      	movs	r3, #1
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	f7ff fd45 	bl	8007270 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	613b      	str	r3, [r7, #16]
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d8e9      	bhi.n	80077c6 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80077f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	429a      	cmp	r2, r3
 8007816:	d01e      	beq.n	8007856 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f7ff ff9d 	bl	8007758 <sync_window>
 800781e:	4603      	mov	r3, r0
 8007820:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007822:	7bfb      	ldrb	r3, [r7, #15]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d116      	bne.n	8007856 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800782e:	7858      	ldrb	r0, [r3, #1]
 8007830:	6879      	ldr	r1, [r7, #4]
 8007832:	2301      	movs	r3, #1
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	f7ff fcfb 	bl	8007230 <disk_read>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d004      	beq.n	800784a <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007840:	f04f 33ff 	mov.w	r3, #4294967295
 8007844:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007846:	2301      	movs	r3, #1
 8007848:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007850:	461a      	mov	r2, r3
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 8007856:	7bfb      	ldrb	r3, [r7, #15]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff ff75 	bl	8007758 <sync_window>
 800786e:	4603      	mov	r3, r0
 8007870:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007872:	7bfb      	ldrb	r3, [r7, #15]
 8007874:	2b00      	cmp	r3, #0
 8007876:	f040 80ad 	bne.w	80079d4 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	2b03      	cmp	r3, #3
 8007884:	f040 8098 	bne.w	80079b8 <sync_fs+0x158>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800788e:	795b      	ldrb	r3, [r3, #5]
 8007890:	2b01      	cmp	r3, #1
 8007892:	f040 8091 	bne.w	80079b8 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800789e:	895b      	ldrh	r3, [r3, #10]
 80078a0:	461a      	mov	r2, r3
 80078a2:	2100      	movs	r1, #0
 80078a4:	f7ff fd40 	bl	8007328 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2255      	movs	r2, #85	@ 0x55
 80078ac:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	22aa      	movs	r2, #170	@ 0xaa
 80078b4:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2252      	movs	r2, #82	@ 0x52
 80078bc:	701a      	strb	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2252      	movs	r2, #82	@ 0x52
 80078c2:	705a      	strb	r2, [r3, #1]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2261      	movs	r2, #97	@ 0x61
 80078c8:	709a      	strb	r2, [r3, #2]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2241      	movs	r2, #65	@ 0x41
 80078ce:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2272      	movs	r2, #114	@ 0x72
 80078d4:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2272      	movs	r2, #114	@ 0x72
 80078dc:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2241      	movs	r2, #65	@ 0x41
 80078e4:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2261      	movs	r2, #97	@ 0x61
 80078ec:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	b29b      	uxth	r3, r3
 800790a:	0a1b      	lsrs	r3, r3, #8
 800790c:	b29b      	uxth	r3, r3
 800790e:	b2da      	uxtb	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	0c1b      	lsrs	r3, r3, #16
 8007920:	b2da      	uxtb	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	0e1b      	lsrs	r3, r3, #24
 8007932:	b2da      	uxtb	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	b2da      	uxtb	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	b29b      	uxth	r3, r3
 8007954:	0a1b      	lsrs	r3, r3, #8
 8007956:	b29b      	uxth	r3, r3
 8007958:	b2da      	uxtb	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	0c1b      	lsrs	r3, r3, #16
 800796a:	b2da      	uxtb	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	0e1b      	lsrs	r3, r3, #24
 800797c:	b2da      	uxtb	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800798a:	69db      	ldr	r3, [r3, #28]
 800798c:	3301      	adds	r3, #1
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007994:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800799c:	7858      	ldrb	r0, [r3, #1]
 800799e:	6879      	ldr	r1, [r7, #4]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a8:	2301      	movs	r3, #1
 80079aa:	f7ff fc61 	bl	8007270 <disk_write>
			fs->fsi_flag = 0;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079b4:	2200      	movs	r2, #0
 80079b6:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079be:	785b      	ldrb	r3, [r3, #1]
 80079c0:	2200      	movs	r2, #0
 80079c2:	2100      	movs	r1, #0
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7ff fc73 	bl	80072b0 <disk_ioctl>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <sync_fs+0x174>
			res = FR_DISK_ERR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80079de:	b480      	push	{r7}
 80079e0:	b083      	sub	sp, #12
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	3b02      	subs	r3, #2
 80079ec:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	3b02      	subs	r3, #2
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d301      	bcc.n	8007a02 <clust2sect+0x24>
 80079fe:	2300      	movs	r3, #0
 8007a00:	e00c      	b.n	8007a1c <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a08:	789b      	ldrb	r3, [r3, #2]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	fb03 f202 	mul.w	r2, r3, r2
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a1a:	4413      	add	r3, r2
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bc80      	pop	{r7}
 8007a24:	4770      	bx	lr

08007a26 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b086      	sub	sp, #24
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d906      	bls.n	8007a44 <get_fat+0x1e>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a3c:	695b      	ldr	r3, [r3, #20]
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d302      	bcc.n	8007a4a <get_fat+0x24>
		val = 1;	/* Internal error */
 8007a44:	2301      	movs	r3, #1
 8007a46:	617b      	str	r3, [r7, #20]
 8007a48:	e0e3      	b.n	8007c12 <get_fat+0x1ec>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	f000 8097 	beq.w	8007b8c <get_fat+0x166>
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	f300 80cd 	bgt.w	8007bfe <get_fat+0x1d8>
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d002      	beq.n	8007a6e <get_fat+0x48>
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d05e      	beq.n	8007b2a <get_fat+0x104>
 8007a6c:	e0c7      	b.n	8007bfe <get_fat+0x1d8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	085b      	lsrs	r3, r3, #1
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	4413      	add	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a82:	6a1a      	ldr	r2, [r3, #32]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a8a:	895b      	ldrh	r3, [r3, #10]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a94:	4413      	add	r3, r2
 8007a96:	4619      	mov	r1, r3
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff feaf 	bl	80077fc <move_window>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f040 80af 	bne.w	8007c04 <get_fat+0x1de>
			wc = fs->win.d8[bc++ % SS(fs)];
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	1c5a      	adds	r2, r3, #1
 8007aaa:	60fa      	str	r2, [r7, #12]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007ab2:	8952      	ldrh	r2, [r2, #10]
 8007ab4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ab8:	fb01 f202 	mul.w	r2, r1, r2
 8007abc:	1a9b      	subs	r3, r3, r2
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	5cd3      	ldrb	r3, [r2, r3]
 8007ac2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007aca:	6a1a      	ldr	r2, [r3, #32]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ad2:	895b      	ldrh	r3, [r3, #10]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007adc:	4413      	add	r3, r2
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f7ff fe8b 	bl	80077fc <move_window>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f040 808d 	bne.w	8007c08 <get_fat+0x1e2>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007af4:	895b      	ldrh	r3, [r3, #10]
 8007af6:	461a      	mov	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	fbb3 f1f2 	udiv	r1, r3, r2
 8007afe:	fb01 f202 	mul.w	r2, r1, r2
 8007b02:	1a9b      	subs	r3, r3, r2
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	5cd3      	ldrb	r3, [r2, r3]
 8007b08:	021b      	lsls	r3, r3, #8
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d002      	beq.n	8007b20 <get_fat+0xfa>
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	091b      	lsrs	r3, r3, #4
 8007b1e:	e002      	b.n	8007b26 <get_fat+0x100>
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b26:	617b      	str	r3, [r7, #20]
			break;
 8007b28:	e073      	b.n	8007c12 <get_fat+0x1ec>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b30:	6a1a      	ldr	r2, [r3, #32]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b38:	895b      	ldrh	r3, [r3, #10]
 8007b3a:	085b      	lsrs	r3, r3, #1
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	4619      	mov	r1, r3
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b46:	4413      	add	r3, r2
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7ff fe56 	bl	80077fc <move_window>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d15a      	bne.n	8007c0c <get_fat+0x1e6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	005b      	lsls	r3, r3, #1
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007b60:	8952      	ldrh	r2, [r2, #10]
 8007b62:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b66:	fb01 f202 	mul.w	r2, r1, r2
 8007b6a:	1a9b      	subs	r3, r3, r2
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	4413      	add	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	3301      	adds	r3, #1
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	021b      	lsls	r3, r3, #8
 8007b7a:	b21a      	sxth	r2, r3
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	b21b      	sxth	r3, r3
 8007b82:	4313      	orrs	r3, r2
 8007b84:	b21b      	sxth	r3, r3
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	617b      	str	r3, [r7, #20]
			break;
 8007b8a:	e042      	b.n	8007c12 <get_fat+0x1ec>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b92:	6a1a      	ldr	r2, [r3, #32]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b9a:	895b      	ldrh	r3, [r3, #10]
 8007b9c:	089b      	lsrs	r3, r3, #2
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ba8:	4413      	add	r3, r2
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7ff fe25 	bl	80077fc <move_window>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d12b      	bne.n	8007c10 <get_fat+0x1ea>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007bc2:	8952      	ldrh	r2, [r2, #10]
 8007bc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bc8:	fb01 f202 	mul.w	r2, r1, r2
 8007bcc:	1a9b      	subs	r3, r3, r2
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	3303      	adds	r3, #3
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	061a      	lsls	r2, r3, #24
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	3302      	adds	r3, #2
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	041b      	lsls	r3, r3, #16
 8007be4:	431a      	orrs	r2, r3
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	3301      	adds	r3, #1
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	021b      	lsls	r3, r3, #8
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	7812      	ldrb	r2, [r2, #0]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007bfa:	617b      	str	r3, [r7, #20]
			break;
 8007bfc:	e009      	b.n	8007c12 <get_fat+0x1ec>

		default:
			val = 1;	/* Internal error */
 8007bfe:	2301      	movs	r3, #1
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	e006      	b.n	8007c12 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c04:	bf00      	nop
 8007c06:	e004      	b.n	8007c12 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c08:	bf00      	nop
 8007c0a:	e002      	b.n	8007c12 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c0c:	bf00      	nop
 8007c0e:	e000      	b.n	8007c12 <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c10:	bf00      	nop
		}
	}

	return val;
 8007c12:	697b      	ldr	r3, [r7, #20]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b088      	sub	sp, #32
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d906      	bls.n	8007c3c <put_fat+0x20>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	68ba      	ldr	r2, [r7, #8]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d302      	bcc.n	8007c42 <put_fat+0x26>
		res = FR_INT_ERR;
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	77fb      	strb	r3, [r7, #31]
 8007c40:	e13a      	b.n	8007eb8 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	f000 80d0 	beq.w	8007df0 <put_fat+0x1d4>
 8007c50:	2b03      	cmp	r3, #3
 8007c52:	f300 8127 	bgt.w	8007ea4 <put_fat+0x288>
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d003      	beq.n	8007c62 <put_fat+0x46>
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	f000 808f 	beq.w	8007d7e <put_fat+0x162>
 8007c60:	e120      	b.n	8007ea4 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	617b      	str	r3, [r7, #20]
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	085b      	lsrs	r3, r3, #1
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c76:	6a1a      	ldr	r2, [r3, #32]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c7e:	895b      	ldrh	r3, [r3, #10]
 8007c80:	4619      	mov	r1, r3
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c88:	4413      	add	r3, r2
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f7ff fdb5 	bl	80077fc <move_window>
 8007c92:	4603      	mov	r3, r0
 8007c94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c96:	7ffb      	ldrb	r3, [r7, #31]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f040 8106 	bne.w	8007eaa <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	617a      	str	r2, [r7, #20]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007caa:	8952      	ldrh	r2, [r2, #10]
 8007cac:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cb0:	fb01 f202 	mul.w	r2, r1, r2
 8007cb4:	1a9b      	subs	r3, r3, r2
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	4413      	add	r3, r2
 8007cba:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00d      	beq.n	8007ce2 <put_fat+0xc6>
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	b25b      	sxtb	r3, r3
 8007ccc:	f003 030f 	and.w	r3, r3, #15
 8007cd0:	b25a      	sxtb	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	b25b      	sxtb	r3, r3
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	b25b      	sxtb	r3, r3
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	e001      	b.n	8007ce6 <put_fat+0xca>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	69ba      	ldr	r2, [r7, #24]
 8007ce8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cfa:	6a1a      	ldr	r2, [r3, #32]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d02:	895b      	ldrh	r3, [r3, #10]
 8007d04:	4619      	mov	r1, r3
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d0c:	4413      	add	r3, r2
 8007d0e:	4619      	mov	r1, r3
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f7ff fd73 	bl	80077fc <move_window>
 8007d16:	4603      	mov	r3, r0
 8007d18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d1a:	7ffb      	ldrb	r3, [r7, #31]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f040 80c6 	bne.w	8007eae <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d28:	895b      	ldrh	r3, [r3, #10]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d32:	fb01 f202 	mul.w	r2, r1, r2
 8007d36:	1a9b      	subs	r3, r3, r2
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d003      	beq.n	8007d50 <put_fat+0x134>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	091b      	lsrs	r3, r3, #4
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	e00e      	b.n	8007d6e <put_fat+0x152>
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	b25b      	sxtb	r3, r3
 8007d56:	f023 030f 	bic.w	r3, r3, #15
 8007d5a:	b25a      	sxtb	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	0a1b      	lsrs	r3, r3, #8
 8007d60:	b25b      	sxtb	r3, r3
 8007d62:	f003 030f 	and.w	r3, r3, #15
 8007d66:	b25b      	sxtb	r3, r3
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	b25b      	sxtb	r3, r3
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d78:	2201      	movs	r2, #1
 8007d7a:	711a      	strb	r2, [r3, #4]
			break;
 8007d7c:	e09c      	b.n	8007eb8 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d84:	6a1a      	ldr	r2, [r3, #32]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d8c:	895b      	ldrh	r3, [r3, #10]
 8007d8e:	085b      	lsrs	r3, r3, #1
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	4619      	mov	r1, r3
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d9a:	4413      	add	r3, r2
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f7ff fd2c 	bl	80077fc <move_window>
 8007da4:	4603      	mov	r3, r0
 8007da6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007da8:	7ffb      	ldrb	r3, [r7, #31]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f040 8081 	bne.w	8007eb2 <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007dba:	8952      	ldrh	r2, [r2, #10]
 8007dbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dc0:	fb01 f202 	mul.w	r2, r1, r2
 8007dc4:	1a9b      	subs	r3, r3, r2
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	4413      	add	r3, r2
 8007dca:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	701a      	strb	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	0a1b      	lsrs	r3, r3, #8
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	3301      	adds	r3, #1
 8007de0:	b2d2      	uxtb	r2, r2
 8007de2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dea:	2201      	movs	r2, #1
 8007dec:	711a      	strb	r2, [r3, #4]
			break;
 8007dee:	e063      	b.n	8007eb8 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007df6:	6a1a      	ldr	r2, [r3, #32]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007dfe:	895b      	ldrh	r3, [r3, #10]
 8007e00:	089b      	lsrs	r3, r3, #2
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	4619      	mov	r1, r3
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e0c:	4413      	add	r3, r2
 8007e0e:	4619      	mov	r1, r3
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f7ff fcf3 	bl	80077fc <move_window>
 8007e16:	4603      	mov	r3, r0
 8007e18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e1a:	7ffb      	ldrb	r3, [r7, #31]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d14a      	bne.n	8007eb6 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007e2a:	8952      	ldrh	r2, [r2, #10]
 8007e2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e30:	fb01 f202 	mul.w	r2, r1, r2
 8007e34:	1a9b      	subs	r3, r3, r2
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4413      	add	r3, r2
 8007e3a:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	3303      	adds	r3, #3
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	061a      	lsls	r2, r3, #24
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	3302      	adds	r3, #2
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	041b      	lsls	r3, r3, #16
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	3301      	adds	r3, #1
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	021b      	lsls	r3, r3, #8
 8007e56:	4313      	orrs	r3, r2
 8007e58:	69ba      	ldr	r2, [r7, #24]
 8007e5a:	7812      	ldrb	r2, [r2, #0]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	701a      	strb	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	0a1b      	lsrs	r3, r3, #8
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	b2d2      	uxtb	r2, r2
 8007e7e:	701a      	strb	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	0c1a      	lsrs	r2, r3, #16
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	3302      	adds	r3, #2
 8007e88:	b2d2      	uxtb	r2, r2
 8007e8a:	701a      	strb	r2, [r3, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	0e1a      	lsrs	r2, r3, #24
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	3303      	adds	r3, #3
 8007e94:	b2d2      	uxtb	r2, r2
 8007e96:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	711a      	strb	r2, [r3, #4]
			break;
 8007ea2:	e009      	b.n	8007eb8 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	77fb      	strb	r3, [r7, #31]
 8007ea8:	e006      	b.n	8007eb8 <put_fat+0x29c>
			if (res != FR_OK) break;
 8007eaa:	bf00      	nop
 8007eac:	e004      	b.n	8007eb8 <put_fat+0x29c>
			if (res != FR_OK) break;
 8007eae:	bf00      	nop
 8007eb0:	e002      	b.n	8007eb8 <put_fat+0x29c>
			if (res != FR_OK) break;
 8007eb2:	bf00      	nop
 8007eb4:	e000      	b.n	8007eb8 <put_fat+0x29c>
			if (res != FR_OK) break;
 8007eb6:	bf00      	nop
		}
	}

	return res;
 8007eb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3720      	adds	r7, #32
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b084      	sub	sp, #16
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
 8007eca:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d906      	bls.n	8007ee0 <remove_chain+0x1e>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d302      	bcc.n	8007ee6 <remove_chain+0x24>
		res = FR_INT_ERR;
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	73fb      	strb	r3, [r7, #15]
 8007ee4:	e049      	b.n	8007f7a <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007eea:	e03b      	b.n	8007f64 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7ff fd99 	bl	8007a26 <get_fat>
 8007ef4:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d03b      	beq.n	8007f74 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d102      	bne.n	8007f08 <remove_chain+0x46>
 8007f02:	2302      	movs	r3, #2
 8007f04:	73fb      	strb	r3, [r7, #15]
 8007f06:	e038      	b.n	8007f7a <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0e:	d102      	bne.n	8007f16 <remove_chain+0x54>
 8007f10:	2301      	movs	r3, #1
 8007f12:	73fb      	strb	r3, [r7, #15]
 8007f14:	e031      	b.n	8007f7a <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007f16:	2200      	movs	r2, #0
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7ff fe7e 	bl	8007c1c <put_fat>
 8007f20:	4603      	mov	r3, r0
 8007f22:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007f24:	7bfb      	ldrb	r3, [r7, #15]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d126      	bne.n	8007f78 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f36:	d013      	beq.n	8007f60 <remove_chain+0x9e>
				fs->free_clust++;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	3301      	adds	r3, #1
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007f48:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f50:	795b      	ldrb	r3, [r3, #5]
 8007f52:	f043 0301 	orr.w	r3, r3, #1
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f5e:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d3bc      	bcc.n	8007eec <remove_chain+0x2a>
 8007f72:	e002      	b.n	8007f7a <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8007f74:	bf00      	nop
 8007f76:	e000      	b.n	8007f7a <remove_chain+0xb8>
			if (res != FR_OK) break;
 8007f78:	bf00      	nop
		}
	}

	return res;
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d111      	bne.n	8007fb8 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d006      	beq.n	8007fb2 <create_chain+0x2e>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d31d      	bcc.n	8007fee <create_chain+0x6a>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	613b      	str	r3, [r7, #16]
 8007fb6:	e01a      	b.n	8007fee <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff fd33 	bl	8007a26 <get_fat>
 8007fc0:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d801      	bhi.n	8007fcc <create_chain+0x48>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e07f      	b.n	80080cc <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd2:	d101      	bne.n	8007fd8 <create_chain+0x54>
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	e079      	b.n	80080cc <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d201      	bcs.n	8007fea <create_chain+0x66>
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	e070      	b.n	80080cc <create_chain+0x148>
		scl = clst;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	429a      	cmp	r2, r3
 8008004:	d307      	bcc.n	8008016 <create_chain+0x92>
			ncl = 2;
 8008006:	2302      	movs	r3, #2
 8008008:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	429a      	cmp	r2, r3
 8008010:	d901      	bls.n	8008016 <create_chain+0x92>
 8008012:	2300      	movs	r3, #0
 8008014:	e05a      	b.n	80080cc <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8008016:	6979      	ldr	r1, [r7, #20]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f7ff fd04 	bl	8007a26 <get_fat>
 800801e:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00e      	beq.n	8008044 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802c:	d002      	beq.n	8008034 <create_chain+0xb0>
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <create_chain+0xb4>
			return cs;
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	e049      	b.n	80080cc <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	429a      	cmp	r2, r3
 800803e:	d1d8      	bne.n	8007ff2 <create_chain+0x6e>
 8008040:	2300      	movs	r3, #0
 8008042:	e043      	b.n	80080cc <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8008044:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8008046:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 800804a:	6979      	ldr	r1, [r7, #20]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff fde5 	bl	8007c1c <put_fat>
 8008052:	4603      	mov	r3, r0
 8008054:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8008056:	7bfb      	ldrb	r3, [r7, #15]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d109      	bne.n	8008070 <create_chain+0xec>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d006      	beq.n	8008070 <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7ff fdd8 	bl	8007c1c <put_fat>
 800806c:	4603      	mov	r3, r0
 800806e:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8008070:	7bfb      	ldrb	r3, [r7, #15]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d121      	bne.n	80080ba <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800807c:	461a      	mov	r2, r3
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808e:	d01c      	beq.n	80080ca <create_chain+0x146>
			fs->free_clust--;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	3b01      	subs	r3, #1
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80080a0:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080a8:	795b      	ldrb	r3, [r3, #5]
 80080aa:	f043 0301 	orr.w	r3, r3, #1
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080b6:	715a      	strb	r2, [r3, #5]
 80080b8:	e007      	b.n	80080ca <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d102      	bne.n	80080c6 <create_chain+0x142>
 80080c0:	f04f 33ff 	mov.w	r3, #4294967295
 80080c4:	e000      	b.n	80080c8 <create_chain+0x144>
 80080c6:	2301      	movs	r3, #1
 80080c8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80080ca:	697b      	ldr	r3, [r7, #20]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e6:	3304      	adds	r3, #4
 80080e8:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080f6:	895b      	ldrh	r3, [r3, #10]
 80080f8:	461a      	mov	r2, r3
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008106:	6812      	ldr	r2, [r2, #0]
 8008108:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800810c:	7892      	ldrb	r2, [r2, #2]
 800810e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008112:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	1d1a      	adds	r2, r3, #4
 8008118:	613a      	str	r2, [r7, #16]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <clmt_clust+0x54>
 8008124:	2300      	movs	r3, #0
 8008126:	e010      	b.n	800814a <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8008128:	697a      	ldr	r2, [r7, #20]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	429a      	cmp	r2, r3
 800812e:	d307      	bcc.n	8008140 <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	3304      	adds	r3, #4
 800813c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800813e:	e7e9      	b.n	8008114 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8008140:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	4413      	add	r3, r2
}
 800814a:	4618      	mov	r0, r3
 800814c:	371c      	adds	r7, #28
 800814e:	46bd      	mov	sp, r7
 8008150:	bc80      	pop	{r7}
 8008152:	4770      	bx	lr

08008154 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	b29a      	uxth	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008168:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d009      	beq.n	800818e <dir_sdi+0x3a>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	429a      	cmp	r2, r3
 800818c:	d301      	bcc.n	8008192 <dir_sdi+0x3e>
		return FR_INT_ERR;
 800818e:	2302      	movs	r3, #2
 8008190:	e0aa      	b.n	80082e8 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d110      	bne.n	80081ba <dir_sdi+0x66>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	2b03      	cmp	r3, #3
 80081a8:	d107      	bne.n	80081ba <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b8:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d115      	bne.n	80081ec <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081cc:	891b      	ldrh	r3, [r3, #8]
 80081ce:	461a      	mov	r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d301      	bcc.n	80081da <dir_sdi+0x86>
			return FR_INT_ERR;
 80081d6:	2302      	movs	r3, #2
 80081d8:	e086      	b.n	80082e8 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e8:	613b      	str	r3, [r7, #16]
 80081ea:	e043      	b.n	8008274 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081f8:	895b      	ldrh	r3, [r3, #10]
 80081fa:	095b      	lsrs	r3, r3, #5
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	461a      	mov	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800820c:	789b      	ldrb	r3, [r3, #2]
 800820e:	fb02 f303 	mul.w	r3, r2, r3
 8008212:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8008214:	e021      	b.n	800825a <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	6979      	ldr	r1, [r7, #20]
 8008220:	4618      	mov	r0, r3
 8008222:	f7ff fc00 	bl	8007a26 <get_fat>
 8008226:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800822e:	d101      	bne.n	8008234 <dir_sdi+0xe0>
 8008230:	2301      	movs	r3, #1
 8008232:	e059      	b.n	80082e8 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d909      	bls.n	800824e <dir_sdi+0xfa>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	429a      	cmp	r2, r3
 800824c:	d301      	bcc.n	8008252 <dir_sdi+0xfe>
				return FR_INT_ERR;
 800824e:	2302      	movs	r3, #2
 8008250:	e04a      	b.n	80082e8 <dir_sdi+0x194>
			idx -= ic;
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	429a      	cmp	r2, r3
 8008260:	d2d9      	bcs.n	8008216 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6979      	ldr	r1, [r7, #20]
 800826c:	4618      	mov	r0, r3
 800826e:	f7ff fbb6 	bl	80079de <clust2sect>
 8008272:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800827a:	461a      	mov	r2, r3
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <dir_sdi+0x136>
 8008286:	2302      	movs	r3, #2
 8008288:	e02e      	b.n	80082e8 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008296:	895b      	ldrh	r3, [r3, #10]
 8008298:	095b      	lsrs	r3, r3, #5
 800829a:	b29b      	uxth	r3, r3
 800829c:	461a      	mov	r2, r3
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	4413      	add	r3, r2
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80082ae:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4618      	mov	r0, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082c6:	895b      	ldrh	r3, [r3, #10]
 80082c8:	095b      	lsrs	r3, r3, #5
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	461a      	mov	r2, r3
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80082d4:	fb01 f202 	mul.w	r2, r1, r2
 80082d8:	1a9b      	subs	r3, r3, r2
 80082da:	015b      	lsls	r3, r3, #5
 80082dc:	4403      	add	r3, r0
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80082e4:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3718      	adds	r7, #24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80082f0:	b590      	push	{r4, r7, lr}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008300:	88db      	ldrh	r3, [r3, #6]
 8008302:	3301      	adds	r3, #1
 8008304:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	b29b      	uxth	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d005      	beq.n	800831a <dir_next+0x2a>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <dir_next+0x2e>
		return FR_NO_FILE;
 800831a:	2304      	movs	r3, #4
 800831c:	e12e      	b.n	800857c <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800832a:	895b      	ldrh	r3, [r3, #10]
 800832c:	095b      	lsrs	r3, r3, #5
 800832e:	b29b      	uxth	r3, r3
 8008330:	461a      	mov	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	fbb3 f1f2 	udiv	r1, r3, r2
 8008338:	fb01 f202 	mul.w	r2, r1, r2
 800833c:	1a9b      	subs	r3, r3, r2
 800833e:	2b00      	cmp	r3, #0
 8008340:	f040 80fa 	bne.w	8008538 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	3301      	adds	r3, #1
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008354:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d10d      	bne.n	800837e <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800836e:	891b      	ldrh	r3, [r3, #8]
 8008370:	461a      	mov	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	4293      	cmp	r3, r2
 8008376:	f0c0 80df 	bcc.w	8008538 <dir_next+0x248>
				return FR_NO_FILE;
 800837a:	2304      	movs	r3, #4
 800837c:	e0fe      	b.n	800857c <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800838a:	895b      	ldrh	r3, [r3, #10]
 800838c:	095b      	lsrs	r3, r3, #5
 800838e:	b29b      	uxth	r3, r3
 8008390:	461a      	mov	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	fbb3 f3f2 	udiv	r3, r3, r2
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800839e:	6812      	ldr	r2, [r2, #0]
 80083a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80083a4:	7892      	ldrb	r2, [r2, #2]
 80083a6:	3a01      	subs	r2, #1
 80083a8:	4013      	ands	r3, r2
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f040 80c4 	bne.w	8008538 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	4619      	mov	r1, r3
 80083c2:	4610      	mov	r0, r2
 80083c4:	f7ff fb2f 	bl	8007a26 <get_fat>
 80083c8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d801      	bhi.n	80083d4 <dir_next+0xe4>
 80083d0:	2302      	movs	r3, #2
 80083d2:	e0d3      	b.n	800857c <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083da:	d101      	bne.n	80083e0 <dir_next+0xf0>
 80083dc:	2301      	movs	r3, #1
 80083de:	e0cd      	b.n	800857c <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	f0c0 808e 	bcc.w	8008512 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d101      	bne.n	8008400 <dir_next+0x110>
 80083fc:	2304      	movs	r3, #4
 80083fe:	e0bd      	b.n	800857c <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	4619      	mov	r1, r3
 8008412:	4610      	mov	r0, r2
 8008414:	f7ff fdb6 	bl	8007f84 <create_chain>
 8008418:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <dir_next+0x134>
 8008420:	2307      	movs	r3, #7
 8008422:	e0ab      	b.n	800857c <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d101      	bne.n	800842e <dir_next+0x13e>
 800842a:	2302      	movs	r3, #2
 800842c:	e0a6      	b.n	800857c <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008434:	d101      	bne.n	800843a <dir_next+0x14a>
 8008436:	2301      	movs	r3, #1
 8008438:	e0a0      	b.n	800857c <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4618      	mov	r0, r3
 8008444:	f7ff f988 	bl	8007758 <sync_window>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <dir_next+0x162>
 800844e:	2301      	movs	r3, #1
 8008450:	e094      	b.n	800857c <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4618      	mov	r0, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008468:	895b      	ldrh	r3, [r3, #10]
 800846a:	461a      	mov	r2, r3
 800846c:	2100      	movs	r1, #0
 800846e:	f7fe ff5b 	bl	8007328 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008480:	681c      	ldr	r4, [r3, #0]
 8008482:	6979      	ldr	r1, [r7, #20]
 8008484:	4610      	mov	r0, r2
 8008486:	f7ff faaa 	bl	80079de <clust2sect>
 800848a:	4603      	mov	r3, r0
 800848c:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 8008490:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8008492:	2300      	movs	r3, #0
 8008494:	613b      	str	r3, [r7, #16]
 8008496:	e021      	b.n	80084dc <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084a4:	2201      	movs	r2, #1
 80084a6:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7ff f951 	bl	8007758 <sync_window>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <dir_next+0x1d0>
 80084bc:	2301      	movs	r3, #1
 80084be:	e05d      	b.n	800857c <dir_next+0x28c>
						dp->fs->winsect++;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 80084cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80084ce:	3201      	adds	r2, #1
 80084d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084d4:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	3301      	adds	r3, #1
 80084da:	613b      	str	r3, [r7, #16]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084e8:	789b      	ldrb	r3, [r3, #2]
 80084ea:	461a      	mov	r2, r3
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d3d2      	bcc.n	8008498 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084fe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	1acb      	subs	r3, r1, r3
 800850c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008510:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008518:	461a      	mov	r2, r3
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	6979      	ldr	r1, [r7, #20]
 8008528:	4618      	mov	r0, r3
 800852a:	f7ff fa58 	bl	80079de <clust2sect>
 800852e:	4602      	mov	r2, r0
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008536:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	b29a      	uxth	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008542:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4618      	mov	r0, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800855a:	895b      	ldrh	r3, [r3, #10]
 800855c:	095b      	lsrs	r3, r3, #5
 800855e:	b29b      	uxth	r3, r3
 8008560:	461a      	mov	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	fbb3 f1f2 	udiv	r1, r3, r2
 8008568:	fb01 f202 	mul.w	r2, r1, r2
 800856c:	1a9b      	subs	r3, r3, r2
 800856e:	015b      	lsls	r3, r3, #5
 8008570:	4403      	add	r3, r0
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008578:	6153      	str	r3, [r2, #20]

	return FR_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	371c      	adds	r7, #28
 8008580:	46bd      	mov	sp, r7
 8008582:	bd90      	pop	{r4, r7, pc}

08008584 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800858e:	2100      	movs	r1, #0
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f7ff fddf 	bl	8008154 <dir_sdi>
 8008596:	4603      	mov	r3, r0
 8008598:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800859a:	7bfb      	ldrb	r3, [r7, #15]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d135      	bne.n	800860c <dir_alloc+0x88>
		n = 0;
 80085a0:	2300      	movs	r3, #0
 80085a2:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	4619      	mov	r1, r3
 80085b6:	4610      	mov	r0, r2
 80085b8:	f7ff f920 	bl	80077fc <move_window>
 80085bc:	4603      	mov	r3, r0
 80085be:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d121      	bne.n	800860a <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2be5      	cmp	r3, #229	@ 0xe5
 80085d2:	d006      	beq.n	80085e2 <dir_alloc+0x5e>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d107      	bne.n	80085f2 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	3301      	adds	r3, #1
 80085e6:	60bb      	str	r3, [r7, #8]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d102      	bne.n	80085f6 <dir_alloc+0x72>
 80085f0:	e00c      	b.n	800860c <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80085f2:	2300      	movs	r3, #0
 80085f4:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80085f6:	2101      	movs	r1, #1
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff fe79 	bl	80082f0 <dir_next>
 80085fe:	4603      	mov	r3, r0
 8008600:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8008602:	7bfb      	ldrb	r3, [r7, #15]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d0cd      	beq.n	80085a4 <dir_alloc+0x20>
 8008608:	e000      	b.n	800860c <dir_alloc+0x88>
			if (res != FR_OK) break;
 800860a:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	2b04      	cmp	r3, #4
 8008610:	d101      	bne.n	8008616 <dir_alloc+0x92>
 8008612:	2307      	movs	r3, #7
 8008614:	73fb      	strb	r3, [r7, #15]
	return res;
 8008616:	7bfb      	ldrb	r3, [r7, #15]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	331b      	adds	r3, #27
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	021b      	lsls	r3, r3, #8
 8008632:	b21a      	sxth	r2, r3
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	331a      	adds	r3, #26
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	b21b      	sxth	r3, r3
 800863c:	4313      	orrs	r3, r2
 800863e:	b21b      	sxth	r3, r3
 8008640:	b29b      	uxth	r3, r3
 8008642:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	2b03      	cmp	r3, #3
 800864e:	d10f      	bne.n	8008670 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	3315      	adds	r3, #21
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	021b      	lsls	r3, r3, #8
 8008658:	b21a      	sxth	r2, r3
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	3314      	adds	r3, #20
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	b21b      	sxth	r3, r3
 8008662:	4313      	orrs	r3, r2
 8008664:	b21b      	sxth	r3, r3
 8008666:	b29b      	uxth	r3, r3
 8008668:	041b      	lsls	r3, r3, #16
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	4313      	orrs	r3, r2
 800866e:	60fb      	str	r3, [r7, #12]

	return cl;
 8008670:	68fb      	ldr	r3, [r7, #12]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3714      	adds	r7, #20
 8008676:	46bd      	mov	sp, r7
 8008678:	bc80      	pop	{r7}
 800867a:	4770      	bx	lr

0800867c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	331a      	adds	r3, #26
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	b2d2      	uxtb	r2, r2
 800868e:	701a      	strb	r2, [r3, #0]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	b29b      	uxth	r3, r3
 8008694:	0a1b      	lsrs	r3, r3, #8
 8008696:	b29a      	uxth	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	331b      	adds	r3, #27
 800869c:	b2d2      	uxtb	r2, r2
 800869e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	0c1a      	lsrs	r2, r3, #16
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	3314      	adds	r3, #20
 80086a8:	b2d2      	uxtb	r2, r2
 80086aa:	701a      	strb	r2, [r3, #0]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	0c1b      	lsrs	r3, r3, #16
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	0a1b      	lsrs	r3, r3, #8
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3315      	adds	r3, #21
 80086ba:	b2d2      	uxtb	r2, r2
 80086bc:	701a      	strb	r2, [r3, #0]
}
 80086be:	bf00      	nop
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bc80      	pop	{r7}
 80086c6:	4770      	bx	lr

080086c8 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086da:	1e5a      	subs	r2, r3, #1
 80086dc:	4613      	mov	r3, r2
 80086de:	005b      	lsls	r3, r3, #1
 80086e0:	4413      	add	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80086e8:	2300      	movs	r3, #0
 80086ea:	613b      	str	r3, [r7, #16]
 80086ec:	2301      	movs	r3, #1
 80086ee:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80086f0:	4a2b      	ldr	r2, [pc, #172]	@ (80087a0 <cmp_lfn+0xd8>)
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	4413      	add	r3, r2
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	3301      	adds	r3, #1
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	4413      	add	r3, r2
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	021b      	lsls	r3, r3, #8
 8008702:	b21a      	sxth	r2, r3
 8008704:	4926      	ldr	r1, [pc, #152]	@ (80087a0 <cmp_lfn+0xd8>)
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	440b      	add	r3, r1
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	4619      	mov	r1, r3
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	440b      	add	r3, r1
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	b21b      	sxth	r3, r3
 8008716:	4313      	orrs	r3, r2
 8008718:	b21b      	sxth	r3, r3
 800871a:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800871c:	89fb      	ldrh	r3, [r7, #14]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d019      	beq.n	8008756 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8008722:	89bb      	ldrh	r3, [r7, #12]
 8008724:	4618      	mov	r0, r3
 8008726:	f002 fc2f 	bl	800af88 <ff_wtoupper>
 800872a:	4603      	mov	r3, r0
 800872c:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	2bfe      	cmp	r3, #254	@ 0xfe
 8008732:	d80e      	bhi.n	8008752 <cmp_lfn+0x8a>
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	617a      	str	r2, [r7, #20]
 800873a:	005b      	lsls	r3, r3, #1
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	4413      	add	r3, r2
 8008740:	881b      	ldrh	r3, [r3, #0]
 8008742:	4618      	mov	r0, r3
 8008744:	f002 fc20 	bl	800af88 <ff_wtoupper>
 8008748:	4603      	mov	r3, r0
 800874a:	461a      	mov	r2, r3
 800874c:	89fb      	ldrh	r3, [r7, #14]
 800874e:	4293      	cmp	r3, r2
 8008750:	d008      	beq.n	8008764 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8008752:	2300      	movs	r3, #0
 8008754:	e01f      	b.n	8008796 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8008756:	89bb      	ldrh	r3, [r7, #12]
 8008758:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800875c:	4293      	cmp	r3, r2
 800875e:	d001      	beq.n	8008764 <cmp_lfn+0x9c>
 8008760:	2300      	movs	r3, #0
 8008762:	e018      	b.n	8008796 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	3301      	adds	r3, #1
 8008768:	613b      	str	r3, [r7, #16]
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	2b0c      	cmp	r3, #12
 800876e:	d9bf      	bls.n	80086f0 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00b      	beq.n	8008794 <cmp_lfn+0xcc>
 800877c:	89fb      	ldrh	r3, [r7, #14]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d008      	beq.n	8008794 <cmp_lfn+0xcc>
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	005b      	lsls	r3, r3, #1
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	4413      	add	r3, r2
 800878a:	881b      	ldrh	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <cmp_lfn+0xcc>
		return 0;
 8008790:	2300      	movs	r3, #0
 8008792:	e000      	b.n	8008796 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8008794:	2301      	movs	r3, #1
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	0800eb94 	.word	0x0800eb94

080087a4 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b089      	sub	sp, #36	@ 0x24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	4611      	mov	r1, r2
 80087b0:	461a      	mov	r2, r3
 80087b2:	460b      	mov	r3, r1
 80087b4:	71fb      	strb	r3, [r7, #7]
 80087b6:	4613      	mov	r3, r2
 80087b8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	330d      	adds	r3, #13
 80087be:	79ba      	ldrb	r2, [r7, #6]
 80087c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	330b      	adds	r3, #11
 80087c6:	220f      	movs	r2, #15
 80087c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	330c      	adds	r3, #12
 80087ce:	2200      	movs	r2, #0
 80087d0:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	331a      	adds	r3, #26
 80087d6:	2200      	movs	r2, #0
 80087d8:	701a      	strb	r2, [r3, #0]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	331b      	adds	r3, #27
 80087de:	2200      	movs	r2, #0
 80087e0:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	1e5a      	subs	r2, r3, #1
 80087e6:	4613      	mov	r3, r2
 80087e8:	005b      	lsls	r3, r3, #1
 80087ea:	4413      	add	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	82fb      	strh	r3, [r7, #22]
 80087f6:	2300      	movs	r3, #0
 80087f8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80087fa:	8afb      	ldrh	r3, [r7, #22]
 80087fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008800:	4293      	cmp	r3, r2
 8008802:	d007      	beq.n	8008814 <fit_lfn+0x70>
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	61fa      	str	r2, [r7, #28]
 800880a:	005b      	lsls	r3, r3, #1
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	4413      	add	r3, r2
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8008814:	4a1c      	ldr	r2, [pc, #112]	@ (8008888 <fit_lfn+0xe4>)
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	4413      	add	r3, r2
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	461a      	mov	r2, r3
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	4413      	add	r3, r2
 8008822:	8afa      	ldrh	r2, [r7, #22]
 8008824:	b2d2      	uxtb	r2, r2
 8008826:	701a      	strb	r2, [r3, #0]
 8008828:	8afb      	ldrh	r3, [r7, #22]
 800882a:	0a1b      	lsrs	r3, r3, #8
 800882c:	b299      	uxth	r1, r3
 800882e:	4a16      	ldr	r2, [pc, #88]	@ (8008888 <fit_lfn+0xe4>)
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	4413      	add	r3, r2
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	3301      	adds	r3, #1
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	4413      	add	r3, r2
 800883c:	b2ca      	uxtb	r2, r1
 800883e:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8008840:	8afb      	ldrh	r3, [r7, #22]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d102      	bne.n	800884c <fit_lfn+0xa8>
 8008846:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800884a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	3301      	adds	r3, #1
 8008850:	61bb      	str	r3, [r7, #24]
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	2b0c      	cmp	r3, #12
 8008856:	d9d0      	bls.n	80087fa <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8008858:	8afb      	ldrh	r3, [r7, #22]
 800885a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800885e:	4293      	cmp	r3, r2
 8008860:	d006      	beq.n	8008870 <fit_lfn+0xcc>
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	005b      	lsls	r3, r3, #1
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	4413      	add	r3, r2
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d103      	bne.n	8008878 <fit_lfn+0xd4>
 8008870:	79fb      	ldrb	r3, [r7, #7]
 8008872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008876:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	79fa      	ldrb	r2, [r7, #7]
 800887c:	701a      	strb	r2, [r3, #0]
}
 800887e:	bf00      	nop
 8008880:	3724      	adds	r7, #36	@ 0x24
 8008882:	46bd      	mov	sp, r7
 8008884:	bc80      	pop	{r7}
 8008886:	4770      	bx	lr
 8008888:	0800eb94 	.word	0x0800eb94

0800888c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b08c      	sub	sp, #48	@ 0x30
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
 8008898:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800889a:	220b      	movs	r2, #11
 800889c:	68b9      	ldr	r1, [r7, #8]
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f7fe fd24 	bl	80072ec <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	2b05      	cmp	r3, #5
 80088a8:	d92b      	bls.n	8008902 <gen_numname+0x76>
		sr = seq;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80088ae:	e022      	b.n	80088f6 <gen_numname+0x6a>
			wc = *lfn++;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	1c9a      	adds	r2, r3, #2
 80088b4:	607a      	str	r2, [r7, #4]
 80088b6:	881b      	ldrh	r3, [r3, #0]
 80088b8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80088ba:	2300      	movs	r3, #0
 80088bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088be:	e017      	b.n	80088f0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	005a      	lsls	r2, r3, #1
 80088c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	4413      	add	r3, r2
 80088cc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80088ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80088d0:	085b      	lsrs	r3, r3, #1
 80088d2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d005      	beq.n	80088ea <gen_numname+0x5e>
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80088e4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80088e8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80088ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ec:	3301      	adds	r3, #1
 80088ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f2:	2b0f      	cmp	r3, #15
 80088f4:	d9e4      	bls.n	80088c0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1d8      	bne.n	80088b0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008902:	2307      	movs	r3, #7
 8008904:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	b2db      	uxtb	r3, r3
 800890a:	f003 030f 	and.w	r3, r3, #15
 800890e:	b2db      	uxtb	r3, r3
 8008910:	3330      	adds	r3, #48	@ 0x30
 8008912:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8008916:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800891a:	2b39      	cmp	r3, #57	@ 0x39
 800891c:	d904      	bls.n	8008928 <gen_numname+0x9c>
 800891e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008922:	3307      	adds	r3, #7
 8008924:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8008928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892a:	1e5a      	subs	r2, r3, #1
 800892c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800892e:	3330      	adds	r3, #48	@ 0x30
 8008930:	443b      	add	r3, r7
 8008932:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8008936:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	091b      	lsrs	r3, r3, #4
 800893e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1df      	bne.n	8008906 <gen_numname+0x7a>
	ns[i] = '~';
 8008946:	f107 0214 	add.w	r2, r7, #20
 800894a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894c:	4413      	add	r3, r2
 800894e:	227e      	movs	r2, #126	@ 0x7e
 8008950:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008952:	2300      	movs	r3, #0
 8008954:	627b      	str	r3, [r7, #36]	@ 0x24
 8008956:	e002      	b.n	800895e <gen_numname+0xd2>
 8008958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895a:	3301      	adds	r3, #1
 800895c:	627b      	str	r3, [r7, #36]	@ 0x24
 800895e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008962:	429a      	cmp	r2, r3
 8008964:	d205      	bcs.n	8008972 <gen_numname+0xe6>
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896a:	4413      	add	r3, r2
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	2b20      	cmp	r3, #32
 8008970:	d1f2      	bne.n	8008958 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008974:	2b07      	cmp	r3, #7
 8008976:	d807      	bhi.n	8008988 <gen_numname+0xfc>
 8008978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897a:	1c5a      	adds	r2, r3, #1
 800897c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800897e:	3330      	adds	r3, #48	@ 0x30
 8008980:	443b      	add	r3, r7
 8008982:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008986:	e000      	b.n	800898a <gen_numname+0xfe>
 8008988:	2120      	movs	r1, #32
 800898a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	4413      	add	r3, r2
 8008994:	460a      	mov	r2, r1
 8008996:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899a:	2b07      	cmp	r3, #7
 800899c:	d9e9      	bls.n	8008972 <gen_numname+0xe6>
}
 800899e:	bf00      	nop
 80089a0:	bf00      	nop
 80089a2:	3730      	adds	r7, #48	@ 0x30
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80089b4:	230b      	movs	r3, #11
 80089b6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
 80089ba:	b2da      	uxtb	r2, r3
 80089bc:	0852      	lsrs	r2, r2, #1
 80089be:	01db      	lsls	r3, r3, #7
 80089c0:	4313      	orrs	r3, r2
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	1c59      	adds	r1, r3, #1
 80089c8:	6079      	str	r1, [r7, #4]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	4413      	add	r3, r2
 80089ce:	73fb      	strb	r3, [r7, #15]
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	60bb      	str	r3, [r7, #8]
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1ed      	bne.n	80089b8 <sum_sfn+0x10>
	return sum;
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bc80      	pop	{r7}
 80089e6:	4770      	bx	lr

080089e8 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80089f0:	2100      	movs	r1, #0
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7ff fbae 	bl	8008154 <dir_sdi>
 80089f8:	4603      	mov	r3, r0
 80089fa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80089fc:	7dfb      	ldrb	r3, [r7, #23]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <dir_find+0x1e>
 8008a02:	7dfb      	ldrb	r3, [r7, #23]
 8008a04:	e0b8      	b.n	8008b78 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8008a06:	23ff      	movs	r3, #255	@ 0xff
 8008a08:	753b      	strb	r3, [r7, #20]
 8008a0a:	7d3b      	ldrb	r3, [r7, #20]
 8008a0c:	757b      	strb	r3, [r7, #21]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008a18:	849a      	strh	r2, [r3, #36]	@ 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	f7fe fee5 	bl	80077fc <move_window>
 8008a32:	4603      	mov	r3, r0
 8008a34:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f040 8097 	bne.w	8008b6c <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008a4e:	7dbb      	ldrb	r3, [r7, #22]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d102      	bne.n	8008a5a <dir_find+0x72>
 8008a54:	2304      	movs	r3, #4
 8008a56:	75fb      	strb	r3, [r7, #23]
 8008a58:	e08d      	b.n	8008b76 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	330b      	adds	r3, #11
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a64:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008a66:	7dbb      	ldrb	r3, [r7, #22]
 8008a68:	2be5      	cmp	r3, #229	@ 0xe5
 8008a6a:	d007      	beq.n	8008a7c <dir_find+0x94>
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
 8008a6e:	f003 0308 	and.w	r3, r3, #8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00b      	beq.n	8008a8e <dir_find+0xa6>
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
 8008a78:	2b0f      	cmp	r3, #15
 8008a7a:	d008      	beq.n	8008a8e <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8008a7c:	23ff      	movs	r3, #255	@ 0xff
 8008a7e:	757b      	strb	r3, [r7, #21]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008a8a:	849a      	strh	r2, [r3, #36]	@ 0x24
 8008a8c:	e063      	b.n	8008b56 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008a8e:	7bfb      	ldrb	r3, [r7, #15]
 8008a90:	2b0f      	cmp	r3, #15
 8008a92:	d137      	bne.n	8008b04 <dir_find+0x11c>
				if (dp->lfn) {
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a9a:	6a1b      	ldr	r3, [r3, #32]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d05a      	beq.n	8008b56 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008aa0:	7dbb      	ldrb	r3, [r7, #22]
 8008aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d010      	beq.n	8008acc <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	7b5b      	ldrb	r3, [r3, #13]
 8008aae:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8008ab0:	7dbb      	ldrb	r3, [r7, #22]
 8008ab2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ab6:	75bb      	strb	r3, [r7, #22]
 8008ab8:	7dbb      	ldrb	r3, [r7, #22]
 8008aba:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ac2:	88da      	ldrh	r2, [r3, #6]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008aca:	849a      	strh	r2, [r3, #36]	@ 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8008acc:	7dba      	ldrb	r2, [r7, #22]
 8008ace:	7d7b      	ldrb	r3, [r7, #21]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d114      	bne.n	8008afe <dir_find+0x116>
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	330d      	adds	r3, #13
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	7d3a      	ldrb	r2, [r7, #20]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d10e      	bne.n	8008afe <dir_find+0x116>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ae6:	6a1b      	ldr	r3, [r3, #32]
 8008ae8:	6939      	ldr	r1, [r7, #16]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff fdec 	bl	80086c8 <cmp_lfn>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <dir_find+0x116>
 8008af6:	7d7b      	ldrb	r3, [r7, #21]
 8008af8:	3b01      	subs	r3, #1
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	e000      	b.n	8008b00 <dir_find+0x118>
 8008afe:	23ff      	movs	r3, #255	@ 0xff
 8008b00:	757b      	strb	r3, [r7, #21]
 8008b02:	e028      	b.n	8008b56 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8008b04:	7d7b      	ldrb	r3, [r7, #21]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d107      	bne.n	8008b1a <dir_find+0x132>
 8008b0a:	6938      	ldr	r0, [r7, #16]
 8008b0c:	f7ff ff4c 	bl	80089a8 <sum_sfn>
 8008b10:	4603      	mov	r3, r0
 8008b12:	461a      	mov	r2, r3
 8008b14:	7d3b      	ldrb	r3, [r7, #20]
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d02a      	beq.n	8008b70 <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	330b      	adds	r3, #11
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10b      	bne.n	8008b46 <dir_find+0x15e>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b34:	699b      	ldr	r3, [r3, #24]
 8008b36:	220b      	movs	r2, #11
 8008b38:	4619      	mov	r1, r3
 8008b3a:	6938      	ldr	r0, [r7, #16]
 8008b3c:	f7fe fc0e 	bl	800735c <mem_cmp>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d016      	beq.n	8008b74 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8008b46:	23ff      	movs	r3, #255	@ 0xff
 8008b48:	757b      	strb	r3, [r7, #21]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b54:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8008b56:	2100      	movs	r1, #0
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7ff fbc9 	bl	80082f0 <dir_next>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008b62:	7dfb      	ldrb	r3, [r7, #23]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f43f af58 	beq.w	8008a1a <dir_find+0x32>
 8008b6a:	e004      	b.n	8008b76 <dir_find+0x18e>
		if (res != FR_OK) break;
 8008b6c:	bf00      	nop
 8008b6e:	e002      	b.n	8008b76 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8008b70:	bf00      	nop
 8008b72:	e000      	b.n	8008b76 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8008b74:	bf00      	nop

	return res;
 8008b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3718      	adds	r7, #24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b08c      	sub	sp, #48	@ 0x30
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	623b      	str	r3, [r7, #32]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8008b9c:	f107 030c 	add.w	r3, r7, #12
 8008ba0:	220c      	movs	r2, #12
 8008ba2:	6a39      	ldr	r1, [r7, #32]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fe fba1 	bl	80072ec <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008baa:	7dfb      	ldrb	r3, [r7, #23]
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d03b      	beq.n	8008c2c <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	330b      	adds	r3, #11
 8008bb8:	2200      	movs	r2, #0
 8008bba:	701a      	strb	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 8008bc8:	2301      	movs	r3, #1
 8008bca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008bcc:	e013      	b.n	8008bf6 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8008bce:	f107 010c 	add.w	r1, r7, #12
 8008bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd4:	69fa      	ldr	r2, [r7, #28]
 8008bd6:	6a38      	ldr	r0, [r7, #32]
 8008bd8:	f7ff fe58 	bl	800888c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff ff03 	bl	80089e8 <dir_find>
 8008be2:	4603      	mov	r3, r0
 8008be4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8008be8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d106      	bne.n	8008bfe <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 8008bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf8:	2b63      	cmp	r3, #99	@ 0x63
 8008bfa:	d9e8      	bls.n	8008bce <dir_register+0x4e>
 8008bfc:	e000      	b.n	8008c00 <dir_register+0x80>
			if (res != FR_OK) break;
 8008bfe:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c02:	2b64      	cmp	r3, #100	@ 0x64
 8008c04:	d101      	bne.n	8008c0a <dir_register+0x8a>
 8008c06:	2307      	movs	r3, #7
 8008c08:	e0d8      	b.n	8008dbc <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c0e:	2b04      	cmp	r3, #4
 8008c10:	d002      	beq.n	8008c18 <dir_register+0x98>
 8008c12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c16:	e0d1      	b.n	8008dbc <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	330b      	adds	r3, #11
 8008c1c:	7dfa      	ldrb	r2, [r7, #23]
 8008c1e:	701a      	strb	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c26:	461a      	mov	r2, r3
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8008c2c:	7dfb      	ldrb	r3, [r7, #23]
 8008c2e:	f003 0302 	and.w	r3, r3, #2
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d014      	beq.n	8008c60 <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8008c36:	2300      	movs	r3, #0
 8008c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c3a:	e002      	b.n	8008c42 <dir_register+0xc2>
 8008c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c3e:	3301      	adds	r3, #1
 8008c40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c44:	005b      	lsls	r3, r3, #1
 8008c46:	69fa      	ldr	r2, [r7, #28]
 8008c48:	4413      	add	r3, r2
 8008c4a:	881b      	ldrh	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1f5      	bne.n	8008c3c <dir_register+0xbc>
		nent = (n + 25) / 13;
 8008c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c52:	3319      	adds	r3, #25
 8008c54:	4a5b      	ldr	r2, [pc, #364]	@ (8008dc4 <dir_register+0x244>)
 8008c56:	fba2 2303 	umull	r2, r3, r2, r3
 8008c5a:	089b      	lsrs	r3, r3, #2
 8008c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c5e:	e001      	b.n	8008c64 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8008c60:	2301      	movs	r3, #1
 8008c62:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008c64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7ff fc8c 	bl	8008584 <dir_alloc>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008c72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d15b      	bne.n	8008d32 <dir_register+0x1b2>
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d055      	beq.n	8008d32 <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c8c:	88db      	ldrh	r3, [r3, #6]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	4619      	mov	r1, r3
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7ff fa5c 	bl	8008154 <dir_sdi>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d143      	bne.n	8008d32 <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7ff fe78 	bl	80089a8 <sum_sfn>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	4619      	mov	r1, r3
 8008cce:	4610      	mov	r0, r2
 8008cd0:	f7fe fd94 	bl	80077fc <move_window>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8008cda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d126      	bne.n	8008d30 <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ce8:	6a18      	ldr	r0, [r3, #32]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cf0:	6959      	ldr	r1, [r3, #20]
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf4:	b2da      	uxtb	r2, r3
 8008cf6:	7efb      	ldrb	r3, [r7, #27]
 8008cf8:	f7ff fd54 	bl	80087a4 <fit_lfn>
				dp->fs->wflag = 1;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d08:	2201      	movs	r2, #1
 8008d0a:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7ff faee 	bl	80082f0 <dir_next>
 8008d14:	4603      	mov	r3, r0
 8008d16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d107      	bne.n	8008d32 <dir_register+0x1b2>
 8008d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d24:	3b01      	subs	r3, #1
 8008d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1c6      	bne.n	8008cbc <dir_register+0x13c>
 8008d2e:	e000      	b.n	8008d32 <dir_register+0x1b2>
				if (res != FR_OK) break;
 8008d30:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8008d32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d13e      	bne.n	8008db8 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	f7fe fd55 	bl	80077fc <move_window>
 8008d52:	4603      	mov	r3, r0
 8008d54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008d58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d12b      	bne.n	8008db8 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	2220      	movs	r2, #32
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fe fadb 	bl	8007328 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d78:	6958      	ldr	r0, [r3, #20]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	220b      	movs	r2, #11
 8008d84:	4619      	mov	r1, r3
 8008d86:	f7fe fab1 	bl	80072ec <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d90:	699b      	ldr	r3, [r3, #24]
 8008d92:	330b      	adds	r3, #11
 8008d94:	781a      	ldrb	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	330c      	adds	r3, #12
 8008da0:	f002 0218 	and.w	r2, r2, #24
 8008da4:	b2d2      	uxtb	r2, r2
 8008da6:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008db4:	2201      	movs	r2, #1
 8008db6:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8008db8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3730      	adds	r7, #48	@ 0x30
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	4ec4ec4f 	.word	0x4ec4ec4f

08008dc8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b08a      	sub	sp, #40	@ 0x28
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	613b      	str	r3, [r7, #16]
 8008dd8:	e002      	b.n	8008de0 <create_name+0x18>
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	613b      	str	r3, [r7, #16]
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	2b2f      	cmp	r3, #47	@ 0x2f
 8008de6:	d0f8      	beq.n	8008dda <create_name+0x12>
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b5c      	cmp	r3, #92	@ 0x5c
 8008dee:	d0f4      	beq.n	8008dda <create_name+0x12>
	lfn = dp->lfn;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008df6:	6a1b      	ldr	r3, [r3, #32]
 8008df8:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	617b      	str	r3, [r7, #20]
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	1c5a      	adds	r2, r3, #1
 8008e06:	61ba      	str	r2, [r7, #24]
 8008e08:	693a      	ldr	r2, [r7, #16]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8008e10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e12:	2b1f      	cmp	r3, #31
 8008e14:	d92f      	bls.n	8008e76 <create_name+0xae>
 8008e16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e18:	2b2f      	cmp	r3, #47	@ 0x2f
 8008e1a:	d02c      	beq.n	8008e76 <create_name+0xae>
 8008e1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e1e:	2b5c      	cmp	r3, #92	@ 0x5c
 8008e20:	d029      	beq.n	8008e76 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	2bfe      	cmp	r3, #254	@ 0xfe
 8008e26:	d901      	bls.n	8008e2c <create_name+0x64>
			return FR_INVALID_NAME;
 8008e28:	2306      	movs	r3, #6
 8008e2a:	e186      	b.n	800913a <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008e2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008e32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e34:	2101      	movs	r1, #1
 8008e36:	4618      	mov	r0, r3
 8008e38:	f002 f86c 	bl	800af14 <ff_convert>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008e40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d101      	bne.n	8008e4a <create_name+0x82>
 8008e46:	2306      	movs	r3, #6
 8008e48:	e177      	b.n	800913a <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8008e4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e4e:	d809      	bhi.n	8008e64 <create_name+0x9c>
 8008e50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e52:	4619      	mov	r1, r3
 8008e54:	488e      	ldr	r0, [pc, #568]	@ (8009090 <create_name+0x2c8>)
 8008e56:	f7fe faa7 	bl	80073a8 <chk_chr>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <create_name+0x9c>
			return FR_INVALID_NAME;
 8008e60:	2306      	movs	r3, #6
 8008e62:	e16a      	b.n	800913a <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	1c5a      	adds	r2, r3, #1
 8008e68:	617a      	str	r2, [r7, #20]
 8008e6a:	005b      	lsls	r3, r3, #1
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	4413      	add	r3, r2
 8008e70:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008e72:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008e74:	e7c5      	b.n	8008e02 <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	441a      	add	r2, r3
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8008e80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008e82:	2b1f      	cmp	r3, #31
 8008e84:	d801      	bhi.n	8008e8a <create_name+0xc2>
 8008e86:	2304      	movs	r3, #4
 8008e88:	e000      	b.n	8008e8c <create_name+0xc4>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8008e90:	e011      	b.n	8008eb6 <create_name+0xee>
		w = lfn[di - 1];
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8008ea4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ea6:	2b20      	cmp	r3, #32
 8008ea8:	d002      	beq.n	8008eb0 <create_name+0xe8>
 8008eaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008eac:	2b2e      	cmp	r3, #46	@ 0x2e
 8008eae:	d106      	bne.n	8008ebe <create_name+0xf6>
		di--;
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1ea      	bne.n	8008e92 <create_name+0xca>
 8008ebc:	e000      	b.n	8008ec0 <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8008ebe:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d101      	bne.n	8008eca <create_name+0x102>
 8008ec6:	2306      	movs	r3, #6
 8008ec8:	e137      	b.n	800913a <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	005b      	lsls	r3, r3, #1
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	220b      	movs	r2, #11
 8008ee0:	2120      	movs	r1, #32
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fe fa20 	bl	8007328 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008ee8:	2300      	movs	r3, #0
 8008eea:	61bb      	str	r3, [r7, #24]
 8008eec:	e002      	b.n	8008ef4 <create_name+0x12c>
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	61bb      	str	r3, [r7, #24]
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	005b      	lsls	r3, r3, #1
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	4413      	add	r3, r2
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	2b20      	cmp	r3, #32
 8008f00:	d0f5      	beq.n	8008eee <create_name+0x126>
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	005b      	lsls	r3, r3, #1
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	4413      	add	r3, r2
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f0e:	d0ee      	beq.n	8008eee <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d009      	beq.n	8008f2a <create_name+0x162>
 8008f16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f1a:	f043 0303 	orr.w	r3, r3, #3
 8008f1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008f22:	e002      	b.n	8008f2a <create_name+0x162>
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	3b01      	subs	r3, #1
 8008f28:	617b      	str	r3, [r7, #20]
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d009      	beq.n	8008f44 <create_name+0x17c>
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008f36:	3b01      	subs	r3, #1
 8008f38:	005b      	lsls	r3, r3, #1
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	881b      	ldrh	r3, [r3, #0]
 8008f40:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f42:	d1ef      	bne.n	8008f24 <create_name+0x15c>

	b = i = 0; ni = 8;
 8008f44:	2300      	movs	r3, #0
 8008f46:	623b      	str	r3, [r7, #32]
 8008f48:	2300      	movs	r3, #0
 8008f4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008f4e:	2308      	movs	r3, #8
 8008f50:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	61ba      	str	r2, [r7, #24]
 8008f58:	005b      	lsls	r3, r3, #1
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	881b      	ldrh	r3, [r3, #0]
 8008f60:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008f62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 8091 	beq.w	800908c <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008f6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f6c:	2b20      	cmp	r3, #32
 8008f6e:	d006      	beq.n	8008f7e <create_name+0x1b6>
 8008f70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008f72:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f74:	d10a      	bne.n	8008f8c <create_name+0x1c4>
 8008f76:	69ba      	ldr	r2, [r7, #24]
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d006      	beq.n	8008f8c <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8008f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f82:	f043 0303 	orr.w	r3, r3, #3
 8008f86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008f8a:	e07e      	b.n	800908a <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008f8c:	6a3a      	ldr	r2, [r7, #32]
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d203      	bcs.n	8008f9c <create_name+0x1d4>
 8008f94:	69ba      	ldr	r2, [r7, #24]
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d123      	bne.n	8008fe4 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	2b0b      	cmp	r3, #11
 8008fa0:	d106      	bne.n	8008fb0 <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8008fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008fa6:	f043 0303 	orr.w	r3, r3, #3
 8008faa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008fae:	e076      	b.n	800909e <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008fb0:	69ba      	ldr	r2, [r7, #24]
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d005      	beq.n	8008fc4 <create_name+0x1fc>
 8008fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008fbc:	f043 0303 	orr.w	r3, r3, #3
 8008fc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8008fc4:	69ba      	ldr	r2, [r7, #24]
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d867      	bhi.n	800909c <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	61bb      	str	r3, [r7, #24]
 8008fd0:	2308      	movs	r3, #8
 8008fd2:	623b      	str	r3, [r7, #32]
 8008fd4:	230b      	movs	r3, #11
 8008fd6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008fd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008fe2:	e052      	b.n	800908a <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008fe4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008fe6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008fe8:	d914      	bls.n	8009014 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008fea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008fec:	2100      	movs	r1, #0
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f001 ff90 	bl	800af14 <ff_convert>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008ff8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d004      	beq.n	8009008 <create_name+0x240>
 8008ffe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009000:	3b80      	subs	r3, #128	@ 0x80
 8009002:	4a24      	ldr	r2, [pc, #144]	@ (8009094 <create_name+0x2cc>)
 8009004:	5cd3      	ldrb	r3, [r2, r3]
 8009006:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800900c:	f043 0302 	orr.w	r3, r3, #2
 8009010:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009014:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009016:	2b00      	cmp	r3, #0
 8009018:	d007      	beq.n	800902a <create_name+0x262>
 800901a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800901c:	4619      	mov	r1, r3
 800901e:	481e      	ldr	r0, [pc, #120]	@ (8009098 <create_name+0x2d0>)
 8009020:	f7fe f9c2 	bl	80073a8 <chk_chr>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d008      	beq.n	800903c <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800902a:	235f      	movs	r3, #95	@ 0x5f
 800902c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800902e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009032:	f043 0303 	orr.w	r3, r3, #3
 8009036:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800903a:	e01b      	b.n	8009074 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800903c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800903e:	2b40      	cmp	r3, #64	@ 0x40
 8009040:	d909      	bls.n	8009056 <create_name+0x28e>
 8009042:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009044:	2b5a      	cmp	r3, #90	@ 0x5a
 8009046:	d806      	bhi.n	8009056 <create_name+0x28e>
					b |= 2;
 8009048:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800904c:	f043 0302 	orr.w	r3, r3, #2
 8009050:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009054:	e00e      	b.n	8009074 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009056:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009058:	2b60      	cmp	r3, #96	@ 0x60
 800905a:	d90b      	bls.n	8009074 <create_name+0x2ac>
 800905c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800905e:	2b7a      	cmp	r3, #122	@ 0x7a
 8009060:	d808      	bhi.n	8009074 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8009062:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009066:	f043 0301 	orr.w	r3, r3, #1
 800906a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800906e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009070:	3b20      	subs	r3, #32
 8009072:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800907a:	699a      	ldr	r2, [r3, #24]
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	1c59      	adds	r1, r3, #1
 8009080:	6239      	str	r1, [r7, #32]
 8009082:	4413      	add	r3, r2
 8009084:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009086:	b2d2      	uxtb	r2, r2
 8009088:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800908a:	e762      	b.n	8008f52 <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 800908c:	bf00      	nop
 800908e:	e006      	b.n	800909e <create_name+0x2d6>
 8009090:	0800dd44 	.word	0x0800dd44
 8009094:	0800eb14 	.word	0x0800eb14
 8009098:	0800dd50 	.word	0x0800dd50
			if (si > di) break;			/* No extension */
 800909c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090a4:	699b      	ldr	r3, [r3, #24]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	2be5      	cmp	r3, #229	@ 0xe5
 80090aa:	d105      	bne.n	80090b8 <create_name+0x2f0>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	2205      	movs	r2, #5
 80090b6:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	2b08      	cmp	r3, #8
 80090bc:	d104      	bne.n	80090c8 <create_name+0x300>
 80090be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80090c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80090cc:	f003 030c 	and.w	r3, r3, #12
 80090d0:	2b0c      	cmp	r3, #12
 80090d2:	d005      	beq.n	80090e0 <create_name+0x318>
 80090d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80090d8:	f003 0303 	and.w	r3, r3, #3
 80090dc:	2b03      	cmp	r3, #3
 80090de:	d105      	bne.n	80090ec <create_name+0x324>
		cf |= NS_LFN;
 80090e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090e4:	f043 0302 	orr.w	r3, r3, #2
 80090e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80090ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090f0:	f003 0302 	and.w	r3, r3, #2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d117      	bne.n	8009128 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80090f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80090fc:	f003 0303 	and.w	r3, r3, #3
 8009100:	2b01      	cmp	r3, #1
 8009102:	d105      	bne.n	8009110 <create_name+0x348>
 8009104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009108:	f043 0310 	orr.w	r3, r3, #16
 800910c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009110:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009114:	f003 030c 	and.w	r3, r3, #12
 8009118:	2b04      	cmp	r3, #4
 800911a:	d105      	bne.n	8009128 <create_name+0x360>
 800911c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009120:	f043 0308 	orr.w	r3, r3, #8
 8009124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	330b      	adds	r3, #11
 8009132:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009136:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009138:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800913a:	4618      	mov	r0, r3
 800913c:	3728      	adds	r7, #40	@ 0x28
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop

08009144 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	2b2f      	cmp	r3, #47	@ 0x2f
 8009154:	d003      	beq.n	800915e <follow_path+0x1a>
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	2b5c      	cmp	r3, #92	@ 0x5c
 800915c:	d102      	bne.n	8009164 <follow_path+0x20>
		path++;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	3301      	adds	r3, #1
 8009162:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800916a:	461a      	mov	r2, r3
 800916c:	2300      	movs	r3, #0
 800916e:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	2b1f      	cmp	r3, #31
 8009176:	d80c      	bhi.n	8009192 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8009178:	2100      	movs	r1, #0
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7fe ffea 	bl	8008154 <dir_sdi>
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800918a:	461a      	mov	r2, r3
 800918c:	2300      	movs	r3, #0
 800918e:	6153      	str	r3, [r2, #20]
 8009190:	e049      	b.n	8009226 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009192:	463b      	mov	r3, r7
 8009194:	4619      	mov	r1, r3
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f7ff fe16 	bl	8008dc8 <create_name>
 800919c:	4603      	mov	r3, r0
 800919e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d13a      	bne.n	800921c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7ff fc1e 	bl	80089e8 <dir_find>
 80091ac:	4603      	mov	r3, r0
 80091ae:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	7adb      	ldrb	r3, [r3, #11]
 80091ba:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80091bc:	7bfb      	ldrb	r3, [r7, #15]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00a      	beq.n	80091d8 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
 80091c4:	2b04      	cmp	r3, #4
 80091c6:	d12b      	bne.n	8009220 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80091c8:	7bbb      	ldrb	r3, [r7, #14]
 80091ca:	f003 0304 	and.w	r3, r3, #4
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d126      	bne.n	8009220 <follow_path+0xdc>
 80091d2:	2305      	movs	r3, #5
 80091d4:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80091d6:	e023      	b.n	8009220 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80091d8:	7bbb      	ldrb	r3, [r7, #14]
 80091da:	f003 0304 	and.w	r3, r3, #4
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d120      	bne.n	8009224 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091e8:	695b      	ldr	r3, [r3, #20]
 80091ea:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	330b      	adds	r3, #11
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	f003 0310 	and.w	r3, r3, #16
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d102      	bne.n	8009200 <follow_path+0xbc>
				res = FR_NO_PATH; break;
 80091fa:	2305      	movs	r3, #5
 80091fc:	73fb      	strb	r3, [r7, #15]
 80091fe:	e012      	b.n	8009226 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68b9      	ldr	r1, [r7, #8]
 800920a:	4618      	mov	r0, r3
 800920c:	f7ff fa08 	bl	8008620 <ld_clust>
 8009210:	4602      	mov	r2, r0
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009218:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800921a:	e7ba      	b.n	8009192 <follow_path+0x4e>
			if (res != FR_OK) break;
 800921c:	bf00      	nop
 800921e:	e002      	b.n	8009226 <follow_path+0xe2>
				break;
 8009220:	bf00      	nop
 8009222:	e000      	b.n	8009226 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009224:	bf00      	nop
		}
	}

	return res;
 8009226:	7bfb      	ldrb	r3, [r7, #15]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009230:	b480      	push	{r7}
 8009232:	b087      	sub	sp, #28
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009238:	f04f 33ff 	mov.w	r3, #4294967295
 800923c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d031      	beq.n	80092aa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	617b      	str	r3, [r7, #20]
 800924c:	e002      	b.n	8009254 <get_ldnumber+0x24>
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	3301      	adds	r3, #1
 8009252:	617b      	str	r3, [r7, #20]
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	2b1f      	cmp	r3, #31
 800925a:	d903      	bls.n	8009264 <get_ldnumber+0x34>
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	2b3a      	cmp	r3, #58	@ 0x3a
 8009262:	d1f4      	bne.n	800924e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	2b3a      	cmp	r3, #58	@ 0x3a
 800926a:	d11c      	bne.n	80092a6 <get_ldnumber+0x76>
			tp = *path;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	1c5a      	adds	r2, r3, #1
 8009276:	60fa      	str	r2, [r7, #12]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	3b30      	subs	r3, #48	@ 0x30
 800927c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2b09      	cmp	r3, #9
 8009282:	d80e      	bhi.n	80092a2 <get_ldnumber+0x72>
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	429a      	cmp	r2, r3
 800928a:	d10a      	bne.n	80092a2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d107      	bne.n	80092a2 <get_ldnumber+0x72>
					vol = (int)i;
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	3301      	adds	r3, #1
 800929a:	617b      	str	r3, [r7, #20]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	e002      	b.n	80092ac <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80092a6:	2300      	movs	r3, #0
 80092a8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80092aa:	693b      	ldr	r3, [r7, #16]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	371c      	adds	r7, #28
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bc80      	pop	{r7}
 80092b4:	4770      	bx	lr
	...

080092b8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092c8:	2200      	movs	r2, #0
 80092ca:	711a      	strb	r2, [r3, #4]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092d2:	461a      	mov	r2, r3
 80092d4:	f04f 33ff 	mov.w	r3, #4294967295
 80092d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7fe fa8d 	bl	80077fc <move_window>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d001      	beq.n	80092ec <check_fs+0x34>
		return 3;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e04a      	b.n	8009382 <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80092f2:	3301      	adds	r3, #1
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	021b      	lsls	r3, r3, #8
 80092f8:	b21a      	sxth	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8009300:	b21b      	sxth	r3, r3
 8009302:	4313      	orrs	r3, r2
 8009304:	b21b      	sxth	r3, r3
 8009306:	4a21      	ldr	r2, [pc, #132]	@ (800938c <check_fs+0xd4>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d001      	beq.n	8009310 <check_fs+0x58>
		return 2;
 800930c:	2302      	movs	r3, #2
 800930e:	e038      	b.n	8009382 <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3336      	adds	r3, #54	@ 0x36
 8009314:	3303      	adds	r3, #3
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	061a      	lsls	r2, r3, #24
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	3336      	adds	r3, #54	@ 0x36
 800931e:	3302      	adds	r3, #2
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	041b      	lsls	r3, r3, #16
 8009324:	431a      	orrs	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	3336      	adds	r3, #54	@ 0x36
 800932a:	3301      	adds	r3, #1
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	021b      	lsls	r3, r3, #8
 8009330:	4313      	orrs	r3, r2
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8009338:	4313      	orrs	r3, r2
 800933a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800933e:	4a14      	ldr	r2, [pc, #80]	@ (8009390 <check_fs+0xd8>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d101      	bne.n	8009348 <check_fs+0x90>
		return 0;
 8009344:	2300      	movs	r3, #0
 8009346:	e01c      	b.n	8009382 <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	3352      	adds	r3, #82	@ 0x52
 800934c:	3303      	adds	r3, #3
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	061a      	lsls	r2, r3, #24
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	3352      	adds	r3, #82	@ 0x52
 8009356:	3302      	adds	r3, #2
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	041b      	lsls	r3, r3, #16
 800935c:	431a      	orrs	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	3352      	adds	r3, #82	@ 0x52
 8009362:	3301      	adds	r3, #1
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	021b      	lsls	r3, r3, #8
 8009368:	4313      	orrs	r3, r2
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8009370:	4313      	orrs	r3, r2
 8009372:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009376:	4a06      	ldr	r2, [pc, #24]	@ (8009390 <check_fs+0xd8>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d101      	bne.n	8009380 <check_fs+0xc8>
		return 0;
 800937c:	2300      	movs	r3, #0
 800937e:	e000      	b.n	8009382 <check_fs+0xca>

	return 1;
 8009380:	2301      	movs	r3, #1
}
 8009382:	4618      	mov	r0, r3
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	ffffaa55 	.word	0xffffaa55
 8009390:	00544146 	.word	0x00544146

08009394 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b096      	sub	sp, #88	@ 0x58
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	4613      	mov	r3, r2
 80093a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80093a8:	68b8      	ldr	r0, [r7, #8]
 80093aa:	f7ff ff41 	bl	8009230 <get_ldnumber>
 80093ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80093b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	da01      	bge.n	80093ba <find_volume+0x26>
 80093b6:	230b      	movs	r3, #11
 80093b8:	e311      	b.n	80099de <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80093ba:	4a98      	ldr	r2, [pc, #608]	@ (800961c <find_volume+0x288>)
 80093bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093c2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80093c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <find_volume+0x3a>
 80093ca:	230c      	movs	r3, #12
 80093cc:	e307      	b.n	80099de <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80093d2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80093d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d01c      	beq.n	800941a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80093e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093e6:	785b      	ldrb	r3, [r3, #1]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7fd fee1 	bl	80071b0 <disk_status>
 80093ee:	4603      	mov	r3, r0
 80093f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80093f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80093f8:	f003 0301 	and.w	r3, r3, #1
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10c      	bne.n	800941a <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8009400:	79fb      	ldrb	r3, [r7, #7]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d007      	beq.n	8009416 <find_volume+0x82>
 8009406:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800940a:	f003 0304 	and.w	r3, r3, #4
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009412:	230a      	movs	r3, #10
 8009414:	e2e3      	b.n	80099de <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8009416:	2300      	movs	r3, #0
 8009418:	e2e1      	b.n	80099de <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800941a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009420:	2200      	movs	r2, #0
 8009422:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009426:	b2da      	uxtb	r2, r3
 8009428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800942a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800942e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009436:	785b      	ldrb	r3, [r3, #1]
 8009438:	4618      	mov	r0, r3
 800943a:	f7fd fed3 	bl	80071e4 <disk_initialize>
 800943e:	4603      	mov	r3, r0
 8009440:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8009444:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009448:	f003 0301 	and.w	r3, r3, #1
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009450:	2303      	movs	r3, #3
 8009452:	e2c4      	b.n	80099de <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8009454:	79fb      	ldrb	r3, [r7, #7]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d007      	beq.n	800946a <find_volume+0xd6>
 800945a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800945e:	f003 0304 	and.w	r3, r3, #4
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8009466:	230a      	movs	r3, #10
 8009468:	e2b9      	b.n	80099de <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800946a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800946c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009470:	7858      	ldrb	r0, [r3, #1]
 8009472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009474:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009478:	330a      	adds	r3, #10
 800947a:	461a      	mov	r2, r3
 800947c:	2102      	movs	r1, #2
 800947e:	f7fd ff17 	bl	80072b0 <disk_ioctl>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10d      	bne.n	80094a4 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8009488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800948e:	895b      	ldrh	r3, [r3, #10]
 8009490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009494:	d306      	bcc.n	80094a4 <find_volume+0x110>
 8009496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009498:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800949c:	895b      	ldrh	r3, [r3, #10]
 800949e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094a2:	d901      	bls.n	80094a8 <find_volume+0x114>
 80094a4:	2301      	movs	r3, #1
 80094a6:	e29a      	b.n	80099de <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80094ac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80094ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80094b0:	f7ff ff02 	bl	80092b8 <check_fs>
 80094b4:	4603      	mov	r3, r0
 80094b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80094ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d153      	bne.n	800956a <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80094c2:	2300      	movs	r3, #0
 80094c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80094c6:	e028      	b.n	800951a <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80094c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094cc:	011b      	lsls	r3, r3, #4
 80094ce:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80094d2:	4413      	add	r3, r2
 80094d4:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80094d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d8:	3304      	adds	r3, #4
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d012      	beq.n	8009506 <find_volume+0x172>
 80094e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e2:	330b      	adds	r3, #11
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	061a      	lsls	r2, r3, #24
 80094e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ea:	330a      	adds	r3, #10
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	041b      	lsls	r3, r3, #16
 80094f0:	431a      	orrs	r2, r3
 80094f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f4:	3309      	adds	r3, #9
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	021b      	lsls	r3, r3, #8
 80094fa:	4313      	orrs	r3, r2
 80094fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094fe:	3208      	adds	r2, #8
 8009500:	7812      	ldrb	r2, [r2, #0]
 8009502:	431a      	orrs	r2, r3
 8009504:	e000      	b.n	8009508 <find_volume+0x174>
 8009506:	2200      	movs	r2, #0
 8009508:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	3358      	adds	r3, #88	@ 0x58
 800950e:	443b      	add	r3, r7
 8009510:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009516:	3301      	adds	r3, #1
 8009518:	643b      	str	r3, [r7, #64]	@ 0x40
 800951a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800951c:	2b03      	cmp	r3, #3
 800951e:	d9d3      	bls.n	80094c8 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8009520:	2300      	movs	r3, #0
 8009522:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009526:	2b00      	cmp	r3, #0
 8009528:	d002      	beq.n	8009530 <find_volume+0x19c>
 800952a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800952c:	3b01      	subs	r3, #1
 800952e:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8009530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	3358      	adds	r3, #88	@ 0x58
 8009536:	443b      	add	r3, r7
 8009538:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800953c:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800953e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009540:	2b00      	cmp	r3, #0
 8009542:	d005      	beq.n	8009550 <find_volume+0x1bc>
 8009544:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009546:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009548:	f7ff feb6 	bl	80092b8 <check_fs>
 800954c:	4603      	mov	r3, r0
 800954e:	e000      	b.n	8009552 <find_volume+0x1be>
 8009550:	2302      	movs	r3, #2
 8009552:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8009556:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800955a:	2b00      	cmp	r3, #0
 800955c:	d005      	beq.n	800956a <find_volume+0x1d6>
 800955e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009560:	3301      	adds	r3, #1
 8009562:	643b      	str	r3, [r7, #64]	@ 0x40
 8009564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009566:	2b03      	cmp	r3, #3
 8009568:	d9e2      	bls.n	8009530 <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800956a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800956e:	2b03      	cmp	r3, #3
 8009570:	d101      	bne.n	8009576 <find_volume+0x1e2>
 8009572:	2301      	movs	r3, #1
 8009574:	e233      	b.n	80099de <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8009576:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800957a:	2b00      	cmp	r3, #0
 800957c:	d001      	beq.n	8009582 <find_volume+0x1ee>
 800957e:	230d      	movs	r3, #13
 8009580:	e22d      	b.n	80099de <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009584:	7b1b      	ldrb	r3, [r3, #12]
 8009586:	021b      	lsls	r3, r3, #8
 8009588:	b21a      	sxth	r2, r3
 800958a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958c:	7adb      	ldrb	r3, [r3, #11]
 800958e:	b21b      	sxth	r3, r3
 8009590:	4313      	orrs	r3, r2
 8009592:	b21a      	sxth	r2, r3
 8009594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800959a:	895b      	ldrh	r3, [r3, #10]
 800959c:	b21b      	sxth	r3, r3
 800959e:	429a      	cmp	r2, r3
 80095a0:	d001      	beq.n	80095a6 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 80095a2:	230d      	movs	r3, #13
 80095a4:	e21b      	b.n	80099de <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80095a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a8:	7ddb      	ldrb	r3, [r3, #23]
 80095aa:	021b      	lsls	r3, r3, #8
 80095ac:	b21a      	sxth	r2, r3
 80095ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b0:	7d9b      	ldrb	r3, [r3, #22]
 80095b2:	b21b      	sxth	r3, r3
 80095b4:	4313      	orrs	r3, r2
 80095b6:	b21b      	sxth	r3, r3
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80095bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d112      	bne.n	80095e8 <find_volume+0x254>
 80095c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c4:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80095c8:	061a      	lsls	r2, r3, #24
 80095ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095cc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80095d0:	041b      	lsls	r3, r3, #16
 80095d2:	431a      	orrs	r2, r3
 80095d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80095da:	021b      	lsls	r3, r3, #8
 80095dc:	4313      	orrs	r3, r2
 80095de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095e0:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 80095e4:	4313      	orrs	r3, r2
 80095e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 80095e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095ee:	461a      	mov	r2, r3
 80095f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095f2:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80095f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f6:	7c1a      	ldrb	r2, [r3, #16]
 80095f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095fe:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8009600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009602:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009606:	78db      	ldrb	r3, [r3, #3]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d009      	beq.n	8009620 <find_volume+0x28c>
 800960c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800960e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009612:	78db      	ldrb	r3, [r3, #3]
 8009614:	2b02      	cmp	r3, #2
 8009616:	d003      	beq.n	8009620 <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8009618:	230d      	movs	r3, #13
 800961a:	e1e0      	b.n	80099de <find_volume+0x64a>
 800961c:	20002990 	.word	0x20002990
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8009620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009626:	78db      	ldrb	r3, [r3, #3]
 8009628:	461a      	mov	r2, r3
 800962a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800962c:	fb02 f303 	mul.w	r3, r2, r3
 8009630:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8009632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009634:	7b5a      	ldrb	r2, [r3, #13]
 8009636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800963c:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800963e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009640:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009644:	789b      	ldrb	r3, [r3, #2]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00c      	beq.n	8009664 <find_volume+0x2d0>
 800964a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009650:	789b      	ldrb	r3, [r3, #2]
 8009652:	461a      	mov	r2, r3
 8009654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800965a:	789b      	ldrb	r3, [r3, #2]
 800965c:	3b01      	subs	r3, #1
 800965e:	4013      	ands	r3, r2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8009664:	230d      	movs	r3, #13
 8009666:	e1ba      	b.n	80099de <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8009668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800966a:	7c9b      	ldrb	r3, [r3, #18]
 800966c:	021b      	lsls	r3, r3, #8
 800966e:	b21a      	sxth	r2, r3
 8009670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009672:	7c5b      	ldrb	r3, [r3, #17]
 8009674:	b21b      	sxth	r3, r3
 8009676:	4313      	orrs	r3, r2
 8009678:	b21b      	sxth	r3, r3
 800967a:	b29a      	uxth	r2, r3
 800967c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009682:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8009684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009686:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800968a:	891b      	ldrh	r3, [r3, #8]
 800968c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800968e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009692:	8952      	ldrh	r2, [r2, #10]
 8009694:	0952      	lsrs	r2, r2, #5
 8009696:	b292      	uxth	r2, r2
 8009698:	fbb3 f1f2 	udiv	r1, r3, r2
 800969c:	fb01 f202 	mul.w	r2, r1, r2
 80096a0:	1a9b      	subs	r3, r3, r2
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 80096a8:	230d      	movs	r3, #13
 80096aa:	e198      	b.n	80099de <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80096ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ae:	7d1b      	ldrb	r3, [r3, #20]
 80096b0:	021b      	lsls	r3, r3, #8
 80096b2:	b21a      	sxth	r2, r3
 80096b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b6:	7cdb      	ldrb	r3, [r3, #19]
 80096b8:	b21b      	sxth	r3, r3
 80096ba:	4313      	orrs	r3, r2
 80096bc:	b21b      	sxth	r3, r3
 80096be:	b29b      	uxth	r3, r3
 80096c0:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80096c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d112      	bne.n	80096ee <find_volume+0x35a>
 80096c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ca:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80096ce:	061a      	lsls	r2, r3, #24
 80096d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80096d6:	041b      	lsls	r3, r3, #16
 80096d8:	431a      	orrs	r2, r3
 80096da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80096e0:	021b      	lsls	r3, r3, #8
 80096e2:	4313      	orrs	r3, r2
 80096e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80096ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f0:	7bdb      	ldrb	r3, [r3, #15]
 80096f2:	021b      	lsls	r3, r3, #8
 80096f4:	b21a      	sxth	r2, r3
 80096f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f8:	7b9b      	ldrb	r3, [r3, #14]
 80096fa:	b21b      	sxth	r3, r3
 80096fc:	4313      	orrs	r3, r2
 80096fe:	b21b      	sxth	r3, r3
 8009700:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8009702:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <find_volume+0x378>
 8009708:	230d      	movs	r3, #13
 800970a:	e168      	b.n	80099de <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800970c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800970e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009710:	4413      	add	r3, r2
 8009712:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009714:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009718:	8911      	ldrh	r1, [r2, #8]
 800971a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800971c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009720:	8952      	ldrh	r2, [r2, #10]
 8009722:	0952      	lsrs	r2, r2, #5
 8009724:	b292      	uxth	r2, r2
 8009726:	fbb1 f2f2 	udiv	r2, r1, r2
 800972a:	b292      	uxth	r2, r2
 800972c:	4413      	add	r3, r2
 800972e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009730:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009734:	429a      	cmp	r2, r3
 8009736:	d201      	bcs.n	800973c <find_volume+0x3a8>
 8009738:	230d      	movs	r3, #13
 800973a:	e150      	b.n	80099de <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800973c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800973e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009744:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009748:	7892      	ldrb	r2, [r2, #2]
 800974a:	fbb3 f3f2 	udiv	r3, r3, r2
 800974e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8009750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009752:	2b00      	cmp	r3, #0
 8009754:	d101      	bne.n	800975a <find_volume+0x3c6>
 8009756:	230d      	movs	r3, #13
 8009758:	e141      	b.n	80099de <find_volume+0x64a>
	fmt = FS_FAT12;
 800975a:	2301      	movs	r3, #1
 800975c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8009760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009762:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009766:	4293      	cmp	r3, r2
 8009768:	d902      	bls.n	8009770 <find_volume+0x3dc>
 800976a:	2302      	movs	r3, #2
 800976c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8009770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009772:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009776:	4293      	cmp	r3, r2
 8009778:	d902      	bls.n	8009780 <find_volume+0x3ec>
 800977a:	2303      	movs	r3, #3
 800977c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8009780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009782:	3302      	adds	r3, #2
 8009784:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009786:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800978a:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800978c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009792:	461a      	mov	r2, r3
 8009794:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009796:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8009798:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800979a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800979c:	4413      	add	r3, r2
 800979e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80097a4:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 80097a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80097a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097aa:	4413      	add	r3, r2
 80097ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80097b2:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 80097b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d124      	bne.n	8009806 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80097bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097c2:	891b      	ldrh	r3, [r3, #8]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <find_volume+0x438>
 80097c8:	230d      	movs	r3, #13
 80097ca:	e108      	b.n	80099de <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80097cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ce:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80097d2:	061a      	lsls	r2, r3, #24
 80097d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80097da:	041b      	lsls	r3, r3, #16
 80097dc:	431a      	orrs	r2, r3
 80097de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80097e4:	021b      	lsls	r3, r3, #8
 80097e6:	4313      	orrs	r3, r2
 80097e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097ea:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80097ee:	4313      	orrs	r3, r2
 80097f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80097f6:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80097f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	647b      	str	r3, [r7, #68]	@ 0x44
 8009804:	e02b      	b.n	800985e <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009808:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800980c:	891b      	ldrh	r3, [r3, #8]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d101      	bne.n	8009816 <find_volume+0x482>
 8009812:	230d      	movs	r3, #13
 8009814:	e0e3      	b.n	80099de <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8009816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009818:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800981c:	6a1a      	ldr	r2, [r3, #32]
 800981e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009820:	4413      	add	r3, r2
 8009822:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009824:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009828:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800982a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800982e:	2b02      	cmp	r3, #2
 8009830:	d105      	bne.n	800983e <find_volume+0x4aa>
 8009832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009834:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	005b      	lsls	r3, r3, #1
 800983c:	e00e      	b.n	800985c <find_volume+0x4c8>
 800983e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009840:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009844:	695a      	ldr	r2, [r3, #20]
 8009846:	4613      	mov	r3, r2
 8009848:	005b      	lsls	r3, r3, #1
 800984a:	4413      	add	r3, r2
 800984c:	085a      	lsrs	r2, r3, #1
 800984e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009850:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	f003 0301 	and.w	r3, r3, #1
 800985a:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800985c:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800985e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009860:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009864:	699a      	ldr	r2, [r3, #24]
 8009866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009868:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800986c:	895b      	ldrh	r3, [r3, #10]
 800986e:	4619      	mov	r1, r3
 8009870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009872:	440b      	add	r3, r1
 8009874:	3b01      	subs	r3, #1
 8009876:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009878:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 800987c:	8949      	ldrh	r1, [r1, #10]
 800987e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009882:	429a      	cmp	r2, r3
 8009884:	d201      	bcs.n	800988a <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8009886:	230d      	movs	r3, #13
 8009888:	e0a9      	b.n	80099de <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800988a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009890:	461a      	mov	r2, r3
 8009892:	f04f 33ff 	mov.w	r3, #4294967295
 8009896:	6113      	str	r3, [r2, #16]
 8009898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80098a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80098a6:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80098a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098ae:	2280      	movs	r2, #128	@ 0x80
 80098b0:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80098b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80098b6:	2b03      	cmp	r3, #3
 80098b8:	d17a      	bne.n	80099b0 <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80098ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80098c0:	021b      	lsls	r3, r3, #8
 80098c2:	b21a      	sxth	r2, r3
 80098c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80098ca:	b21b      	sxth	r3, r3
 80098cc:	4313      	orrs	r3, r2
 80098ce:	b21b      	sxth	r3, r3
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d16d      	bne.n	80099b0 <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 80098d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098d6:	3301      	adds	r3, #1
 80098d8:	4619      	mov	r1, r3
 80098da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80098dc:	f7fd ff8e 	bl	80077fc <move_window>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d164      	bne.n	80099b0 <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 80098e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098ec:	2200      	movs	r2, #0
 80098ee:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80098f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f2:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 80098f6:	021b      	lsls	r3, r3, #8
 80098f8:	b21a      	sxth	r2, r3
 80098fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fc:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8009900:	b21b      	sxth	r3, r3
 8009902:	4313      	orrs	r3, r2
 8009904:	b21b      	sxth	r3, r3
 8009906:	4a38      	ldr	r2, [pc, #224]	@ (80099e8 <find_volume+0x654>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d151      	bne.n	80099b0 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800990c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990e:	78db      	ldrb	r3, [r3, #3]
 8009910:	061a      	lsls	r2, r3, #24
 8009912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009914:	789b      	ldrb	r3, [r3, #2]
 8009916:	041b      	lsls	r3, r3, #16
 8009918:	431a      	orrs	r2, r3
 800991a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991c:	785b      	ldrb	r3, [r3, #1]
 800991e:	021b      	lsls	r3, r3, #8
 8009920:	4313      	orrs	r3, r2
 8009922:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009924:	7812      	ldrb	r2, [r2, #0]
 8009926:	4313      	orrs	r3, r2
 8009928:	4a30      	ldr	r2, [pc, #192]	@ (80099ec <find_volume+0x658>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d140      	bne.n	80099b0 <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800992e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009930:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8009934:	061a      	lsls	r2, r3, #24
 8009936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009938:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 800993c:	041b      	lsls	r3, r3, #16
 800993e:	431a      	orrs	r2, r3
 8009940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009942:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8009946:	021b      	lsls	r3, r3, #8
 8009948:	4313      	orrs	r3, r2
 800994a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800994c:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8009950:	4313      	orrs	r3, r2
 8009952:	4a27      	ldr	r2, [pc, #156]	@ (80099f0 <find_volume+0x65c>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d12b      	bne.n	80099b0 <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8009958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800995a:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 800995e:	061a      	lsls	r2, r3, #24
 8009960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009962:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8009966:	041b      	lsls	r3, r3, #16
 8009968:	431a      	orrs	r2, r3
 800996a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800996c:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8009970:	021b      	lsls	r3, r3, #8
 8009972:	4313      	orrs	r3, r2
 8009974:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009976:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 800997a:	4313      	orrs	r3, r2
 800997c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800997e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009982:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8009984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009986:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 800998a:	061a      	lsls	r2, r3, #24
 800998c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800998e:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8009992:	041b      	lsls	r3, r3, #16
 8009994:	431a      	orrs	r2, r3
 8009996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009998:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800999c:	021b      	lsls	r3, r3, #8
 800999e:	4313      	orrs	r3, r2
 80099a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099a2:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 80099a6:	4313      	orrs	r3, r2
 80099a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80099ae:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80099b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099b6:	461a      	mov	r2, r3
 80099b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80099bc:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80099be:	4b0d      	ldr	r3, [pc, #52]	@ (80099f4 <find_volume+0x660>)
 80099c0:	881b      	ldrh	r3, [r3, #0]
 80099c2:	3301      	adds	r3, #1
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	4b0b      	ldr	r3, [pc, #44]	@ (80099f4 <find_volume+0x660>)
 80099c8:	801a      	strh	r2, [r3, #0]
 80099ca:	4b0a      	ldr	r3, [pc, #40]	@ (80099f4 <find_volume+0x660>)
 80099cc:	881a      	ldrh	r2, [r3, #0]
 80099ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099d4:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80099d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80099d8:	f7fd fe94 	bl	8007704 <clear_lock>
#endif

	return FR_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3758      	adds	r7, #88	@ 0x58
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	ffffaa55 	.word	0xffffaa55
 80099ec:	41615252 	.word	0x41615252
 80099f0:	61417272 	.word	0x61417272
 80099f4:	20002994 	.word	0x20002994

080099f8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d02a      	beq.n	8009a60 <validate+0x68>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d024      	beq.n	8009a60 <validate+0x68>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d01b      	beq.n	8009a60 <validate+0x68>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a34:	88da      	ldrh	r2, [r3, #6]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a3c:	889b      	ldrh	r3, [r3, #4]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d10e      	bne.n	8009a60 <validate+0x68>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a4e:	785b      	ldrb	r3, [r3, #1]
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7fd fbad 	bl	80071b0 <disk_status>
 8009a56:	4603      	mov	r3, r0
 8009a58:	f003 0301 	and.w	r3, r3, #1
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d001      	beq.n	8009a64 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8009a60:	2309      	movs	r3, #9
 8009a62:	e000      	b.n	8009a66 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b088      	sub	sp, #32
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8009a82:	f107 0310 	add.w	r3, r7, #16
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7ff fbd2 	bl	8009230 <get_ldnumber>
 8009a8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	da01      	bge.n	8009a98 <f_mount+0x28>
 8009a94:	230b      	movs	r3, #11
 8009a96:	e02f      	b.n	8009af8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009a98:	4a19      	ldr	r2, [pc, #100]	@ (8009b00 <f_mount+0x90>)
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aa0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d007      	beq.n	8009ab8 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8009aa8:	69b8      	ldr	r0, [r7, #24]
 8009aaa:	f7fd fe2b 	bl	8007704 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d004      	beq.n	8009ac8 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	490d      	ldr	r1, [pc, #52]	@ (8009b00 <f_mount+0x90>)
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d002      	beq.n	8009ade <f_mount+0x6e>
 8009ad8:	79fb      	ldrb	r3, [r7, #7]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d001      	beq.n	8009ae2 <f_mount+0x72>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e00a      	b.n	8009af8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8009ae2:	f107 0108 	add.w	r1, r7, #8
 8009ae6:	f107 030c 	add.w	r3, r7, #12
 8009aea:	2200      	movs	r2, #0
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7ff fc51 	bl	8009394 <find_volume>
 8009af2:	4603      	mov	r3, r0
 8009af4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3720      	adds	r7, #32
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	20002990 	.word	0x20002990

08009b04 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009b12:	f843 0c4c 	str.w	r0, [r3, #-76]
 8009b16:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009b1a:	f843 1c50 	str.w	r1, [r3, #-80]
 8009b1e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009b22:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8009b26:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009b2a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d101      	bne.n	8009b36 <f_open+0x32>
 8009b32:	2309      	movs	r3, #9
 8009b34:	e2f3      	b.n	800a11e <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 8009b36:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009b3a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009b3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b42:	461a      	mov	r2, r3
 8009b44:	2300      	movs	r3, #0
 8009b46:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8009b48:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009b52:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009b56:	f003 031f 	and.w	r3, r3, #31
 8009b5a:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8009b5e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009b62:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009b66:	f023 0301 	bic.w	r3, r3, #1
 8009b6a:	b2da      	uxtb	r2, r3
 8009b6c:	f107 0118 	add.w	r1, r7, #24
 8009b70:	3910      	subs	r1, #16
 8009b72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009b76:	3b18      	subs	r3, #24
 8009b78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7ff fc09 	bl	8009394 <find_volume>
 8009b82:	4603      	mov	r3, r0
 8009b84:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009b88:	f102 0217 	add.w	r2, r2, #23
 8009b8c:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8009b8e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009b92:	f103 0317 	add.w	r3, r3, #23
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f040 82bb 	bne.w	800a114 <f_open+0x610>
		INIT_BUF(dj);
 8009b9e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	f107 0318 	add.w	r3, r7, #24
 8009ba8:	3b04      	subs	r3, #4
 8009baa:	f8c2 3fe0 	str.w	r3, [r2, #4064]	@ 0xfe0
 8009bae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	4bd3      	ldr	r3, [pc, #844]	@ (8009f04 <f_open+0x400>)
 8009bb6:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 8009bba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009bbe:	f853 2c50 	ldr.w	r2, [r3, #-80]
 8009bc2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009bc6:	3b18      	subs	r3, #24
 8009bc8:	4611      	mov	r1, r2
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7ff faba 	bl	8009144 <follow_path>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009bd6:	f102 0217 	add.w	r2, r2, #23
 8009bda:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8009bdc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009be0:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 8009be4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009be8:	f102 0210 	add.w	r2, r2, #16
 8009bec:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009bee:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009bf2:	f103 0317 	add.w	r3, r3, #23
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d124      	bne.n	8009c46 <f_open+0x142>
			if (!dir)	/* Default directory itself */
 8009bfc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009c00:	f103 0310 	add.w	r3, r3, #16
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d106      	bne.n	8009c18 <f_open+0x114>
				res = FR_INVALID_NAME;
 8009c0a:	2306      	movs	r3, #6
 8009c0c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009c10:	f102 0217 	add.w	r2, r2, #23
 8009c14:	7013      	strb	r3, [r2, #0]
 8009c16:	e016      	b.n	8009c46 <f_open+0x142>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009c18:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009c1c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	bf8c      	ite	hi
 8009c24:	2301      	movhi	r3, #1
 8009c26:	2300      	movls	r3, #0
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009c30:	3b18      	subs	r3, #24
 8009c32:	4611      	mov	r1, r2
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fd fbd1 	bl	80073dc <chk_lock>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009c40:	f102 0217 	add.w	r2, r2, #23
 8009c44:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009c46:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009c4a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009c4e:	f003 031c 	and.w	r3, r3, #28
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 813c 	beq.w	8009ed0 <f_open+0x3cc>
			if (res != FR_OK) {					/* No file, create new */
 8009c58:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009c5c:	f103 0317 	add.w	r3, r3, #23
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d02e      	beq.n	8009cc4 <f_open+0x1c0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8009c66:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009c6a:	f103 0317 	add.w	r3, r3, #23
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	2b04      	cmp	r3, #4
 8009c72:	d112      	bne.n	8009c9a <f_open+0x196>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009c74:	f7fd fc22 	bl	80074bc <enq_lock>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d007      	beq.n	8009c8e <f_open+0x18a>
 8009c7e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009c82:	3b18      	subs	r3, #24
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7fe ff7b 	bl	8008b80 <dir_register>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	e000      	b.n	8009c90 <f_open+0x18c>
 8009c8e:	2312      	movs	r3, #18
 8009c90:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009c94:	f102 0217 	add.w	r2, r2, #23
 8009c98:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009c9a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009ca4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009ca8:	f043 0308 	orr.w	r3, r3, #8
 8009cac:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8009cb0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009cb4:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 8009cb8:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009cbc:	f102 0210 	add.w	r2, r2, #16
 8009cc0:	6013      	str	r3, [r2, #0]
 8009cc2:	e01f      	b.n	8009d04 <f_open+0x200>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009cc4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009cc8:	f103 0310 	add.w	r3, r3, #16
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	330b      	adds	r3, #11
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	f003 0311 	and.w	r3, r3, #17
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d006      	beq.n	8009ce8 <f_open+0x1e4>
					res = FR_DENIED;
 8009cda:	2307      	movs	r3, #7
 8009cdc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009ce0:	f102 0217 	add.w	r2, r2, #23
 8009ce4:	7013      	strb	r3, [r2, #0]
 8009ce6:	e00d      	b.n	8009d04 <f_open+0x200>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8009ce8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009cec:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009cf0:	f003 0304 	and.w	r3, r3, #4
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d005      	beq.n	8009d04 <f_open+0x200>
						res = FR_EXIST;
 8009cf8:	2308      	movs	r3, #8
 8009cfa:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009cfe:	f102 0217 	add.w	r2, r2, #23
 8009d02:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009d04:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009d08:	f103 0317 	add.w	r3, r3, #23
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f040 8113 	bne.w	8009f3a <f_open+0x436>
 8009d14:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009d18:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009d1c:	f003 0308 	and.w	r3, r3, #8
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 810a 	beq.w	8009f3a <f_open+0x436>
				dw = GET_FATTIME();				/* Created time */
 8009d26:	f7fd f9e1 	bl	80070ec <get_fattime>
 8009d2a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009d2e:	f103 030c 	add.w	r3, r3, #12
 8009d32:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8009d34:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009d38:	f103 0310 	add.w	r3, r3, #16
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	330e      	adds	r3, #14
 8009d40:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009d44:	f102 020c 	add.w	r2, r2, #12
 8009d48:	6812      	ldr	r2, [r2, #0]
 8009d4a:	b2d2      	uxtb	r2, r2
 8009d4c:	701a      	strb	r2, [r3, #0]
 8009d4e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009d52:	f103 030c 	add.w	r3, r3, #12
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	0a1b      	lsrs	r3, r3, #8
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009d62:	f103 0310 	add.w	r3, r3, #16
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	330f      	adds	r3, #15
 8009d6a:	b2d2      	uxtb	r2, r2
 8009d6c:	701a      	strb	r2, [r3, #0]
 8009d6e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009d72:	f103 030c 	add.w	r3, r3, #12
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	0c1a      	lsrs	r2, r3, #16
 8009d7a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009d7e:	f103 0310 	add.w	r3, r3, #16
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	3310      	adds	r3, #16
 8009d86:	b2d2      	uxtb	r2, r2
 8009d88:	701a      	strb	r2, [r3, #0]
 8009d8a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009d8e:	f103 030c 	add.w	r3, r3, #12
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	0e1a      	lsrs	r2, r3, #24
 8009d96:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009d9a:	f103 0310 	add.w	r3, r3, #16
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	3311      	adds	r3, #17
 8009da2:	b2d2      	uxtb	r2, r2
 8009da4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8009da6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009daa:	f103 0310 	add.w	r3, r3, #16
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	330b      	adds	r3, #11
 8009db2:	2200      	movs	r2, #0
 8009db4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8009db6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009dba:	f103 0310 	add.w	r3, r3, #16
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	331c      	adds	r3, #28
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	701a      	strb	r2, [r3, #0]
 8009dc6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009dca:	f103 0310 	add.w	r3, r3, #16
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	331d      	adds	r3, #29
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	701a      	strb	r2, [r3, #0]
 8009dd6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009dda:	f103 0310 	add.w	r3, r3, #16
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	331e      	adds	r3, #30
 8009de2:	2200      	movs	r2, #0
 8009de4:	701a      	strb	r2, [r3, #0]
 8009de6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009dea:	f103 0310 	add.w	r3, r3, #16
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	331f      	adds	r3, #31
 8009df2:	2200      	movs	r2, #0
 8009df4:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8009df6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009dfa:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8009dfe:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009e02:	f102 0210 	add.w	r2, r2, #16
 8009e06:	6811      	ldr	r1, [r2, #0]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fe fc09 	bl	8008620 <ld_clust>
 8009e0e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009e12:	f103 0308 	add.w	r3, r3, #8
 8009e16:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8009e18:	2100      	movs	r1, #0
 8009e1a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009e1e:	f103 0310 	add.w	r3, r3, #16
 8009e22:	6818      	ldr	r0, [r3, #0]
 8009e24:	f7fe fc2a 	bl	800867c <st_clust>
				dj.fs->wflag = 1;
 8009e28:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009e2c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8009e30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e34:	2201      	movs	r2, #1
 8009e36:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8009e38:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009e3c:	f103 0308 	add.w	r3, r3, #8
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d079      	beq.n	8009f3a <f_open+0x436>
					dw = dj.fs->winsect;
 8009e46:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009e4a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8009e4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e54:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009e58:	f102 020c 	add.w	r2, r2, #12
 8009e5c:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8009e5e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009e62:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8009e66:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009e6a:	f102 0208 	add.w	r2, r2, #8
 8009e6e:	6811      	ldr	r1, [r2, #0]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7fe f826 	bl	8007ec2 <remove_chain>
 8009e76:	4603      	mov	r3, r0
 8009e78:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009e7c:	f102 0217 	add.w	r2, r2, #23
 8009e80:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8009e82:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009e86:	f103 0317 	add.w	r3, r3, #23
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d154      	bne.n	8009f3a <f_open+0x436>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8009e90:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009e94:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 8009e98:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009e9c:	f103 0308 	add.w	r3, r3, #8
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	3b01      	subs	r3, #1
 8009ea4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009ea8:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8009eaa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009eae:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8009eb2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009eb6:	f102 020c 	add.w	r2, r2, #12
 8009eba:	6811      	ldr	r1, [r2, #0]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7fd fc9d 	bl	80077fc <move_window>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009ec8:	f102 0217 	add.w	r2, r2, #23
 8009ecc:	7013      	strb	r3, [r2, #0]
 8009ece:	e034      	b.n	8009f3a <f_open+0x436>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8009ed0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009ed4:	f103 0317 	add.w	r3, r3, #23
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d12d      	bne.n	8009f3a <f_open+0x436>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8009ede:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009ee2:	f103 0310 	add.w	r3, r3, #16
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	330b      	adds	r3, #11
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	f003 0310 	and.w	r3, r3, #16
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d009      	beq.n	8009f08 <f_open+0x404>
					res = FR_NO_FILE;
 8009ef4:	2304      	movs	r3, #4
 8009ef6:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009efa:	f102 0217 	add.w	r2, r2, #23
 8009efe:	7013      	strb	r3, [r2, #0]
 8009f00:	e01b      	b.n	8009f3a <f_open+0x436>
 8009f02:	bf00      	nop
 8009f04:	200029b0 	.word	0x200029b0
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8009f08:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009f0c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009f10:	f003 0302 	and.w	r3, r3, #2
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d010      	beq.n	8009f3a <f_open+0x436>
 8009f18:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009f1c:	f103 0310 	add.w	r3, r3, #16
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	330b      	adds	r3, #11
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	f003 0301 	and.w	r3, r3, #1
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d005      	beq.n	8009f3a <f_open+0x436>
						res = FR_DENIED;
 8009f2e:	2307      	movs	r3, #7
 8009f30:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009f34:	f102 0217 	add.w	r2, r2, #23
 8009f38:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8009f3a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009f3e:	f103 0317 	add.w	r3, r3, #23
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d155      	bne.n	8009ff4 <f_open+0x4f0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009f48:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009f4c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009f50:	f003 0308 	and.w	r3, r3, #8
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00a      	beq.n	8009f6e <f_open+0x46a>
				mode |= FA__WRITTEN;
 8009f58:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009f62:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009f66:	f043 0320 	orr.w	r3, r3, #32
 8009f6a:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8009f6e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009f72:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8009f76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f7c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8009f80:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8009f84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009f88:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8009f8a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009f8e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009f92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f96:	461a      	mov	r2, r3
 8009f98:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009f9c:	f103 0310 	add.w	r3, r3, #16
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009fa4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009fa8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	bf8c      	ite	hi
 8009fb0:	2301      	movhi	r3, #1
 8009fb2:	2300      	movls	r3, #0
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009fbc:	3b18      	subs	r3, #24
 8009fbe:	4611      	mov	r1, r2
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7fd fa9f 	bl	8007504 <inc_lock>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009fcc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fd4:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8009fd6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009fda:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009fde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d105      	bne.n	8009ff4 <f_open+0x4f0>
 8009fe8:	2302      	movs	r3, #2
 8009fea:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009fee:	f102 0217 	add.w	r2, r2, #23
 8009ff2:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8009ff4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009ff8:	f103 0317 	add.w	r3, r3, #23
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f040 8088 	bne.w	800a114 <f_open+0x610>
			fp->flag = mode;					/* File access mode */
 800a004:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a008:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a00c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a010:	461a      	mov	r2, r3
 800a012:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a016:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800a01a:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800a01c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a020:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a028:	2200      	movs	r2, #0
 800a02a:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800a02c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a030:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800a034:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a038:	f102 0210 	add.w	r2, r2, #16
 800a03c:	6811      	ldr	r1, [r2, #0]
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe faee 	bl	8008620 <ld_clust>
 800a044:	4602      	mov	r2, r0
 800a046:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a04a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a04e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a052:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800a054:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a058:	f103 0310 	add.w	r3, r3, #16
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	331f      	adds	r3, #31
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	061a      	lsls	r2, r3, #24
 800a064:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a068:	f103 0310 	add.w	r3, r3, #16
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	331e      	adds	r3, #30
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	041b      	lsls	r3, r3, #16
 800a074:	431a      	orrs	r2, r3
 800a076:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a07a:	f103 0310 	add.w	r3, r3, #16
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	331d      	adds	r3, #29
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	021b      	lsls	r3, r3, #8
 800a086:	4313      	orrs	r3, r2
 800a088:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800a08c:	f102 0210 	add.w	r2, r2, #16
 800a090:	6812      	ldr	r2, [r2, #0]
 800a092:	321c      	adds	r2, #28
 800a094:	7812      	ldrb	r2, [r2, #0]
 800a096:	4313      	orrs	r3, r2
 800a098:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800a09c:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800a0a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a0a4:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800a0a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a0aa:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a0ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800a0b8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a0bc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a0c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800a0ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a0ce:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a0d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	2300      	movs	r3, #0
 800a0da:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800a0dc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a0e0:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800a0e4:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800a0e8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800a0ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a0f0:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800a0f2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a0f6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a0fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a104:	88da      	ldrh	r2, [r3, #6]
 800a106:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800a10a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800a10e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a112:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800a114:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800a118:	f103 0317 	add.w	r3, r3, #23
 800a11c:	781b      	ldrb	r3, [r3, #0]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 800a124:	3718      	adds	r7, #24
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop

0800a12c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b08a      	sub	sp, #40	@ 0x28
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	607a      	str	r2, [r7, #4]
 800a138:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	2200      	movs	r2, #0
 800a142:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f7ff fc57 	bl	80099f8 <validate>
 800a14a:	4603      	mov	r3, r0
 800a14c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800a14e:	7dfb      	ldrb	r3, [r7, #23]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d001      	beq.n	800a158 <f_write+0x2c>
 800a154:	7dfb      	ldrb	r3, [r7, #23]
 800a156:	e21e      	b.n	800a596 <f_write+0x46a>
	if (fp->err)							/* Check error */
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a15e:	79db      	ldrb	r3, [r3, #7]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d004      	beq.n	800a16e <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a16a:	79db      	ldrb	r3, [r3, #7]
 800a16c:	e213      	b.n	800a596 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a174:	799b      	ldrb	r3, [r3, #6]
 800a176:	f003 0302 	and.w	r3, r3, #2
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d101      	bne.n	800a182 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800a17e:	2307      	movs	r3, #7
 800a180:	e209      	b.n	800a596 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a188:	689a      	ldr	r2, [r3, #8]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	441a      	add	r2, r3
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	429a      	cmp	r2, r3
 800a198:	f080 81d9 	bcs.w	800a54e <f_write+0x422>
 800a19c:	2300      	movs	r3, #0
 800a19e:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800a1a0:	e1d5      	b.n	800a54e <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a1b0:	6812      	ldr	r2, [r2, #0]
 800a1b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a1b6:	8952      	ldrh	r2, [r2, #10]
 800a1b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1bc:	fb01 f202 	mul.w	r2, r1, r2
 800a1c0:	1a9b      	subs	r3, r3, r2
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f040 8169 	bne.w	800a49a <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a1d6:	6812      	ldr	r2, [r2, #0]
 800a1d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a1dc:	8952      	ldrh	r2, [r2, #10]
 800a1de:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1e2:	b2da      	uxtb	r2, r3
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1f0:	789b      	ldrb	r3, [r3, #2]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800a1fa:	7dbb      	ldrb	r3, [r7, #22]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d15f      	bne.n	800a2c0 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d111      	bne.n	800a230 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800a216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d126      	bne.n	800a26a <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2100      	movs	r1, #0
 800a226:	4618      	mov	r0, r3
 800a228:	f7fd feac 	bl	8007f84 <create_chain>
 800a22c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a22e:	e01c      	b.n	800a26a <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d009      	beq.n	800a250 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	4619      	mov	r1, r3
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f7fd ff44 	bl	80080d4 <clmt_clust>
 800a24c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a24e:	e00c      	b.n	800a26a <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a25e:	695b      	ldr	r3, [r3, #20]
 800a260:	4619      	mov	r1, r3
 800a262:	4610      	mov	r0, r2
 800a264:	f7fd fe8e 	bl	8007f84 <create_chain>
 800a268:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f000 8173 	beq.w	800a558 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800a272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a274:	2b01      	cmp	r3, #1
 800a276:	d106      	bne.n	800a286 <f_write+0x15a>
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a27e:	2202      	movs	r2, #2
 800a280:	71da      	strb	r2, [r3, #7]
 800a282:	2302      	movs	r3, #2
 800a284:	e187      	b.n	800a596 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28c:	d106      	bne.n	800a29c <f_write+0x170>
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a294:	2201      	movs	r2, #1
 800a296:	71da      	strb	r2, [r3, #7]
 800a298:	2301      	movs	r3, #1
 800a29a:	e17c      	b.n	800a596 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a6:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d105      	bne.n	800a2c0 <f_write+0x194>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2be:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2c6:	799b      	ldrb	r3, [r3, #6]
 800a2c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d023      	beq.n	800a318 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2dc:	7858      	ldrb	r0, [r3, #1]
 800a2de:	68f9      	ldr	r1, [r7, #12]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2e6:	699a      	ldr	r2, [r3, #24]
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	f7fc ffc1 	bl	8007270 <disk_write>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d006      	beq.n	800a302 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	71da      	strb	r2, [r3, #7]
 800a2fe:	2301      	movs	r3, #1
 800a300:	e149      	b.n	800a596 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a308:	799b      	ldrb	r3, [r3, #6]
 800a30a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a316:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a326:	695b      	ldr	r3, [r3, #20]
 800a328:	4619      	mov	r1, r3
 800a32a:	4610      	mov	r0, r2
 800a32c:	f7fd fb57 	bl	80079de <clust2sect>
 800a330:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d106      	bne.n	800a346 <f_write+0x21a>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a33e:	2202      	movs	r2, #2
 800a340:	71da      	strb	r2, [r3, #7]
 800a342:	2302      	movs	r3, #2
 800a344:	e127      	b.n	800a596 <f_write+0x46a>
			sect += csect;
 800a346:	7dbb      	ldrb	r3, [r7, #22]
 800a348:	693a      	ldr	r2, [r7, #16]
 800a34a:	4413      	add	r3, r2
 800a34c:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a35a:	895b      	ldrh	r3, [r3, #10]
 800a35c:	461a      	mov	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	fbb3 f3f2 	udiv	r3, r3, r2
 800a364:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d069      	beq.n	800a440 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800a36c:	7dba      	ldrb	r2, [r7, #22]
 800a36e:	69fb      	ldr	r3, [r7, #28]
 800a370:	4413      	add	r3, r2
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a378:	6812      	ldr	r2, [r2, #0]
 800a37a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a37e:	7892      	ldrb	r2, [r2, #2]
 800a380:	4293      	cmp	r3, r2
 800a382:	d90a      	bls.n	800a39a <f_write+0x26e>
					cc = fp->fs->csize - csect;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a390:	789b      	ldrb	r3, [r3, #2]
 800a392:	461a      	mov	r2, r3
 800a394:	7dbb      	ldrb	r3, [r7, #22]
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3a6:	7858      	ldrb	r0, [r3, #1]
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	693a      	ldr	r2, [r7, #16]
 800a3ac:	69b9      	ldr	r1, [r7, #24]
 800a3ae:	f7fc ff5f 	bl	8007270 <disk_write>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d006      	beq.n	800a3c6 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3be:	2201      	movs	r2, #1
 800a3c0:	71da      	strb	r2, [r3, #7]
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e0e7      	b.n	800a596 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3cc:	699a      	ldr	r2, [r3, #24]
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	1ad3      	subs	r3, r2, r3
 800a3d2:	69fa      	ldr	r2, [r7, #28]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d926      	bls.n	800a426 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3e0:	699a      	ldr	r2, [r3, #24]
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a3ec:	6812      	ldr	r2, [r2, #0]
 800a3ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a3f2:	8952      	ldrh	r2, [r2, #10]
 800a3f4:	fb02 f303 	mul.w	r3, r2, r3
 800a3f8:	69ba      	ldr	r2, [r7, #24]
 800a3fa:	18d1      	adds	r1, r2, r3
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a408:	895b      	ldrh	r3, [r3, #10]
 800a40a:	461a      	mov	r2, r3
 800a40c:	f7fc ff6e 	bl	80072ec <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a416:	799b      	ldrb	r3, [r3, #6]
 800a418:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a41c:	b2da      	uxtb	r2, r3
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a424:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a432:	895b      	ldrh	r3, [r3, #10]
 800a434:	461a      	mov	r2, r3
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	fb02 f303 	mul.w	r3, r2, r3
 800a43c:	623b      	str	r3, [r7, #32]
				continue;
 800a43e:	e06e      	b.n	800a51e <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a446:	699b      	ldr	r3, [r3, #24]
 800a448:	693a      	ldr	r2, [r7, #16]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d01f      	beq.n	800a48e <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a454:	689a      	ldr	r2, [r3, #8]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d215      	bcs.n	800a48e <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a46e:	7858      	ldrb	r0, [r3, #1]
 800a470:	68f9      	ldr	r1, [r7, #12]
 800a472:	2301      	movs	r3, #1
 800a474:	693a      	ldr	r2, [r7, #16]
 800a476:	f7fc fedb 	bl	8007230 <disk_read>
 800a47a:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d006      	beq.n	800a48e <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a486:	2201      	movs	r2, #1
 800a488:	71da      	strb	r2, [r3, #7]
 800a48a:	2301      	movs	r3, #1
 800a48c:	e083      	b.n	800a596 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a494:	461a      	mov	r2, r3
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4a6:	895b      	ldrh	r3, [r3, #10]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a4b8:	6812      	ldr	r2, [r2, #0]
 800a4ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a4be:	8952      	ldrh	r2, [r2, #10]
 800a4c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4c4:	fb01 f202 	mul.w	r2, r1, r2
 800a4c8:	1a9b      	subs	r3, r3, r2
 800a4ca:	1ac3      	subs	r3, r0, r3
 800a4cc:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800a4ce:	6a3a      	ldr	r2, [r7, #32]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d901      	bls.n	800a4da <f_write+0x3ae>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a4e8:	6812      	ldr	r2, [r2, #0]
 800a4ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a4ee:	8952      	ldrh	r2, [r2, #10]
 800a4f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4f4:	fb01 f202 	mul.w	r2, r1, r2
 800a4f8:	1a9b      	subs	r3, r3, r2
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	6a3a      	ldr	r2, [r7, #32]
 800a500:	69b9      	ldr	r1, [r7, #24]
 800a502:	4618      	mov	r0, r3
 800a504:	f7fc fef2 	bl	80072ec <mem_cpy>
		fp->flag |= FA__DIRTY;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a50e:	799b      	ldrb	r3, [r3, #6]
 800a510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a514:	b2da      	uxtb	r2, r3
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a51c:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800a51e:	69ba      	ldr	r2, [r7, #24]
 800a520:	6a3b      	ldr	r3, [r7, #32]
 800a522:	4413      	add	r3, r2
 800a524:	61bb      	str	r3, [r7, #24]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a52c:	689a      	ldr	r2, [r3, #8]
 800a52e:	6a3b      	ldr	r3, [r7, #32]
 800a530:	4413      	add	r3, r2
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a538:	6093      	str	r3, [r2, #8]
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	6a3b      	ldr	r3, [r7, #32]
 800a540:	441a      	add	r2, r3
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	601a      	str	r2, [r3, #0]
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	6a3b      	ldr	r3, [r7, #32]
 800a54a:	1ad3      	subs	r3, r2, r3
 800a54c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	f47f ae26 	bne.w	800a1a2 <f_write+0x76>
 800a556:	e000      	b.n	800a55a <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a558:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a560:	689a      	ldr	r2, [r3, #8]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d907      	bls.n	800a57e <f_write+0x452>
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	68fa      	ldr	r2, [r7, #12]
 800a578:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a57c:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a584:	799b      	ldrb	r3, [r3, #6]
 800a586:	f043 0320 	orr.w	r3, r3, #32
 800a58a:	b2da      	uxtb	r2, r3
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a592:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3728      	adds	r7, #40	@ 0x28
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b086      	sub	sp, #24
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f7ff fa26 	bl	80099f8 <validate>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a5b0:	7dfb      	ldrb	r3, [r7, #23]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f040 80bc 	bne.w	800a730 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5be:	799b      	ldrb	r3, [r3, #6]
 800a5c0:	f003 0320 	and.w	r3, r3, #32
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f000 80b3 	beq.w	800a730 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5d0:	799b      	ldrb	r3, [r3, #6]
 800a5d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d01e      	beq.n	800a618 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5e6:	7858      	ldrb	r0, [r3, #1]
 800a5e8:	6879      	ldr	r1, [r7, #4]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5f0:	699a      	ldr	r2, [r3, #24]
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	f7fc fe3c 	bl	8007270 <disk_write>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800a5fe:	2301      	movs	r3, #1
 800a600:	e097      	b.n	800a732 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a608:	799b      	ldrb	r3, [r3, #6]
 800a60a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a60e:	b2da      	uxtb	r2, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a616:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a626:	69db      	ldr	r3, [r3, #28]
 800a628:	4619      	mov	r1, r3
 800a62a:	4610      	mov	r0, r2
 800a62c:	f7fd f8e6 	bl	80077fc <move_window>
 800a630:	4603      	mov	r3, r0
 800a632:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800a634:	7dfb      	ldrb	r3, [r7, #23]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d17a      	bne.n	800a730 <f_sync+0x192>
				dir = fp->dir_ptr;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a640:	6a1b      	ldr	r3, [r3, #32]
 800a642:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	330b      	adds	r3, #11
 800a648:	781a      	ldrb	r2, [r3, #0]
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	330b      	adds	r3, #11
 800a64e:	f042 0220 	orr.w	r2, r2, #32
 800a652:	b2d2      	uxtb	r2, r2
 800a654:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a65c:	68da      	ldr	r2, [r3, #12]
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	331c      	adds	r3, #28
 800a662:	b2d2      	uxtb	r2, r2
 800a664:	701a      	strb	r2, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	b29b      	uxth	r3, r3
 800a670:	0a1b      	lsrs	r3, r3, #8
 800a672:	b29a      	uxth	r2, r3
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	331d      	adds	r3, #29
 800a678:	b2d2      	uxtb	r2, r2
 800a67a:	701a      	strb	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	0c1a      	lsrs	r2, r3, #16
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	331e      	adds	r3, #30
 800a68a:	b2d2      	uxtb	r2, r2
 800a68c:	701a      	strb	r2, [r3, #0]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	0e1a      	lsrs	r2, r3, #24
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	331f      	adds	r3, #31
 800a69c:	b2d2      	uxtb	r2, r2
 800a69e:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	6938      	ldr	r0, [r7, #16]
 800a6ac:	f7fd ffe6 	bl	800867c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800a6b0:	f7fc fd1c 	bl	80070ec <get_fattime>
 800a6b4:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	3316      	adds	r3, #22
 800a6ba:	68fa      	ldr	r2, [r7, #12]
 800a6bc:	b2d2      	uxtb	r2, r2
 800a6be:	701a      	strb	r2, [r3, #0]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	0a1b      	lsrs	r3, r3, #8
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	3317      	adds	r3, #23
 800a6cc:	b2d2      	uxtb	r2, r2
 800a6ce:	701a      	strb	r2, [r3, #0]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	0c1a      	lsrs	r2, r3, #16
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	3318      	adds	r3, #24
 800a6d8:	b2d2      	uxtb	r2, r2
 800a6da:	701a      	strb	r2, [r3, #0]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	0e1a      	lsrs	r2, r3, #24
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	3319      	adds	r3, #25
 800a6e4:	b2d2      	uxtb	r2, r2
 800a6e6:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	3312      	adds	r3, #18
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	701a      	strb	r2, [r3, #0]
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	3313      	adds	r3, #19
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a6fe:	799b      	ldrb	r3, [r3, #6]
 800a700:	f023 0320 	bic.w	r3, r3, #32
 800a704:	b2da      	uxtb	r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a70c:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a71a:	2201      	movs	r2, #1
 800a71c:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4618      	mov	r0, r3
 800a728:	f7fd f89a 	bl	8007860 <sync_fs>
 800a72c:	4603      	mov	r3, r0
 800a72e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800a730:	7dfb      	ldrb	r3, [r7, #23]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3718      	adds	r7, #24
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b084      	sub	sp, #16
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f7ff ff2b 	bl	800a59e <f_sync>
 800a748:	4603      	mov	r3, r0
 800a74a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a74c:	7bfb      	ldrb	r3, [r7, #15]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d119      	bne.n	800a786 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f7ff f950 	bl	80099f8 <validate>
 800a758:	4603      	mov	r3, r0
 800a75a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a75c:	7bfb      	ldrb	r3, [r7, #15]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d111      	bne.n	800a786 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fc ff86 	bl	800767c <dec_lock>
 800a770:	4603      	mov	r3, r0
 800a772:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a774:	7bfb      	ldrb	r3, [r7, #15]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d105      	bne.n	800a786 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a780:	461a      	mov	r2, r3
 800a782:	2300      	movs	r3, #0
 800a784:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a786:	7bfb      	ldrb	r3, [r7, #15]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b090      	sub	sp, #64	@ 0x40
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f7ff f92c 	bl	80099f8 <validate>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800a7a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d002      	beq.n	800a7b4 <f_lseek+0x24>
 800a7ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a7b2:	e2da      	b.n	800ad6a <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7ba:	79db      	ldrb	r3, [r3, #7]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d004      	beq.n	800a7ca <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7c6:	79db      	ldrb	r3, [r3, #7]
 800a7c8:	e2cf      	b.n	800ad6a <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f000 8124 	beq.w	800aa20 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7de:	d16c      	bne.n	800a8ba <f_lseek+0x12a>
			tbl = fp->cltbl;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e8:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ec:	1d1a      	adds	r2, r3, #4
 800a7ee:	627a      	str	r2, [r7, #36]	@ 0x24
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	617b      	str	r3, [r7, #20]
 800a7f4:	2302      	movs	r3, #2
 800a7f6:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800a802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a804:	2b00      	cmp	r3, #0
 800a806:	d046      	beq.n	800a896 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80a:	613b      	str	r3, [r7, #16]
 800a80c:	2300      	movs	r3, #0
 800a80e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a812:	3302      	adds	r3, #2
 800a814:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800a816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a818:	60fb      	str	r3, [r7, #12]
 800a81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a81c:	3301      	adds	r3, #1
 800a81e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fd f8fb 	bl	8007a26 <get_fat>
 800a830:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800a832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a834:	2b01      	cmp	r3, #1
 800a836:	d806      	bhi.n	800a846 <f_lseek+0xb6>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a83e:	2202      	movs	r2, #2
 800a840:	71da      	strb	r2, [r3, #7]
 800a842:	2302      	movs	r3, #2
 800a844:	e291      	b.n	800ad6a <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84c:	d106      	bne.n	800a85c <f_lseek+0xcc>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a854:	2201      	movs	r2, #1
 800a856:	71da      	strb	r2, [r3, #7]
 800a858:	2301      	movs	r3, #1
 800a85a:	e286      	b.n	800ad6a <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	3301      	adds	r3, #1
 800a860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a862:	429a      	cmp	r2, r3
 800a864:	d0d7      	beq.n	800a816 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a866:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d809      	bhi.n	800a882 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800a86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a870:	1d1a      	adds	r2, r3, #4
 800a872:	627a      	str	r2, [r7, #36]	@ 0x24
 800a874:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a876:	601a      	str	r2, [r3, #0]
 800a878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87a:	1d1a      	adds	r2, r3, #4
 800a87c:	627a      	str	r2, [r7, #36]	@ 0x24
 800a87e:	693a      	ldr	r2, [r7, #16]
 800a880:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a88e:	695b      	ldr	r3, [r3, #20]
 800a890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a892:	429a      	cmp	r2, r3
 800a894:	d3b8      	bcc.n	800a808 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a89c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a89e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8a0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800a8a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d803      	bhi.n	800a8b2 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800a8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	601a      	str	r2, [r3, #0]
 800a8b0:	e259      	b.n	800ad66 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a8b2:	2311      	movs	r3, #17
 800a8b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a8b8:	e255      	b.n	800ad66 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	683a      	ldr	r2, [r7, #0]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d904      	bls.n	800a8d2 <f_lseek+0x142>
				ofs = fp->fsize;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8d8:	461a      	mov	r2, r3
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f000 8240 	beq.w	800ad66 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	3b01      	subs	r3, #1
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7fd fbf1 	bl	80080d4 <clmt_clust>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8fa:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a90a:	695b      	ldr	r3, [r3, #20]
 800a90c:	4619      	mov	r1, r3
 800a90e:	4610      	mov	r0, r2
 800a910:	f7fd f865 	bl	80079de <clust2sect>
 800a914:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d106      	bne.n	800a92a <f_lseek+0x19a>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a922:	2202      	movs	r2, #2
 800a924:	71da      	strb	r2, [r3, #7]
 800a926:	2302      	movs	r3, #2
 800a928:	e21f      	b.n	800ad6a <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	3b01      	subs	r3, #1
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a934:	6812      	ldr	r2, [r2, #0]
 800a936:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a93a:	8952      	ldrh	r2, [r2, #10]
 800a93c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a946:	6812      	ldr	r2, [r2, #0]
 800a948:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a94c:	7892      	ldrb	r2, [r2, #2]
 800a94e:	3a01      	subs	r2, #1
 800a950:	4013      	ands	r3, r2
 800a952:	69ba      	ldr	r2, [r7, #24]
 800a954:	4413      	add	r3, r2
 800a956:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a966:	6812      	ldr	r2, [r2, #0]
 800a968:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a96c:	8952      	ldrh	r2, [r2, #10]
 800a96e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a972:	fb01 f202 	mul.w	r2, r1, r2
 800a976:	1a9b      	subs	r3, r3, r2
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f000 81f4 	beq.w	800ad66 <f_lseek+0x5d6>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a984:	699b      	ldr	r3, [r3, #24]
 800a986:	69ba      	ldr	r2, [r7, #24]
 800a988:	429a      	cmp	r2, r3
 800a98a:	f000 81ec 	beq.w	800ad66 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a994:	799b      	ldrb	r3, [r3, #6]
 800a996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d023      	beq.n	800a9e6 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9aa:	7858      	ldrb	r0, [r3, #1]
 800a9ac:	6879      	ldr	r1, [r7, #4]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9b4:	699a      	ldr	r2, [r3, #24]
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	f7fc fc5a 	bl	8007270 <disk_write>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d006      	beq.n	800a9d0 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	71da      	strb	r2, [r3, #7]
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e1cc      	b.n	800ad6a <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9d6:	799b      	ldrb	r3, [r3, #6]
 800a9d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9e4:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9f2:	7858      	ldrb	r0, [r3, #1]
 800a9f4:	6879      	ldr	r1, [r7, #4]
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	69ba      	ldr	r2, [r7, #24]
 800a9fa:	f7fc fc19 	bl	8007230 <disk_read>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d006      	beq.n	800aa12 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	71da      	strb	r2, [r3, #7]
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e1ab      	b.n	800ad6a <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa18:	461a      	mov	r2, r3
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	6193      	str	r3, [r2, #24]
 800aa1e:	e1a2      	b.n	800ad66 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	683a      	ldr	r2, [r7, #0]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d90c      	bls.n	800aa48 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa34:	799b      	ldrb	r3, [r3, #6]
 800aa36:	f003 0302 	and.w	r3, r3, #2
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d104      	bne.n	800aa48 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa60:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f000 8100 	beq.w	800ac6a <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa76:	789b      	ldrb	r3, [r3, #2]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa86:	895b      	ldrh	r3, [r3, #10]
 800aa88:	fb02 f303 	mul.w	r3, r2, r3
 800aa8c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800aa8e:	6a3b      	ldr	r3, [r7, #32]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d021      	beq.n	800aad8 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	1e5a      	subs	r2, r3, #1
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	fbb2 f2f3 	udiv	r2, r2, r3
 800aa9e:	6a3b      	ldr	r3, [r7, #32]
 800aaa0:	1e59      	subs	r1, r3, #1
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d315      	bcc.n	800aad8 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800aaac:	6a3b      	ldr	r3, [r7, #32]
 800aaae:	1e5a      	subs	r2, r3, #1
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	425b      	negs	r3, r3
 800aab4:	4013      	ands	r3, r2
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800aabc:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aad2:	695b      	ldr	r3, [r3, #20]
 800aad4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aad6:	e031      	b.n	800ab3c <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aade:	691b      	ldr	r3, [r3, #16]
 800aae0:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800aae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d123      	bne.n	800ab30 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fd fa46 	bl	8007f84 <create_chain>
 800aaf8:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800aafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d106      	bne.n	800ab0e <f_lseek+0x37e>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab06:	2202      	movs	r2, #2
 800ab08:	71da      	strb	r2, [r3, #7]
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	e12d      	b.n	800ad6a <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ab0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab14:	d106      	bne.n	800ab24 <f_lseek+0x394>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	71da      	strb	r2, [r3, #7]
 800ab20:	2301      	movs	r3, #1
 800ab22:	e122      	b.n	800ad6a <f_lseek+0x5da>
					fp->sclust = clst;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab2e:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab36:	461a      	mov	r2, r3
 800ab38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3a:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800ab3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f000 8093 	beq.w	800ac6a <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 800ab44:	e052      	b.n	800abec <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab4c:	799b      	ldrb	r3, [r3, #6]
 800ab4e:	f003 0302 	and.w	r3, r3, #2
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d00e      	beq.n	800ab74 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fd fa0f 	bl	8007f84 <create_chain>
 800ab66:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800ab68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10b      	bne.n	800ab86 <f_lseek+0x3f6>
							ofs = bcs; break;
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	603b      	str	r3, [r7, #0]
 800ab72:	e03f      	b.n	800abf4 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fc ff51 	bl	8007a26 <get_fat>
 800ab84:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800ab86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8c:	d106      	bne.n	800ab9c <f_lseek+0x40c>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab94:	2201      	movs	r2, #1
 800ab96:	71da      	strb	r2, [r3, #7]
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e0e6      	b.n	800ad6a <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800ab9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d909      	bls.n	800abb6 <f_lseek+0x426>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abae:	695b      	ldr	r3, [r3, #20]
 800abb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d306      	bcc.n	800abc4 <f_lseek+0x434>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abbc:	2202      	movs	r2, #2
 800abbe:	71da      	strb	r2, [r3, #7]
 800abc0:	2302      	movs	r3, #2
 800abc2:	e0d2      	b.n	800ad6a <f_lseek+0x5da>
					fp->clust = clst;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abca:	461a      	mov	r2, r3
 800abcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abce:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abd6:	689a      	ldr	r2, [r3, #8]
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	4413      	add	r3, r2
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800abe2:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800abe4:	683a      	ldr	r2, [r7, #0]
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800abec:	683a      	ldr	r2, [r7, #0]
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d8a8      	bhi.n	800ab46 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abfa:	689a      	ldr	r2, [r3, #8]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	4413      	add	r3, r2
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ac06:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac14:	895b      	ldrh	r3, [r3, #10]
 800ac16:	461a      	mov	r2, r3
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac1e:	fb01 f202 	mul.w	r2, r1, r2
 800ac22:	1a9b      	subs	r3, r3, r2
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d020      	beq.n	800ac6a <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7fc fed3 	bl	80079de <clust2sect>
 800ac38:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800ac3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d106      	bne.n	800ac4e <f_lseek+0x4be>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac46:	2202      	movs	r2, #2
 800ac48:	71da      	strb	r2, [r3, #7]
 800ac4a:	2302      	movs	r3, #2
 800ac4c:	e08d      	b.n	800ad6a <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac5a:	895b      	ldrh	r3, [r3, #10]
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac66:	4413      	add	r3, r2
 800ac68:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ac78:	6812      	ldr	r2, [r2, #0]
 800ac7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ac7e:	8952      	ldrh	r2, [r2, #10]
 800ac80:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac84:	fb01 f202 	mul.w	r2, r1, r2
 800ac88:	1a9b      	subs	r3, r3, r2
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d04e      	beq.n	800ad2c <f_lseek+0x59c>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac94:	699b      	ldr	r3, [r3, #24]
 800ac96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d047      	beq.n	800ad2c <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aca2:	799b      	ldrb	r3, [r3, #6]
 800aca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d023      	beq.n	800acf4 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800acb8:	7858      	ldrb	r0, [r3, #1]
 800acba:	6879      	ldr	r1, [r7, #4]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800acc2:	699a      	ldr	r2, [r3, #24]
 800acc4:	2301      	movs	r3, #1
 800acc6:	f7fc fad3 	bl	8007270 <disk_write>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d006      	beq.n	800acde <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800acd6:	2201      	movs	r2, #1
 800acd8:	71da      	strb	r2, [r3, #7]
 800acda:	2301      	movs	r3, #1
 800acdc:	e045      	b.n	800ad6a <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ace4:	799b      	ldrb	r3, [r3, #6]
 800ace6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acea:	b2da      	uxtb	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800acf2:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad00:	7858      	ldrb	r0, [r3, #1]
 800ad02:	6879      	ldr	r1, [r7, #4]
 800ad04:	2301      	movs	r3, #1
 800ad06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad08:	f7fc fa92 	bl	8007230 <disk_read>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d006      	beq.n	800ad20 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad18:	2201      	movs	r2, #1
 800ad1a:	71da      	strb	r2, [r3, #7]
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e024      	b.n	800ad6a <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad26:	461a      	mov	r2, r3
 800ad28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad2a:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad32:	689a      	ldr	r2, [r3, #8]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d912      	bls.n	800ad66 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800ad4e:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad56:	799b      	ldrb	r3, [r3, #6]
 800ad58:	f043 0320 	orr.w	r3, r3, #32
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad64:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800ad66:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3740      	adds	r7, #64	@ 0x40
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b084      	sub	sp, #16
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800ad7e:	78fb      	ldrb	r3, [r7, #3]
 800ad80:	2b0a      	cmp	r3, #10
 800ad82:	d103      	bne.n	800ad8c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ad84:	210d      	movs	r1, #13
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f7ff fff3 	bl	800ad72 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	db25      	blt.n	800ade4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	1c5a      	adds	r2, r3, #1
 800ad9c:	60fa      	str	r2, [r7, #12]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	4413      	add	r3, r2
 800ada2:	78fa      	ldrb	r2, [r7, #3]
 800ada4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2b3c      	cmp	r3, #60	@ 0x3c
 800adaa:	dd12      	ble.n	800add2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6818      	ldr	r0, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f103 010c 	add.w	r1, r3, #12
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	f107 0308 	add.w	r3, r7, #8
 800adbc:	f7ff f9b6 	bl	800a12c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d101      	bne.n	800adcc <putc_bfd+0x5a>
 800adc8:	2300      	movs	r3, #0
 800adca:	e001      	b.n	800add0 <putc_bfd+0x5e>
 800adcc:	f04f 33ff 	mov.w	r3, #4294967295
 800add0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	68fa      	ldr	r2, [r7, #12]
 800add6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	1c5a      	adds	r2, r3, #1
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	609a      	str	r2, [r3, #8]
 800ade2:	e000      	b.n	800ade6 <putc_bfd+0x74>
	if (i < 0) return;
 800ade4:	bf00      	nop
}
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800adec:	b590      	push	{r4, r7, lr}
 800adee:	b097      	sub	sp, #92	@ 0x5c
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	613b      	str	r3, [r7, #16]
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800ae02:	e009      	b.n	800ae18 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	1c5a      	adds	r2, r3, #1
 800ae08:	607a      	str	r2, [r7, #4]
 800ae0a:	781a      	ldrb	r2, [r3, #0]
 800ae0c:	f107 030c 	add.w	r3, r7, #12
 800ae10:	4611      	mov	r1, r2
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7ff ffad 	bl	800ad72 <putc_bfd>
	while (*str)			/* Put the string */
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1f1      	bne.n	800ae04 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	db15      	blt.n	800ae52 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	461c      	mov	r4, r3
 800ae2c:	f107 0208 	add.w	r2, r7, #8
 800ae30:	f107 030c 	add.w	r3, r7, #12
 800ae34:	f103 010c 	add.w	r1, r3, #12
 800ae38:	4613      	mov	r3, r2
 800ae3a:	4622      	mov	r2, r4
 800ae3c:	f7ff f976 	bl	800a12c <f_write>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d105      	bne.n	800ae52 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d101      	bne.n	800ae52 <f_puts+0x66>
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	e001      	b.n	800ae56 <f_puts+0x6a>
	return EOF;
 800ae52:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	375c      	adds	r7, #92	@ 0x5c
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd90      	pop	{r4, r7, pc}
	...

0800ae60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b087      	sub	sp, #28
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800ae76:	4b1e      	ldr	r3, [pc, #120]	@ (800aef0 <FATFS_LinkDriverEx+0x90>)
 800ae78:	7a5b      	ldrb	r3, [r3, #9]
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d831      	bhi.n	800aee4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ae80:	4b1b      	ldr	r3, [pc, #108]	@ (800aef0 <FATFS_LinkDriverEx+0x90>)
 800ae82:	7a5b      	ldrb	r3, [r3, #9]
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	461a      	mov	r2, r3
 800ae88:	4b19      	ldr	r3, [pc, #100]	@ (800aef0 <FATFS_LinkDriverEx+0x90>)
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800ae8e:	4b18      	ldr	r3, [pc, #96]	@ (800aef0 <FATFS_LinkDriverEx+0x90>)
 800ae90:	7a5b      	ldrb	r3, [r3, #9]
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	4a16      	ldr	r2, [pc, #88]	@ (800aef0 <FATFS_LinkDriverEx+0x90>)
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	4413      	add	r3, r2
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800ae9e:	4b14      	ldr	r3, [pc, #80]	@ (800aef0 <FATFS_LinkDriverEx+0x90>)
 800aea0:	7a5b      	ldrb	r3, [r3, #9]
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	461a      	mov	r2, r3
 800aea6:	4b12      	ldr	r3, [pc, #72]	@ (800aef0 <FATFS_LinkDriverEx+0x90>)
 800aea8:	4413      	add	r3, r2
 800aeaa:	79fa      	ldrb	r2, [r7, #7]
 800aeac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aeae:	4b10      	ldr	r3, [pc, #64]	@ (800aef0 <FATFS_LinkDriverEx+0x90>)
 800aeb0:	7a5b      	ldrb	r3, [r3, #9]
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	1c5a      	adds	r2, r3, #1
 800aeb6:	b2d1      	uxtb	r1, r2
 800aeb8:	4a0d      	ldr	r2, [pc, #52]	@ (800aef0 <FATFS_LinkDriverEx+0x90>)
 800aeba:	7251      	strb	r1, [r2, #9]
 800aebc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aebe:	7dbb      	ldrb	r3, [r7, #22]
 800aec0:	3330      	adds	r3, #48	@ 0x30
 800aec2:	b2da      	uxtb	r2, r3
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	3301      	adds	r3, #1
 800aecc:	223a      	movs	r2, #58	@ 0x3a
 800aece:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	3302      	adds	r3, #2
 800aed4:	222f      	movs	r2, #47	@ 0x2f
 800aed6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	3303      	adds	r3, #3
 800aedc:	2200      	movs	r2, #0
 800aede:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aee0:	2300      	movs	r3, #0
 800aee2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800aee4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	371c      	adds	r7, #28
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bc80      	pop	{r7}
 800aeee:	4770      	bx	lr
 800aef0:	20002bb0 	.word	0x20002bb0

0800aef4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800aefe:	2200      	movs	r2, #0
 800af00:	6839      	ldr	r1, [r7, #0]
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7ff ffac 	bl	800ae60 <FATFS_LinkDriverEx>
 800af08:	4603      	mov	r3, r0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
	...

0800af14 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
 800af1a:	4603      	mov	r3, r0
 800af1c:	6039      	str	r1, [r7, #0]
 800af1e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800af20:	88fb      	ldrh	r3, [r7, #6]
 800af22:	2b7f      	cmp	r3, #127	@ 0x7f
 800af24:	d802      	bhi.n	800af2c <ff_convert+0x18>
		c = chr;
 800af26:	88fb      	ldrh	r3, [r7, #6]
 800af28:	81fb      	strh	r3, [r7, #14]
 800af2a:	e025      	b.n	800af78 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00b      	beq.n	800af4a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800af32:	88fb      	ldrh	r3, [r7, #6]
 800af34:	2bff      	cmp	r3, #255	@ 0xff
 800af36:	d805      	bhi.n	800af44 <ff_convert+0x30>
 800af38:	88fb      	ldrh	r3, [r7, #6]
 800af3a:	3b80      	subs	r3, #128	@ 0x80
 800af3c:	4a11      	ldr	r2, [pc, #68]	@ (800af84 <ff_convert+0x70>)
 800af3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af42:	e000      	b.n	800af46 <ff_convert+0x32>
 800af44:	2300      	movs	r3, #0
 800af46:	81fb      	strh	r3, [r7, #14]
 800af48:	e016      	b.n	800af78 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800af4a:	2300      	movs	r3, #0
 800af4c:	81fb      	strh	r3, [r7, #14]
 800af4e:	e009      	b.n	800af64 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800af50:	89fb      	ldrh	r3, [r7, #14]
 800af52:	4a0c      	ldr	r2, [pc, #48]	@ (800af84 <ff_convert+0x70>)
 800af54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af58:	88fa      	ldrh	r2, [r7, #6]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d006      	beq.n	800af6c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800af5e:	89fb      	ldrh	r3, [r7, #14]
 800af60:	3301      	adds	r3, #1
 800af62:	81fb      	strh	r3, [r7, #14]
 800af64:	89fb      	ldrh	r3, [r7, #14]
 800af66:	2b7f      	cmp	r3, #127	@ 0x7f
 800af68:	d9f2      	bls.n	800af50 <ff_convert+0x3c>
 800af6a:	e000      	b.n	800af6e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800af6c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800af6e:	89fb      	ldrh	r3, [r7, #14]
 800af70:	3380      	adds	r3, #128	@ 0x80
 800af72:	b29b      	uxth	r3, r3
 800af74:	b2db      	uxtb	r3, r3
 800af76:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800af78:	89fb      	ldrh	r3, [r7, #14]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	bc80      	pop	{r7}
 800af82:	4770      	bx	lr
 800af84:	0800eba4 	.word	0x0800eba4

0800af88 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	4603      	mov	r3, r0
 800af90:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800af92:	2300      	movs	r3, #0
 800af94:	60fb      	str	r3, [r7, #12]
 800af96:	e002      	b.n	800af9e <ff_wtoupper+0x16>
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	3301      	adds	r3, #1
 800af9c:	60fb      	str	r3, [r7, #12]
 800af9e:	4a0f      	ldr	r2, [pc, #60]	@ (800afdc <ff_wtoupper+0x54>)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d006      	beq.n	800afb8 <ff_wtoupper+0x30>
 800afaa:	4a0c      	ldr	r2, [pc, #48]	@ (800afdc <ff_wtoupper+0x54>)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afb2:	88fa      	ldrh	r2, [r7, #6]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d1ef      	bne.n	800af98 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800afb8:	4a08      	ldr	r2, [pc, #32]	@ (800afdc <ff_wtoupper+0x54>)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d004      	beq.n	800afce <ff_wtoupper+0x46>
 800afc4:	4a06      	ldr	r2, [pc, #24]	@ (800afe0 <ff_wtoupper+0x58>)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afcc:	e000      	b.n	800afd0 <ff_wtoupper+0x48>
 800afce:	88fb      	ldrh	r3, [r7, #6]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bc80      	pop	{r7}
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	0800eca4 	.word	0x0800eca4
 800afe0:	0800ee84 	.word	0x0800ee84

0800afe4 <__cvt>:
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afea:	461d      	mov	r5, r3
 800afec:	bfbb      	ittet	lt
 800afee:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800aff2:	461d      	movlt	r5, r3
 800aff4:	2300      	movge	r3, #0
 800aff6:	232d      	movlt	r3, #45	@ 0x2d
 800aff8:	b088      	sub	sp, #32
 800affa:	4614      	mov	r4, r2
 800affc:	bfb8      	it	lt
 800affe:	4614      	movlt	r4, r2
 800b000:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b002:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b004:	7013      	strb	r3, [r2, #0]
 800b006:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b008:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b00c:	f023 0820 	bic.w	r8, r3, #32
 800b010:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b014:	d005      	beq.n	800b022 <__cvt+0x3e>
 800b016:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b01a:	d100      	bne.n	800b01e <__cvt+0x3a>
 800b01c:	3601      	adds	r6, #1
 800b01e:	2302      	movs	r3, #2
 800b020:	e000      	b.n	800b024 <__cvt+0x40>
 800b022:	2303      	movs	r3, #3
 800b024:	aa07      	add	r2, sp, #28
 800b026:	9204      	str	r2, [sp, #16]
 800b028:	aa06      	add	r2, sp, #24
 800b02a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b02e:	e9cd 3600 	strd	r3, r6, [sp]
 800b032:	4622      	mov	r2, r4
 800b034:	462b      	mov	r3, r5
 800b036:	f000 fe6f 	bl	800bd18 <_dtoa_r>
 800b03a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b03e:	4607      	mov	r7, r0
 800b040:	d119      	bne.n	800b076 <__cvt+0x92>
 800b042:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b044:	07db      	lsls	r3, r3, #31
 800b046:	d50e      	bpl.n	800b066 <__cvt+0x82>
 800b048:	eb00 0906 	add.w	r9, r0, r6
 800b04c:	2200      	movs	r2, #0
 800b04e:	2300      	movs	r3, #0
 800b050:	4620      	mov	r0, r4
 800b052:	4629      	mov	r1, r5
 800b054:	f7f5 fca8 	bl	80009a8 <__aeabi_dcmpeq>
 800b058:	b108      	cbz	r0, 800b05e <__cvt+0x7a>
 800b05a:	f8cd 901c 	str.w	r9, [sp, #28]
 800b05e:	2230      	movs	r2, #48	@ 0x30
 800b060:	9b07      	ldr	r3, [sp, #28]
 800b062:	454b      	cmp	r3, r9
 800b064:	d31e      	bcc.n	800b0a4 <__cvt+0xc0>
 800b066:	4638      	mov	r0, r7
 800b068:	9b07      	ldr	r3, [sp, #28]
 800b06a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b06c:	1bdb      	subs	r3, r3, r7
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	b008      	add	sp, #32
 800b072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b076:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b07a:	eb00 0906 	add.w	r9, r0, r6
 800b07e:	d1e5      	bne.n	800b04c <__cvt+0x68>
 800b080:	7803      	ldrb	r3, [r0, #0]
 800b082:	2b30      	cmp	r3, #48	@ 0x30
 800b084:	d10a      	bne.n	800b09c <__cvt+0xb8>
 800b086:	2200      	movs	r2, #0
 800b088:	2300      	movs	r3, #0
 800b08a:	4620      	mov	r0, r4
 800b08c:	4629      	mov	r1, r5
 800b08e:	f7f5 fc8b 	bl	80009a8 <__aeabi_dcmpeq>
 800b092:	b918      	cbnz	r0, 800b09c <__cvt+0xb8>
 800b094:	f1c6 0601 	rsb	r6, r6, #1
 800b098:	f8ca 6000 	str.w	r6, [sl]
 800b09c:	f8da 3000 	ldr.w	r3, [sl]
 800b0a0:	4499      	add	r9, r3
 800b0a2:	e7d3      	b.n	800b04c <__cvt+0x68>
 800b0a4:	1c59      	adds	r1, r3, #1
 800b0a6:	9107      	str	r1, [sp, #28]
 800b0a8:	701a      	strb	r2, [r3, #0]
 800b0aa:	e7d9      	b.n	800b060 <__cvt+0x7c>

0800b0ac <__exponent>:
 800b0ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0ae:	2900      	cmp	r1, #0
 800b0b0:	bfb6      	itet	lt
 800b0b2:	232d      	movlt	r3, #45	@ 0x2d
 800b0b4:	232b      	movge	r3, #43	@ 0x2b
 800b0b6:	4249      	neglt	r1, r1
 800b0b8:	2909      	cmp	r1, #9
 800b0ba:	7002      	strb	r2, [r0, #0]
 800b0bc:	7043      	strb	r3, [r0, #1]
 800b0be:	dd29      	ble.n	800b114 <__exponent+0x68>
 800b0c0:	f10d 0307 	add.w	r3, sp, #7
 800b0c4:	461d      	mov	r5, r3
 800b0c6:	270a      	movs	r7, #10
 800b0c8:	fbb1 f6f7 	udiv	r6, r1, r7
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	fb07 1416 	mls	r4, r7, r6, r1
 800b0d2:	3430      	adds	r4, #48	@ 0x30
 800b0d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b0d8:	460c      	mov	r4, r1
 800b0da:	2c63      	cmp	r4, #99	@ 0x63
 800b0dc:	4631      	mov	r1, r6
 800b0de:	f103 33ff 	add.w	r3, r3, #4294967295
 800b0e2:	dcf1      	bgt.n	800b0c8 <__exponent+0x1c>
 800b0e4:	3130      	adds	r1, #48	@ 0x30
 800b0e6:	1e94      	subs	r4, r2, #2
 800b0e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b0ec:	4623      	mov	r3, r4
 800b0ee:	1c41      	adds	r1, r0, #1
 800b0f0:	42ab      	cmp	r3, r5
 800b0f2:	d30a      	bcc.n	800b10a <__exponent+0x5e>
 800b0f4:	f10d 0309 	add.w	r3, sp, #9
 800b0f8:	1a9b      	subs	r3, r3, r2
 800b0fa:	42ac      	cmp	r4, r5
 800b0fc:	bf88      	it	hi
 800b0fe:	2300      	movhi	r3, #0
 800b100:	3302      	adds	r3, #2
 800b102:	4403      	add	r3, r0
 800b104:	1a18      	subs	r0, r3, r0
 800b106:	b003      	add	sp, #12
 800b108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b10a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b10e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b112:	e7ed      	b.n	800b0f0 <__exponent+0x44>
 800b114:	2330      	movs	r3, #48	@ 0x30
 800b116:	3130      	adds	r1, #48	@ 0x30
 800b118:	7083      	strb	r3, [r0, #2]
 800b11a:	70c1      	strb	r1, [r0, #3]
 800b11c:	1d03      	adds	r3, r0, #4
 800b11e:	e7f1      	b.n	800b104 <__exponent+0x58>

0800b120 <_printf_float>:
 800b120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b124:	b091      	sub	sp, #68	@ 0x44
 800b126:	460c      	mov	r4, r1
 800b128:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b12c:	4616      	mov	r6, r2
 800b12e:	461f      	mov	r7, r3
 800b130:	4605      	mov	r5, r0
 800b132:	f000 fce1 	bl	800baf8 <_localeconv_r>
 800b136:	6803      	ldr	r3, [r0, #0]
 800b138:	4618      	mov	r0, r3
 800b13a:	9308      	str	r3, [sp, #32]
 800b13c:	f7f5 f808 	bl	8000150 <strlen>
 800b140:	2300      	movs	r3, #0
 800b142:	930e      	str	r3, [sp, #56]	@ 0x38
 800b144:	f8d8 3000 	ldr.w	r3, [r8]
 800b148:	9009      	str	r0, [sp, #36]	@ 0x24
 800b14a:	3307      	adds	r3, #7
 800b14c:	f023 0307 	bic.w	r3, r3, #7
 800b150:	f103 0208 	add.w	r2, r3, #8
 800b154:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b158:	f8d4 b000 	ldr.w	fp, [r4]
 800b15c:	f8c8 2000 	str.w	r2, [r8]
 800b160:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b164:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b168:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b16a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b16e:	f04f 32ff 	mov.w	r2, #4294967295
 800b172:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b176:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b17a:	4b9c      	ldr	r3, [pc, #624]	@ (800b3ec <_printf_float+0x2cc>)
 800b17c:	f7f5 fc46 	bl	8000a0c <__aeabi_dcmpun>
 800b180:	bb70      	cbnz	r0, 800b1e0 <_printf_float+0xc0>
 800b182:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b186:	f04f 32ff 	mov.w	r2, #4294967295
 800b18a:	4b98      	ldr	r3, [pc, #608]	@ (800b3ec <_printf_float+0x2cc>)
 800b18c:	f7f5 fc20 	bl	80009d0 <__aeabi_dcmple>
 800b190:	bb30      	cbnz	r0, 800b1e0 <_printf_float+0xc0>
 800b192:	2200      	movs	r2, #0
 800b194:	2300      	movs	r3, #0
 800b196:	4640      	mov	r0, r8
 800b198:	4649      	mov	r1, r9
 800b19a:	f7f5 fc0f 	bl	80009bc <__aeabi_dcmplt>
 800b19e:	b110      	cbz	r0, 800b1a6 <_printf_float+0x86>
 800b1a0:	232d      	movs	r3, #45	@ 0x2d
 800b1a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1a6:	4a92      	ldr	r2, [pc, #584]	@ (800b3f0 <_printf_float+0x2d0>)
 800b1a8:	4b92      	ldr	r3, [pc, #584]	@ (800b3f4 <_printf_float+0x2d4>)
 800b1aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b1ae:	bf94      	ite	ls
 800b1b0:	4690      	movls	r8, r2
 800b1b2:	4698      	movhi	r8, r3
 800b1b4:	2303      	movs	r3, #3
 800b1b6:	f04f 0900 	mov.w	r9, #0
 800b1ba:	6123      	str	r3, [r4, #16]
 800b1bc:	f02b 0304 	bic.w	r3, fp, #4
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	4633      	mov	r3, r6
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	9700      	str	r7, [sp, #0]
 800b1ca:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b1cc:	f000 f9d4 	bl	800b578 <_printf_common>
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	f040 8090 	bne.w	800b2f6 <_printf_float+0x1d6>
 800b1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1da:	b011      	add	sp, #68	@ 0x44
 800b1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e0:	4642      	mov	r2, r8
 800b1e2:	464b      	mov	r3, r9
 800b1e4:	4640      	mov	r0, r8
 800b1e6:	4649      	mov	r1, r9
 800b1e8:	f7f5 fc10 	bl	8000a0c <__aeabi_dcmpun>
 800b1ec:	b148      	cbz	r0, 800b202 <_printf_float+0xe2>
 800b1ee:	464b      	mov	r3, r9
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	bfb8      	it	lt
 800b1f4:	232d      	movlt	r3, #45	@ 0x2d
 800b1f6:	4a80      	ldr	r2, [pc, #512]	@ (800b3f8 <_printf_float+0x2d8>)
 800b1f8:	bfb8      	it	lt
 800b1fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b1fe:	4b7f      	ldr	r3, [pc, #508]	@ (800b3fc <_printf_float+0x2dc>)
 800b200:	e7d3      	b.n	800b1aa <_printf_float+0x8a>
 800b202:	6863      	ldr	r3, [r4, #4]
 800b204:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b208:	1c5a      	adds	r2, r3, #1
 800b20a:	d13f      	bne.n	800b28c <_printf_float+0x16c>
 800b20c:	2306      	movs	r3, #6
 800b20e:	6063      	str	r3, [r4, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b216:	6023      	str	r3, [r4, #0]
 800b218:	9206      	str	r2, [sp, #24]
 800b21a:	aa0e      	add	r2, sp, #56	@ 0x38
 800b21c:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b220:	aa0d      	add	r2, sp, #52	@ 0x34
 800b222:	9203      	str	r2, [sp, #12]
 800b224:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b228:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b22c:	6863      	ldr	r3, [r4, #4]
 800b22e:	4642      	mov	r2, r8
 800b230:	9300      	str	r3, [sp, #0]
 800b232:	4628      	mov	r0, r5
 800b234:	464b      	mov	r3, r9
 800b236:	910a      	str	r1, [sp, #40]	@ 0x28
 800b238:	f7ff fed4 	bl	800afe4 <__cvt>
 800b23c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b23e:	4680      	mov	r8, r0
 800b240:	2947      	cmp	r1, #71	@ 0x47
 800b242:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b244:	d128      	bne.n	800b298 <_printf_float+0x178>
 800b246:	1cc8      	adds	r0, r1, #3
 800b248:	db02      	blt.n	800b250 <_printf_float+0x130>
 800b24a:	6863      	ldr	r3, [r4, #4]
 800b24c:	4299      	cmp	r1, r3
 800b24e:	dd40      	ble.n	800b2d2 <_printf_float+0x1b2>
 800b250:	f1aa 0a02 	sub.w	sl, sl, #2
 800b254:	fa5f fa8a 	uxtb.w	sl, sl
 800b258:	4652      	mov	r2, sl
 800b25a:	3901      	subs	r1, #1
 800b25c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b260:	910d      	str	r1, [sp, #52]	@ 0x34
 800b262:	f7ff ff23 	bl	800b0ac <__exponent>
 800b266:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b268:	4681      	mov	r9, r0
 800b26a:	1813      	adds	r3, r2, r0
 800b26c:	2a01      	cmp	r2, #1
 800b26e:	6123      	str	r3, [r4, #16]
 800b270:	dc02      	bgt.n	800b278 <_printf_float+0x158>
 800b272:	6822      	ldr	r2, [r4, #0]
 800b274:	07d2      	lsls	r2, r2, #31
 800b276:	d501      	bpl.n	800b27c <_printf_float+0x15c>
 800b278:	3301      	adds	r3, #1
 800b27a:	6123      	str	r3, [r4, #16]
 800b27c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b280:	2b00      	cmp	r3, #0
 800b282:	d09e      	beq.n	800b1c2 <_printf_float+0xa2>
 800b284:	232d      	movs	r3, #45	@ 0x2d
 800b286:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b28a:	e79a      	b.n	800b1c2 <_printf_float+0xa2>
 800b28c:	2947      	cmp	r1, #71	@ 0x47
 800b28e:	d1bf      	bne.n	800b210 <_printf_float+0xf0>
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1bd      	bne.n	800b210 <_printf_float+0xf0>
 800b294:	2301      	movs	r3, #1
 800b296:	e7ba      	b.n	800b20e <_printf_float+0xee>
 800b298:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b29c:	d9dc      	bls.n	800b258 <_printf_float+0x138>
 800b29e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b2a2:	d118      	bne.n	800b2d6 <_printf_float+0x1b6>
 800b2a4:	2900      	cmp	r1, #0
 800b2a6:	6863      	ldr	r3, [r4, #4]
 800b2a8:	dd0b      	ble.n	800b2c2 <_printf_float+0x1a2>
 800b2aa:	6121      	str	r1, [r4, #16]
 800b2ac:	b913      	cbnz	r3, 800b2b4 <_printf_float+0x194>
 800b2ae:	6822      	ldr	r2, [r4, #0]
 800b2b0:	07d0      	lsls	r0, r2, #31
 800b2b2:	d502      	bpl.n	800b2ba <_printf_float+0x19a>
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	440b      	add	r3, r1
 800b2b8:	6123      	str	r3, [r4, #16]
 800b2ba:	f04f 0900 	mov.w	r9, #0
 800b2be:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b2c0:	e7dc      	b.n	800b27c <_printf_float+0x15c>
 800b2c2:	b913      	cbnz	r3, 800b2ca <_printf_float+0x1aa>
 800b2c4:	6822      	ldr	r2, [r4, #0]
 800b2c6:	07d2      	lsls	r2, r2, #31
 800b2c8:	d501      	bpl.n	800b2ce <_printf_float+0x1ae>
 800b2ca:	3302      	adds	r3, #2
 800b2cc:	e7f4      	b.n	800b2b8 <_printf_float+0x198>
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e7f2      	b.n	800b2b8 <_printf_float+0x198>
 800b2d2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b2d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2d8:	4299      	cmp	r1, r3
 800b2da:	db05      	blt.n	800b2e8 <_printf_float+0x1c8>
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	6121      	str	r1, [r4, #16]
 800b2e0:	07d8      	lsls	r0, r3, #31
 800b2e2:	d5ea      	bpl.n	800b2ba <_printf_float+0x19a>
 800b2e4:	1c4b      	adds	r3, r1, #1
 800b2e6:	e7e7      	b.n	800b2b8 <_printf_float+0x198>
 800b2e8:	2900      	cmp	r1, #0
 800b2ea:	bfcc      	ite	gt
 800b2ec:	2201      	movgt	r2, #1
 800b2ee:	f1c1 0202 	rsble	r2, r1, #2
 800b2f2:	4413      	add	r3, r2
 800b2f4:	e7e0      	b.n	800b2b8 <_printf_float+0x198>
 800b2f6:	6823      	ldr	r3, [r4, #0]
 800b2f8:	055a      	lsls	r2, r3, #21
 800b2fa:	d407      	bmi.n	800b30c <_printf_float+0x1ec>
 800b2fc:	6923      	ldr	r3, [r4, #16]
 800b2fe:	4642      	mov	r2, r8
 800b300:	4631      	mov	r1, r6
 800b302:	4628      	mov	r0, r5
 800b304:	47b8      	blx	r7
 800b306:	3001      	adds	r0, #1
 800b308:	d12b      	bne.n	800b362 <_printf_float+0x242>
 800b30a:	e764      	b.n	800b1d6 <_printf_float+0xb6>
 800b30c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b310:	f240 80dc 	bls.w	800b4cc <_printf_float+0x3ac>
 800b314:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b318:	2200      	movs	r2, #0
 800b31a:	2300      	movs	r3, #0
 800b31c:	f7f5 fb44 	bl	80009a8 <__aeabi_dcmpeq>
 800b320:	2800      	cmp	r0, #0
 800b322:	d033      	beq.n	800b38c <_printf_float+0x26c>
 800b324:	2301      	movs	r3, #1
 800b326:	4631      	mov	r1, r6
 800b328:	4628      	mov	r0, r5
 800b32a:	4a35      	ldr	r2, [pc, #212]	@ (800b400 <_printf_float+0x2e0>)
 800b32c:	47b8      	blx	r7
 800b32e:	3001      	adds	r0, #1
 800b330:	f43f af51 	beq.w	800b1d6 <_printf_float+0xb6>
 800b334:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b338:	4543      	cmp	r3, r8
 800b33a:	db02      	blt.n	800b342 <_printf_float+0x222>
 800b33c:	6823      	ldr	r3, [r4, #0]
 800b33e:	07d8      	lsls	r0, r3, #31
 800b340:	d50f      	bpl.n	800b362 <_printf_float+0x242>
 800b342:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b346:	4631      	mov	r1, r6
 800b348:	4628      	mov	r0, r5
 800b34a:	47b8      	blx	r7
 800b34c:	3001      	adds	r0, #1
 800b34e:	f43f af42 	beq.w	800b1d6 <_printf_float+0xb6>
 800b352:	f04f 0900 	mov.w	r9, #0
 800b356:	f108 38ff 	add.w	r8, r8, #4294967295
 800b35a:	f104 0a1a 	add.w	sl, r4, #26
 800b35e:	45c8      	cmp	r8, r9
 800b360:	dc09      	bgt.n	800b376 <_printf_float+0x256>
 800b362:	6823      	ldr	r3, [r4, #0]
 800b364:	079b      	lsls	r3, r3, #30
 800b366:	f100 8102 	bmi.w	800b56e <_printf_float+0x44e>
 800b36a:	68e0      	ldr	r0, [r4, #12]
 800b36c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b36e:	4298      	cmp	r0, r3
 800b370:	bfb8      	it	lt
 800b372:	4618      	movlt	r0, r3
 800b374:	e731      	b.n	800b1da <_printf_float+0xba>
 800b376:	2301      	movs	r3, #1
 800b378:	4652      	mov	r2, sl
 800b37a:	4631      	mov	r1, r6
 800b37c:	4628      	mov	r0, r5
 800b37e:	47b8      	blx	r7
 800b380:	3001      	adds	r0, #1
 800b382:	f43f af28 	beq.w	800b1d6 <_printf_float+0xb6>
 800b386:	f109 0901 	add.w	r9, r9, #1
 800b38a:	e7e8      	b.n	800b35e <_printf_float+0x23e>
 800b38c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b38e:	2b00      	cmp	r3, #0
 800b390:	dc38      	bgt.n	800b404 <_printf_float+0x2e4>
 800b392:	2301      	movs	r3, #1
 800b394:	4631      	mov	r1, r6
 800b396:	4628      	mov	r0, r5
 800b398:	4a19      	ldr	r2, [pc, #100]	@ (800b400 <_printf_float+0x2e0>)
 800b39a:	47b8      	blx	r7
 800b39c:	3001      	adds	r0, #1
 800b39e:	f43f af1a 	beq.w	800b1d6 <_printf_float+0xb6>
 800b3a2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b3a6:	ea59 0303 	orrs.w	r3, r9, r3
 800b3aa:	d102      	bne.n	800b3b2 <_printf_float+0x292>
 800b3ac:	6823      	ldr	r3, [r4, #0]
 800b3ae:	07d9      	lsls	r1, r3, #31
 800b3b0:	d5d7      	bpl.n	800b362 <_printf_float+0x242>
 800b3b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b3b6:	4631      	mov	r1, r6
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	47b8      	blx	r7
 800b3bc:	3001      	adds	r0, #1
 800b3be:	f43f af0a 	beq.w	800b1d6 <_printf_float+0xb6>
 800b3c2:	f04f 0a00 	mov.w	sl, #0
 800b3c6:	f104 0b1a 	add.w	fp, r4, #26
 800b3ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b3cc:	425b      	negs	r3, r3
 800b3ce:	4553      	cmp	r3, sl
 800b3d0:	dc01      	bgt.n	800b3d6 <_printf_float+0x2b6>
 800b3d2:	464b      	mov	r3, r9
 800b3d4:	e793      	b.n	800b2fe <_printf_float+0x1de>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	465a      	mov	r2, fp
 800b3da:	4631      	mov	r1, r6
 800b3dc:	4628      	mov	r0, r5
 800b3de:	47b8      	blx	r7
 800b3e0:	3001      	adds	r0, #1
 800b3e2:	f43f aef8 	beq.w	800b1d6 <_printf_float+0xb6>
 800b3e6:	f10a 0a01 	add.w	sl, sl, #1
 800b3ea:	e7ee      	b.n	800b3ca <_printf_float+0x2aa>
 800b3ec:	7fefffff 	.word	0x7fefffff
 800b3f0:	0800f064 	.word	0x0800f064
 800b3f4:	0800f068 	.word	0x0800f068
 800b3f8:	0800f06c 	.word	0x0800f06c
 800b3fc:	0800f070 	.word	0x0800f070
 800b400:	0800f074 	.word	0x0800f074
 800b404:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b406:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b40a:	4553      	cmp	r3, sl
 800b40c:	bfa8      	it	ge
 800b40e:	4653      	movge	r3, sl
 800b410:	2b00      	cmp	r3, #0
 800b412:	4699      	mov	r9, r3
 800b414:	dc36      	bgt.n	800b484 <_printf_float+0x364>
 800b416:	f04f 0b00 	mov.w	fp, #0
 800b41a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b41e:	f104 021a 	add.w	r2, r4, #26
 800b422:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b424:	930a      	str	r3, [sp, #40]	@ 0x28
 800b426:	eba3 0309 	sub.w	r3, r3, r9
 800b42a:	455b      	cmp	r3, fp
 800b42c:	dc31      	bgt.n	800b492 <_printf_float+0x372>
 800b42e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b430:	459a      	cmp	sl, r3
 800b432:	dc3a      	bgt.n	800b4aa <_printf_float+0x38a>
 800b434:	6823      	ldr	r3, [r4, #0]
 800b436:	07da      	lsls	r2, r3, #31
 800b438:	d437      	bmi.n	800b4aa <_printf_float+0x38a>
 800b43a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b43c:	ebaa 0903 	sub.w	r9, sl, r3
 800b440:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b442:	ebaa 0303 	sub.w	r3, sl, r3
 800b446:	4599      	cmp	r9, r3
 800b448:	bfa8      	it	ge
 800b44a:	4699      	movge	r9, r3
 800b44c:	f1b9 0f00 	cmp.w	r9, #0
 800b450:	dc33      	bgt.n	800b4ba <_printf_float+0x39a>
 800b452:	f04f 0800 	mov.w	r8, #0
 800b456:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b45a:	f104 0b1a 	add.w	fp, r4, #26
 800b45e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b460:	ebaa 0303 	sub.w	r3, sl, r3
 800b464:	eba3 0309 	sub.w	r3, r3, r9
 800b468:	4543      	cmp	r3, r8
 800b46a:	f77f af7a 	ble.w	800b362 <_printf_float+0x242>
 800b46e:	2301      	movs	r3, #1
 800b470:	465a      	mov	r2, fp
 800b472:	4631      	mov	r1, r6
 800b474:	4628      	mov	r0, r5
 800b476:	47b8      	blx	r7
 800b478:	3001      	adds	r0, #1
 800b47a:	f43f aeac 	beq.w	800b1d6 <_printf_float+0xb6>
 800b47e:	f108 0801 	add.w	r8, r8, #1
 800b482:	e7ec      	b.n	800b45e <_printf_float+0x33e>
 800b484:	4642      	mov	r2, r8
 800b486:	4631      	mov	r1, r6
 800b488:	4628      	mov	r0, r5
 800b48a:	47b8      	blx	r7
 800b48c:	3001      	adds	r0, #1
 800b48e:	d1c2      	bne.n	800b416 <_printf_float+0x2f6>
 800b490:	e6a1      	b.n	800b1d6 <_printf_float+0xb6>
 800b492:	2301      	movs	r3, #1
 800b494:	4631      	mov	r1, r6
 800b496:	4628      	mov	r0, r5
 800b498:	920a      	str	r2, [sp, #40]	@ 0x28
 800b49a:	47b8      	blx	r7
 800b49c:	3001      	adds	r0, #1
 800b49e:	f43f ae9a 	beq.w	800b1d6 <_printf_float+0xb6>
 800b4a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4a4:	f10b 0b01 	add.w	fp, fp, #1
 800b4a8:	e7bb      	b.n	800b422 <_printf_float+0x302>
 800b4aa:	4631      	mov	r1, r6
 800b4ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b4b0:	4628      	mov	r0, r5
 800b4b2:	47b8      	blx	r7
 800b4b4:	3001      	adds	r0, #1
 800b4b6:	d1c0      	bne.n	800b43a <_printf_float+0x31a>
 800b4b8:	e68d      	b.n	800b1d6 <_printf_float+0xb6>
 800b4ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4bc:	464b      	mov	r3, r9
 800b4be:	4631      	mov	r1, r6
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	4442      	add	r2, r8
 800b4c4:	47b8      	blx	r7
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	d1c3      	bne.n	800b452 <_printf_float+0x332>
 800b4ca:	e684      	b.n	800b1d6 <_printf_float+0xb6>
 800b4cc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b4d0:	f1ba 0f01 	cmp.w	sl, #1
 800b4d4:	dc01      	bgt.n	800b4da <_printf_float+0x3ba>
 800b4d6:	07db      	lsls	r3, r3, #31
 800b4d8:	d536      	bpl.n	800b548 <_printf_float+0x428>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	4642      	mov	r2, r8
 800b4de:	4631      	mov	r1, r6
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	47b8      	blx	r7
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	f43f ae76 	beq.w	800b1d6 <_printf_float+0xb6>
 800b4ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b4ee:	4631      	mov	r1, r6
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	47b8      	blx	r7
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	f43f ae6e 	beq.w	800b1d6 <_printf_float+0xb6>
 800b4fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b4fe:	2200      	movs	r2, #0
 800b500:	2300      	movs	r3, #0
 800b502:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b506:	f7f5 fa4f 	bl	80009a8 <__aeabi_dcmpeq>
 800b50a:	b9c0      	cbnz	r0, 800b53e <_printf_float+0x41e>
 800b50c:	4653      	mov	r3, sl
 800b50e:	f108 0201 	add.w	r2, r8, #1
 800b512:	4631      	mov	r1, r6
 800b514:	4628      	mov	r0, r5
 800b516:	47b8      	blx	r7
 800b518:	3001      	adds	r0, #1
 800b51a:	d10c      	bne.n	800b536 <_printf_float+0x416>
 800b51c:	e65b      	b.n	800b1d6 <_printf_float+0xb6>
 800b51e:	2301      	movs	r3, #1
 800b520:	465a      	mov	r2, fp
 800b522:	4631      	mov	r1, r6
 800b524:	4628      	mov	r0, r5
 800b526:	47b8      	blx	r7
 800b528:	3001      	adds	r0, #1
 800b52a:	f43f ae54 	beq.w	800b1d6 <_printf_float+0xb6>
 800b52e:	f108 0801 	add.w	r8, r8, #1
 800b532:	45d0      	cmp	r8, sl
 800b534:	dbf3      	blt.n	800b51e <_printf_float+0x3fe>
 800b536:	464b      	mov	r3, r9
 800b538:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b53c:	e6e0      	b.n	800b300 <_printf_float+0x1e0>
 800b53e:	f04f 0800 	mov.w	r8, #0
 800b542:	f104 0b1a 	add.w	fp, r4, #26
 800b546:	e7f4      	b.n	800b532 <_printf_float+0x412>
 800b548:	2301      	movs	r3, #1
 800b54a:	4642      	mov	r2, r8
 800b54c:	e7e1      	b.n	800b512 <_printf_float+0x3f2>
 800b54e:	2301      	movs	r3, #1
 800b550:	464a      	mov	r2, r9
 800b552:	4631      	mov	r1, r6
 800b554:	4628      	mov	r0, r5
 800b556:	47b8      	blx	r7
 800b558:	3001      	adds	r0, #1
 800b55a:	f43f ae3c 	beq.w	800b1d6 <_printf_float+0xb6>
 800b55e:	f108 0801 	add.w	r8, r8, #1
 800b562:	68e3      	ldr	r3, [r4, #12]
 800b564:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b566:	1a5b      	subs	r3, r3, r1
 800b568:	4543      	cmp	r3, r8
 800b56a:	dcf0      	bgt.n	800b54e <_printf_float+0x42e>
 800b56c:	e6fd      	b.n	800b36a <_printf_float+0x24a>
 800b56e:	f04f 0800 	mov.w	r8, #0
 800b572:	f104 0919 	add.w	r9, r4, #25
 800b576:	e7f4      	b.n	800b562 <_printf_float+0x442>

0800b578 <_printf_common>:
 800b578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b57c:	4616      	mov	r6, r2
 800b57e:	4698      	mov	r8, r3
 800b580:	688a      	ldr	r2, [r1, #8]
 800b582:	690b      	ldr	r3, [r1, #16]
 800b584:	4607      	mov	r7, r0
 800b586:	4293      	cmp	r3, r2
 800b588:	bfb8      	it	lt
 800b58a:	4613      	movlt	r3, r2
 800b58c:	6033      	str	r3, [r6, #0]
 800b58e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b592:	460c      	mov	r4, r1
 800b594:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b598:	b10a      	cbz	r2, 800b59e <_printf_common+0x26>
 800b59a:	3301      	adds	r3, #1
 800b59c:	6033      	str	r3, [r6, #0]
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	0699      	lsls	r1, r3, #26
 800b5a2:	bf42      	ittt	mi
 800b5a4:	6833      	ldrmi	r3, [r6, #0]
 800b5a6:	3302      	addmi	r3, #2
 800b5a8:	6033      	strmi	r3, [r6, #0]
 800b5aa:	6825      	ldr	r5, [r4, #0]
 800b5ac:	f015 0506 	ands.w	r5, r5, #6
 800b5b0:	d106      	bne.n	800b5c0 <_printf_common+0x48>
 800b5b2:	f104 0a19 	add.w	sl, r4, #25
 800b5b6:	68e3      	ldr	r3, [r4, #12]
 800b5b8:	6832      	ldr	r2, [r6, #0]
 800b5ba:	1a9b      	subs	r3, r3, r2
 800b5bc:	42ab      	cmp	r3, r5
 800b5be:	dc2b      	bgt.n	800b618 <_printf_common+0xa0>
 800b5c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b5c4:	6822      	ldr	r2, [r4, #0]
 800b5c6:	3b00      	subs	r3, #0
 800b5c8:	bf18      	it	ne
 800b5ca:	2301      	movne	r3, #1
 800b5cc:	0692      	lsls	r2, r2, #26
 800b5ce:	d430      	bmi.n	800b632 <_printf_common+0xba>
 800b5d0:	4641      	mov	r1, r8
 800b5d2:	4638      	mov	r0, r7
 800b5d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b5d8:	47c8      	blx	r9
 800b5da:	3001      	adds	r0, #1
 800b5dc:	d023      	beq.n	800b626 <_printf_common+0xae>
 800b5de:	6823      	ldr	r3, [r4, #0]
 800b5e0:	6922      	ldr	r2, [r4, #16]
 800b5e2:	f003 0306 	and.w	r3, r3, #6
 800b5e6:	2b04      	cmp	r3, #4
 800b5e8:	bf14      	ite	ne
 800b5ea:	2500      	movne	r5, #0
 800b5ec:	6833      	ldreq	r3, [r6, #0]
 800b5ee:	f04f 0600 	mov.w	r6, #0
 800b5f2:	bf08      	it	eq
 800b5f4:	68e5      	ldreq	r5, [r4, #12]
 800b5f6:	f104 041a 	add.w	r4, r4, #26
 800b5fa:	bf08      	it	eq
 800b5fc:	1aed      	subeq	r5, r5, r3
 800b5fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b602:	bf08      	it	eq
 800b604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b608:	4293      	cmp	r3, r2
 800b60a:	bfc4      	itt	gt
 800b60c:	1a9b      	subgt	r3, r3, r2
 800b60e:	18ed      	addgt	r5, r5, r3
 800b610:	42b5      	cmp	r5, r6
 800b612:	d11a      	bne.n	800b64a <_printf_common+0xd2>
 800b614:	2000      	movs	r0, #0
 800b616:	e008      	b.n	800b62a <_printf_common+0xb2>
 800b618:	2301      	movs	r3, #1
 800b61a:	4652      	mov	r2, sl
 800b61c:	4641      	mov	r1, r8
 800b61e:	4638      	mov	r0, r7
 800b620:	47c8      	blx	r9
 800b622:	3001      	adds	r0, #1
 800b624:	d103      	bne.n	800b62e <_printf_common+0xb6>
 800b626:	f04f 30ff 	mov.w	r0, #4294967295
 800b62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b62e:	3501      	adds	r5, #1
 800b630:	e7c1      	b.n	800b5b6 <_printf_common+0x3e>
 800b632:	2030      	movs	r0, #48	@ 0x30
 800b634:	18e1      	adds	r1, r4, r3
 800b636:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b63a:	1c5a      	adds	r2, r3, #1
 800b63c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b640:	4422      	add	r2, r4
 800b642:	3302      	adds	r3, #2
 800b644:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b648:	e7c2      	b.n	800b5d0 <_printf_common+0x58>
 800b64a:	2301      	movs	r3, #1
 800b64c:	4622      	mov	r2, r4
 800b64e:	4641      	mov	r1, r8
 800b650:	4638      	mov	r0, r7
 800b652:	47c8      	blx	r9
 800b654:	3001      	adds	r0, #1
 800b656:	d0e6      	beq.n	800b626 <_printf_common+0xae>
 800b658:	3601      	adds	r6, #1
 800b65a:	e7d9      	b.n	800b610 <_printf_common+0x98>

0800b65c <_printf_i>:
 800b65c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b660:	7e0f      	ldrb	r7, [r1, #24]
 800b662:	4691      	mov	r9, r2
 800b664:	2f78      	cmp	r7, #120	@ 0x78
 800b666:	4680      	mov	r8, r0
 800b668:	460c      	mov	r4, r1
 800b66a:	469a      	mov	sl, r3
 800b66c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b66e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b672:	d807      	bhi.n	800b684 <_printf_i+0x28>
 800b674:	2f62      	cmp	r7, #98	@ 0x62
 800b676:	d80a      	bhi.n	800b68e <_printf_i+0x32>
 800b678:	2f00      	cmp	r7, #0
 800b67a:	f000 80d3 	beq.w	800b824 <_printf_i+0x1c8>
 800b67e:	2f58      	cmp	r7, #88	@ 0x58
 800b680:	f000 80ba 	beq.w	800b7f8 <_printf_i+0x19c>
 800b684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b688:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b68c:	e03a      	b.n	800b704 <_printf_i+0xa8>
 800b68e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b692:	2b15      	cmp	r3, #21
 800b694:	d8f6      	bhi.n	800b684 <_printf_i+0x28>
 800b696:	a101      	add	r1, pc, #4	@ (adr r1, 800b69c <_printf_i+0x40>)
 800b698:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b69c:	0800b6f5 	.word	0x0800b6f5
 800b6a0:	0800b709 	.word	0x0800b709
 800b6a4:	0800b685 	.word	0x0800b685
 800b6a8:	0800b685 	.word	0x0800b685
 800b6ac:	0800b685 	.word	0x0800b685
 800b6b0:	0800b685 	.word	0x0800b685
 800b6b4:	0800b709 	.word	0x0800b709
 800b6b8:	0800b685 	.word	0x0800b685
 800b6bc:	0800b685 	.word	0x0800b685
 800b6c0:	0800b685 	.word	0x0800b685
 800b6c4:	0800b685 	.word	0x0800b685
 800b6c8:	0800b80b 	.word	0x0800b80b
 800b6cc:	0800b733 	.word	0x0800b733
 800b6d0:	0800b7c5 	.word	0x0800b7c5
 800b6d4:	0800b685 	.word	0x0800b685
 800b6d8:	0800b685 	.word	0x0800b685
 800b6dc:	0800b82d 	.word	0x0800b82d
 800b6e0:	0800b685 	.word	0x0800b685
 800b6e4:	0800b733 	.word	0x0800b733
 800b6e8:	0800b685 	.word	0x0800b685
 800b6ec:	0800b685 	.word	0x0800b685
 800b6f0:	0800b7cd 	.word	0x0800b7cd
 800b6f4:	6833      	ldr	r3, [r6, #0]
 800b6f6:	1d1a      	adds	r2, r3, #4
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	6032      	str	r2, [r6, #0]
 800b6fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b700:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b704:	2301      	movs	r3, #1
 800b706:	e09e      	b.n	800b846 <_printf_i+0x1ea>
 800b708:	6833      	ldr	r3, [r6, #0]
 800b70a:	6820      	ldr	r0, [r4, #0]
 800b70c:	1d19      	adds	r1, r3, #4
 800b70e:	6031      	str	r1, [r6, #0]
 800b710:	0606      	lsls	r6, r0, #24
 800b712:	d501      	bpl.n	800b718 <_printf_i+0xbc>
 800b714:	681d      	ldr	r5, [r3, #0]
 800b716:	e003      	b.n	800b720 <_printf_i+0xc4>
 800b718:	0645      	lsls	r5, r0, #25
 800b71a:	d5fb      	bpl.n	800b714 <_printf_i+0xb8>
 800b71c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b720:	2d00      	cmp	r5, #0
 800b722:	da03      	bge.n	800b72c <_printf_i+0xd0>
 800b724:	232d      	movs	r3, #45	@ 0x2d
 800b726:	426d      	negs	r5, r5
 800b728:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b72c:	230a      	movs	r3, #10
 800b72e:	4859      	ldr	r0, [pc, #356]	@ (800b894 <_printf_i+0x238>)
 800b730:	e011      	b.n	800b756 <_printf_i+0xfa>
 800b732:	6821      	ldr	r1, [r4, #0]
 800b734:	6833      	ldr	r3, [r6, #0]
 800b736:	0608      	lsls	r0, r1, #24
 800b738:	f853 5b04 	ldr.w	r5, [r3], #4
 800b73c:	d402      	bmi.n	800b744 <_printf_i+0xe8>
 800b73e:	0649      	lsls	r1, r1, #25
 800b740:	bf48      	it	mi
 800b742:	b2ad      	uxthmi	r5, r5
 800b744:	2f6f      	cmp	r7, #111	@ 0x6f
 800b746:	6033      	str	r3, [r6, #0]
 800b748:	bf14      	ite	ne
 800b74a:	230a      	movne	r3, #10
 800b74c:	2308      	moveq	r3, #8
 800b74e:	4851      	ldr	r0, [pc, #324]	@ (800b894 <_printf_i+0x238>)
 800b750:	2100      	movs	r1, #0
 800b752:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b756:	6866      	ldr	r6, [r4, #4]
 800b758:	2e00      	cmp	r6, #0
 800b75a:	bfa8      	it	ge
 800b75c:	6821      	ldrge	r1, [r4, #0]
 800b75e:	60a6      	str	r6, [r4, #8]
 800b760:	bfa4      	itt	ge
 800b762:	f021 0104 	bicge.w	r1, r1, #4
 800b766:	6021      	strge	r1, [r4, #0]
 800b768:	b90d      	cbnz	r5, 800b76e <_printf_i+0x112>
 800b76a:	2e00      	cmp	r6, #0
 800b76c:	d04b      	beq.n	800b806 <_printf_i+0x1aa>
 800b76e:	4616      	mov	r6, r2
 800b770:	fbb5 f1f3 	udiv	r1, r5, r3
 800b774:	fb03 5711 	mls	r7, r3, r1, r5
 800b778:	5dc7      	ldrb	r7, [r0, r7]
 800b77a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b77e:	462f      	mov	r7, r5
 800b780:	42bb      	cmp	r3, r7
 800b782:	460d      	mov	r5, r1
 800b784:	d9f4      	bls.n	800b770 <_printf_i+0x114>
 800b786:	2b08      	cmp	r3, #8
 800b788:	d10b      	bne.n	800b7a2 <_printf_i+0x146>
 800b78a:	6823      	ldr	r3, [r4, #0]
 800b78c:	07df      	lsls	r7, r3, #31
 800b78e:	d508      	bpl.n	800b7a2 <_printf_i+0x146>
 800b790:	6923      	ldr	r3, [r4, #16]
 800b792:	6861      	ldr	r1, [r4, #4]
 800b794:	4299      	cmp	r1, r3
 800b796:	bfde      	ittt	le
 800b798:	2330      	movle	r3, #48	@ 0x30
 800b79a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b79e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b7a2:	1b92      	subs	r2, r2, r6
 800b7a4:	6122      	str	r2, [r4, #16]
 800b7a6:	464b      	mov	r3, r9
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	4640      	mov	r0, r8
 800b7ac:	f8cd a000 	str.w	sl, [sp]
 800b7b0:	aa03      	add	r2, sp, #12
 800b7b2:	f7ff fee1 	bl	800b578 <_printf_common>
 800b7b6:	3001      	adds	r0, #1
 800b7b8:	d14a      	bne.n	800b850 <_printf_i+0x1f4>
 800b7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b7be:	b004      	add	sp, #16
 800b7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7c4:	6823      	ldr	r3, [r4, #0]
 800b7c6:	f043 0320 	orr.w	r3, r3, #32
 800b7ca:	6023      	str	r3, [r4, #0]
 800b7cc:	2778      	movs	r7, #120	@ 0x78
 800b7ce:	4832      	ldr	r0, [pc, #200]	@ (800b898 <_printf_i+0x23c>)
 800b7d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b7d4:	6823      	ldr	r3, [r4, #0]
 800b7d6:	6831      	ldr	r1, [r6, #0]
 800b7d8:	061f      	lsls	r7, r3, #24
 800b7da:	f851 5b04 	ldr.w	r5, [r1], #4
 800b7de:	d402      	bmi.n	800b7e6 <_printf_i+0x18a>
 800b7e0:	065f      	lsls	r7, r3, #25
 800b7e2:	bf48      	it	mi
 800b7e4:	b2ad      	uxthmi	r5, r5
 800b7e6:	6031      	str	r1, [r6, #0]
 800b7e8:	07d9      	lsls	r1, r3, #31
 800b7ea:	bf44      	itt	mi
 800b7ec:	f043 0320 	orrmi.w	r3, r3, #32
 800b7f0:	6023      	strmi	r3, [r4, #0]
 800b7f2:	b11d      	cbz	r5, 800b7fc <_printf_i+0x1a0>
 800b7f4:	2310      	movs	r3, #16
 800b7f6:	e7ab      	b.n	800b750 <_printf_i+0xf4>
 800b7f8:	4826      	ldr	r0, [pc, #152]	@ (800b894 <_printf_i+0x238>)
 800b7fa:	e7e9      	b.n	800b7d0 <_printf_i+0x174>
 800b7fc:	6823      	ldr	r3, [r4, #0]
 800b7fe:	f023 0320 	bic.w	r3, r3, #32
 800b802:	6023      	str	r3, [r4, #0]
 800b804:	e7f6      	b.n	800b7f4 <_printf_i+0x198>
 800b806:	4616      	mov	r6, r2
 800b808:	e7bd      	b.n	800b786 <_printf_i+0x12a>
 800b80a:	6833      	ldr	r3, [r6, #0]
 800b80c:	6825      	ldr	r5, [r4, #0]
 800b80e:	1d18      	adds	r0, r3, #4
 800b810:	6961      	ldr	r1, [r4, #20]
 800b812:	6030      	str	r0, [r6, #0]
 800b814:	062e      	lsls	r6, r5, #24
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	d501      	bpl.n	800b81e <_printf_i+0x1c2>
 800b81a:	6019      	str	r1, [r3, #0]
 800b81c:	e002      	b.n	800b824 <_printf_i+0x1c8>
 800b81e:	0668      	lsls	r0, r5, #25
 800b820:	d5fb      	bpl.n	800b81a <_printf_i+0x1be>
 800b822:	8019      	strh	r1, [r3, #0]
 800b824:	2300      	movs	r3, #0
 800b826:	4616      	mov	r6, r2
 800b828:	6123      	str	r3, [r4, #16]
 800b82a:	e7bc      	b.n	800b7a6 <_printf_i+0x14a>
 800b82c:	6833      	ldr	r3, [r6, #0]
 800b82e:	2100      	movs	r1, #0
 800b830:	1d1a      	adds	r2, r3, #4
 800b832:	6032      	str	r2, [r6, #0]
 800b834:	681e      	ldr	r6, [r3, #0]
 800b836:	6862      	ldr	r2, [r4, #4]
 800b838:	4630      	mov	r0, r6
 800b83a:	f000 f9d4 	bl	800bbe6 <memchr>
 800b83e:	b108      	cbz	r0, 800b844 <_printf_i+0x1e8>
 800b840:	1b80      	subs	r0, r0, r6
 800b842:	6060      	str	r0, [r4, #4]
 800b844:	6863      	ldr	r3, [r4, #4]
 800b846:	6123      	str	r3, [r4, #16]
 800b848:	2300      	movs	r3, #0
 800b84a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b84e:	e7aa      	b.n	800b7a6 <_printf_i+0x14a>
 800b850:	4632      	mov	r2, r6
 800b852:	4649      	mov	r1, r9
 800b854:	4640      	mov	r0, r8
 800b856:	6923      	ldr	r3, [r4, #16]
 800b858:	47d0      	blx	sl
 800b85a:	3001      	adds	r0, #1
 800b85c:	d0ad      	beq.n	800b7ba <_printf_i+0x15e>
 800b85e:	6823      	ldr	r3, [r4, #0]
 800b860:	079b      	lsls	r3, r3, #30
 800b862:	d413      	bmi.n	800b88c <_printf_i+0x230>
 800b864:	68e0      	ldr	r0, [r4, #12]
 800b866:	9b03      	ldr	r3, [sp, #12]
 800b868:	4298      	cmp	r0, r3
 800b86a:	bfb8      	it	lt
 800b86c:	4618      	movlt	r0, r3
 800b86e:	e7a6      	b.n	800b7be <_printf_i+0x162>
 800b870:	2301      	movs	r3, #1
 800b872:	4632      	mov	r2, r6
 800b874:	4649      	mov	r1, r9
 800b876:	4640      	mov	r0, r8
 800b878:	47d0      	blx	sl
 800b87a:	3001      	adds	r0, #1
 800b87c:	d09d      	beq.n	800b7ba <_printf_i+0x15e>
 800b87e:	3501      	adds	r5, #1
 800b880:	68e3      	ldr	r3, [r4, #12]
 800b882:	9903      	ldr	r1, [sp, #12]
 800b884:	1a5b      	subs	r3, r3, r1
 800b886:	42ab      	cmp	r3, r5
 800b888:	dcf2      	bgt.n	800b870 <_printf_i+0x214>
 800b88a:	e7eb      	b.n	800b864 <_printf_i+0x208>
 800b88c:	2500      	movs	r5, #0
 800b88e:	f104 0619 	add.w	r6, r4, #25
 800b892:	e7f5      	b.n	800b880 <_printf_i+0x224>
 800b894:	0800f076 	.word	0x0800f076
 800b898:	0800f087 	.word	0x0800f087

0800b89c <std>:
 800b89c:	2300      	movs	r3, #0
 800b89e:	b510      	push	{r4, lr}
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	e9c0 3300 	strd	r3, r3, [r0]
 800b8a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8aa:	6083      	str	r3, [r0, #8]
 800b8ac:	8181      	strh	r1, [r0, #12]
 800b8ae:	6643      	str	r3, [r0, #100]	@ 0x64
 800b8b0:	81c2      	strh	r2, [r0, #14]
 800b8b2:	6183      	str	r3, [r0, #24]
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	2208      	movs	r2, #8
 800b8b8:	305c      	adds	r0, #92	@ 0x5c
 800b8ba:	f000 f914 	bl	800bae6 <memset>
 800b8be:	4b0d      	ldr	r3, [pc, #52]	@ (800b8f4 <std+0x58>)
 800b8c0:	6224      	str	r4, [r4, #32]
 800b8c2:	6263      	str	r3, [r4, #36]	@ 0x24
 800b8c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b8f8 <std+0x5c>)
 800b8c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b8c8:	4b0c      	ldr	r3, [pc, #48]	@ (800b8fc <std+0x60>)
 800b8ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b8cc:	4b0c      	ldr	r3, [pc, #48]	@ (800b900 <std+0x64>)
 800b8ce:	6323      	str	r3, [r4, #48]	@ 0x30
 800b8d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b904 <std+0x68>)
 800b8d2:	429c      	cmp	r4, r3
 800b8d4:	d006      	beq.n	800b8e4 <std+0x48>
 800b8d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b8da:	4294      	cmp	r4, r2
 800b8dc:	d002      	beq.n	800b8e4 <std+0x48>
 800b8de:	33d0      	adds	r3, #208	@ 0xd0
 800b8e0:	429c      	cmp	r4, r3
 800b8e2:	d105      	bne.n	800b8f0 <std+0x54>
 800b8e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b8e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8ec:	f000 b978 	b.w	800bbe0 <__retarget_lock_init_recursive>
 800b8f0:	bd10      	pop	{r4, pc}
 800b8f2:	bf00      	nop
 800b8f4:	0800ba61 	.word	0x0800ba61
 800b8f8:	0800ba83 	.word	0x0800ba83
 800b8fc:	0800babb 	.word	0x0800babb
 800b900:	0800badf 	.word	0x0800badf
 800b904:	20002bbc 	.word	0x20002bbc

0800b908 <stdio_exit_handler>:
 800b908:	4a02      	ldr	r2, [pc, #8]	@ (800b914 <stdio_exit_handler+0xc>)
 800b90a:	4903      	ldr	r1, [pc, #12]	@ (800b918 <stdio_exit_handler+0x10>)
 800b90c:	4803      	ldr	r0, [pc, #12]	@ (800b91c <stdio_exit_handler+0x14>)
 800b90e:	f000 b869 	b.w	800b9e4 <_fwalk_sglue>
 800b912:	bf00      	nop
 800b914:	2000002c 	.word	0x2000002c
 800b918:	0800d555 	.word	0x0800d555
 800b91c:	2000003c 	.word	0x2000003c

0800b920 <cleanup_stdio>:
 800b920:	6841      	ldr	r1, [r0, #4]
 800b922:	4b0c      	ldr	r3, [pc, #48]	@ (800b954 <cleanup_stdio+0x34>)
 800b924:	b510      	push	{r4, lr}
 800b926:	4299      	cmp	r1, r3
 800b928:	4604      	mov	r4, r0
 800b92a:	d001      	beq.n	800b930 <cleanup_stdio+0x10>
 800b92c:	f001 fe12 	bl	800d554 <_fflush_r>
 800b930:	68a1      	ldr	r1, [r4, #8]
 800b932:	4b09      	ldr	r3, [pc, #36]	@ (800b958 <cleanup_stdio+0x38>)
 800b934:	4299      	cmp	r1, r3
 800b936:	d002      	beq.n	800b93e <cleanup_stdio+0x1e>
 800b938:	4620      	mov	r0, r4
 800b93a:	f001 fe0b 	bl	800d554 <_fflush_r>
 800b93e:	68e1      	ldr	r1, [r4, #12]
 800b940:	4b06      	ldr	r3, [pc, #24]	@ (800b95c <cleanup_stdio+0x3c>)
 800b942:	4299      	cmp	r1, r3
 800b944:	d004      	beq.n	800b950 <cleanup_stdio+0x30>
 800b946:	4620      	mov	r0, r4
 800b948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b94c:	f001 be02 	b.w	800d554 <_fflush_r>
 800b950:	bd10      	pop	{r4, pc}
 800b952:	bf00      	nop
 800b954:	20002bbc 	.word	0x20002bbc
 800b958:	20002c24 	.word	0x20002c24
 800b95c:	20002c8c 	.word	0x20002c8c

0800b960 <global_stdio_init.part.0>:
 800b960:	b510      	push	{r4, lr}
 800b962:	4b0b      	ldr	r3, [pc, #44]	@ (800b990 <global_stdio_init.part.0+0x30>)
 800b964:	4c0b      	ldr	r4, [pc, #44]	@ (800b994 <global_stdio_init.part.0+0x34>)
 800b966:	4a0c      	ldr	r2, [pc, #48]	@ (800b998 <global_stdio_init.part.0+0x38>)
 800b968:	4620      	mov	r0, r4
 800b96a:	601a      	str	r2, [r3, #0]
 800b96c:	2104      	movs	r1, #4
 800b96e:	2200      	movs	r2, #0
 800b970:	f7ff ff94 	bl	800b89c <std>
 800b974:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b978:	2201      	movs	r2, #1
 800b97a:	2109      	movs	r1, #9
 800b97c:	f7ff ff8e 	bl	800b89c <std>
 800b980:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b984:	2202      	movs	r2, #2
 800b986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b98a:	2112      	movs	r1, #18
 800b98c:	f7ff bf86 	b.w	800b89c <std>
 800b990:	20002cf4 	.word	0x20002cf4
 800b994:	20002bbc 	.word	0x20002bbc
 800b998:	0800b909 	.word	0x0800b909

0800b99c <__sfp_lock_acquire>:
 800b99c:	4801      	ldr	r0, [pc, #4]	@ (800b9a4 <__sfp_lock_acquire+0x8>)
 800b99e:	f000 b920 	b.w	800bbe2 <__retarget_lock_acquire_recursive>
 800b9a2:	bf00      	nop
 800b9a4:	20002cfd 	.word	0x20002cfd

0800b9a8 <__sfp_lock_release>:
 800b9a8:	4801      	ldr	r0, [pc, #4]	@ (800b9b0 <__sfp_lock_release+0x8>)
 800b9aa:	f000 b91b 	b.w	800bbe4 <__retarget_lock_release_recursive>
 800b9ae:	bf00      	nop
 800b9b0:	20002cfd 	.word	0x20002cfd

0800b9b4 <__sinit>:
 800b9b4:	b510      	push	{r4, lr}
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	f7ff fff0 	bl	800b99c <__sfp_lock_acquire>
 800b9bc:	6a23      	ldr	r3, [r4, #32]
 800b9be:	b11b      	cbz	r3, 800b9c8 <__sinit+0x14>
 800b9c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9c4:	f7ff bff0 	b.w	800b9a8 <__sfp_lock_release>
 800b9c8:	4b04      	ldr	r3, [pc, #16]	@ (800b9dc <__sinit+0x28>)
 800b9ca:	6223      	str	r3, [r4, #32]
 800b9cc:	4b04      	ldr	r3, [pc, #16]	@ (800b9e0 <__sinit+0x2c>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d1f5      	bne.n	800b9c0 <__sinit+0xc>
 800b9d4:	f7ff ffc4 	bl	800b960 <global_stdio_init.part.0>
 800b9d8:	e7f2      	b.n	800b9c0 <__sinit+0xc>
 800b9da:	bf00      	nop
 800b9dc:	0800b921 	.word	0x0800b921
 800b9e0:	20002cf4 	.word	0x20002cf4

0800b9e4 <_fwalk_sglue>:
 800b9e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9e8:	4607      	mov	r7, r0
 800b9ea:	4688      	mov	r8, r1
 800b9ec:	4614      	mov	r4, r2
 800b9ee:	2600      	movs	r6, #0
 800b9f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9f4:	f1b9 0901 	subs.w	r9, r9, #1
 800b9f8:	d505      	bpl.n	800ba06 <_fwalk_sglue+0x22>
 800b9fa:	6824      	ldr	r4, [r4, #0]
 800b9fc:	2c00      	cmp	r4, #0
 800b9fe:	d1f7      	bne.n	800b9f0 <_fwalk_sglue+0xc>
 800ba00:	4630      	mov	r0, r6
 800ba02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba06:	89ab      	ldrh	r3, [r5, #12]
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d907      	bls.n	800ba1c <_fwalk_sglue+0x38>
 800ba0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba10:	3301      	adds	r3, #1
 800ba12:	d003      	beq.n	800ba1c <_fwalk_sglue+0x38>
 800ba14:	4629      	mov	r1, r5
 800ba16:	4638      	mov	r0, r7
 800ba18:	47c0      	blx	r8
 800ba1a:	4306      	orrs	r6, r0
 800ba1c:	3568      	adds	r5, #104	@ 0x68
 800ba1e:	e7e9      	b.n	800b9f4 <_fwalk_sglue+0x10>

0800ba20 <siprintf>:
 800ba20:	b40e      	push	{r1, r2, r3}
 800ba22:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ba26:	b500      	push	{lr}
 800ba28:	b09c      	sub	sp, #112	@ 0x70
 800ba2a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ba2c:	9002      	str	r0, [sp, #8]
 800ba2e:	9006      	str	r0, [sp, #24]
 800ba30:	9107      	str	r1, [sp, #28]
 800ba32:	9104      	str	r1, [sp, #16]
 800ba34:	4808      	ldr	r0, [pc, #32]	@ (800ba58 <siprintf+0x38>)
 800ba36:	4909      	ldr	r1, [pc, #36]	@ (800ba5c <siprintf+0x3c>)
 800ba38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba3c:	9105      	str	r1, [sp, #20]
 800ba3e:	6800      	ldr	r0, [r0, #0]
 800ba40:	a902      	add	r1, sp, #8
 800ba42:	9301      	str	r3, [sp, #4]
 800ba44:	f001 fc0a 	bl	800d25c <_svfiprintf_r>
 800ba48:	2200      	movs	r2, #0
 800ba4a:	9b02      	ldr	r3, [sp, #8]
 800ba4c:	701a      	strb	r2, [r3, #0]
 800ba4e:	b01c      	add	sp, #112	@ 0x70
 800ba50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba54:	b003      	add	sp, #12
 800ba56:	4770      	bx	lr
 800ba58:	20000038 	.word	0x20000038
 800ba5c:	ffff0208 	.word	0xffff0208

0800ba60 <__sread>:
 800ba60:	b510      	push	{r4, lr}
 800ba62:	460c      	mov	r4, r1
 800ba64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba68:	f000 f86c 	bl	800bb44 <_read_r>
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	bfab      	itete	ge
 800ba70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ba72:	89a3      	ldrhlt	r3, [r4, #12]
 800ba74:	181b      	addge	r3, r3, r0
 800ba76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ba7a:	bfac      	ite	ge
 800ba7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ba7e:	81a3      	strhlt	r3, [r4, #12]
 800ba80:	bd10      	pop	{r4, pc}

0800ba82 <__swrite>:
 800ba82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba86:	461f      	mov	r7, r3
 800ba88:	898b      	ldrh	r3, [r1, #12]
 800ba8a:	4605      	mov	r5, r0
 800ba8c:	05db      	lsls	r3, r3, #23
 800ba8e:	460c      	mov	r4, r1
 800ba90:	4616      	mov	r6, r2
 800ba92:	d505      	bpl.n	800baa0 <__swrite+0x1e>
 800ba94:	2302      	movs	r3, #2
 800ba96:	2200      	movs	r2, #0
 800ba98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba9c:	f000 f840 	bl	800bb20 <_lseek_r>
 800baa0:	89a3      	ldrh	r3, [r4, #12]
 800baa2:	4632      	mov	r2, r6
 800baa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800baa8:	81a3      	strh	r3, [r4, #12]
 800baaa:	4628      	mov	r0, r5
 800baac:	463b      	mov	r3, r7
 800baae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bab6:	f000 b857 	b.w	800bb68 <_write_r>

0800baba <__sseek>:
 800baba:	b510      	push	{r4, lr}
 800babc:	460c      	mov	r4, r1
 800babe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bac2:	f000 f82d 	bl	800bb20 <_lseek_r>
 800bac6:	1c43      	adds	r3, r0, #1
 800bac8:	89a3      	ldrh	r3, [r4, #12]
 800baca:	bf15      	itete	ne
 800bacc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bace:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bad2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bad6:	81a3      	strheq	r3, [r4, #12]
 800bad8:	bf18      	it	ne
 800bada:	81a3      	strhne	r3, [r4, #12]
 800badc:	bd10      	pop	{r4, pc}

0800bade <__sclose>:
 800bade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bae2:	f000 b80d 	b.w	800bb00 <_close_r>

0800bae6 <memset>:
 800bae6:	4603      	mov	r3, r0
 800bae8:	4402      	add	r2, r0
 800baea:	4293      	cmp	r3, r2
 800baec:	d100      	bne.n	800baf0 <memset+0xa>
 800baee:	4770      	bx	lr
 800baf0:	f803 1b01 	strb.w	r1, [r3], #1
 800baf4:	e7f9      	b.n	800baea <memset+0x4>
	...

0800baf8 <_localeconv_r>:
 800baf8:	4800      	ldr	r0, [pc, #0]	@ (800bafc <_localeconv_r+0x4>)
 800bafa:	4770      	bx	lr
 800bafc:	20000178 	.word	0x20000178

0800bb00 <_close_r>:
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	2300      	movs	r3, #0
 800bb04:	4d05      	ldr	r5, [pc, #20]	@ (800bb1c <_close_r+0x1c>)
 800bb06:	4604      	mov	r4, r0
 800bb08:	4608      	mov	r0, r1
 800bb0a:	602b      	str	r3, [r5, #0]
 800bb0c:	f7f7 f89d 	bl	8002c4a <_close>
 800bb10:	1c43      	adds	r3, r0, #1
 800bb12:	d102      	bne.n	800bb1a <_close_r+0x1a>
 800bb14:	682b      	ldr	r3, [r5, #0]
 800bb16:	b103      	cbz	r3, 800bb1a <_close_r+0x1a>
 800bb18:	6023      	str	r3, [r4, #0]
 800bb1a:	bd38      	pop	{r3, r4, r5, pc}
 800bb1c:	20002cf8 	.word	0x20002cf8

0800bb20 <_lseek_r>:
 800bb20:	b538      	push	{r3, r4, r5, lr}
 800bb22:	4604      	mov	r4, r0
 800bb24:	4608      	mov	r0, r1
 800bb26:	4611      	mov	r1, r2
 800bb28:	2200      	movs	r2, #0
 800bb2a:	4d05      	ldr	r5, [pc, #20]	@ (800bb40 <_lseek_r+0x20>)
 800bb2c:	602a      	str	r2, [r5, #0]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	f7f7 f8af 	bl	8002c92 <_lseek>
 800bb34:	1c43      	adds	r3, r0, #1
 800bb36:	d102      	bne.n	800bb3e <_lseek_r+0x1e>
 800bb38:	682b      	ldr	r3, [r5, #0]
 800bb3a:	b103      	cbz	r3, 800bb3e <_lseek_r+0x1e>
 800bb3c:	6023      	str	r3, [r4, #0]
 800bb3e:	bd38      	pop	{r3, r4, r5, pc}
 800bb40:	20002cf8 	.word	0x20002cf8

0800bb44 <_read_r>:
 800bb44:	b538      	push	{r3, r4, r5, lr}
 800bb46:	4604      	mov	r4, r0
 800bb48:	4608      	mov	r0, r1
 800bb4a:	4611      	mov	r1, r2
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	4d05      	ldr	r5, [pc, #20]	@ (800bb64 <_read_r+0x20>)
 800bb50:	602a      	str	r2, [r5, #0]
 800bb52:	461a      	mov	r2, r3
 800bb54:	f7f7 f840 	bl	8002bd8 <_read>
 800bb58:	1c43      	adds	r3, r0, #1
 800bb5a:	d102      	bne.n	800bb62 <_read_r+0x1e>
 800bb5c:	682b      	ldr	r3, [r5, #0]
 800bb5e:	b103      	cbz	r3, 800bb62 <_read_r+0x1e>
 800bb60:	6023      	str	r3, [r4, #0]
 800bb62:	bd38      	pop	{r3, r4, r5, pc}
 800bb64:	20002cf8 	.word	0x20002cf8

0800bb68 <_write_r>:
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	4608      	mov	r0, r1
 800bb6e:	4611      	mov	r1, r2
 800bb70:	2200      	movs	r2, #0
 800bb72:	4d05      	ldr	r5, [pc, #20]	@ (800bb88 <_write_r+0x20>)
 800bb74:	602a      	str	r2, [r5, #0]
 800bb76:	461a      	mov	r2, r3
 800bb78:	f7f7 f84b 	bl	8002c12 <_write>
 800bb7c:	1c43      	adds	r3, r0, #1
 800bb7e:	d102      	bne.n	800bb86 <_write_r+0x1e>
 800bb80:	682b      	ldr	r3, [r5, #0]
 800bb82:	b103      	cbz	r3, 800bb86 <_write_r+0x1e>
 800bb84:	6023      	str	r3, [r4, #0]
 800bb86:	bd38      	pop	{r3, r4, r5, pc}
 800bb88:	20002cf8 	.word	0x20002cf8

0800bb8c <__errno>:
 800bb8c:	4b01      	ldr	r3, [pc, #4]	@ (800bb94 <__errno+0x8>)
 800bb8e:	6818      	ldr	r0, [r3, #0]
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop
 800bb94:	20000038 	.word	0x20000038

0800bb98 <__libc_init_array>:
 800bb98:	b570      	push	{r4, r5, r6, lr}
 800bb9a:	2600      	movs	r6, #0
 800bb9c:	4d0c      	ldr	r5, [pc, #48]	@ (800bbd0 <__libc_init_array+0x38>)
 800bb9e:	4c0d      	ldr	r4, [pc, #52]	@ (800bbd4 <__libc_init_array+0x3c>)
 800bba0:	1b64      	subs	r4, r4, r5
 800bba2:	10a4      	asrs	r4, r4, #2
 800bba4:	42a6      	cmp	r6, r4
 800bba6:	d109      	bne.n	800bbbc <__libc_init_array+0x24>
 800bba8:	f002 f870 	bl	800dc8c <_init>
 800bbac:	2600      	movs	r6, #0
 800bbae:	4d0a      	ldr	r5, [pc, #40]	@ (800bbd8 <__libc_init_array+0x40>)
 800bbb0:	4c0a      	ldr	r4, [pc, #40]	@ (800bbdc <__libc_init_array+0x44>)
 800bbb2:	1b64      	subs	r4, r4, r5
 800bbb4:	10a4      	asrs	r4, r4, #2
 800bbb6:	42a6      	cmp	r6, r4
 800bbb8:	d105      	bne.n	800bbc6 <__libc_init_array+0x2e>
 800bbba:	bd70      	pop	{r4, r5, r6, pc}
 800bbbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbc0:	4798      	blx	r3
 800bbc2:	3601      	adds	r6, #1
 800bbc4:	e7ee      	b.n	800bba4 <__libc_init_array+0xc>
 800bbc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbca:	4798      	blx	r3
 800bbcc:	3601      	adds	r6, #1
 800bbce:	e7f2      	b.n	800bbb6 <__libc_init_array+0x1e>
 800bbd0:	0800f3e0 	.word	0x0800f3e0
 800bbd4:	0800f3e0 	.word	0x0800f3e0
 800bbd8:	0800f3e0 	.word	0x0800f3e0
 800bbdc:	0800f3e4 	.word	0x0800f3e4

0800bbe0 <__retarget_lock_init_recursive>:
 800bbe0:	4770      	bx	lr

0800bbe2 <__retarget_lock_acquire_recursive>:
 800bbe2:	4770      	bx	lr

0800bbe4 <__retarget_lock_release_recursive>:
 800bbe4:	4770      	bx	lr

0800bbe6 <memchr>:
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	b510      	push	{r4, lr}
 800bbea:	b2c9      	uxtb	r1, r1
 800bbec:	4402      	add	r2, r0
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	d101      	bne.n	800bbf8 <memchr+0x12>
 800bbf4:	2000      	movs	r0, #0
 800bbf6:	e003      	b.n	800bc00 <memchr+0x1a>
 800bbf8:	7804      	ldrb	r4, [r0, #0]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	428c      	cmp	r4, r1
 800bbfe:	d1f6      	bne.n	800bbee <memchr+0x8>
 800bc00:	bd10      	pop	{r4, pc}

0800bc02 <quorem>:
 800bc02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc06:	6903      	ldr	r3, [r0, #16]
 800bc08:	690c      	ldr	r4, [r1, #16]
 800bc0a:	4607      	mov	r7, r0
 800bc0c:	42a3      	cmp	r3, r4
 800bc0e:	db7e      	blt.n	800bd0e <quorem+0x10c>
 800bc10:	3c01      	subs	r4, #1
 800bc12:	00a3      	lsls	r3, r4, #2
 800bc14:	f100 0514 	add.w	r5, r0, #20
 800bc18:	f101 0814 	add.w	r8, r1, #20
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc22:	9301      	str	r3, [sp, #4]
 800bc24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc2c:	3301      	adds	r3, #1
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc38:	d32e      	bcc.n	800bc98 <quorem+0x96>
 800bc3a:	f04f 0a00 	mov.w	sl, #0
 800bc3e:	46c4      	mov	ip, r8
 800bc40:	46ae      	mov	lr, r5
 800bc42:	46d3      	mov	fp, sl
 800bc44:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc48:	b298      	uxth	r0, r3
 800bc4a:	fb06 a000 	mla	r0, r6, r0, sl
 800bc4e:	0c1b      	lsrs	r3, r3, #16
 800bc50:	0c02      	lsrs	r2, r0, #16
 800bc52:	fb06 2303 	mla	r3, r6, r3, r2
 800bc56:	f8de 2000 	ldr.w	r2, [lr]
 800bc5a:	b280      	uxth	r0, r0
 800bc5c:	b292      	uxth	r2, r2
 800bc5e:	1a12      	subs	r2, r2, r0
 800bc60:	445a      	add	r2, fp
 800bc62:	f8de 0000 	ldr.w	r0, [lr]
 800bc66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bc70:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bc74:	b292      	uxth	r2, r2
 800bc76:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bc7a:	45e1      	cmp	r9, ip
 800bc7c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bc80:	f84e 2b04 	str.w	r2, [lr], #4
 800bc84:	d2de      	bcs.n	800bc44 <quorem+0x42>
 800bc86:	9b00      	ldr	r3, [sp, #0]
 800bc88:	58eb      	ldr	r3, [r5, r3]
 800bc8a:	b92b      	cbnz	r3, 800bc98 <quorem+0x96>
 800bc8c:	9b01      	ldr	r3, [sp, #4]
 800bc8e:	3b04      	subs	r3, #4
 800bc90:	429d      	cmp	r5, r3
 800bc92:	461a      	mov	r2, r3
 800bc94:	d32f      	bcc.n	800bcf6 <quorem+0xf4>
 800bc96:	613c      	str	r4, [r7, #16]
 800bc98:	4638      	mov	r0, r7
 800bc9a:	f001 f97b 	bl	800cf94 <__mcmp>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	db25      	blt.n	800bcee <quorem+0xec>
 800bca2:	4629      	mov	r1, r5
 800bca4:	2000      	movs	r0, #0
 800bca6:	f858 2b04 	ldr.w	r2, [r8], #4
 800bcaa:	f8d1 c000 	ldr.w	ip, [r1]
 800bcae:	fa1f fe82 	uxth.w	lr, r2
 800bcb2:	fa1f f38c 	uxth.w	r3, ip
 800bcb6:	eba3 030e 	sub.w	r3, r3, lr
 800bcba:	4403      	add	r3, r0
 800bcbc:	0c12      	lsrs	r2, r2, #16
 800bcbe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bcc2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bccc:	45c1      	cmp	r9, r8
 800bcce:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bcd2:	f841 3b04 	str.w	r3, [r1], #4
 800bcd6:	d2e6      	bcs.n	800bca6 <quorem+0xa4>
 800bcd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bce0:	b922      	cbnz	r2, 800bcec <quorem+0xea>
 800bce2:	3b04      	subs	r3, #4
 800bce4:	429d      	cmp	r5, r3
 800bce6:	461a      	mov	r2, r3
 800bce8:	d30b      	bcc.n	800bd02 <quorem+0x100>
 800bcea:	613c      	str	r4, [r7, #16]
 800bcec:	3601      	adds	r6, #1
 800bcee:	4630      	mov	r0, r6
 800bcf0:	b003      	add	sp, #12
 800bcf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf6:	6812      	ldr	r2, [r2, #0]
 800bcf8:	3b04      	subs	r3, #4
 800bcfa:	2a00      	cmp	r2, #0
 800bcfc:	d1cb      	bne.n	800bc96 <quorem+0x94>
 800bcfe:	3c01      	subs	r4, #1
 800bd00:	e7c6      	b.n	800bc90 <quorem+0x8e>
 800bd02:	6812      	ldr	r2, [r2, #0]
 800bd04:	3b04      	subs	r3, #4
 800bd06:	2a00      	cmp	r2, #0
 800bd08:	d1ef      	bne.n	800bcea <quorem+0xe8>
 800bd0a:	3c01      	subs	r4, #1
 800bd0c:	e7ea      	b.n	800bce4 <quorem+0xe2>
 800bd0e:	2000      	movs	r0, #0
 800bd10:	e7ee      	b.n	800bcf0 <quorem+0xee>
 800bd12:	0000      	movs	r0, r0
 800bd14:	0000      	movs	r0, r0
	...

0800bd18 <_dtoa_r>:
 800bd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1c:	4614      	mov	r4, r2
 800bd1e:	461d      	mov	r5, r3
 800bd20:	69c7      	ldr	r7, [r0, #28]
 800bd22:	b097      	sub	sp, #92	@ 0x5c
 800bd24:	4683      	mov	fp, r0
 800bd26:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bd2a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800bd2c:	b97f      	cbnz	r7, 800bd4e <_dtoa_r+0x36>
 800bd2e:	2010      	movs	r0, #16
 800bd30:	f000 fe02 	bl	800c938 <malloc>
 800bd34:	4602      	mov	r2, r0
 800bd36:	f8cb 001c 	str.w	r0, [fp, #28]
 800bd3a:	b920      	cbnz	r0, 800bd46 <_dtoa_r+0x2e>
 800bd3c:	21ef      	movs	r1, #239	@ 0xef
 800bd3e:	4ba8      	ldr	r3, [pc, #672]	@ (800bfe0 <_dtoa_r+0x2c8>)
 800bd40:	48a8      	ldr	r0, [pc, #672]	@ (800bfe4 <_dtoa_r+0x2cc>)
 800bd42:	f001 fc67 	bl	800d614 <__assert_func>
 800bd46:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bd4a:	6007      	str	r7, [r0, #0]
 800bd4c:	60c7      	str	r7, [r0, #12]
 800bd4e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd52:	6819      	ldr	r1, [r3, #0]
 800bd54:	b159      	cbz	r1, 800bd6e <_dtoa_r+0x56>
 800bd56:	685a      	ldr	r2, [r3, #4]
 800bd58:	2301      	movs	r3, #1
 800bd5a:	4093      	lsls	r3, r2
 800bd5c:	604a      	str	r2, [r1, #4]
 800bd5e:	608b      	str	r3, [r1, #8]
 800bd60:	4658      	mov	r0, fp
 800bd62:	f000 fedf 	bl	800cb24 <_Bfree>
 800bd66:	2200      	movs	r2, #0
 800bd68:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bd6c:	601a      	str	r2, [r3, #0]
 800bd6e:	1e2b      	subs	r3, r5, #0
 800bd70:	bfaf      	iteee	ge
 800bd72:	2300      	movge	r3, #0
 800bd74:	2201      	movlt	r2, #1
 800bd76:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bd7a:	9303      	strlt	r3, [sp, #12]
 800bd7c:	bfa8      	it	ge
 800bd7e:	6033      	strge	r3, [r6, #0]
 800bd80:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bd84:	4b98      	ldr	r3, [pc, #608]	@ (800bfe8 <_dtoa_r+0x2d0>)
 800bd86:	bfb8      	it	lt
 800bd88:	6032      	strlt	r2, [r6, #0]
 800bd8a:	ea33 0308 	bics.w	r3, r3, r8
 800bd8e:	d112      	bne.n	800bdb6 <_dtoa_r+0x9e>
 800bd90:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bd94:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bd9c:	4323      	orrs	r3, r4
 800bd9e:	f000 8550 	beq.w	800c842 <_dtoa_r+0xb2a>
 800bda2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bda4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800bfec <_dtoa_r+0x2d4>
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f000 8552 	beq.w	800c852 <_dtoa_r+0xb3a>
 800bdae:	f10a 0303 	add.w	r3, sl, #3
 800bdb2:	f000 bd4c 	b.w	800c84e <_dtoa_r+0xb36>
 800bdb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdba:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bdbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	f7f4 fdef 	bl	80009a8 <__aeabi_dcmpeq>
 800bdca:	4607      	mov	r7, r0
 800bdcc:	b158      	cbz	r0, 800bde6 <_dtoa_r+0xce>
 800bdce:	2301      	movs	r3, #1
 800bdd0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bdd2:	6013      	str	r3, [r2, #0]
 800bdd4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bdd6:	b113      	cbz	r3, 800bdde <_dtoa_r+0xc6>
 800bdd8:	4b85      	ldr	r3, [pc, #532]	@ (800bff0 <_dtoa_r+0x2d8>)
 800bdda:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bddc:	6013      	str	r3, [r2, #0]
 800bdde:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800bff4 <_dtoa_r+0x2dc>
 800bde2:	f000 bd36 	b.w	800c852 <_dtoa_r+0xb3a>
 800bde6:	ab14      	add	r3, sp, #80	@ 0x50
 800bde8:	9301      	str	r3, [sp, #4]
 800bdea:	ab15      	add	r3, sp, #84	@ 0x54
 800bdec:	9300      	str	r3, [sp, #0]
 800bdee:	4658      	mov	r0, fp
 800bdf0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bdf4:	f001 f97e 	bl	800d0f4 <__d2b>
 800bdf8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800bdfc:	4681      	mov	r9, r0
 800bdfe:	2e00      	cmp	r6, #0
 800be00:	d077      	beq.n	800bef2 <_dtoa_r+0x1da>
 800be02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be08:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800be0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be10:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800be14:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800be18:	9712      	str	r7, [sp, #72]	@ 0x48
 800be1a:	4619      	mov	r1, r3
 800be1c:	2200      	movs	r2, #0
 800be1e:	4b76      	ldr	r3, [pc, #472]	@ (800bff8 <_dtoa_r+0x2e0>)
 800be20:	f7f4 f9a2 	bl	8000168 <__aeabi_dsub>
 800be24:	a368      	add	r3, pc, #416	@ (adr r3, 800bfc8 <_dtoa_r+0x2b0>)
 800be26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2a:	f7f4 fb55 	bl	80004d8 <__aeabi_dmul>
 800be2e:	a368      	add	r3, pc, #416	@ (adr r3, 800bfd0 <_dtoa_r+0x2b8>)
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	f7f4 f99a 	bl	800016c <__adddf3>
 800be38:	4604      	mov	r4, r0
 800be3a:	4630      	mov	r0, r6
 800be3c:	460d      	mov	r5, r1
 800be3e:	f7f4 fae1 	bl	8000404 <__aeabi_i2d>
 800be42:	a365      	add	r3, pc, #404	@ (adr r3, 800bfd8 <_dtoa_r+0x2c0>)
 800be44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be48:	f7f4 fb46 	bl	80004d8 <__aeabi_dmul>
 800be4c:	4602      	mov	r2, r0
 800be4e:	460b      	mov	r3, r1
 800be50:	4620      	mov	r0, r4
 800be52:	4629      	mov	r1, r5
 800be54:	f7f4 f98a 	bl	800016c <__adddf3>
 800be58:	4604      	mov	r4, r0
 800be5a:	460d      	mov	r5, r1
 800be5c:	f7f4 fdec 	bl	8000a38 <__aeabi_d2iz>
 800be60:	2200      	movs	r2, #0
 800be62:	4607      	mov	r7, r0
 800be64:	2300      	movs	r3, #0
 800be66:	4620      	mov	r0, r4
 800be68:	4629      	mov	r1, r5
 800be6a:	f7f4 fda7 	bl	80009bc <__aeabi_dcmplt>
 800be6e:	b140      	cbz	r0, 800be82 <_dtoa_r+0x16a>
 800be70:	4638      	mov	r0, r7
 800be72:	f7f4 fac7 	bl	8000404 <__aeabi_i2d>
 800be76:	4622      	mov	r2, r4
 800be78:	462b      	mov	r3, r5
 800be7a:	f7f4 fd95 	bl	80009a8 <__aeabi_dcmpeq>
 800be7e:	b900      	cbnz	r0, 800be82 <_dtoa_r+0x16a>
 800be80:	3f01      	subs	r7, #1
 800be82:	2f16      	cmp	r7, #22
 800be84:	d853      	bhi.n	800bf2e <_dtoa_r+0x216>
 800be86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be8a:	4b5c      	ldr	r3, [pc, #368]	@ (800bffc <_dtoa_r+0x2e4>)
 800be8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be94:	f7f4 fd92 	bl	80009bc <__aeabi_dcmplt>
 800be98:	2800      	cmp	r0, #0
 800be9a:	d04a      	beq.n	800bf32 <_dtoa_r+0x21a>
 800be9c:	2300      	movs	r3, #0
 800be9e:	3f01      	subs	r7, #1
 800bea0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bea2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bea4:	1b9b      	subs	r3, r3, r6
 800bea6:	1e5a      	subs	r2, r3, #1
 800bea8:	bf46      	itte	mi
 800beaa:	f1c3 0801 	rsbmi	r8, r3, #1
 800beae:	2300      	movmi	r3, #0
 800beb0:	f04f 0800 	movpl.w	r8, #0
 800beb4:	9209      	str	r2, [sp, #36]	@ 0x24
 800beb6:	bf48      	it	mi
 800beb8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800beba:	2f00      	cmp	r7, #0
 800bebc:	db3b      	blt.n	800bf36 <_dtoa_r+0x21e>
 800bebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bec0:	970e      	str	r7, [sp, #56]	@ 0x38
 800bec2:	443b      	add	r3, r7
 800bec4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bec6:	2300      	movs	r3, #0
 800bec8:	930a      	str	r3, [sp, #40]	@ 0x28
 800beca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800becc:	2b09      	cmp	r3, #9
 800bece:	d866      	bhi.n	800bf9e <_dtoa_r+0x286>
 800bed0:	2b05      	cmp	r3, #5
 800bed2:	bfc4      	itt	gt
 800bed4:	3b04      	subgt	r3, #4
 800bed6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800bed8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800beda:	bfc8      	it	gt
 800bedc:	2400      	movgt	r4, #0
 800bede:	f1a3 0302 	sub.w	r3, r3, #2
 800bee2:	bfd8      	it	le
 800bee4:	2401      	movle	r4, #1
 800bee6:	2b03      	cmp	r3, #3
 800bee8:	d864      	bhi.n	800bfb4 <_dtoa_r+0x29c>
 800beea:	e8df f003 	tbb	[pc, r3]
 800beee:	382b      	.short	0x382b
 800bef0:	5636      	.short	0x5636
 800bef2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bef6:	441e      	add	r6, r3
 800bef8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800befc:	2b20      	cmp	r3, #32
 800befe:	bfc1      	itttt	gt
 800bf00:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bf04:	fa08 f803 	lslgt.w	r8, r8, r3
 800bf08:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bf0c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bf10:	bfd6      	itet	le
 800bf12:	f1c3 0320 	rsble	r3, r3, #32
 800bf16:	ea48 0003 	orrgt.w	r0, r8, r3
 800bf1a:	fa04 f003 	lslle.w	r0, r4, r3
 800bf1e:	f7f4 fa61 	bl	80003e4 <__aeabi_ui2d>
 800bf22:	2201      	movs	r2, #1
 800bf24:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bf28:	3e01      	subs	r6, #1
 800bf2a:	9212      	str	r2, [sp, #72]	@ 0x48
 800bf2c:	e775      	b.n	800be1a <_dtoa_r+0x102>
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e7b6      	b.n	800bea0 <_dtoa_r+0x188>
 800bf32:	900f      	str	r0, [sp, #60]	@ 0x3c
 800bf34:	e7b5      	b.n	800bea2 <_dtoa_r+0x18a>
 800bf36:	427b      	negs	r3, r7
 800bf38:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	eba8 0807 	sub.w	r8, r8, r7
 800bf40:	930e      	str	r3, [sp, #56]	@ 0x38
 800bf42:	e7c2      	b.n	800beca <_dtoa_r+0x1b2>
 800bf44:	2300      	movs	r3, #0
 800bf46:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	dc35      	bgt.n	800bfba <_dtoa_r+0x2a2>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	461a      	mov	r2, r3
 800bf52:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800bf56:	9221      	str	r2, [sp, #132]	@ 0x84
 800bf58:	e00b      	b.n	800bf72 <_dtoa_r+0x25a>
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e7f3      	b.n	800bf46 <_dtoa_r+0x22e>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bf64:	18fb      	adds	r3, r7, r3
 800bf66:	9308      	str	r3, [sp, #32]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	9307      	str	r3, [sp, #28]
 800bf6e:	bfb8      	it	lt
 800bf70:	2301      	movlt	r3, #1
 800bf72:	2100      	movs	r1, #0
 800bf74:	2204      	movs	r2, #4
 800bf76:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bf7a:	f102 0514 	add.w	r5, r2, #20
 800bf7e:	429d      	cmp	r5, r3
 800bf80:	d91f      	bls.n	800bfc2 <_dtoa_r+0x2aa>
 800bf82:	6041      	str	r1, [r0, #4]
 800bf84:	4658      	mov	r0, fp
 800bf86:	f000 fd8d 	bl	800caa4 <_Balloc>
 800bf8a:	4682      	mov	sl, r0
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	d139      	bne.n	800c004 <_dtoa_r+0x2ec>
 800bf90:	4602      	mov	r2, r0
 800bf92:	f240 11af 	movw	r1, #431	@ 0x1af
 800bf96:	4b1a      	ldr	r3, [pc, #104]	@ (800c000 <_dtoa_r+0x2e8>)
 800bf98:	e6d2      	b.n	800bd40 <_dtoa_r+0x28>
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e7e0      	b.n	800bf60 <_dtoa_r+0x248>
 800bf9e:	2401      	movs	r4, #1
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bfa4:	9320      	str	r3, [sp, #128]	@ 0x80
 800bfa6:	f04f 33ff 	mov.w	r3, #4294967295
 800bfaa:	2200      	movs	r2, #0
 800bfac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800bfb0:	2312      	movs	r3, #18
 800bfb2:	e7d0      	b.n	800bf56 <_dtoa_r+0x23e>
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfb8:	e7f5      	b.n	800bfa6 <_dtoa_r+0x28e>
 800bfba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bfbc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800bfc0:	e7d7      	b.n	800bf72 <_dtoa_r+0x25a>
 800bfc2:	3101      	adds	r1, #1
 800bfc4:	0052      	lsls	r2, r2, #1
 800bfc6:	e7d8      	b.n	800bf7a <_dtoa_r+0x262>
 800bfc8:	636f4361 	.word	0x636f4361
 800bfcc:	3fd287a7 	.word	0x3fd287a7
 800bfd0:	8b60c8b3 	.word	0x8b60c8b3
 800bfd4:	3fc68a28 	.word	0x3fc68a28
 800bfd8:	509f79fb 	.word	0x509f79fb
 800bfdc:	3fd34413 	.word	0x3fd34413
 800bfe0:	0800f0a5 	.word	0x0800f0a5
 800bfe4:	0800f0bc 	.word	0x0800f0bc
 800bfe8:	7ff00000 	.word	0x7ff00000
 800bfec:	0800f0a1 	.word	0x0800f0a1
 800bff0:	0800f075 	.word	0x0800f075
 800bff4:	0800f074 	.word	0x0800f074
 800bff8:	3ff80000 	.word	0x3ff80000
 800bffc:	0800f1b8 	.word	0x0800f1b8
 800c000:	0800f114 	.word	0x0800f114
 800c004:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c008:	6018      	str	r0, [r3, #0]
 800c00a:	9b07      	ldr	r3, [sp, #28]
 800c00c:	2b0e      	cmp	r3, #14
 800c00e:	f200 80a4 	bhi.w	800c15a <_dtoa_r+0x442>
 800c012:	2c00      	cmp	r4, #0
 800c014:	f000 80a1 	beq.w	800c15a <_dtoa_r+0x442>
 800c018:	2f00      	cmp	r7, #0
 800c01a:	dd33      	ble.n	800c084 <_dtoa_r+0x36c>
 800c01c:	4b86      	ldr	r3, [pc, #536]	@ (800c238 <_dtoa_r+0x520>)
 800c01e:	f007 020f 	and.w	r2, r7, #15
 800c022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c026:	05f8      	lsls	r0, r7, #23
 800c028:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c02c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c030:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c034:	d516      	bpl.n	800c064 <_dtoa_r+0x34c>
 800c036:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c03a:	4b80      	ldr	r3, [pc, #512]	@ (800c23c <_dtoa_r+0x524>)
 800c03c:	2603      	movs	r6, #3
 800c03e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c042:	f7f4 fb73 	bl	800072c <__aeabi_ddiv>
 800c046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c04a:	f004 040f 	and.w	r4, r4, #15
 800c04e:	4d7b      	ldr	r5, [pc, #492]	@ (800c23c <_dtoa_r+0x524>)
 800c050:	b954      	cbnz	r4, 800c068 <_dtoa_r+0x350>
 800c052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c05a:	f7f4 fb67 	bl	800072c <__aeabi_ddiv>
 800c05e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c062:	e028      	b.n	800c0b6 <_dtoa_r+0x39e>
 800c064:	2602      	movs	r6, #2
 800c066:	e7f2      	b.n	800c04e <_dtoa_r+0x336>
 800c068:	07e1      	lsls	r1, r4, #31
 800c06a:	d508      	bpl.n	800c07e <_dtoa_r+0x366>
 800c06c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c070:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c074:	f7f4 fa30 	bl	80004d8 <__aeabi_dmul>
 800c078:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c07c:	3601      	adds	r6, #1
 800c07e:	1064      	asrs	r4, r4, #1
 800c080:	3508      	adds	r5, #8
 800c082:	e7e5      	b.n	800c050 <_dtoa_r+0x338>
 800c084:	f000 80d2 	beq.w	800c22c <_dtoa_r+0x514>
 800c088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c08c:	427c      	negs	r4, r7
 800c08e:	4b6a      	ldr	r3, [pc, #424]	@ (800c238 <_dtoa_r+0x520>)
 800c090:	f004 020f 	and.w	r2, r4, #15
 800c094:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09c:	f7f4 fa1c 	bl	80004d8 <__aeabi_dmul>
 800c0a0:	2602      	movs	r6, #2
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0a8:	4d64      	ldr	r5, [pc, #400]	@ (800c23c <_dtoa_r+0x524>)
 800c0aa:	1124      	asrs	r4, r4, #4
 800c0ac:	2c00      	cmp	r4, #0
 800c0ae:	f040 80b2 	bne.w	800c216 <_dtoa_r+0x4fe>
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1d3      	bne.n	800c05e <_dtoa_r+0x346>
 800c0b6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c0ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 80b7 	beq.w	800c230 <_dtoa_r+0x518>
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	4629      	mov	r1, r5
 800c0c8:	4b5d      	ldr	r3, [pc, #372]	@ (800c240 <_dtoa_r+0x528>)
 800c0ca:	f7f4 fc77 	bl	80009bc <__aeabi_dcmplt>
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	f000 80ae 	beq.w	800c230 <_dtoa_r+0x518>
 800c0d4:	9b07      	ldr	r3, [sp, #28]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 80aa 	beq.w	800c230 <_dtoa_r+0x518>
 800c0dc:	9b08      	ldr	r3, [sp, #32]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	dd37      	ble.n	800c152 <_dtoa_r+0x43a>
 800c0e2:	1e7b      	subs	r3, r7, #1
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	9304      	str	r3, [sp, #16]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	4629      	mov	r1, r5
 800c0ec:	4b55      	ldr	r3, [pc, #340]	@ (800c244 <_dtoa_r+0x52c>)
 800c0ee:	f7f4 f9f3 	bl	80004d8 <__aeabi_dmul>
 800c0f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0f6:	9c08      	ldr	r4, [sp, #32]
 800c0f8:	3601      	adds	r6, #1
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	f7f4 f982 	bl	8000404 <__aeabi_i2d>
 800c100:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c104:	f7f4 f9e8 	bl	80004d8 <__aeabi_dmul>
 800c108:	2200      	movs	r2, #0
 800c10a:	4b4f      	ldr	r3, [pc, #316]	@ (800c248 <_dtoa_r+0x530>)
 800c10c:	f7f4 f82e 	bl	800016c <__adddf3>
 800c110:	4605      	mov	r5, r0
 800c112:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c116:	2c00      	cmp	r4, #0
 800c118:	f040 809a 	bne.w	800c250 <_dtoa_r+0x538>
 800c11c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c120:	2200      	movs	r2, #0
 800c122:	4b4a      	ldr	r3, [pc, #296]	@ (800c24c <_dtoa_r+0x534>)
 800c124:	f7f4 f820 	bl	8000168 <__aeabi_dsub>
 800c128:	4602      	mov	r2, r0
 800c12a:	460b      	mov	r3, r1
 800c12c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c130:	462a      	mov	r2, r5
 800c132:	4633      	mov	r3, r6
 800c134:	f7f4 fc60 	bl	80009f8 <__aeabi_dcmpgt>
 800c138:	2800      	cmp	r0, #0
 800c13a:	f040 828e 	bne.w	800c65a <_dtoa_r+0x942>
 800c13e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c142:	462a      	mov	r2, r5
 800c144:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c148:	f7f4 fc38 	bl	80009bc <__aeabi_dcmplt>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	f040 8127 	bne.w	800c3a0 <_dtoa_r+0x688>
 800c152:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c156:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c15a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f2c0 8163 	blt.w	800c428 <_dtoa_r+0x710>
 800c162:	2f0e      	cmp	r7, #14
 800c164:	f300 8160 	bgt.w	800c428 <_dtoa_r+0x710>
 800c168:	4b33      	ldr	r3, [pc, #204]	@ (800c238 <_dtoa_r+0x520>)
 800c16a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c16e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c172:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c176:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c178:	2b00      	cmp	r3, #0
 800c17a:	da03      	bge.n	800c184 <_dtoa_r+0x46c>
 800c17c:	9b07      	ldr	r3, [sp, #28]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	f340 8100 	ble.w	800c384 <_dtoa_r+0x66c>
 800c184:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c188:	4656      	mov	r6, sl
 800c18a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c18e:	4620      	mov	r0, r4
 800c190:	4629      	mov	r1, r5
 800c192:	f7f4 facb 	bl	800072c <__aeabi_ddiv>
 800c196:	f7f4 fc4f 	bl	8000a38 <__aeabi_d2iz>
 800c19a:	4680      	mov	r8, r0
 800c19c:	f7f4 f932 	bl	8000404 <__aeabi_i2d>
 800c1a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1a4:	f7f4 f998 	bl	80004d8 <__aeabi_dmul>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	f7f3 ffda 	bl	8000168 <__aeabi_dsub>
 800c1b4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c1b8:	9d07      	ldr	r5, [sp, #28]
 800c1ba:	f806 4b01 	strb.w	r4, [r6], #1
 800c1be:	eba6 040a 	sub.w	r4, r6, sl
 800c1c2:	42a5      	cmp	r5, r4
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	f040 8116 	bne.w	800c3f8 <_dtoa_r+0x6e0>
 800c1cc:	f7f3 ffce 	bl	800016c <__adddf3>
 800c1d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1d4:	4604      	mov	r4, r0
 800c1d6:	460d      	mov	r5, r1
 800c1d8:	f7f4 fc0e 	bl	80009f8 <__aeabi_dcmpgt>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	f040 80f8 	bne.w	800c3d2 <_dtoa_r+0x6ba>
 800c1e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	4629      	mov	r1, r5
 800c1ea:	f7f4 fbdd 	bl	80009a8 <__aeabi_dcmpeq>
 800c1ee:	b118      	cbz	r0, 800c1f8 <_dtoa_r+0x4e0>
 800c1f0:	f018 0f01 	tst.w	r8, #1
 800c1f4:	f040 80ed 	bne.w	800c3d2 <_dtoa_r+0x6ba>
 800c1f8:	4649      	mov	r1, r9
 800c1fa:	4658      	mov	r0, fp
 800c1fc:	f000 fc92 	bl	800cb24 <_Bfree>
 800c200:	2300      	movs	r3, #0
 800c202:	7033      	strb	r3, [r6, #0]
 800c204:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c206:	3701      	adds	r7, #1
 800c208:	601f      	str	r7, [r3, #0]
 800c20a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f000 8320 	beq.w	800c852 <_dtoa_r+0xb3a>
 800c212:	601e      	str	r6, [r3, #0]
 800c214:	e31d      	b.n	800c852 <_dtoa_r+0xb3a>
 800c216:	07e2      	lsls	r2, r4, #31
 800c218:	d505      	bpl.n	800c226 <_dtoa_r+0x50e>
 800c21a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c21e:	f7f4 f95b 	bl	80004d8 <__aeabi_dmul>
 800c222:	2301      	movs	r3, #1
 800c224:	3601      	adds	r6, #1
 800c226:	1064      	asrs	r4, r4, #1
 800c228:	3508      	adds	r5, #8
 800c22a:	e73f      	b.n	800c0ac <_dtoa_r+0x394>
 800c22c:	2602      	movs	r6, #2
 800c22e:	e742      	b.n	800c0b6 <_dtoa_r+0x39e>
 800c230:	9c07      	ldr	r4, [sp, #28]
 800c232:	9704      	str	r7, [sp, #16]
 800c234:	e761      	b.n	800c0fa <_dtoa_r+0x3e2>
 800c236:	bf00      	nop
 800c238:	0800f1b8 	.word	0x0800f1b8
 800c23c:	0800f190 	.word	0x0800f190
 800c240:	3ff00000 	.word	0x3ff00000
 800c244:	40240000 	.word	0x40240000
 800c248:	401c0000 	.word	0x401c0000
 800c24c:	40140000 	.word	0x40140000
 800c250:	4b70      	ldr	r3, [pc, #448]	@ (800c414 <_dtoa_r+0x6fc>)
 800c252:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c254:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c258:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c25c:	4454      	add	r4, sl
 800c25e:	2900      	cmp	r1, #0
 800c260:	d045      	beq.n	800c2ee <_dtoa_r+0x5d6>
 800c262:	2000      	movs	r0, #0
 800c264:	496c      	ldr	r1, [pc, #432]	@ (800c418 <_dtoa_r+0x700>)
 800c266:	f7f4 fa61 	bl	800072c <__aeabi_ddiv>
 800c26a:	4633      	mov	r3, r6
 800c26c:	462a      	mov	r2, r5
 800c26e:	f7f3 ff7b 	bl	8000168 <__aeabi_dsub>
 800c272:	4656      	mov	r6, sl
 800c274:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c27c:	f7f4 fbdc 	bl	8000a38 <__aeabi_d2iz>
 800c280:	4605      	mov	r5, r0
 800c282:	f7f4 f8bf 	bl	8000404 <__aeabi_i2d>
 800c286:	4602      	mov	r2, r0
 800c288:	460b      	mov	r3, r1
 800c28a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c28e:	f7f3 ff6b 	bl	8000168 <__aeabi_dsub>
 800c292:	4602      	mov	r2, r0
 800c294:	460b      	mov	r3, r1
 800c296:	3530      	adds	r5, #48	@ 0x30
 800c298:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c29c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c2a0:	f806 5b01 	strb.w	r5, [r6], #1
 800c2a4:	f7f4 fb8a 	bl	80009bc <__aeabi_dcmplt>
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	d163      	bne.n	800c374 <_dtoa_r+0x65c>
 800c2ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	495a      	ldr	r1, [pc, #360]	@ (800c41c <_dtoa_r+0x704>)
 800c2b4:	f7f3 ff58 	bl	8000168 <__aeabi_dsub>
 800c2b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c2bc:	f7f4 fb7e 	bl	80009bc <__aeabi_dcmplt>
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	f040 8087 	bne.w	800c3d4 <_dtoa_r+0x6bc>
 800c2c6:	42a6      	cmp	r6, r4
 800c2c8:	f43f af43 	beq.w	800c152 <_dtoa_r+0x43a>
 800c2cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	4b53      	ldr	r3, [pc, #332]	@ (800c420 <_dtoa_r+0x708>)
 800c2d4:	f7f4 f900 	bl	80004d8 <__aeabi_dmul>
 800c2d8:	2200      	movs	r2, #0
 800c2da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c2de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2e2:	4b4f      	ldr	r3, [pc, #316]	@ (800c420 <_dtoa_r+0x708>)
 800c2e4:	f7f4 f8f8 	bl	80004d8 <__aeabi_dmul>
 800c2e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2ec:	e7c4      	b.n	800c278 <_dtoa_r+0x560>
 800c2ee:	4631      	mov	r1, r6
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	f7f4 f8f1 	bl	80004d8 <__aeabi_dmul>
 800c2f6:	4656      	mov	r6, sl
 800c2f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c2fc:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c2fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c302:	f7f4 fb99 	bl	8000a38 <__aeabi_d2iz>
 800c306:	4605      	mov	r5, r0
 800c308:	f7f4 f87c 	bl	8000404 <__aeabi_i2d>
 800c30c:	4602      	mov	r2, r0
 800c30e:	460b      	mov	r3, r1
 800c310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c314:	f7f3 ff28 	bl	8000168 <__aeabi_dsub>
 800c318:	4602      	mov	r2, r0
 800c31a:	460b      	mov	r3, r1
 800c31c:	3530      	adds	r5, #48	@ 0x30
 800c31e:	f806 5b01 	strb.w	r5, [r6], #1
 800c322:	42a6      	cmp	r6, r4
 800c324:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c328:	f04f 0200 	mov.w	r2, #0
 800c32c:	d124      	bne.n	800c378 <_dtoa_r+0x660>
 800c32e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c332:	4b39      	ldr	r3, [pc, #228]	@ (800c418 <_dtoa_r+0x700>)
 800c334:	f7f3 ff1a 	bl	800016c <__adddf3>
 800c338:	4602      	mov	r2, r0
 800c33a:	460b      	mov	r3, r1
 800c33c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c340:	f7f4 fb5a 	bl	80009f8 <__aeabi_dcmpgt>
 800c344:	2800      	cmp	r0, #0
 800c346:	d145      	bne.n	800c3d4 <_dtoa_r+0x6bc>
 800c348:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c34c:	2000      	movs	r0, #0
 800c34e:	4932      	ldr	r1, [pc, #200]	@ (800c418 <_dtoa_r+0x700>)
 800c350:	f7f3 ff0a 	bl	8000168 <__aeabi_dsub>
 800c354:	4602      	mov	r2, r0
 800c356:	460b      	mov	r3, r1
 800c358:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c35c:	f7f4 fb2e 	bl	80009bc <__aeabi_dcmplt>
 800c360:	2800      	cmp	r0, #0
 800c362:	f43f aef6 	beq.w	800c152 <_dtoa_r+0x43a>
 800c366:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c368:	1e73      	subs	r3, r6, #1
 800c36a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c36c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c370:	2b30      	cmp	r3, #48	@ 0x30
 800c372:	d0f8      	beq.n	800c366 <_dtoa_r+0x64e>
 800c374:	9f04      	ldr	r7, [sp, #16]
 800c376:	e73f      	b.n	800c1f8 <_dtoa_r+0x4e0>
 800c378:	4b29      	ldr	r3, [pc, #164]	@ (800c420 <_dtoa_r+0x708>)
 800c37a:	f7f4 f8ad 	bl	80004d8 <__aeabi_dmul>
 800c37e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c382:	e7bc      	b.n	800c2fe <_dtoa_r+0x5e6>
 800c384:	d10c      	bne.n	800c3a0 <_dtoa_r+0x688>
 800c386:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c38a:	2200      	movs	r2, #0
 800c38c:	4b25      	ldr	r3, [pc, #148]	@ (800c424 <_dtoa_r+0x70c>)
 800c38e:	f7f4 f8a3 	bl	80004d8 <__aeabi_dmul>
 800c392:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c396:	f7f4 fb25 	bl	80009e4 <__aeabi_dcmpge>
 800c39a:	2800      	cmp	r0, #0
 800c39c:	f000 815b 	beq.w	800c656 <_dtoa_r+0x93e>
 800c3a0:	2400      	movs	r4, #0
 800c3a2:	4625      	mov	r5, r4
 800c3a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c3a6:	4656      	mov	r6, sl
 800c3a8:	43db      	mvns	r3, r3
 800c3aa:	9304      	str	r3, [sp, #16]
 800c3ac:	2700      	movs	r7, #0
 800c3ae:	4621      	mov	r1, r4
 800c3b0:	4658      	mov	r0, fp
 800c3b2:	f000 fbb7 	bl	800cb24 <_Bfree>
 800c3b6:	2d00      	cmp	r5, #0
 800c3b8:	d0dc      	beq.n	800c374 <_dtoa_r+0x65c>
 800c3ba:	b12f      	cbz	r7, 800c3c8 <_dtoa_r+0x6b0>
 800c3bc:	42af      	cmp	r7, r5
 800c3be:	d003      	beq.n	800c3c8 <_dtoa_r+0x6b0>
 800c3c0:	4639      	mov	r1, r7
 800c3c2:	4658      	mov	r0, fp
 800c3c4:	f000 fbae 	bl	800cb24 <_Bfree>
 800c3c8:	4629      	mov	r1, r5
 800c3ca:	4658      	mov	r0, fp
 800c3cc:	f000 fbaa 	bl	800cb24 <_Bfree>
 800c3d0:	e7d0      	b.n	800c374 <_dtoa_r+0x65c>
 800c3d2:	9704      	str	r7, [sp, #16]
 800c3d4:	4633      	mov	r3, r6
 800c3d6:	461e      	mov	r6, r3
 800c3d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3dc:	2a39      	cmp	r2, #57	@ 0x39
 800c3de:	d107      	bne.n	800c3f0 <_dtoa_r+0x6d8>
 800c3e0:	459a      	cmp	sl, r3
 800c3e2:	d1f8      	bne.n	800c3d6 <_dtoa_r+0x6be>
 800c3e4:	9a04      	ldr	r2, [sp, #16]
 800c3e6:	3201      	adds	r2, #1
 800c3e8:	9204      	str	r2, [sp, #16]
 800c3ea:	2230      	movs	r2, #48	@ 0x30
 800c3ec:	f88a 2000 	strb.w	r2, [sl]
 800c3f0:	781a      	ldrb	r2, [r3, #0]
 800c3f2:	3201      	adds	r2, #1
 800c3f4:	701a      	strb	r2, [r3, #0]
 800c3f6:	e7bd      	b.n	800c374 <_dtoa_r+0x65c>
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	4b09      	ldr	r3, [pc, #36]	@ (800c420 <_dtoa_r+0x708>)
 800c3fc:	f7f4 f86c 	bl	80004d8 <__aeabi_dmul>
 800c400:	2200      	movs	r2, #0
 800c402:	2300      	movs	r3, #0
 800c404:	4604      	mov	r4, r0
 800c406:	460d      	mov	r5, r1
 800c408:	f7f4 face 	bl	80009a8 <__aeabi_dcmpeq>
 800c40c:	2800      	cmp	r0, #0
 800c40e:	f43f aebc 	beq.w	800c18a <_dtoa_r+0x472>
 800c412:	e6f1      	b.n	800c1f8 <_dtoa_r+0x4e0>
 800c414:	0800f1b8 	.word	0x0800f1b8
 800c418:	3fe00000 	.word	0x3fe00000
 800c41c:	3ff00000 	.word	0x3ff00000
 800c420:	40240000 	.word	0x40240000
 800c424:	40140000 	.word	0x40140000
 800c428:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c42a:	2a00      	cmp	r2, #0
 800c42c:	f000 80db 	beq.w	800c5e6 <_dtoa_r+0x8ce>
 800c430:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c432:	2a01      	cmp	r2, #1
 800c434:	f300 80bf 	bgt.w	800c5b6 <_dtoa_r+0x89e>
 800c438:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c43a:	2a00      	cmp	r2, #0
 800c43c:	f000 80b7 	beq.w	800c5ae <_dtoa_r+0x896>
 800c440:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c444:	4646      	mov	r6, r8
 800c446:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c448:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c44a:	2101      	movs	r1, #1
 800c44c:	441a      	add	r2, r3
 800c44e:	4658      	mov	r0, fp
 800c450:	4498      	add	r8, r3
 800c452:	9209      	str	r2, [sp, #36]	@ 0x24
 800c454:	f000 fc1a 	bl	800cc8c <__i2b>
 800c458:	4605      	mov	r5, r0
 800c45a:	b15e      	cbz	r6, 800c474 <_dtoa_r+0x75c>
 800c45c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c45e:	2b00      	cmp	r3, #0
 800c460:	dd08      	ble.n	800c474 <_dtoa_r+0x75c>
 800c462:	42b3      	cmp	r3, r6
 800c464:	bfa8      	it	ge
 800c466:	4633      	movge	r3, r6
 800c468:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c46a:	eba8 0803 	sub.w	r8, r8, r3
 800c46e:	1af6      	subs	r6, r6, r3
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	9309      	str	r3, [sp, #36]	@ 0x24
 800c474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c476:	b1f3      	cbz	r3, 800c4b6 <_dtoa_r+0x79e>
 800c478:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	f000 80b7 	beq.w	800c5ee <_dtoa_r+0x8d6>
 800c480:	b18c      	cbz	r4, 800c4a6 <_dtoa_r+0x78e>
 800c482:	4629      	mov	r1, r5
 800c484:	4622      	mov	r2, r4
 800c486:	4658      	mov	r0, fp
 800c488:	f000 fcbe 	bl	800ce08 <__pow5mult>
 800c48c:	464a      	mov	r2, r9
 800c48e:	4601      	mov	r1, r0
 800c490:	4605      	mov	r5, r0
 800c492:	4658      	mov	r0, fp
 800c494:	f000 fc10 	bl	800ccb8 <__multiply>
 800c498:	4649      	mov	r1, r9
 800c49a:	9004      	str	r0, [sp, #16]
 800c49c:	4658      	mov	r0, fp
 800c49e:	f000 fb41 	bl	800cb24 <_Bfree>
 800c4a2:	9b04      	ldr	r3, [sp, #16]
 800c4a4:	4699      	mov	r9, r3
 800c4a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4a8:	1b1a      	subs	r2, r3, r4
 800c4aa:	d004      	beq.n	800c4b6 <_dtoa_r+0x79e>
 800c4ac:	4649      	mov	r1, r9
 800c4ae:	4658      	mov	r0, fp
 800c4b0:	f000 fcaa 	bl	800ce08 <__pow5mult>
 800c4b4:	4681      	mov	r9, r0
 800c4b6:	2101      	movs	r1, #1
 800c4b8:	4658      	mov	r0, fp
 800c4ba:	f000 fbe7 	bl	800cc8c <__i2b>
 800c4be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4c0:	4604      	mov	r4, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f000 81c9 	beq.w	800c85a <_dtoa_r+0xb42>
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	4601      	mov	r1, r0
 800c4cc:	4658      	mov	r0, fp
 800c4ce:	f000 fc9b 	bl	800ce08 <__pow5mult>
 800c4d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	f300 808f 	bgt.w	800c5fa <_dtoa_r+0x8e2>
 800c4dc:	9b02      	ldr	r3, [sp, #8]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f040 8087 	bne.w	800c5f2 <_dtoa_r+0x8da>
 800c4e4:	9b03      	ldr	r3, [sp, #12]
 800c4e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f040 8083 	bne.w	800c5f6 <_dtoa_r+0x8de>
 800c4f0:	9b03      	ldr	r3, [sp, #12]
 800c4f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c4f6:	0d1b      	lsrs	r3, r3, #20
 800c4f8:	051b      	lsls	r3, r3, #20
 800c4fa:	b12b      	cbz	r3, 800c508 <_dtoa_r+0x7f0>
 800c4fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4fe:	f108 0801 	add.w	r8, r8, #1
 800c502:	3301      	adds	r3, #1
 800c504:	9309      	str	r3, [sp, #36]	@ 0x24
 800c506:	2301      	movs	r3, #1
 800c508:	930a      	str	r3, [sp, #40]	@ 0x28
 800c50a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f000 81aa 	beq.w	800c866 <_dtoa_r+0xb4e>
 800c512:	6923      	ldr	r3, [r4, #16]
 800c514:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c518:	6918      	ldr	r0, [r3, #16]
 800c51a:	f000 fb6b 	bl	800cbf4 <__hi0bits>
 800c51e:	f1c0 0020 	rsb	r0, r0, #32
 800c522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c524:	4418      	add	r0, r3
 800c526:	f010 001f 	ands.w	r0, r0, #31
 800c52a:	d071      	beq.n	800c610 <_dtoa_r+0x8f8>
 800c52c:	f1c0 0320 	rsb	r3, r0, #32
 800c530:	2b04      	cmp	r3, #4
 800c532:	dd65      	ble.n	800c600 <_dtoa_r+0x8e8>
 800c534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c536:	f1c0 001c 	rsb	r0, r0, #28
 800c53a:	4403      	add	r3, r0
 800c53c:	4480      	add	r8, r0
 800c53e:	4406      	add	r6, r0
 800c540:	9309      	str	r3, [sp, #36]	@ 0x24
 800c542:	f1b8 0f00 	cmp.w	r8, #0
 800c546:	dd05      	ble.n	800c554 <_dtoa_r+0x83c>
 800c548:	4649      	mov	r1, r9
 800c54a:	4642      	mov	r2, r8
 800c54c:	4658      	mov	r0, fp
 800c54e:	f000 fcb5 	bl	800cebc <__lshift>
 800c552:	4681      	mov	r9, r0
 800c554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c556:	2b00      	cmp	r3, #0
 800c558:	dd05      	ble.n	800c566 <_dtoa_r+0x84e>
 800c55a:	4621      	mov	r1, r4
 800c55c:	461a      	mov	r2, r3
 800c55e:	4658      	mov	r0, fp
 800c560:	f000 fcac 	bl	800cebc <__lshift>
 800c564:	4604      	mov	r4, r0
 800c566:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d053      	beq.n	800c614 <_dtoa_r+0x8fc>
 800c56c:	4621      	mov	r1, r4
 800c56e:	4648      	mov	r0, r9
 800c570:	f000 fd10 	bl	800cf94 <__mcmp>
 800c574:	2800      	cmp	r0, #0
 800c576:	da4d      	bge.n	800c614 <_dtoa_r+0x8fc>
 800c578:	1e7b      	subs	r3, r7, #1
 800c57a:	4649      	mov	r1, r9
 800c57c:	9304      	str	r3, [sp, #16]
 800c57e:	220a      	movs	r2, #10
 800c580:	2300      	movs	r3, #0
 800c582:	4658      	mov	r0, fp
 800c584:	f000 faf0 	bl	800cb68 <__multadd>
 800c588:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c58a:	4681      	mov	r9, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f000 816c 	beq.w	800c86a <_dtoa_r+0xb52>
 800c592:	2300      	movs	r3, #0
 800c594:	4629      	mov	r1, r5
 800c596:	220a      	movs	r2, #10
 800c598:	4658      	mov	r0, fp
 800c59a:	f000 fae5 	bl	800cb68 <__multadd>
 800c59e:	9b08      	ldr	r3, [sp, #32]
 800c5a0:	4605      	mov	r5, r0
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	dc61      	bgt.n	800c66a <_dtoa_r+0x952>
 800c5a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c5a8:	2b02      	cmp	r3, #2
 800c5aa:	dc3b      	bgt.n	800c624 <_dtoa_r+0x90c>
 800c5ac:	e05d      	b.n	800c66a <_dtoa_r+0x952>
 800c5ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c5b0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c5b4:	e746      	b.n	800c444 <_dtoa_r+0x72c>
 800c5b6:	9b07      	ldr	r3, [sp, #28]
 800c5b8:	1e5c      	subs	r4, r3, #1
 800c5ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5bc:	42a3      	cmp	r3, r4
 800c5be:	bfbf      	itttt	lt
 800c5c0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c5c2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800c5c4:	1ae3      	sublt	r3, r4, r3
 800c5c6:	18d2      	addlt	r2, r2, r3
 800c5c8:	bfa8      	it	ge
 800c5ca:	1b1c      	subge	r4, r3, r4
 800c5cc:	9b07      	ldr	r3, [sp, #28]
 800c5ce:	bfbe      	ittt	lt
 800c5d0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c5d2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800c5d4:	2400      	movlt	r4, #0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	bfb5      	itete	lt
 800c5da:	eba8 0603 	sublt.w	r6, r8, r3
 800c5de:	4646      	movge	r6, r8
 800c5e0:	2300      	movlt	r3, #0
 800c5e2:	9b07      	ldrge	r3, [sp, #28]
 800c5e4:	e730      	b.n	800c448 <_dtoa_r+0x730>
 800c5e6:	4646      	mov	r6, r8
 800c5e8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c5ea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c5ec:	e735      	b.n	800c45a <_dtoa_r+0x742>
 800c5ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c5f0:	e75c      	b.n	800c4ac <_dtoa_r+0x794>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	e788      	b.n	800c508 <_dtoa_r+0x7f0>
 800c5f6:	9b02      	ldr	r3, [sp, #8]
 800c5f8:	e786      	b.n	800c508 <_dtoa_r+0x7f0>
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5fe:	e788      	b.n	800c512 <_dtoa_r+0x7fa>
 800c600:	d09f      	beq.n	800c542 <_dtoa_r+0x82a>
 800c602:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c604:	331c      	adds	r3, #28
 800c606:	441a      	add	r2, r3
 800c608:	4498      	add	r8, r3
 800c60a:	441e      	add	r6, r3
 800c60c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c60e:	e798      	b.n	800c542 <_dtoa_r+0x82a>
 800c610:	4603      	mov	r3, r0
 800c612:	e7f6      	b.n	800c602 <_dtoa_r+0x8ea>
 800c614:	9b07      	ldr	r3, [sp, #28]
 800c616:	9704      	str	r7, [sp, #16]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	dc20      	bgt.n	800c65e <_dtoa_r+0x946>
 800c61c:	9308      	str	r3, [sp, #32]
 800c61e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c620:	2b02      	cmp	r3, #2
 800c622:	dd1e      	ble.n	800c662 <_dtoa_r+0x94a>
 800c624:	9b08      	ldr	r3, [sp, #32]
 800c626:	2b00      	cmp	r3, #0
 800c628:	f47f aebc 	bne.w	800c3a4 <_dtoa_r+0x68c>
 800c62c:	4621      	mov	r1, r4
 800c62e:	2205      	movs	r2, #5
 800c630:	4658      	mov	r0, fp
 800c632:	f000 fa99 	bl	800cb68 <__multadd>
 800c636:	4601      	mov	r1, r0
 800c638:	4604      	mov	r4, r0
 800c63a:	4648      	mov	r0, r9
 800c63c:	f000 fcaa 	bl	800cf94 <__mcmp>
 800c640:	2800      	cmp	r0, #0
 800c642:	f77f aeaf 	ble.w	800c3a4 <_dtoa_r+0x68c>
 800c646:	2331      	movs	r3, #49	@ 0x31
 800c648:	4656      	mov	r6, sl
 800c64a:	f806 3b01 	strb.w	r3, [r6], #1
 800c64e:	9b04      	ldr	r3, [sp, #16]
 800c650:	3301      	adds	r3, #1
 800c652:	9304      	str	r3, [sp, #16]
 800c654:	e6aa      	b.n	800c3ac <_dtoa_r+0x694>
 800c656:	9c07      	ldr	r4, [sp, #28]
 800c658:	9704      	str	r7, [sp, #16]
 800c65a:	4625      	mov	r5, r4
 800c65c:	e7f3      	b.n	800c646 <_dtoa_r+0x92e>
 800c65e:	9b07      	ldr	r3, [sp, #28]
 800c660:	9308      	str	r3, [sp, #32]
 800c662:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c664:	2b00      	cmp	r3, #0
 800c666:	f000 8104 	beq.w	800c872 <_dtoa_r+0xb5a>
 800c66a:	2e00      	cmp	r6, #0
 800c66c:	dd05      	ble.n	800c67a <_dtoa_r+0x962>
 800c66e:	4629      	mov	r1, r5
 800c670:	4632      	mov	r2, r6
 800c672:	4658      	mov	r0, fp
 800c674:	f000 fc22 	bl	800cebc <__lshift>
 800c678:	4605      	mov	r5, r0
 800c67a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d05a      	beq.n	800c736 <_dtoa_r+0xa1e>
 800c680:	4658      	mov	r0, fp
 800c682:	6869      	ldr	r1, [r5, #4]
 800c684:	f000 fa0e 	bl	800caa4 <_Balloc>
 800c688:	4606      	mov	r6, r0
 800c68a:	b928      	cbnz	r0, 800c698 <_dtoa_r+0x980>
 800c68c:	4602      	mov	r2, r0
 800c68e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c692:	4b83      	ldr	r3, [pc, #524]	@ (800c8a0 <_dtoa_r+0xb88>)
 800c694:	f7ff bb54 	b.w	800bd40 <_dtoa_r+0x28>
 800c698:	692a      	ldr	r2, [r5, #16]
 800c69a:	f105 010c 	add.w	r1, r5, #12
 800c69e:	3202      	adds	r2, #2
 800c6a0:	0092      	lsls	r2, r2, #2
 800c6a2:	300c      	adds	r0, #12
 800c6a4:	f000 ffa8 	bl	800d5f8 <memcpy>
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	4658      	mov	r0, fp
 800c6ae:	f000 fc05 	bl	800cebc <__lshift>
 800c6b2:	462f      	mov	r7, r5
 800c6b4:	4605      	mov	r5, r0
 800c6b6:	f10a 0301 	add.w	r3, sl, #1
 800c6ba:	9307      	str	r3, [sp, #28]
 800c6bc:	9b08      	ldr	r3, [sp, #32]
 800c6be:	4453      	add	r3, sl
 800c6c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6c2:	9b02      	ldr	r3, [sp, #8]
 800c6c4:	f003 0301 	and.w	r3, r3, #1
 800c6c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6ca:	9b07      	ldr	r3, [sp, #28]
 800c6cc:	4621      	mov	r1, r4
 800c6ce:	3b01      	subs	r3, #1
 800c6d0:	4648      	mov	r0, r9
 800c6d2:	9302      	str	r3, [sp, #8]
 800c6d4:	f7ff fa95 	bl	800bc02 <quorem>
 800c6d8:	4639      	mov	r1, r7
 800c6da:	9008      	str	r0, [sp, #32]
 800c6dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c6e0:	4648      	mov	r0, r9
 800c6e2:	f000 fc57 	bl	800cf94 <__mcmp>
 800c6e6:	462a      	mov	r2, r5
 800c6e8:	9009      	str	r0, [sp, #36]	@ 0x24
 800c6ea:	4621      	mov	r1, r4
 800c6ec:	4658      	mov	r0, fp
 800c6ee:	f000 fc6d 	bl	800cfcc <__mdiff>
 800c6f2:	68c2      	ldr	r2, [r0, #12]
 800c6f4:	4606      	mov	r6, r0
 800c6f6:	bb02      	cbnz	r2, 800c73a <_dtoa_r+0xa22>
 800c6f8:	4601      	mov	r1, r0
 800c6fa:	4648      	mov	r0, r9
 800c6fc:	f000 fc4a 	bl	800cf94 <__mcmp>
 800c700:	4602      	mov	r2, r0
 800c702:	4631      	mov	r1, r6
 800c704:	4658      	mov	r0, fp
 800c706:	920c      	str	r2, [sp, #48]	@ 0x30
 800c708:	f000 fa0c 	bl	800cb24 <_Bfree>
 800c70c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c70e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c710:	9e07      	ldr	r6, [sp, #28]
 800c712:	ea43 0102 	orr.w	r1, r3, r2
 800c716:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c718:	4319      	orrs	r1, r3
 800c71a:	d110      	bne.n	800c73e <_dtoa_r+0xa26>
 800c71c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c720:	d029      	beq.n	800c776 <_dtoa_r+0xa5e>
 800c722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c724:	2b00      	cmp	r3, #0
 800c726:	dd02      	ble.n	800c72e <_dtoa_r+0xa16>
 800c728:	9b08      	ldr	r3, [sp, #32]
 800c72a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c72e:	9b02      	ldr	r3, [sp, #8]
 800c730:	f883 8000 	strb.w	r8, [r3]
 800c734:	e63b      	b.n	800c3ae <_dtoa_r+0x696>
 800c736:	4628      	mov	r0, r5
 800c738:	e7bb      	b.n	800c6b2 <_dtoa_r+0x99a>
 800c73a:	2201      	movs	r2, #1
 800c73c:	e7e1      	b.n	800c702 <_dtoa_r+0x9ea>
 800c73e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c740:	2b00      	cmp	r3, #0
 800c742:	db04      	blt.n	800c74e <_dtoa_r+0xa36>
 800c744:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800c746:	430b      	orrs	r3, r1
 800c748:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c74a:	430b      	orrs	r3, r1
 800c74c:	d120      	bne.n	800c790 <_dtoa_r+0xa78>
 800c74e:	2a00      	cmp	r2, #0
 800c750:	dded      	ble.n	800c72e <_dtoa_r+0xa16>
 800c752:	4649      	mov	r1, r9
 800c754:	2201      	movs	r2, #1
 800c756:	4658      	mov	r0, fp
 800c758:	f000 fbb0 	bl	800cebc <__lshift>
 800c75c:	4621      	mov	r1, r4
 800c75e:	4681      	mov	r9, r0
 800c760:	f000 fc18 	bl	800cf94 <__mcmp>
 800c764:	2800      	cmp	r0, #0
 800c766:	dc03      	bgt.n	800c770 <_dtoa_r+0xa58>
 800c768:	d1e1      	bne.n	800c72e <_dtoa_r+0xa16>
 800c76a:	f018 0f01 	tst.w	r8, #1
 800c76e:	d0de      	beq.n	800c72e <_dtoa_r+0xa16>
 800c770:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c774:	d1d8      	bne.n	800c728 <_dtoa_r+0xa10>
 800c776:	2339      	movs	r3, #57	@ 0x39
 800c778:	9a02      	ldr	r2, [sp, #8]
 800c77a:	7013      	strb	r3, [r2, #0]
 800c77c:	4633      	mov	r3, r6
 800c77e:	461e      	mov	r6, r3
 800c780:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c784:	3b01      	subs	r3, #1
 800c786:	2a39      	cmp	r2, #57	@ 0x39
 800c788:	d052      	beq.n	800c830 <_dtoa_r+0xb18>
 800c78a:	3201      	adds	r2, #1
 800c78c:	701a      	strb	r2, [r3, #0]
 800c78e:	e60e      	b.n	800c3ae <_dtoa_r+0x696>
 800c790:	2a00      	cmp	r2, #0
 800c792:	dd07      	ble.n	800c7a4 <_dtoa_r+0xa8c>
 800c794:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c798:	d0ed      	beq.n	800c776 <_dtoa_r+0xa5e>
 800c79a:	9a02      	ldr	r2, [sp, #8]
 800c79c:	f108 0301 	add.w	r3, r8, #1
 800c7a0:	7013      	strb	r3, [r2, #0]
 800c7a2:	e604      	b.n	800c3ae <_dtoa_r+0x696>
 800c7a4:	9b07      	ldr	r3, [sp, #28]
 800c7a6:	9a07      	ldr	r2, [sp, #28]
 800c7a8:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c7ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d028      	beq.n	800c804 <_dtoa_r+0xaec>
 800c7b2:	4649      	mov	r1, r9
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	220a      	movs	r2, #10
 800c7b8:	4658      	mov	r0, fp
 800c7ba:	f000 f9d5 	bl	800cb68 <__multadd>
 800c7be:	42af      	cmp	r7, r5
 800c7c0:	4681      	mov	r9, r0
 800c7c2:	f04f 0300 	mov.w	r3, #0
 800c7c6:	f04f 020a 	mov.w	r2, #10
 800c7ca:	4639      	mov	r1, r7
 800c7cc:	4658      	mov	r0, fp
 800c7ce:	d107      	bne.n	800c7e0 <_dtoa_r+0xac8>
 800c7d0:	f000 f9ca 	bl	800cb68 <__multadd>
 800c7d4:	4607      	mov	r7, r0
 800c7d6:	4605      	mov	r5, r0
 800c7d8:	9b07      	ldr	r3, [sp, #28]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	9307      	str	r3, [sp, #28]
 800c7de:	e774      	b.n	800c6ca <_dtoa_r+0x9b2>
 800c7e0:	f000 f9c2 	bl	800cb68 <__multadd>
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	4607      	mov	r7, r0
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	220a      	movs	r2, #10
 800c7ec:	4658      	mov	r0, fp
 800c7ee:	f000 f9bb 	bl	800cb68 <__multadd>
 800c7f2:	4605      	mov	r5, r0
 800c7f4:	e7f0      	b.n	800c7d8 <_dtoa_r+0xac0>
 800c7f6:	9b08      	ldr	r3, [sp, #32]
 800c7f8:	2700      	movs	r7, #0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	bfcc      	ite	gt
 800c7fe:	461e      	movgt	r6, r3
 800c800:	2601      	movle	r6, #1
 800c802:	4456      	add	r6, sl
 800c804:	4649      	mov	r1, r9
 800c806:	2201      	movs	r2, #1
 800c808:	4658      	mov	r0, fp
 800c80a:	f000 fb57 	bl	800cebc <__lshift>
 800c80e:	4621      	mov	r1, r4
 800c810:	4681      	mov	r9, r0
 800c812:	f000 fbbf 	bl	800cf94 <__mcmp>
 800c816:	2800      	cmp	r0, #0
 800c818:	dcb0      	bgt.n	800c77c <_dtoa_r+0xa64>
 800c81a:	d102      	bne.n	800c822 <_dtoa_r+0xb0a>
 800c81c:	f018 0f01 	tst.w	r8, #1
 800c820:	d1ac      	bne.n	800c77c <_dtoa_r+0xa64>
 800c822:	4633      	mov	r3, r6
 800c824:	461e      	mov	r6, r3
 800c826:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c82a:	2a30      	cmp	r2, #48	@ 0x30
 800c82c:	d0fa      	beq.n	800c824 <_dtoa_r+0xb0c>
 800c82e:	e5be      	b.n	800c3ae <_dtoa_r+0x696>
 800c830:	459a      	cmp	sl, r3
 800c832:	d1a4      	bne.n	800c77e <_dtoa_r+0xa66>
 800c834:	9b04      	ldr	r3, [sp, #16]
 800c836:	3301      	adds	r3, #1
 800c838:	9304      	str	r3, [sp, #16]
 800c83a:	2331      	movs	r3, #49	@ 0x31
 800c83c:	f88a 3000 	strb.w	r3, [sl]
 800c840:	e5b5      	b.n	800c3ae <_dtoa_r+0x696>
 800c842:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c844:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c8a4 <_dtoa_r+0xb8c>
 800c848:	b11b      	cbz	r3, 800c852 <_dtoa_r+0xb3a>
 800c84a:	f10a 0308 	add.w	r3, sl, #8
 800c84e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c850:	6013      	str	r3, [r2, #0]
 800c852:	4650      	mov	r0, sl
 800c854:	b017      	add	sp, #92	@ 0x5c
 800c856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c85a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	f77f ae3d 	ble.w	800c4dc <_dtoa_r+0x7c4>
 800c862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c864:	930a      	str	r3, [sp, #40]	@ 0x28
 800c866:	2001      	movs	r0, #1
 800c868:	e65b      	b.n	800c522 <_dtoa_r+0x80a>
 800c86a:	9b08      	ldr	r3, [sp, #32]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f77f aed6 	ble.w	800c61e <_dtoa_r+0x906>
 800c872:	4656      	mov	r6, sl
 800c874:	4621      	mov	r1, r4
 800c876:	4648      	mov	r0, r9
 800c878:	f7ff f9c3 	bl	800bc02 <quorem>
 800c87c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c880:	9b08      	ldr	r3, [sp, #32]
 800c882:	f806 8b01 	strb.w	r8, [r6], #1
 800c886:	eba6 020a 	sub.w	r2, r6, sl
 800c88a:	4293      	cmp	r3, r2
 800c88c:	ddb3      	ble.n	800c7f6 <_dtoa_r+0xade>
 800c88e:	4649      	mov	r1, r9
 800c890:	2300      	movs	r3, #0
 800c892:	220a      	movs	r2, #10
 800c894:	4658      	mov	r0, fp
 800c896:	f000 f967 	bl	800cb68 <__multadd>
 800c89a:	4681      	mov	r9, r0
 800c89c:	e7ea      	b.n	800c874 <_dtoa_r+0xb5c>
 800c89e:	bf00      	nop
 800c8a0:	0800f114 	.word	0x0800f114
 800c8a4:	0800f098 	.word	0x0800f098

0800c8a8 <_free_r>:
 800c8a8:	b538      	push	{r3, r4, r5, lr}
 800c8aa:	4605      	mov	r5, r0
 800c8ac:	2900      	cmp	r1, #0
 800c8ae:	d040      	beq.n	800c932 <_free_r+0x8a>
 800c8b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8b4:	1f0c      	subs	r4, r1, #4
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	bfb8      	it	lt
 800c8ba:	18e4      	addlt	r4, r4, r3
 800c8bc:	f000 f8e6 	bl	800ca8c <__malloc_lock>
 800c8c0:	4a1c      	ldr	r2, [pc, #112]	@ (800c934 <_free_r+0x8c>)
 800c8c2:	6813      	ldr	r3, [r2, #0]
 800c8c4:	b933      	cbnz	r3, 800c8d4 <_free_r+0x2c>
 800c8c6:	6063      	str	r3, [r4, #4]
 800c8c8:	6014      	str	r4, [r2, #0]
 800c8ca:	4628      	mov	r0, r5
 800c8cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8d0:	f000 b8e2 	b.w	800ca98 <__malloc_unlock>
 800c8d4:	42a3      	cmp	r3, r4
 800c8d6:	d908      	bls.n	800c8ea <_free_r+0x42>
 800c8d8:	6820      	ldr	r0, [r4, #0]
 800c8da:	1821      	adds	r1, r4, r0
 800c8dc:	428b      	cmp	r3, r1
 800c8de:	bf01      	itttt	eq
 800c8e0:	6819      	ldreq	r1, [r3, #0]
 800c8e2:	685b      	ldreq	r3, [r3, #4]
 800c8e4:	1809      	addeq	r1, r1, r0
 800c8e6:	6021      	streq	r1, [r4, #0]
 800c8e8:	e7ed      	b.n	800c8c6 <_free_r+0x1e>
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	b10b      	cbz	r3, 800c8f4 <_free_r+0x4c>
 800c8f0:	42a3      	cmp	r3, r4
 800c8f2:	d9fa      	bls.n	800c8ea <_free_r+0x42>
 800c8f4:	6811      	ldr	r1, [r2, #0]
 800c8f6:	1850      	adds	r0, r2, r1
 800c8f8:	42a0      	cmp	r0, r4
 800c8fa:	d10b      	bne.n	800c914 <_free_r+0x6c>
 800c8fc:	6820      	ldr	r0, [r4, #0]
 800c8fe:	4401      	add	r1, r0
 800c900:	1850      	adds	r0, r2, r1
 800c902:	4283      	cmp	r3, r0
 800c904:	6011      	str	r1, [r2, #0]
 800c906:	d1e0      	bne.n	800c8ca <_free_r+0x22>
 800c908:	6818      	ldr	r0, [r3, #0]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	4408      	add	r0, r1
 800c90e:	6010      	str	r0, [r2, #0]
 800c910:	6053      	str	r3, [r2, #4]
 800c912:	e7da      	b.n	800c8ca <_free_r+0x22>
 800c914:	d902      	bls.n	800c91c <_free_r+0x74>
 800c916:	230c      	movs	r3, #12
 800c918:	602b      	str	r3, [r5, #0]
 800c91a:	e7d6      	b.n	800c8ca <_free_r+0x22>
 800c91c:	6820      	ldr	r0, [r4, #0]
 800c91e:	1821      	adds	r1, r4, r0
 800c920:	428b      	cmp	r3, r1
 800c922:	bf01      	itttt	eq
 800c924:	6819      	ldreq	r1, [r3, #0]
 800c926:	685b      	ldreq	r3, [r3, #4]
 800c928:	1809      	addeq	r1, r1, r0
 800c92a:	6021      	streq	r1, [r4, #0]
 800c92c:	6063      	str	r3, [r4, #4]
 800c92e:	6054      	str	r4, [r2, #4]
 800c930:	e7cb      	b.n	800c8ca <_free_r+0x22>
 800c932:	bd38      	pop	{r3, r4, r5, pc}
 800c934:	20002d04 	.word	0x20002d04

0800c938 <malloc>:
 800c938:	4b02      	ldr	r3, [pc, #8]	@ (800c944 <malloc+0xc>)
 800c93a:	4601      	mov	r1, r0
 800c93c:	6818      	ldr	r0, [r3, #0]
 800c93e:	f000 b825 	b.w	800c98c <_malloc_r>
 800c942:	bf00      	nop
 800c944:	20000038 	.word	0x20000038

0800c948 <sbrk_aligned>:
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	4e0f      	ldr	r6, [pc, #60]	@ (800c988 <sbrk_aligned+0x40>)
 800c94c:	460c      	mov	r4, r1
 800c94e:	6831      	ldr	r1, [r6, #0]
 800c950:	4605      	mov	r5, r0
 800c952:	b911      	cbnz	r1, 800c95a <sbrk_aligned+0x12>
 800c954:	f000 fe40 	bl	800d5d8 <_sbrk_r>
 800c958:	6030      	str	r0, [r6, #0]
 800c95a:	4621      	mov	r1, r4
 800c95c:	4628      	mov	r0, r5
 800c95e:	f000 fe3b 	bl	800d5d8 <_sbrk_r>
 800c962:	1c43      	adds	r3, r0, #1
 800c964:	d103      	bne.n	800c96e <sbrk_aligned+0x26>
 800c966:	f04f 34ff 	mov.w	r4, #4294967295
 800c96a:	4620      	mov	r0, r4
 800c96c:	bd70      	pop	{r4, r5, r6, pc}
 800c96e:	1cc4      	adds	r4, r0, #3
 800c970:	f024 0403 	bic.w	r4, r4, #3
 800c974:	42a0      	cmp	r0, r4
 800c976:	d0f8      	beq.n	800c96a <sbrk_aligned+0x22>
 800c978:	1a21      	subs	r1, r4, r0
 800c97a:	4628      	mov	r0, r5
 800c97c:	f000 fe2c 	bl	800d5d8 <_sbrk_r>
 800c980:	3001      	adds	r0, #1
 800c982:	d1f2      	bne.n	800c96a <sbrk_aligned+0x22>
 800c984:	e7ef      	b.n	800c966 <sbrk_aligned+0x1e>
 800c986:	bf00      	nop
 800c988:	20002d00 	.word	0x20002d00

0800c98c <_malloc_r>:
 800c98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c990:	1ccd      	adds	r5, r1, #3
 800c992:	f025 0503 	bic.w	r5, r5, #3
 800c996:	3508      	adds	r5, #8
 800c998:	2d0c      	cmp	r5, #12
 800c99a:	bf38      	it	cc
 800c99c:	250c      	movcc	r5, #12
 800c99e:	2d00      	cmp	r5, #0
 800c9a0:	4606      	mov	r6, r0
 800c9a2:	db01      	blt.n	800c9a8 <_malloc_r+0x1c>
 800c9a4:	42a9      	cmp	r1, r5
 800c9a6:	d904      	bls.n	800c9b2 <_malloc_r+0x26>
 800c9a8:	230c      	movs	r3, #12
 800c9aa:	6033      	str	r3, [r6, #0]
 800c9ac:	2000      	movs	r0, #0
 800c9ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ca88 <_malloc_r+0xfc>
 800c9b6:	f000 f869 	bl	800ca8c <__malloc_lock>
 800c9ba:	f8d8 3000 	ldr.w	r3, [r8]
 800c9be:	461c      	mov	r4, r3
 800c9c0:	bb44      	cbnz	r4, 800ca14 <_malloc_r+0x88>
 800c9c2:	4629      	mov	r1, r5
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	f7ff ffbf 	bl	800c948 <sbrk_aligned>
 800c9ca:	1c43      	adds	r3, r0, #1
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	d158      	bne.n	800ca82 <_malloc_r+0xf6>
 800c9d0:	f8d8 4000 	ldr.w	r4, [r8]
 800c9d4:	4627      	mov	r7, r4
 800c9d6:	2f00      	cmp	r7, #0
 800c9d8:	d143      	bne.n	800ca62 <_malloc_r+0xd6>
 800c9da:	2c00      	cmp	r4, #0
 800c9dc:	d04b      	beq.n	800ca76 <_malloc_r+0xea>
 800c9de:	6823      	ldr	r3, [r4, #0]
 800c9e0:	4639      	mov	r1, r7
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	eb04 0903 	add.w	r9, r4, r3
 800c9e8:	f000 fdf6 	bl	800d5d8 <_sbrk_r>
 800c9ec:	4581      	cmp	r9, r0
 800c9ee:	d142      	bne.n	800ca76 <_malloc_r+0xea>
 800c9f0:	6821      	ldr	r1, [r4, #0]
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	1a6d      	subs	r5, r5, r1
 800c9f6:	4629      	mov	r1, r5
 800c9f8:	f7ff ffa6 	bl	800c948 <sbrk_aligned>
 800c9fc:	3001      	adds	r0, #1
 800c9fe:	d03a      	beq.n	800ca76 <_malloc_r+0xea>
 800ca00:	6823      	ldr	r3, [r4, #0]
 800ca02:	442b      	add	r3, r5
 800ca04:	6023      	str	r3, [r4, #0]
 800ca06:	f8d8 3000 	ldr.w	r3, [r8]
 800ca0a:	685a      	ldr	r2, [r3, #4]
 800ca0c:	bb62      	cbnz	r2, 800ca68 <_malloc_r+0xdc>
 800ca0e:	f8c8 7000 	str.w	r7, [r8]
 800ca12:	e00f      	b.n	800ca34 <_malloc_r+0xa8>
 800ca14:	6822      	ldr	r2, [r4, #0]
 800ca16:	1b52      	subs	r2, r2, r5
 800ca18:	d420      	bmi.n	800ca5c <_malloc_r+0xd0>
 800ca1a:	2a0b      	cmp	r2, #11
 800ca1c:	d917      	bls.n	800ca4e <_malloc_r+0xc2>
 800ca1e:	1961      	adds	r1, r4, r5
 800ca20:	42a3      	cmp	r3, r4
 800ca22:	6025      	str	r5, [r4, #0]
 800ca24:	bf18      	it	ne
 800ca26:	6059      	strne	r1, [r3, #4]
 800ca28:	6863      	ldr	r3, [r4, #4]
 800ca2a:	bf08      	it	eq
 800ca2c:	f8c8 1000 	streq.w	r1, [r8]
 800ca30:	5162      	str	r2, [r4, r5]
 800ca32:	604b      	str	r3, [r1, #4]
 800ca34:	4630      	mov	r0, r6
 800ca36:	f000 f82f 	bl	800ca98 <__malloc_unlock>
 800ca3a:	f104 000b 	add.w	r0, r4, #11
 800ca3e:	1d23      	adds	r3, r4, #4
 800ca40:	f020 0007 	bic.w	r0, r0, #7
 800ca44:	1ac2      	subs	r2, r0, r3
 800ca46:	bf1c      	itt	ne
 800ca48:	1a1b      	subne	r3, r3, r0
 800ca4a:	50a3      	strne	r3, [r4, r2]
 800ca4c:	e7af      	b.n	800c9ae <_malloc_r+0x22>
 800ca4e:	6862      	ldr	r2, [r4, #4]
 800ca50:	42a3      	cmp	r3, r4
 800ca52:	bf0c      	ite	eq
 800ca54:	f8c8 2000 	streq.w	r2, [r8]
 800ca58:	605a      	strne	r2, [r3, #4]
 800ca5a:	e7eb      	b.n	800ca34 <_malloc_r+0xa8>
 800ca5c:	4623      	mov	r3, r4
 800ca5e:	6864      	ldr	r4, [r4, #4]
 800ca60:	e7ae      	b.n	800c9c0 <_malloc_r+0x34>
 800ca62:	463c      	mov	r4, r7
 800ca64:	687f      	ldr	r7, [r7, #4]
 800ca66:	e7b6      	b.n	800c9d6 <_malloc_r+0x4a>
 800ca68:	461a      	mov	r2, r3
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	42a3      	cmp	r3, r4
 800ca6e:	d1fb      	bne.n	800ca68 <_malloc_r+0xdc>
 800ca70:	2300      	movs	r3, #0
 800ca72:	6053      	str	r3, [r2, #4]
 800ca74:	e7de      	b.n	800ca34 <_malloc_r+0xa8>
 800ca76:	230c      	movs	r3, #12
 800ca78:	4630      	mov	r0, r6
 800ca7a:	6033      	str	r3, [r6, #0]
 800ca7c:	f000 f80c 	bl	800ca98 <__malloc_unlock>
 800ca80:	e794      	b.n	800c9ac <_malloc_r+0x20>
 800ca82:	6005      	str	r5, [r0, #0]
 800ca84:	e7d6      	b.n	800ca34 <_malloc_r+0xa8>
 800ca86:	bf00      	nop
 800ca88:	20002d04 	.word	0x20002d04

0800ca8c <__malloc_lock>:
 800ca8c:	4801      	ldr	r0, [pc, #4]	@ (800ca94 <__malloc_lock+0x8>)
 800ca8e:	f7ff b8a8 	b.w	800bbe2 <__retarget_lock_acquire_recursive>
 800ca92:	bf00      	nop
 800ca94:	20002cfc 	.word	0x20002cfc

0800ca98 <__malloc_unlock>:
 800ca98:	4801      	ldr	r0, [pc, #4]	@ (800caa0 <__malloc_unlock+0x8>)
 800ca9a:	f7ff b8a3 	b.w	800bbe4 <__retarget_lock_release_recursive>
 800ca9e:	bf00      	nop
 800caa0:	20002cfc 	.word	0x20002cfc

0800caa4 <_Balloc>:
 800caa4:	b570      	push	{r4, r5, r6, lr}
 800caa6:	69c6      	ldr	r6, [r0, #28]
 800caa8:	4604      	mov	r4, r0
 800caaa:	460d      	mov	r5, r1
 800caac:	b976      	cbnz	r6, 800cacc <_Balloc+0x28>
 800caae:	2010      	movs	r0, #16
 800cab0:	f7ff ff42 	bl	800c938 <malloc>
 800cab4:	4602      	mov	r2, r0
 800cab6:	61e0      	str	r0, [r4, #28]
 800cab8:	b920      	cbnz	r0, 800cac4 <_Balloc+0x20>
 800caba:	216b      	movs	r1, #107	@ 0x6b
 800cabc:	4b17      	ldr	r3, [pc, #92]	@ (800cb1c <_Balloc+0x78>)
 800cabe:	4818      	ldr	r0, [pc, #96]	@ (800cb20 <_Balloc+0x7c>)
 800cac0:	f000 fda8 	bl	800d614 <__assert_func>
 800cac4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cac8:	6006      	str	r6, [r0, #0]
 800caca:	60c6      	str	r6, [r0, #12]
 800cacc:	69e6      	ldr	r6, [r4, #28]
 800cace:	68f3      	ldr	r3, [r6, #12]
 800cad0:	b183      	cbz	r3, 800caf4 <_Balloc+0x50>
 800cad2:	69e3      	ldr	r3, [r4, #28]
 800cad4:	68db      	ldr	r3, [r3, #12]
 800cad6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cada:	b9b8      	cbnz	r0, 800cb0c <_Balloc+0x68>
 800cadc:	2101      	movs	r1, #1
 800cade:	fa01 f605 	lsl.w	r6, r1, r5
 800cae2:	1d72      	adds	r2, r6, #5
 800cae4:	4620      	mov	r0, r4
 800cae6:	0092      	lsls	r2, r2, #2
 800cae8:	f000 fdb2 	bl	800d650 <_calloc_r>
 800caec:	b160      	cbz	r0, 800cb08 <_Balloc+0x64>
 800caee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800caf2:	e00e      	b.n	800cb12 <_Balloc+0x6e>
 800caf4:	2221      	movs	r2, #33	@ 0x21
 800caf6:	2104      	movs	r1, #4
 800caf8:	4620      	mov	r0, r4
 800cafa:	f000 fda9 	bl	800d650 <_calloc_r>
 800cafe:	69e3      	ldr	r3, [r4, #28]
 800cb00:	60f0      	str	r0, [r6, #12]
 800cb02:	68db      	ldr	r3, [r3, #12]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d1e4      	bne.n	800cad2 <_Balloc+0x2e>
 800cb08:	2000      	movs	r0, #0
 800cb0a:	bd70      	pop	{r4, r5, r6, pc}
 800cb0c:	6802      	ldr	r2, [r0, #0]
 800cb0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb12:	2300      	movs	r3, #0
 800cb14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb18:	e7f7      	b.n	800cb0a <_Balloc+0x66>
 800cb1a:	bf00      	nop
 800cb1c:	0800f0a5 	.word	0x0800f0a5
 800cb20:	0800f125 	.word	0x0800f125

0800cb24 <_Bfree>:
 800cb24:	b570      	push	{r4, r5, r6, lr}
 800cb26:	69c6      	ldr	r6, [r0, #28]
 800cb28:	4605      	mov	r5, r0
 800cb2a:	460c      	mov	r4, r1
 800cb2c:	b976      	cbnz	r6, 800cb4c <_Bfree+0x28>
 800cb2e:	2010      	movs	r0, #16
 800cb30:	f7ff ff02 	bl	800c938 <malloc>
 800cb34:	4602      	mov	r2, r0
 800cb36:	61e8      	str	r0, [r5, #28]
 800cb38:	b920      	cbnz	r0, 800cb44 <_Bfree+0x20>
 800cb3a:	218f      	movs	r1, #143	@ 0x8f
 800cb3c:	4b08      	ldr	r3, [pc, #32]	@ (800cb60 <_Bfree+0x3c>)
 800cb3e:	4809      	ldr	r0, [pc, #36]	@ (800cb64 <_Bfree+0x40>)
 800cb40:	f000 fd68 	bl	800d614 <__assert_func>
 800cb44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb48:	6006      	str	r6, [r0, #0]
 800cb4a:	60c6      	str	r6, [r0, #12]
 800cb4c:	b13c      	cbz	r4, 800cb5e <_Bfree+0x3a>
 800cb4e:	69eb      	ldr	r3, [r5, #28]
 800cb50:	6862      	ldr	r2, [r4, #4]
 800cb52:	68db      	ldr	r3, [r3, #12]
 800cb54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb58:	6021      	str	r1, [r4, #0]
 800cb5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb5e:	bd70      	pop	{r4, r5, r6, pc}
 800cb60:	0800f0a5 	.word	0x0800f0a5
 800cb64:	0800f125 	.word	0x0800f125

0800cb68 <__multadd>:
 800cb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb6c:	4607      	mov	r7, r0
 800cb6e:	460c      	mov	r4, r1
 800cb70:	461e      	mov	r6, r3
 800cb72:	2000      	movs	r0, #0
 800cb74:	690d      	ldr	r5, [r1, #16]
 800cb76:	f101 0c14 	add.w	ip, r1, #20
 800cb7a:	f8dc 3000 	ldr.w	r3, [ip]
 800cb7e:	3001      	adds	r0, #1
 800cb80:	b299      	uxth	r1, r3
 800cb82:	fb02 6101 	mla	r1, r2, r1, r6
 800cb86:	0c1e      	lsrs	r6, r3, #16
 800cb88:	0c0b      	lsrs	r3, r1, #16
 800cb8a:	fb02 3306 	mla	r3, r2, r6, r3
 800cb8e:	b289      	uxth	r1, r1
 800cb90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb94:	4285      	cmp	r5, r0
 800cb96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb9a:	f84c 1b04 	str.w	r1, [ip], #4
 800cb9e:	dcec      	bgt.n	800cb7a <__multadd+0x12>
 800cba0:	b30e      	cbz	r6, 800cbe6 <__multadd+0x7e>
 800cba2:	68a3      	ldr	r3, [r4, #8]
 800cba4:	42ab      	cmp	r3, r5
 800cba6:	dc19      	bgt.n	800cbdc <__multadd+0x74>
 800cba8:	6861      	ldr	r1, [r4, #4]
 800cbaa:	4638      	mov	r0, r7
 800cbac:	3101      	adds	r1, #1
 800cbae:	f7ff ff79 	bl	800caa4 <_Balloc>
 800cbb2:	4680      	mov	r8, r0
 800cbb4:	b928      	cbnz	r0, 800cbc2 <__multadd+0x5a>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	21ba      	movs	r1, #186	@ 0xba
 800cbba:	4b0c      	ldr	r3, [pc, #48]	@ (800cbec <__multadd+0x84>)
 800cbbc:	480c      	ldr	r0, [pc, #48]	@ (800cbf0 <__multadd+0x88>)
 800cbbe:	f000 fd29 	bl	800d614 <__assert_func>
 800cbc2:	6922      	ldr	r2, [r4, #16]
 800cbc4:	f104 010c 	add.w	r1, r4, #12
 800cbc8:	3202      	adds	r2, #2
 800cbca:	0092      	lsls	r2, r2, #2
 800cbcc:	300c      	adds	r0, #12
 800cbce:	f000 fd13 	bl	800d5f8 <memcpy>
 800cbd2:	4621      	mov	r1, r4
 800cbd4:	4638      	mov	r0, r7
 800cbd6:	f7ff ffa5 	bl	800cb24 <_Bfree>
 800cbda:	4644      	mov	r4, r8
 800cbdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cbe0:	3501      	adds	r5, #1
 800cbe2:	615e      	str	r6, [r3, #20]
 800cbe4:	6125      	str	r5, [r4, #16]
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbec:	0800f114 	.word	0x0800f114
 800cbf0:	0800f125 	.word	0x0800f125

0800cbf4 <__hi0bits>:
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cbfa:	bf3a      	itte	cc
 800cbfc:	0403      	lslcc	r3, r0, #16
 800cbfe:	2010      	movcc	r0, #16
 800cc00:	2000      	movcs	r0, #0
 800cc02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc06:	bf3c      	itt	cc
 800cc08:	021b      	lslcc	r3, r3, #8
 800cc0a:	3008      	addcc	r0, #8
 800cc0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc10:	bf3c      	itt	cc
 800cc12:	011b      	lslcc	r3, r3, #4
 800cc14:	3004      	addcc	r0, #4
 800cc16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc1a:	bf3c      	itt	cc
 800cc1c:	009b      	lslcc	r3, r3, #2
 800cc1e:	3002      	addcc	r0, #2
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	db05      	blt.n	800cc30 <__hi0bits+0x3c>
 800cc24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cc28:	f100 0001 	add.w	r0, r0, #1
 800cc2c:	bf08      	it	eq
 800cc2e:	2020      	moveq	r0, #32
 800cc30:	4770      	bx	lr

0800cc32 <__lo0bits>:
 800cc32:	6803      	ldr	r3, [r0, #0]
 800cc34:	4602      	mov	r2, r0
 800cc36:	f013 0007 	ands.w	r0, r3, #7
 800cc3a:	d00b      	beq.n	800cc54 <__lo0bits+0x22>
 800cc3c:	07d9      	lsls	r1, r3, #31
 800cc3e:	d421      	bmi.n	800cc84 <__lo0bits+0x52>
 800cc40:	0798      	lsls	r0, r3, #30
 800cc42:	bf49      	itett	mi
 800cc44:	085b      	lsrmi	r3, r3, #1
 800cc46:	089b      	lsrpl	r3, r3, #2
 800cc48:	2001      	movmi	r0, #1
 800cc4a:	6013      	strmi	r3, [r2, #0]
 800cc4c:	bf5c      	itt	pl
 800cc4e:	2002      	movpl	r0, #2
 800cc50:	6013      	strpl	r3, [r2, #0]
 800cc52:	4770      	bx	lr
 800cc54:	b299      	uxth	r1, r3
 800cc56:	b909      	cbnz	r1, 800cc5c <__lo0bits+0x2a>
 800cc58:	2010      	movs	r0, #16
 800cc5a:	0c1b      	lsrs	r3, r3, #16
 800cc5c:	b2d9      	uxtb	r1, r3
 800cc5e:	b909      	cbnz	r1, 800cc64 <__lo0bits+0x32>
 800cc60:	3008      	adds	r0, #8
 800cc62:	0a1b      	lsrs	r3, r3, #8
 800cc64:	0719      	lsls	r1, r3, #28
 800cc66:	bf04      	itt	eq
 800cc68:	091b      	lsreq	r3, r3, #4
 800cc6a:	3004      	addeq	r0, #4
 800cc6c:	0799      	lsls	r1, r3, #30
 800cc6e:	bf04      	itt	eq
 800cc70:	089b      	lsreq	r3, r3, #2
 800cc72:	3002      	addeq	r0, #2
 800cc74:	07d9      	lsls	r1, r3, #31
 800cc76:	d403      	bmi.n	800cc80 <__lo0bits+0x4e>
 800cc78:	085b      	lsrs	r3, r3, #1
 800cc7a:	f100 0001 	add.w	r0, r0, #1
 800cc7e:	d003      	beq.n	800cc88 <__lo0bits+0x56>
 800cc80:	6013      	str	r3, [r2, #0]
 800cc82:	4770      	bx	lr
 800cc84:	2000      	movs	r0, #0
 800cc86:	4770      	bx	lr
 800cc88:	2020      	movs	r0, #32
 800cc8a:	4770      	bx	lr

0800cc8c <__i2b>:
 800cc8c:	b510      	push	{r4, lr}
 800cc8e:	460c      	mov	r4, r1
 800cc90:	2101      	movs	r1, #1
 800cc92:	f7ff ff07 	bl	800caa4 <_Balloc>
 800cc96:	4602      	mov	r2, r0
 800cc98:	b928      	cbnz	r0, 800cca6 <__i2b+0x1a>
 800cc9a:	f240 1145 	movw	r1, #325	@ 0x145
 800cc9e:	4b04      	ldr	r3, [pc, #16]	@ (800ccb0 <__i2b+0x24>)
 800cca0:	4804      	ldr	r0, [pc, #16]	@ (800ccb4 <__i2b+0x28>)
 800cca2:	f000 fcb7 	bl	800d614 <__assert_func>
 800cca6:	2301      	movs	r3, #1
 800cca8:	6144      	str	r4, [r0, #20]
 800ccaa:	6103      	str	r3, [r0, #16]
 800ccac:	bd10      	pop	{r4, pc}
 800ccae:	bf00      	nop
 800ccb0:	0800f114 	.word	0x0800f114
 800ccb4:	0800f125 	.word	0x0800f125

0800ccb8 <__multiply>:
 800ccb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccbc:	4614      	mov	r4, r2
 800ccbe:	690a      	ldr	r2, [r1, #16]
 800ccc0:	6923      	ldr	r3, [r4, #16]
 800ccc2:	460f      	mov	r7, r1
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	bfa2      	ittt	ge
 800ccc8:	4623      	movge	r3, r4
 800ccca:	460c      	movge	r4, r1
 800cccc:	461f      	movge	r7, r3
 800ccce:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ccd2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ccd6:	68a3      	ldr	r3, [r4, #8]
 800ccd8:	6861      	ldr	r1, [r4, #4]
 800ccda:	eb0a 0609 	add.w	r6, sl, r9
 800ccde:	42b3      	cmp	r3, r6
 800cce0:	b085      	sub	sp, #20
 800cce2:	bfb8      	it	lt
 800cce4:	3101      	addlt	r1, #1
 800cce6:	f7ff fedd 	bl	800caa4 <_Balloc>
 800ccea:	b930      	cbnz	r0, 800ccfa <__multiply+0x42>
 800ccec:	4602      	mov	r2, r0
 800ccee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ccf2:	4b43      	ldr	r3, [pc, #268]	@ (800ce00 <__multiply+0x148>)
 800ccf4:	4843      	ldr	r0, [pc, #268]	@ (800ce04 <__multiply+0x14c>)
 800ccf6:	f000 fc8d 	bl	800d614 <__assert_func>
 800ccfa:	f100 0514 	add.w	r5, r0, #20
 800ccfe:	462b      	mov	r3, r5
 800cd00:	2200      	movs	r2, #0
 800cd02:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd06:	4543      	cmp	r3, r8
 800cd08:	d321      	bcc.n	800cd4e <__multiply+0x96>
 800cd0a:	f107 0114 	add.w	r1, r7, #20
 800cd0e:	f104 0214 	add.w	r2, r4, #20
 800cd12:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cd16:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cd1a:	9302      	str	r3, [sp, #8]
 800cd1c:	1b13      	subs	r3, r2, r4
 800cd1e:	3b15      	subs	r3, #21
 800cd20:	f023 0303 	bic.w	r3, r3, #3
 800cd24:	3304      	adds	r3, #4
 800cd26:	f104 0715 	add.w	r7, r4, #21
 800cd2a:	42ba      	cmp	r2, r7
 800cd2c:	bf38      	it	cc
 800cd2e:	2304      	movcc	r3, #4
 800cd30:	9301      	str	r3, [sp, #4]
 800cd32:	9b02      	ldr	r3, [sp, #8]
 800cd34:	9103      	str	r1, [sp, #12]
 800cd36:	428b      	cmp	r3, r1
 800cd38:	d80c      	bhi.n	800cd54 <__multiply+0x9c>
 800cd3a:	2e00      	cmp	r6, #0
 800cd3c:	dd03      	ble.n	800cd46 <__multiply+0x8e>
 800cd3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d05a      	beq.n	800cdfc <__multiply+0x144>
 800cd46:	6106      	str	r6, [r0, #16]
 800cd48:	b005      	add	sp, #20
 800cd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd4e:	f843 2b04 	str.w	r2, [r3], #4
 800cd52:	e7d8      	b.n	800cd06 <__multiply+0x4e>
 800cd54:	f8b1 a000 	ldrh.w	sl, [r1]
 800cd58:	f1ba 0f00 	cmp.w	sl, #0
 800cd5c:	d023      	beq.n	800cda6 <__multiply+0xee>
 800cd5e:	46a9      	mov	r9, r5
 800cd60:	f04f 0c00 	mov.w	ip, #0
 800cd64:	f104 0e14 	add.w	lr, r4, #20
 800cd68:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cd6c:	f8d9 3000 	ldr.w	r3, [r9]
 800cd70:	fa1f fb87 	uxth.w	fp, r7
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	fb0a 330b 	mla	r3, sl, fp, r3
 800cd7a:	4463      	add	r3, ip
 800cd7c:	f8d9 c000 	ldr.w	ip, [r9]
 800cd80:	0c3f      	lsrs	r7, r7, #16
 800cd82:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cd86:	fb0a c707 	mla	r7, sl, r7, ip
 800cd8a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cd94:	4572      	cmp	r2, lr
 800cd96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cd9a:	f849 3b04 	str.w	r3, [r9], #4
 800cd9e:	d8e3      	bhi.n	800cd68 <__multiply+0xb0>
 800cda0:	9b01      	ldr	r3, [sp, #4]
 800cda2:	f845 c003 	str.w	ip, [r5, r3]
 800cda6:	9b03      	ldr	r3, [sp, #12]
 800cda8:	3104      	adds	r1, #4
 800cdaa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cdae:	f1b9 0f00 	cmp.w	r9, #0
 800cdb2:	d021      	beq.n	800cdf8 <__multiply+0x140>
 800cdb4:	46ae      	mov	lr, r5
 800cdb6:	f04f 0a00 	mov.w	sl, #0
 800cdba:	682b      	ldr	r3, [r5, #0]
 800cdbc:	f104 0c14 	add.w	ip, r4, #20
 800cdc0:	f8bc b000 	ldrh.w	fp, [ip]
 800cdc4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	fb09 770b 	mla	r7, r9, fp, r7
 800cdce:	4457      	add	r7, sl
 800cdd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cdd4:	f84e 3b04 	str.w	r3, [lr], #4
 800cdd8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cddc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cde0:	f8be 3000 	ldrh.w	r3, [lr]
 800cde4:	4562      	cmp	r2, ip
 800cde6:	fb09 330a 	mla	r3, r9, sl, r3
 800cdea:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cdee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cdf2:	d8e5      	bhi.n	800cdc0 <__multiply+0x108>
 800cdf4:	9f01      	ldr	r7, [sp, #4]
 800cdf6:	51eb      	str	r3, [r5, r7]
 800cdf8:	3504      	adds	r5, #4
 800cdfa:	e79a      	b.n	800cd32 <__multiply+0x7a>
 800cdfc:	3e01      	subs	r6, #1
 800cdfe:	e79c      	b.n	800cd3a <__multiply+0x82>
 800ce00:	0800f114 	.word	0x0800f114
 800ce04:	0800f125 	.word	0x0800f125

0800ce08 <__pow5mult>:
 800ce08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce0c:	4615      	mov	r5, r2
 800ce0e:	f012 0203 	ands.w	r2, r2, #3
 800ce12:	4607      	mov	r7, r0
 800ce14:	460e      	mov	r6, r1
 800ce16:	d007      	beq.n	800ce28 <__pow5mult+0x20>
 800ce18:	4c25      	ldr	r4, [pc, #148]	@ (800ceb0 <__pow5mult+0xa8>)
 800ce1a:	3a01      	subs	r2, #1
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce22:	f7ff fea1 	bl	800cb68 <__multadd>
 800ce26:	4606      	mov	r6, r0
 800ce28:	10ad      	asrs	r5, r5, #2
 800ce2a:	d03d      	beq.n	800cea8 <__pow5mult+0xa0>
 800ce2c:	69fc      	ldr	r4, [r7, #28]
 800ce2e:	b97c      	cbnz	r4, 800ce50 <__pow5mult+0x48>
 800ce30:	2010      	movs	r0, #16
 800ce32:	f7ff fd81 	bl	800c938 <malloc>
 800ce36:	4602      	mov	r2, r0
 800ce38:	61f8      	str	r0, [r7, #28]
 800ce3a:	b928      	cbnz	r0, 800ce48 <__pow5mult+0x40>
 800ce3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ce40:	4b1c      	ldr	r3, [pc, #112]	@ (800ceb4 <__pow5mult+0xac>)
 800ce42:	481d      	ldr	r0, [pc, #116]	@ (800ceb8 <__pow5mult+0xb0>)
 800ce44:	f000 fbe6 	bl	800d614 <__assert_func>
 800ce48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce4c:	6004      	str	r4, [r0, #0]
 800ce4e:	60c4      	str	r4, [r0, #12]
 800ce50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ce54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce58:	b94c      	cbnz	r4, 800ce6e <__pow5mult+0x66>
 800ce5a:	f240 2171 	movw	r1, #625	@ 0x271
 800ce5e:	4638      	mov	r0, r7
 800ce60:	f7ff ff14 	bl	800cc8c <__i2b>
 800ce64:	2300      	movs	r3, #0
 800ce66:	4604      	mov	r4, r0
 800ce68:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce6c:	6003      	str	r3, [r0, #0]
 800ce6e:	f04f 0900 	mov.w	r9, #0
 800ce72:	07eb      	lsls	r3, r5, #31
 800ce74:	d50a      	bpl.n	800ce8c <__pow5mult+0x84>
 800ce76:	4631      	mov	r1, r6
 800ce78:	4622      	mov	r2, r4
 800ce7a:	4638      	mov	r0, r7
 800ce7c:	f7ff ff1c 	bl	800ccb8 <__multiply>
 800ce80:	4680      	mov	r8, r0
 800ce82:	4631      	mov	r1, r6
 800ce84:	4638      	mov	r0, r7
 800ce86:	f7ff fe4d 	bl	800cb24 <_Bfree>
 800ce8a:	4646      	mov	r6, r8
 800ce8c:	106d      	asrs	r5, r5, #1
 800ce8e:	d00b      	beq.n	800cea8 <__pow5mult+0xa0>
 800ce90:	6820      	ldr	r0, [r4, #0]
 800ce92:	b938      	cbnz	r0, 800cea4 <__pow5mult+0x9c>
 800ce94:	4622      	mov	r2, r4
 800ce96:	4621      	mov	r1, r4
 800ce98:	4638      	mov	r0, r7
 800ce9a:	f7ff ff0d 	bl	800ccb8 <__multiply>
 800ce9e:	6020      	str	r0, [r4, #0]
 800cea0:	f8c0 9000 	str.w	r9, [r0]
 800cea4:	4604      	mov	r4, r0
 800cea6:	e7e4      	b.n	800ce72 <__pow5mult+0x6a>
 800cea8:	4630      	mov	r0, r6
 800ceaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceae:	bf00      	nop
 800ceb0:	0800f180 	.word	0x0800f180
 800ceb4:	0800f0a5 	.word	0x0800f0a5
 800ceb8:	0800f125 	.word	0x0800f125

0800cebc <__lshift>:
 800cebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cec0:	460c      	mov	r4, r1
 800cec2:	4607      	mov	r7, r0
 800cec4:	4691      	mov	r9, r2
 800cec6:	6923      	ldr	r3, [r4, #16]
 800cec8:	6849      	ldr	r1, [r1, #4]
 800ceca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cece:	68a3      	ldr	r3, [r4, #8]
 800ced0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ced4:	f108 0601 	add.w	r6, r8, #1
 800ced8:	42b3      	cmp	r3, r6
 800ceda:	db0b      	blt.n	800cef4 <__lshift+0x38>
 800cedc:	4638      	mov	r0, r7
 800cede:	f7ff fde1 	bl	800caa4 <_Balloc>
 800cee2:	4605      	mov	r5, r0
 800cee4:	b948      	cbnz	r0, 800cefa <__lshift+0x3e>
 800cee6:	4602      	mov	r2, r0
 800cee8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ceec:	4b27      	ldr	r3, [pc, #156]	@ (800cf8c <__lshift+0xd0>)
 800ceee:	4828      	ldr	r0, [pc, #160]	@ (800cf90 <__lshift+0xd4>)
 800cef0:	f000 fb90 	bl	800d614 <__assert_func>
 800cef4:	3101      	adds	r1, #1
 800cef6:	005b      	lsls	r3, r3, #1
 800cef8:	e7ee      	b.n	800ced8 <__lshift+0x1c>
 800cefa:	2300      	movs	r3, #0
 800cefc:	f100 0114 	add.w	r1, r0, #20
 800cf00:	f100 0210 	add.w	r2, r0, #16
 800cf04:	4618      	mov	r0, r3
 800cf06:	4553      	cmp	r3, sl
 800cf08:	db33      	blt.n	800cf72 <__lshift+0xb6>
 800cf0a:	6920      	ldr	r0, [r4, #16]
 800cf0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf10:	f104 0314 	add.w	r3, r4, #20
 800cf14:	f019 091f 	ands.w	r9, r9, #31
 800cf18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf20:	d02b      	beq.n	800cf7a <__lshift+0xbe>
 800cf22:	468a      	mov	sl, r1
 800cf24:	2200      	movs	r2, #0
 800cf26:	f1c9 0e20 	rsb	lr, r9, #32
 800cf2a:	6818      	ldr	r0, [r3, #0]
 800cf2c:	fa00 f009 	lsl.w	r0, r0, r9
 800cf30:	4310      	orrs	r0, r2
 800cf32:	f84a 0b04 	str.w	r0, [sl], #4
 800cf36:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf3a:	459c      	cmp	ip, r3
 800cf3c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf40:	d8f3      	bhi.n	800cf2a <__lshift+0x6e>
 800cf42:	ebac 0304 	sub.w	r3, ip, r4
 800cf46:	3b15      	subs	r3, #21
 800cf48:	f023 0303 	bic.w	r3, r3, #3
 800cf4c:	3304      	adds	r3, #4
 800cf4e:	f104 0015 	add.w	r0, r4, #21
 800cf52:	4584      	cmp	ip, r0
 800cf54:	bf38      	it	cc
 800cf56:	2304      	movcc	r3, #4
 800cf58:	50ca      	str	r2, [r1, r3]
 800cf5a:	b10a      	cbz	r2, 800cf60 <__lshift+0xa4>
 800cf5c:	f108 0602 	add.w	r6, r8, #2
 800cf60:	3e01      	subs	r6, #1
 800cf62:	4638      	mov	r0, r7
 800cf64:	4621      	mov	r1, r4
 800cf66:	612e      	str	r6, [r5, #16]
 800cf68:	f7ff fddc 	bl	800cb24 <_Bfree>
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf72:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf76:	3301      	adds	r3, #1
 800cf78:	e7c5      	b.n	800cf06 <__lshift+0x4a>
 800cf7a:	3904      	subs	r1, #4
 800cf7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf80:	459c      	cmp	ip, r3
 800cf82:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf86:	d8f9      	bhi.n	800cf7c <__lshift+0xc0>
 800cf88:	e7ea      	b.n	800cf60 <__lshift+0xa4>
 800cf8a:	bf00      	nop
 800cf8c:	0800f114 	.word	0x0800f114
 800cf90:	0800f125 	.word	0x0800f125

0800cf94 <__mcmp>:
 800cf94:	4603      	mov	r3, r0
 800cf96:	690a      	ldr	r2, [r1, #16]
 800cf98:	6900      	ldr	r0, [r0, #16]
 800cf9a:	b530      	push	{r4, r5, lr}
 800cf9c:	1a80      	subs	r0, r0, r2
 800cf9e:	d10e      	bne.n	800cfbe <__mcmp+0x2a>
 800cfa0:	3314      	adds	r3, #20
 800cfa2:	3114      	adds	r1, #20
 800cfa4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cfa8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cfac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cfb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cfb4:	4295      	cmp	r5, r2
 800cfb6:	d003      	beq.n	800cfc0 <__mcmp+0x2c>
 800cfb8:	d205      	bcs.n	800cfc6 <__mcmp+0x32>
 800cfba:	f04f 30ff 	mov.w	r0, #4294967295
 800cfbe:	bd30      	pop	{r4, r5, pc}
 800cfc0:	42a3      	cmp	r3, r4
 800cfc2:	d3f3      	bcc.n	800cfac <__mcmp+0x18>
 800cfc4:	e7fb      	b.n	800cfbe <__mcmp+0x2a>
 800cfc6:	2001      	movs	r0, #1
 800cfc8:	e7f9      	b.n	800cfbe <__mcmp+0x2a>
	...

0800cfcc <__mdiff>:
 800cfcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd0:	4689      	mov	r9, r1
 800cfd2:	4606      	mov	r6, r0
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	4648      	mov	r0, r9
 800cfd8:	4614      	mov	r4, r2
 800cfda:	f7ff ffdb 	bl	800cf94 <__mcmp>
 800cfde:	1e05      	subs	r5, r0, #0
 800cfe0:	d112      	bne.n	800d008 <__mdiff+0x3c>
 800cfe2:	4629      	mov	r1, r5
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	f7ff fd5d 	bl	800caa4 <_Balloc>
 800cfea:	4602      	mov	r2, r0
 800cfec:	b928      	cbnz	r0, 800cffa <__mdiff+0x2e>
 800cfee:	f240 2137 	movw	r1, #567	@ 0x237
 800cff2:	4b3e      	ldr	r3, [pc, #248]	@ (800d0ec <__mdiff+0x120>)
 800cff4:	483e      	ldr	r0, [pc, #248]	@ (800d0f0 <__mdiff+0x124>)
 800cff6:	f000 fb0d 	bl	800d614 <__assert_func>
 800cffa:	2301      	movs	r3, #1
 800cffc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d000:	4610      	mov	r0, r2
 800d002:	b003      	add	sp, #12
 800d004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d008:	bfbc      	itt	lt
 800d00a:	464b      	movlt	r3, r9
 800d00c:	46a1      	movlt	r9, r4
 800d00e:	4630      	mov	r0, r6
 800d010:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d014:	bfba      	itte	lt
 800d016:	461c      	movlt	r4, r3
 800d018:	2501      	movlt	r5, #1
 800d01a:	2500      	movge	r5, #0
 800d01c:	f7ff fd42 	bl	800caa4 <_Balloc>
 800d020:	4602      	mov	r2, r0
 800d022:	b918      	cbnz	r0, 800d02c <__mdiff+0x60>
 800d024:	f240 2145 	movw	r1, #581	@ 0x245
 800d028:	4b30      	ldr	r3, [pc, #192]	@ (800d0ec <__mdiff+0x120>)
 800d02a:	e7e3      	b.n	800cff4 <__mdiff+0x28>
 800d02c:	f100 0b14 	add.w	fp, r0, #20
 800d030:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d034:	f109 0310 	add.w	r3, r9, #16
 800d038:	60c5      	str	r5, [r0, #12]
 800d03a:	f04f 0c00 	mov.w	ip, #0
 800d03e:	f109 0514 	add.w	r5, r9, #20
 800d042:	46d9      	mov	r9, fp
 800d044:	6926      	ldr	r6, [r4, #16]
 800d046:	f104 0e14 	add.w	lr, r4, #20
 800d04a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d04e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d052:	9301      	str	r3, [sp, #4]
 800d054:	9b01      	ldr	r3, [sp, #4]
 800d056:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d05a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d05e:	b281      	uxth	r1, r0
 800d060:	9301      	str	r3, [sp, #4]
 800d062:	fa1f f38a 	uxth.w	r3, sl
 800d066:	1a5b      	subs	r3, r3, r1
 800d068:	0c00      	lsrs	r0, r0, #16
 800d06a:	4463      	add	r3, ip
 800d06c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d070:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d074:	b29b      	uxth	r3, r3
 800d076:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d07a:	4576      	cmp	r6, lr
 800d07c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d080:	f849 3b04 	str.w	r3, [r9], #4
 800d084:	d8e6      	bhi.n	800d054 <__mdiff+0x88>
 800d086:	1b33      	subs	r3, r6, r4
 800d088:	3b15      	subs	r3, #21
 800d08a:	f023 0303 	bic.w	r3, r3, #3
 800d08e:	3415      	adds	r4, #21
 800d090:	3304      	adds	r3, #4
 800d092:	42a6      	cmp	r6, r4
 800d094:	bf38      	it	cc
 800d096:	2304      	movcc	r3, #4
 800d098:	441d      	add	r5, r3
 800d09a:	445b      	add	r3, fp
 800d09c:	461e      	mov	r6, r3
 800d09e:	462c      	mov	r4, r5
 800d0a0:	4544      	cmp	r4, r8
 800d0a2:	d30e      	bcc.n	800d0c2 <__mdiff+0xf6>
 800d0a4:	f108 0103 	add.w	r1, r8, #3
 800d0a8:	1b49      	subs	r1, r1, r5
 800d0aa:	f021 0103 	bic.w	r1, r1, #3
 800d0ae:	3d03      	subs	r5, #3
 800d0b0:	45a8      	cmp	r8, r5
 800d0b2:	bf38      	it	cc
 800d0b4:	2100      	movcc	r1, #0
 800d0b6:	440b      	add	r3, r1
 800d0b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d0bc:	b199      	cbz	r1, 800d0e6 <__mdiff+0x11a>
 800d0be:	6117      	str	r7, [r2, #16]
 800d0c0:	e79e      	b.n	800d000 <__mdiff+0x34>
 800d0c2:	46e6      	mov	lr, ip
 800d0c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d0c8:	fa1f fc81 	uxth.w	ip, r1
 800d0cc:	44f4      	add	ip, lr
 800d0ce:	0c08      	lsrs	r0, r1, #16
 800d0d0:	4471      	add	r1, lr
 800d0d2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d0d6:	b289      	uxth	r1, r1
 800d0d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d0dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d0e0:	f846 1b04 	str.w	r1, [r6], #4
 800d0e4:	e7dc      	b.n	800d0a0 <__mdiff+0xd4>
 800d0e6:	3f01      	subs	r7, #1
 800d0e8:	e7e6      	b.n	800d0b8 <__mdiff+0xec>
 800d0ea:	bf00      	nop
 800d0ec:	0800f114 	.word	0x0800f114
 800d0f0:	0800f125 	.word	0x0800f125

0800d0f4 <__d2b>:
 800d0f4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d0f8:	2101      	movs	r1, #1
 800d0fa:	4690      	mov	r8, r2
 800d0fc:	4699      	mov	r9, r3
 800d0fe:	9e08      	ldr	r6, [sp, #32]
 800d100:	f7ff fcd0 	bl	800caa4 <_Balloc>
 800d104:	4604      	mov	r4, r0
 800d106:	b930      	cbnz	r0, 800d116 <__d2b+0x22>
 800d108:	4602      	mov	r2, r0
 800d10a:	f240 310f 	movw	r1, #783	@ 0x30f
 800d10e:	4b23      	ldr	r3, [pc, #140]	@ (800d19c <__d2b+0xa8>)
 800d110:	4823      	ldr	r0, [pc, #140]	@ (800d1a0 <__d2b+0xac>)
 800d112:	f000 fa7f 	bl	800d614 <__assert_func>
 800d116:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d11a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d11e:	b10d      	cbz	r5, 800d124 <__d2b+0x30>
 800d120:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d124:	9301      	str	r3, [sp, #4]
 800d126:	f1b8 0300 	subs.w	r3, r8, #0
 800d12a:	d024      	beq.n	800d176 <__d2b+0x82>
 800d12c:	4668      	mov	r0, sp
 800d12e:	9300      	str	r3, [sp, #0]
 800d130:	f7ff fd7f 	bl	800cc32 <__lo0bits>
 800d134:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d138:	b1d8      	cbz	r0, 800d172 <__d2b+0x7e>
 800d13a:	f1c0 0320 	rsb	r3, r0, #32
 800d13e:	fa02 f303 	lsl.w	r3, r2, r3
 800d142:	430b      	orrs	r3, r1
 800d144:	40c2      	lsrs	r2, r0
 800d146:	6163      	str	r3, [r4, #20]
 800d148:	9201      	str	r2, [sp, #4]
 800d14a:	9b01      	ldr	r3, [sp, #4]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	bf0c      	ite	eq
 800d150:	2201      	moveq	r2, #1
 800d152:	2202      	movne	r2, #2
 800d154:	61a3      	str	r3, [r4, #24]
 800d156:	6122      	str	r2, [r4, #16]
 800d158:	b1ad      	cbz	r5, 800d186 <__d2b+0x92>
 800d15a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d15e:	4405      	add	r5, r0
 800d160:	6035      	str	r5, [r6, #0]
 800d162:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d168:	6018      	str	r0, [r3, #0]
 800d16a:	4620      	mov	r0, r4
 800d16c:	b002      	add	sp, #8
 800d16e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d172:	6161      	str	r1, [r4, #20]
 800d174:	e7e9      	b.n	800d14a <__d2b+0x56>
 800d176:	a801      	add	r0, sp, #4
 800d178:	f7ff fd5b 	bl	800cc32 <__lo0bits>
 800d17c:	9b01      	ldr	r3, [sp, #4]
 800d17e:	2201      	movs	r2, #1
 800d180:	6163      	str	r3, [r4, #20]
 800d182:	3020      	adds	r0, #32
 800d184:	e7e7      	b.n	800d156 <__d2b+0x62>
 800d186:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d18a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d18e:	6030      	str	r0, [r6, #0]
 800d190:	6918      	ldr	r0, [r3, #16]
 800d192:	f7ff fd2f 	bl	800cbf4 <__hi0bits>
 800d196:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d19a:	e7e4      	b.n	800d166 <__d2b+0x72>
 800d19c:	0800f114 	.word	0x0800f114
 800d1a0:	0800f125 	.word	0x0800f125

0800d1a4 <__ssputs_r>:
 800d1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1a8:	461f      	mov	r7, r3
 800d1aa:	688e      	ldr	r6, [r1, #8]
 800d1ac:	4682      	mov	sl, r0
 800d1ae:	42be      	cmp	r6, r7
 800d1b0:	460c      	mov	r4, r1
 800d1b2:	4690      	mov	r8, r2
 800d1b4:	680b      	ldr	r3, [r1, #0]
 800d1b6:	d82d      	bhi.n	800d214 <__ssputs_r+0x70>
 800d1b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d1c0:	d026      	beq.n	800d210 <__ssputs_r+0x6c>
 800d1c2:	6965      	ldr	r5, [r4, #20]
 800d1c4:	6909      	ldr	r1, [r1, #16]
 800d1c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1ca:	eba3 0901 	sub.w	r9, r3, r1
 800d1ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1d2:	1c7b      	adds	r3, r7, #1
 800d1d4:	444b      	add	r3, r9
 800d1d6:	106d      	asrs	r5, r5, #1
 800d1d8:	429d      	cmp	r5, r3
 800d1da:	bf38      	it	cc
 800d1dc:	461d      	movcc	r5, r3
 800d1de:	0553      	lsls	r3, r2, #21
 800d1e0:	d527      	bpl.n	800d232 <__ssputs_r+0x8e>
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	f7ff fbd2 	bl	800c98c <_malloc_r>
 800d1e8:	4606      	mov	r6, r0
 800d1ea:	b360      	cbz	r0, 800d246 <__ssputs_r+0xa2>
 800d1ec:	464a      	mov	r2, r9
 800d1ee:	6921      	ldr	r1, [r4, #16]
 800d1f0:	f000 fa02 	bl	800d5f8 <memcpy>
 800d1f4:	89a3      	ldrh	r3, [r4, #12]
 800d1f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d1fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1fe:	81a3      	strh	r3, [r4, #12]
 800d200:	6126      	str	r6, [r4, #16]
 800d202:	444e      	add	r6, r9
 800d204:	6026      	str	r6, [r4, #0]
 800d206:	463e      	mov	r6, r7
 800d208:	6165      	str	r5, [r4, #20]
 800d20a:	eba5 0509 	sub.w	r5, r5, r9
 800d20e:	60a5      	str	r5, [r4, #8]
 800d210:	42be      	cmp	r6, r7
 800d212:	d900      	bls.n	800d216 <__ssputs_r+0x72>
 800d214:	463e      	mov	r6, r7
 800d216:	4632      	mov	r2, r6
 800d218:	4641      	mov	r1, r8
 800d21a:	6820      	ldr	r0, [r4, #0]
 800d21c:	f000 f9c2 	bl	800d5a4 <memmove>
 800d220:	2000      	movs	r0, #0
 800d222:	68a3      	ldr	r3, [r4, #8]
 800d224:	1b9b      	subs	r3, r3, r6
 800d226:	60a3      	str	r3, [r4, #8]
 800d228:	6823      	ldr	r3, [r4, #0]
 800d22a:	4433      	add	r3, r6
 800d22c:	6023      	str	r3, [r4, #0]
 800d22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d232:	462a      	mov	r2, r5
 800d234:	f000 fa32 	bl	800d69c <_realloc_r>
 800d238:	4606      	mov	r6, r0
 800d23a:	2800      	cmp	r0, #0
 800d23c:	d1e0      	bne.n	800d200 <__ssputs_r+0x5c>
 800d23e:	4650      	mov	r0, sl
 800d240:	6921      	ldr	r1, [r4, #16]
 800d242:	f7ff fb31 	bl	800c8a8 <_free_r>
 800d246:	230c      	movs	r3, #12
 800d248:	f8ca 3000 	str.w	r3, [sl]
 800d24c:	89a3      	ldrh	r3, [r4, #12]
 800d24e:	f04f 30ff 	mov.w	r0, #4294967295
 800d252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d256:	81a3      	strh	r3, [r4, #12]
 800d258:	e7e9      	b.n	800d22e <__ssputs_r+0x8a>
	...

0800d25c <_svfiprintf_r>:
 800d25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d260:	4698      	mov	r8, r3
 800d262:	898b      	ldrh	r3, [r1, #12]
 800d264:	4607      	mov	r7, r0
 800d266:	061b      	lsls	r3, r3, #24
 800d268:	460d      	mov	r5, r1
 800d26a:	4614      	mov	r4, r2
 800d26c:	b09d      	sub	sp, #116	@ 0x74
 800d26e:	d510      	bpl.n	800d292 <_svfiprintf_r+0x36>
 800d270:	690b      	ldr	r3, [r1, #16]
 800d272:	b973      	cbnz	r3, 800d292 <_svfiprintf_r+0x36>
 800d274:	2140      	movs	r1, #64	@ 0x40
 800d276:	f7ff fb89 	bl	800c98c <_malloc_r>
 800d27a:	6028      	str	r0, [r5, #0]
 800d27c:	6128      	str	r0, [r5, #16]
 800d27e:	b930      	cbnz	r0, 800d28e <_svfiprintf_r+0x32>
 800d280:	230c      	movs	r3, #12
 800d282:	603b      	str	r3, [r7, #0]
 800d284:	f04f 30ff 	mov.w	r0, #4294967295
 800d288:	b01d      	add	sp, #116	@ 0x74
 800d28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d28e:	2340      	movs	r3, #64	@ 0x40
 800d290:	616b      	str	r3, [r5, #20]
 800d292:	2300      	movs	r3, #0
 800d294:	9309      	str	r3, [sp, #36]	@ 0x24
 800d296:	2320      	movs	r3, #32
 800d298:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d29c:	2330      	movs	r3, #48	@ 0x30
 800d29e:	f04f 0901 	mov.w	r9, #1
 800d2a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2a6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d440 <_svfiprintf_r+0x1e4>
 800d2aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2ae:	4623      	mov	r3, r4
 800d2b0:	469a      	mov	sl, r3
 800d2b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2b6:	b10a      	cbz	r2, 800d2bc <_svfiprintf_r+0x60>
 800d2b8:	2a25      	cmp	r2, #37	@ 0x25
 800d2ba:	d1f9      	bne.n	800d2b0 <_svfiprintf_r+0x54>
 800d2bc:	ebba 0b04 	subs.w	fp, sl, r4
 800d2c0:	d00b      	beq.n	800d2da <_svfiprintf_r+0x7e>
 800d2c2:	465b      	mov	r3, fp
 800d2c4:	4622      	mov	r2, r4
 800d2c6:	4629      	mov	r1, r5
 800d2c8:	4638      	mov	r0, r7
 800d2ca:	f7ff ff6b 	bl	800d1a4 <__ssputs_r>
 800d2ce:	3001      	adds	r0, #1
 800d2d0:	f000 80a7 	beq.w	800d422 <_svfiprintf_r+0x1c6>
 800d2d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2d6:	445a      	add	r2, fp
 800d2d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2da:	f89a 3000 	ldrb.w	r3, [sl]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f000 809f 	beq.w	800d422 <_svfiprintf_r+0x1c6>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2ee:	f10a 0a01 	add.w	sl, sl, #1
 800d2f2:	9304      	str	r3, [sp, #16]
 800d2f4:	9307      	str	r3, [sp, #28]
 800d2f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2fc:	4654      	mov	r4, sl
 800d2fe:	2205      	movs	r2, #5
 800d300:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d304:	484e      	ldr	r0, [pc, #312]	@ (800d440 <_svfiprintf_r+0x1e4>)
 800d306:	f7fe fc6e 	bl	800bbe6 <memchr>
 800d30a:	9a04      	ldr	r2, [sp, #16]
 800d30c:	b9d8      	cbnz	r0, 800d346 <_svfiprintf_r+0xea>
 800d30e:	06d0      	lsls	r0, r2, #27
 800d310:	bf44      	itt	mi
 800d312:	2320      	movmi	r3, #32
 800d314:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d318:	0711      	lsls	r1, r2, #28
 800d31a:	bf44      	itt	mi
 800d31c:	232b      	movmi	r3, #43	@ 0x2b
 800d31e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d322:	f89a 3000 	ldrb.w	r3, [sl]
 800d326:	2b2a      	cmp	r3, #42	@ 0x2a
 800d328:	d015      	beq.n	800d356 <_svfiprintf_r+0xfa>
 800d32a:	4654      	mov	r4, sl
 800d32c:	2000      	movs	r0, #0
 800d32e:	f04f 0c0a 	mov.w	ip, #10
 800d332:	9a07      	ldr	r2, [sp, #28]
 800d334:	4621      	mov	r1, r4
 800d336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d33a:	3b30      	subs	r3, #48	@ 0x30
 800d33c:	2b09      	cmp	r3, #9
 800d33e:	d94b      	bls.n	800d3d8 <_svfiprintf_r+0x17c>
 800d340:	b1b0      	cbz	r0, 800d370 <_svfiprintf_r+0x114>
 800d342:	9207      	str	r2, [sp, #28]
 800d344:	e014      	b.n	800d370 <_svfiprintf_r+0x114>
 800d346:	eba0 0308 	sub.w	r3, r0, r8
 800d34a:	fa09 f303 	lsl.w	r3, r9, r3
 800d34e:	4313      	orrs	r3, r2
 800d350:	46a2      	mov	sl, r4
 800d352:	9304      	str	r3, [sp, #16]
 800d354:	e7d2      	b.n	800d2fc <_svfiprintf_r+0xa0>
 800d356:	9b03      	ldr	r3, [sp, #12]
 800d358:	1d19      	adds	r1, r3, #4
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	9103      	str	r1, [sp, #12]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	bfbb      	ittet	lt
 800d362:	425b      	neglt	r3, r3
 800d364:	f042 0202 	orrlt.w	r2, r2, #2
 800d368:	9307      	strge	r3, [sp, #28]
 800d36a:	9307      	strlt	r3, [sp, #28]
 800d36c:	bfb8      	it	lt
 800d36e:	9204      	strlt	r2, [sp, #16]
 800d370:	7823      	ldrb	r3, [r4, #0]
 800d372:	2b2e      	cmp	r3, #46	@ 0x2e
 800d374:	d10a      	bne.n	800d38c <_svfiprintf_r+0x130>
 800d376:	7863      	ldrb	r3, [r4, #1]
 800d378:	2b2a      	cmp	r3, #42	@ 0x2a
 800d37a:	d132      	bne.n	800d3e2 <_svfiprintf_r+0x186>
 800d37c:	9b03      	ldr	r3, [sp, #12]
 800d37e:	3402      	adds	r4, #2
 800d380:	1d1a      	adds	r2, r3, #4
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	9203      	str	r2, [sp, #12]
 800d386:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d38a:	9305      	str	r3, [sp, #20]
 800d38c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d444 <_svfiprintf_r+0x1e8>
 800d390:	2203      	movs	r2, #3
 800d392:	4650      	mov	r0, sl
 800d394:	7821      	ldrb	r1, [r4, #0]
 800d396:	f7fe fc26 	bl	800bbe6 <memchr>
 800d39a:	b138      	cbz	r0, 800d3ac <_svfiprintf_r+0x150>
 800d39c:	2240      	movs	r2, #64	@ 0x40
 800d39e:	9b04      	ldr	r3, [sp, #16]
 800d3a0:	eba0 000a 	sub.w	r0, r0, sl
 800d3a4:	4082      	lsls	r2, r0
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	3401      	adds	r4, #1
 800d3aa:	9304      	str	r3, [sp, #16]
 800d3ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3b0:	2206      	movs	r2, #6
 800d3b2:	4825      	ldr	r0, [pc, #148]	@ (800d448 <_svfiprintf_r+0x1ec>)
 800d3b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3b8:	f7fe fc15 	bl	800bbe6 <memchr>
 800d3bc:	2800      	cmp	r0, #0
 800d3be:	d036      	beq.n	800d42e <_svfiprintf_r+0x1d2>
 800d3c0:	4b22      	ldr	r3, [pc, #136]	@ (800d44c <_svfiprintf_r+0x1f0>)
 800d3c2:	bb1b      	cbnz	r3, 800d40c <_svfiprintf_r+0x1b0>
 800d3c4:	9b03      	ldr	r3, [sp, #12]
 800d3c6:	3307      	adds	r3, #7
 800d3c8:	f023 0307 	bic.w	r3, r3, #7
 800d3cc:	3308      	adds	r3, #8
 800d3ce:	9303      	str	r3, [sp, #12]
 800d3d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3d2:	4433      	add	r3, r6
 800d3d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3d6:	e76a      	b.n	800d2ae <_svfiprintf_r+0x52>
 800d3d8:	460c      	mov	r4, r1
 800d3da:	2001      	movs	r0, #1
 800d3dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3e0:	e7a8      	b.n	800d334 <_svfiprintf_r+0xd8>
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	f04f 0c0a 	mov.w	ip, #10
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	3401      	adds	r4, #1
 800d3ec:	9305      	str	r3, [sp, #20]
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3f4:	3a30      	subs	r2, #48	@ 0x30
 800d3f6:	2a09      	cmp	r2, #9
 800d3f8:	d903      	bls.n	800d402 <_svfiprintf_r+0x1a6>
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d0c6      	beq.n	800d38c <_svfiprintf_r+0x130>
 800d3fe:	9105      	str	r1, [sp, #20]
 800d400:	e7c4      	b.n	800d38c <_svfiprintf_r+0x130>
 800d402:	4604      	mov	r4, r0
 800d404:	2301      	movs	r3, #1
 800d406:	fb0c 2101 	mla	r1, ip, r1, r2
 800d40a:	e7f0      	b.n	800d3ee <_svfiprintf_r+0x192>
 800d40c:	ab03      	add	r3, sp, #12
 800d40e:	9300      	str	r3, [sp, #0]
 800d410:	462a      	mov	r2, r5
 800d412:	4638      	mov	r0, r7
 800d414:	4b0e      	ldr	r3, [pc, #56]	@ (800d450 <_svfiprintf_r+0x1f4>)
 800d416:	a904      	add	r1, sp, #16
 800d418:	f7fd fe82 	bl	800b120 <_printf_float>
 800d41c:	1c42      	adds	r2, r0, #1
 800d41e:	4606      	mov	r6, r0
 800d420:	d1d6      	bne.n	800d3d0 <_svfiprintf_r+0x174>
 800d422:	89ab      	ldrh	r3, [r5, #12]
 800d424:	065b      	lsls	r3, r3, #25
 800d426:	f53f af2d 	bmi.w	800d284 <_svfiprintf_r+0x28>
 800d42a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d42c:	e72c      	b.n	800d288 <_svfiprintf_r+0x2c>
 800d42e:	ab03      	add	r3, sp, #12
 800d430:	9300      	str	r3, [sp, #0]
 800d432:	462a      	mov	r2, r5
 800d434:	4638      	mov	r0, r7
 800d436:	4b06      	ldr	r3, [pc, #24]	@ (800d450 <_svfiprintf_r+0x1f4>)
 800d438:	a904      	add	r1, sp, #16
 800d43a:	f7fe f90f 	bl	800b65c <_printf_i>
 800d43e:	e7ed      	b.n	800d41c <_svfiprintf_r+0x1c0>
 800d440:	0800f280 	.word	0x0800f280
 800d444:	0800f286 	.word	0x0800f286
 800d448:	0800f28a 	.word	0x0800f28a
 800d44c:	0800b121 	.word	0x0800b121
 800d450:	0800d1a5 	.word	0x0800d1a5

0800d454 <__sflush_r>:
 800d454:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d45a:	0716      	lsls	r6, r2, #28
 800d45c:	4605      	mov	r5, r0
 800d45e:	460c      	mov	r4, r1
 800d460:	d454      	bmi.n	800d50c <__sflush_r+0xb8>
 800d462:	684b      	ldr	r3, [r1, #4]
 800d464:	2b00      	cmp	r3, #0
 800d466:	dc02      	bgt.n	800d46e <__sflush_r+0x1a>
 800d468:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	dd48      	ble.n	800d500 <__sflush_r+0xac>
 800d46e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d470:	2e00      	cmp	r6, #0
 800d472:	d045      	beq.n	800d500 <__sflush_r+0xac>
 800d474:	2300      	movs	r3, #0
 800d476:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d47a:	682f      	ldr	r7, [r5, #0]
 800d47c:	6a21      	ldr	r1, [r4, #32]
 800d47e:	602b      	str	r3, [r5, #0]
 800d480:	d030      	beq.n	800d4e4 <__sflush_r+0x90>
 800d482:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d484:	89a3      	ldrh	r3, [r4, #12]
 800d486:	0759      	lsls	r1, r3, #29
 800d488:	d505      	bpl.n	800d496 <__sflush_r+0x42>
 800d48a:	6863      	ldr	r3, [r4, #4]
 800d48c:	1ad2      	subs	r2, r2, r3
 800d48e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d490:	b10b      	cbz	r3, 800d496 <__sflush_r+0x42>
 800d492:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d494:	1ad2      	subs	r2, r2, r3
 800d496:	2300      	movs	r3, #0
 800d498:	4628      	mov	r0, r5
 800d49a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d49c:	6a21      	ldr	r1, [r4, #32]
 800d49e:	47b0      	blx	r6
 800d4a0:	1c43      	adds	r3, r0, #1
 800d4a2:	89a3      	ldrh	r3, [r4, #12]
 800d4a4:	d106      	bne.n	800d4b4 <__sflush_r+0x60>
 800d4a6:	6829      	ldr	r1, [r5, #0]
 800d4a8:	291d      	cmp	r1, #29
 800d4aa:	d82b      	bhi.n	800d504 <__sflush_r+0xb0>
 800d4ac:	4a28      	ldr	r2, [pc, #160]	@ (800d550 <__sflush_r+0xfc>)
 800d4ae:	410a      	asrs	r2, r1
 800d4b0:	07d6      	lsls	r6, r2, #31
 800d4b2:	d427      	bmi.n	800d504 <__sflush_r+0xb0>
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	6062      	str	r2, [r4, #4]
 800d4b8:	6922      	ldr	r2, [r4, #16]
 800d4ba:	04d9      	lsls	r1, r3, #19
 800d4bc:	6022      	str	r2, [r4, #0]
 800d4be:	d504      	bpl.n	800d4ca <__sflush_r+0x76>
 800d4c0:	1c42      	adds	r2, r0, #1
 800d4c2:	d101      	bne.n	800d4c8 <__sflush_r+0x74>
 800d4c4:	682b      	ldr	r3, [r5, #0]
 800d4c6:	b903      	cbnz	r3, 800d4ca <__sflush_r+0x76>
 800d4c8:	6560      	str	r0, [r4, #84]	@ 0x54
 800d4ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4cc:	602f      	str	r7, [r5, #0]
 800d4ce:	b1b9      	cbz	r1, 800d500 <__sflush_r+0xac>
 800d4d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4d4:	4299      	cmp	r1, r3
 800d4d6:	d002      	beq.n	800d4de <__sflush_r+0x8a>
 800d4d8:	4628      	mov	r0, r5
 800d4da:	f7ff f9e5 	bl	800c8a8 <_free_r>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4e2:	e00d      	b.n	800d500 <__sflush_r+0xac>
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	47b0      	blx	r6
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	1c50      	adds	r0, r2, #1
 800d4ee:	d1c9      	bne.n	800d484 <__sflush_r+0x30>
 800d4f0:	682b      	ldr	r3, [r5, #0]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d0c6      	beq.n	800d484 <__sflush_r+0x30>
 800d4f6:	2b1d      	cmp	r3, #29
 800d4f8:	d001      	beq.n	800d4fe <__sflush_r+0xaa>
 800d4fa:	2b16      	cmp	r3, #22
 800d4fc:	d11d      	bne.n	800d53a <__sflush_r+0xe6>
 800d4fe:	602f      	str	r7, [r5, #0]
 800d500:	2000      	movs	r0, #0
 800d502:	e021      	b.n	800d548 <__sflush_r+0xf4>
 800d504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d508:	b21b      	sxth	r3, r3
 800d50a:	e01a      	b.n	800d542 <__sflush_r+0xee>
 800d50c:	690f      	ldr	r7, [r1, #16]
 800d50e:	2f00      	cmp	r7, #0
 800d510:	d0f6      	beq.n	800d500 <__sflush_r+0xac>
 800d512:	0793      	lsls	r3, r2, #30
 800d514:	bf18      	it	ne
 800d516:	2300      	movne	r3, #0
 800d518:	680e      	ldr	r6, [r1, #0]
 800d51a:	bf08      	it	eq
 800d51c:	694b      	ldreq	r3, [r1, #20]
 800d51e:	1bf6      	subs	r6, r6, r7
 800d520:	600f      	str	r7, [r1, #0]
 800d522:	608b      	str	r3, [r1, #8]
 800d524:	2e00      	cmp	r6, #0
 800d526:	ddeb      	ble.n	800d500 <__sflush_r+0xac>
 800d528:	4633      	mov	r3, r6
 800d52a:	463a      	mov	r2, r7
 800d52c:	4628      	mov	r0, r5
 800d52e:	6a21      	ldr	r1, [r4, #32]
 800d530:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d534:	47e0      	blx	ip
 800d536:	2800      	cmp	r0, #0
 800d538:	dc07      	bgt.n	800d54a <__sflush_r+0xf6>
 800d53a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d53e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d542:	f04f 30ff 	mov.w	r0, #4294967295
 800d546:	81a3      	strh	r3, [r4, #12]
 800d548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d54a:	4407      	add	r7, r0
 800d54c:	1a36      	subs	r6, r6, r0
 800d54e:	e7e9      	b.n	800d524 <__sflush_r+0xd0>
 800d550:	dfbffffe 	.word	0xdfbffffe

0800d554 <_fflush_r>:
 800d554:	b538      	push	{r3, r4, r5, lr}
 800d556:	690b      	ldr	r3, [r1, #16]
 800d558:	4605      	mov	r5, r0
 800d55a:	460c      	mov	r4, r1
 800d55c:	b913      	cbnz	r3, 800d564 <_fflush_r+0x10>
 800d55e:	2500      	movs	r5, #0
 800d560:	4628      	mov	r0, r5
 800d562:	bd38      	pop	{r3, r4, r5, pc}
 800d564:	b118      	cbz	r0, 800d56e <_fflush_r+0x1a>
 800d566:	6a03      	ldr	r3, [r0, #32]
 800d568:	b90b      	cbnz	r3, 800d56e <_fflush_r+0x1a>
 800d56a:	f7fe fa23 	bl	800b9b4 <__sinit>
 800d56e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d0f3      	beq.n	800d55e <_fflush_r+0xa>
 800d576:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d578:	07d0      	lsls	r0, r2, #31
 800d57a:	d404      	bmi.n	800d586 <_fflush_r+0x32>
 800d57c:	0599      	lsls	r1, r3, #22
 800d57e:	d402      	bmi.n	800d586 <_fflush_r+0x32>
 800d580:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d582:	f7fe fb2e 	bl	800bbe2 <__retarget_lock_acquire_recursive>
 800d586:	4628      	mov	r0, r5
 800d588:	4621      	mov	r1, r4
 800d58a:	f7ff ff63 	bl	800d454 <__sflush_r>
 800d58e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d590:	4605      	mov	r5, r0
 800d592:	07da      	lsls	r2, r3, #31
 800d594:	d4e4      	bmi.n	800d560 <_fflush_r+0xc>
 800d596:	89a3      	ldrh	r3, [r4, #12]
 800d598:	059b      	lsls	r3, r3, #22
 800d59a:	d4e1      	bmi.n	800d560 <_fflush_r+0xc>
 800d59c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d59e:	f7fe fb21 	bl	800bbe4 <__retarget_lock_release_recursive>
 800d5a2:	e7dd      	b.n	800d560 <_fflush_r+0xc>

0800d5a4 <memmove>:
 800d5a4:	4288      	cmp	r0, r1
 800d5a6:	b510      	push	{r4, lr}
 800d5a8:	eb01 0402 	add.w	r4, r1, r2
 800d5ac:	d902      	bls.n	800d5b4 <memmove+0x10>
 800d5ae:	4284      	cmp	r4, r0
 800d5b0:	4623      	mov	r3, r4
 800d5b2:	d807      	bhi.n	800d5c4 <memmove+0x20>
 800d5b4:	1e43      	subs	r3, r0, #1
 800d5b6:	42a1      	cmp	r1, r4
 800d5b8:	d008      	beq.n	800d5cc <memmove+0x28>
 800d5ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5c2:	e7f8      	b.n	800d5b6 <memmove+0x12>
 800d5c4:	4601      	mov	r1, r0
 800d5c6:	4402      	add	r2, r0
 800d5c8:	428a      	cmp	r2, r1
 800d5ca:	d100      	bne.n	800d5ce <memmove+0x2a>
 800d5cc:	bd10      	pop	{r4, pc}
 800d5ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5d6:	e7f7      	b.n	800d5c8 <memmove+0x24>

0800d5d8 <_sbrk_r>:
 800d5d8:	b538      	push	{r3, r4, r5, lr}
 800d5da:	2300      	movs	r3, #0
 800d5dc:	4d05      	ldr	r5, [pc, #20]	@ (800d5f4 <_sbrk_r+0x1c>)
 800d5de:	4604      	mov	r4, r0
 800d5e0:	4608      	mov	r0, r1
 800d5e2:	602b      	str	r3, [r5, #0]
 800d5e4:	f7f5 fb62 	bl	8002cac <_sbrk>
 800d5e8:	1c43      	adds	r3, r0, #1
 800d5ea:	d102      	bne.n	800d5f2 <_sbrk_r+0x1a>
 800d5ec:	682b      	ldr	r3, [r5, #0]
 800d5ee:	b103      	cbz	r3, 800d5f2 <_sbrk_r+0x1a>
 800d5f0:	6023      	str	r3, [r4, #0]
 800d5f2:	bd38      	pop	{r3, r4, r5, pc}
 800d5f4:	20002cf8 	.word	0x20002cf8

0800d5f8 <memcpy>:
 800d5f8:	440a      	add	r2, r1
 800d5fa:	4291      	cmp	r1, r2
 800d5fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d600:	d100      	bne.n	800d604 <memcpy+0xc>
 800d602:	4770      	bx	lr
 800d604:	b510      	push	{r4, lr}
 800d606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d60a:	4291      	cmp	r1, r2
 800d60c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d610:	d1f9      	bne.n	800d606 <memcpy+0xe>
 800d612:	bd10      	pop	{r4, pc}

0800d614 <__assert_func>:
 800d614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d616:	4614      	mov	r4, r2
 800d618:	461a      	mov	r2, r3
 800d61a:	4b09      	ldr	r3, [pc, #36]	@ (800d640 <__assert_func+0x2c>)
 800d61c:	4605      	mov	r5, r0
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	68d8      	ldr	r0, [r3, #12]
 800d622:	b954      	cbnz	r4, 800d63a <__assert_func+0x26>
 800d624:	4b07      	ldr	r3, [pc, #28]	@ (800d644 <__assert_func+0x30>)
 800d626:	461c      	mov	r4, r3
 800d628:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d62c:	9100      	str	r1, [sp, #0]
 800d62e:	462b      	mov	r3, r5
 800d630:	4905      	ldr	r1, [pc, #20]	@ (800d648 <__assert_func+0x34>)
 800d632:	f000 f86f 	bl	800d714 <fiprintf>
 800d636:	f000 f87f 	bl	800d738 <abort>
 800d63a:	4b04      	ldr	r3, [pc, #16]	@ (800d64c <__assert_func+0x38>)
 800d63c:	e7f4      	b.n	800d628 <__assert_func+0x14>
 800d63e:	bf00      	nop
 800d640:	20000038 	.word	0x20000038
 800d644:	0800f2d6 	.word	0x0800f2d6
 800d648:	0800f2a8 	.word	0x0800f2a8
 800d64c:	0800f29b 	.word	0x0800f29b

0800d650 <_calloc_r>:
 800d650:	b570      	push	{r4, r5, r6, lr}
 800d652:	fba1 5402 	umull	r5, r4, r1, r2
 800d656:	b93c      	cbnz	r4, 800d668 <_calloc_r+0x18>
 800d658:	4629      	mov	r1, r5
 800d65a:	f7ff f997 	bl	800c98c <_malloc_r>
 800d65e:	4606      	mov	r6, r0
 800d660:	b928      	cbnz	r0, 800d66e <_calloc_r+0x1e>
 800d662:	2600      	movs	r6, #0
 800d664:	4630      	mov	r0, r6
 800d666:	bd70      	pop	{r4, r5, r6, pc}
 800d668:	220c      	movs	r2, #12
 800d66a:	6002      	str	r2, [r0, #0]
 800d66c:	e7f9      	b.n	800d662 <_calloc_r+0x12>
 800d66e:	462a      	mov	r2, r5
 800d670:	4621      	mov	r1, r4
 800d672:	f7fe fa38 	bl	800bae6 <memset>
 800d676:	e7f5      	b.n	800d664 <_calloc_r+0x14>

0800d678 <__ascii_mbtowc>:
 800d678:	b082      	sub	sp, #8
 800d67a:	b901      	cbnz	r1, 800d67e <__ascii_mbtowc+0x6>
 800d67c:	a901      	add	r1, sp, #4
 800d67e:	b142      	cbz	r2, 800d692 <__ascii_mbtowc+0x1a>
 800d680:	b14b      	cbz	r3, 800d696 <__ascii_mbtowc+0x1e>
 800d682:	7813      	ldrb	r3, [r2, #0]
 800d684:	600b      	str	r3, [r1, #0]
 800d686:	7812      	ldrb	r2, [r2, #0]
 800d688:	1e10      	subs	r0, r2, #0
 800d68a:	bf18      	it	ne
 800d68c:	2001      	movne	r0, #1
 800d68e:	b002      	add	sp, #8
 800d690:	4770      	bx	lr
 800d692:	4610      	mov	r0, r2
 800d694:	e7fb      	b.n	800d68e <__ascii_mbtowc+0x16>
 800d696:	f06f 0001 	mvn.w	r0, #1
 800d69a:	e7f8      	b.n	800d68e <__ascii_mbtowc+0x16>

0800d69c <_realloc_r>:
 800d69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6a0:	4680      	mov	r8, r0
 800d6a2:	4615      	mov	r5, r2
 800d6a4:	460c      	mov	r4, r1
 800d6a6:	b921      	cbnz	r1, 800d6b2 <_realloc_r+0x16>
 800d6a8:	4611      	mov	r1, r2
 800d6aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6ae:	f7ff b96d 	b.w	800c98c <_malloc_r>
 800d6b2:	b92a      	cbnz	r2, 800d6c0 <_realloc_r+0x24>
 800d6b4:	f7ff f8f8 	bl	800c8a8 <_free_r>
 800d6b8:	2400      	movs	r4, #0
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6c0:	f000 f841 	bl	800d746 <_malloc_usable_size_r>
 800d6c4:	4285      	cmp	r5, r0
 800d6c6:	4606      	mov	r6, r0
 800d6c8:	d802      	bhi.n	800d6d0 <_realloc_r+0x34>
 800d6ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d6ce:	d8f4      	bhi.n	800d6ba <_realloc_r+0x1e>
 800d6d0:	4629      	mov	r1, r5
 800d6d2:	4640      	mov	r0, r8
 800d6d4:	f7ff f95a 	bl	800c98c <_malloc_r>
 800d6d8:	4607      	mov	r7, r0
 800d6da:	2800      	cmp	r0, #0
 800d6dc:	d0ec      	beq.n	800d6b8 <_realloc_r+0x1c>
 800d6de:	42b5      	cmp	r5, r6
 800d6e0:	462a      	mov	r2, r5
 800d6e2:	4621      	mov	r1, r4
 800d6e4:	bf28      	it	cs
 800d6e6:	4632      	movcs	r2, r6
 800d6e8:	f7ff ff86 	bl	800d5f8 <memcpy>
 800d6ec:	4621      	mov	r1, r4
 800d6ee:	4640      	mov	r0, r8
 800d6f0:	f7ff f8da 	bl	800c8a8 <_free_r>
 800d6f4:	463c      	mov	r4, r7
 800d6f6:	e7e0      	b.n	800d6ba <_realloc_r+0x1e>

0800d6f8 <__ascii_wctomb>:
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	4608      	mov	r0, r1
 800d6fc:	b141      	cbz	r1, 800d710 <__ascii_wctomb+0x18>
 800d6fe:	2aff      	cmp	r2, #255	@ 0xff
 800d700:	d904      	bls.n	800d70c <__ascii_wctomb+0x14>
 800d702:	228a      	movs	r2, #138	@ 0x8a
 800d704:	f04f 30ff 	mov.w	r0, #4294967295
 800d708:	601a      	str	r2, [r3, #0]
 800d70a:	4770      	bx	lr
 800d70c:	2001      	movs	r0, #1
 800d70e:	700a      	strb	r2, [r1, #0]
 800d710:	4770      	bx	lr
	...

0800d714 <fiprintf>:
 800d714:	b40e      	push	{r1, r2, r3}
 800d716:	b503      	push	{r0, r1, lr}
 800d718:	4601      	mov	r1, r0
 800d71a:	ab03      	add	r3, sp, #12
 800d71c:	4805      	ldr	r0, [pc, #20]	@ (800d734 <fiprintf+0x20>)
 800d71e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d722:	6800      	ldr	r0, [r0, #0]
 800d724:	9301      	str	r3, [sp, #4]
 800d726:	f000 f83d 	bl	800d7a4 <_vfiprintf_r>
 800d72a:	b002      	add	sp, #8
 800d72c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d730:	b003      	add	sp, #12
 800d732:	4770      	bx	lr
 800d734:	20000038 	.word	0x20000038

0800d738 <abort>:
 800d738:	2006      	movs	r0, #6
 800d73a:	b508      	push	{r3, lr}
 800d73c:	f000 fa06 	bl	800db4c <raise>
 800d740:	2001      	movs	r0, #1
 800d742:	f7f5 fa3e 	bl	8002bc2 <_exit>

0800d746 <_malloc_usable_size_r>:
 800d746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d74a:	1f18      	subs	r0, r3, #4
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	bfbc      	itt	lt
 800d750:	580b      	ldrlt	r3, [r1, r0]
 800d752:	18c0      	addlt	r0, r0, r3
 800d754:	4770      	bx	lr

0800d756 <__sfputc_r>:
 800d756:	6893      	ldr	r3, [r2, #8]
 800d758:	b410      	push	{r4}
 800d75a:	3b01      	subs	r3, #1
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	6093      	str	r3, [r2, #8]
 800d760:	da07      	bge.n	800d772 <__sfputc_r+0x1c>
 800d762:	6994      	ldr	r4, [r2, #24]
 800d764:	42a3      	cmp	r3, r4
 800d766:	db01      	blt.n	800d76c <__sfputc_r+0x16>
 800d768:	290a      	cmp	r1, #10
 800d76a:	d102      	bne.n	800d772 <__sfputc_r+0x1c>
 800d76c:	bc10      	pop	{r4}
 800d76e:	f000 b931 	b.w	800d9d4 <__swbuf_r>
 800d772:	6813      	ldr	r3, [r2, #0]
 800d774:	1c58      	adds	r0, r3, #1
 800d776:	6010      	str	r0, [r2, #0]
 800d778:	7019      	strb	r1, [r3, #0]
 800d77a:	4608      	mov	r0, r1
 800d77c:	bc10      	pop	{r4}
 800d77e:	4770      	bx	lr

0800d780 <__sfputs_r>:
 800d780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d782:	4606      	mov	r6, r0
 800d784:	460f      	mov	r7, r1
 800d786:	4614      	mov	r4, r2
 800d788:	18d5      	adds	r5, r2, r3
 800d78a:	42ac      	cmp	r4, r5
 800d78c:	d101      	bne.n	800d792 <__sfputs_r+0x12>
 800d78e:	2000      	movs	r0, #0
 800d790:	e007      	b.n	800d7a2 <__sfputs_r+0x22>
 800d792:	463a      	mov	r2, r7
 800d794:	4630      	mov	r0, r6
 800d796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d79a:	f7ff ffdc 	bl	800d756 <__sfputc_r>
 800d79e:	1c43      	adds	r3, r0, #1
 800d7a0:	d1f3      	bne.n	800d78a <__sfputs_r+0xa>
 800d7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d7a4 <_vfiprintf_r>:
 800d7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a8:	460d      	mov	r5, r1
 800d7aa:	4614      	mov	r4, r2
 800d7ac:	4698      	mov	r8, r3
 800d7ae:	4606      	mov	r6, r0
 800d7b0:	b09d      	sub	sp, #116	@ 0x74
 800d7b2:	b118      	cbz	r0, 800d7bc <_vfiprintf_r+0x18>
 800d7b4:	6a03      	ldr	r3, [r0, #32]
 800d7b6:	b90b      	cbnz	r3, 800d7bc <_vfiprintf_r+0x18>
 800d7b8:	f7fe f8fc 	bl	800b9b4 <__sinit>
 800d7bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7be:	07d9      	lsls	r1, r3, #31
 800d7c0:	d405      	bmi.n	800d7ce <_vfiprintf_r+0x2a>
 800d7c2:	89ab      	ldrh	r3, [r5, #12]
 800d7c4:	059a      	lsls	r2, r3, #22
 800d7c6:	d402      	bmi.n	800d7ce <_vfiprintf_r+0x2a>
 800d7c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7ca:	f7fe fa0a 	bl	800bbe2 <__retarget_lock_acquire_recursive>
 800d7ce:	89ab      	ldrh	r3, [r5, #12]
 800d7d0:	071b      	lsls	r3, r3, #28
 800d7d2:	d501      	bpl.n	800d7d8 <_vfiprintf_r+0x34>
 800d7d4:	692b      	ldr	r3, [r5, #16]
 800d7d6:	b99b      	cbnz	r3, 800d800 <_vfiprintf_r+0x5c>
 800d7d8:	4629      	mov	r1, r5
 800d7da:	4630      	mov	r0, r6
 800d7dc:	f000 f938 	bl	800da50 <__swsetup_r>
 800d7e0:	b170      	cbz	r0, 800d800 <_vfiprintf_r+0x5c>
 800d7e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7e4:	07dc      	lsls	r4, r3, #31
 800d7e6:	d504      	bpl.n	800d7f2 <_vfiprintf_r+0x4e>
 800d7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ec:	b01d      	add	sp, #116	@ 0x74
 800d7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f2:	89ab      	ldrh	r3, [r5, #12]
 800d7f4:	0598      	lsls	r0, r3, #22
 800d7f6:	d4f7      	bmi.n	800d7e8 <_vfiprintf_r+0x44>
 800d7f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7fa:	f7fe f9f3 	bl	800bbe4 <__retarget_lock_release_recursive>
 800d7fe:	e7f3      	b.n	800d7e8 <_vfiprintf_r+0x44>
 800d800:	2300      	movs	r3, #0
 800d802:	9309      	str	r3, [sp, #36]	@ 0x24
 800d804:	2320      	movs	r3, #32
 800d806:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d80a:	2330      	movs	r3, #48	@ 0x30
 800d80c:	f04f 0901 	mov.w	r9, #1
 800d810:	f8cd 800c 	str.w	r8, [sp, #12]
 800d814:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d9c0 <_vfiprintf_r+0x21c>
 800d818:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d81c:	4623      	mov	r3, r4
 800d81e:	469a      	mov	sl, r3
 800d820:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d824:	b10a      	cbz	r2, 800d82a <_vfiprintf_r+0x86>
 800d826:	2a25      	cmp	r2, #37	@ 0x25
 800d828:	d1f9      	bne.n	800d81e <_vfiprintf_r+0x7a>
 800d82a:	ebba 0b04 	subs.w	fp, sl, r4
 800d82e:	d00b      	beq.n	800d848 <_vfiprintf_r+0xa4>
 800d830:	465b      	mov	r3, fp
 800d832:	4622      	mov	r2, r4
 800d834:	4629      	mov	r1, r5
 800d836:	4630      	mov	r0, r6
 800d838:	f7ff ffa2 	bl	800d780 <__sfputs_r>
 800d83c:	3001      	adds	r0, #1
 800d83e:	f000 80a7 	beq.w	800d990 <_vfiprintf_r+0x1ec>
 800d842:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d844:	445a      	add	r2, fp
 800d846:	9209      	str	r2, [sp, #36]	@ 0x24
 800d848:	f89a 3000 	ldrb.w	r3, [sl]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	f000 809f 	beq.w	800d990 <_vfiprintf_r+0x1ec>
 800d852:	2300      	movs	r3, #0
 800d854:	f04f 32ff 	mov.w	r2, #4294967295
 800d858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d85c:	f10a 0a01 	add.w	sl, sl, #1
 800d860:	9304      	str	r3, [sp, #16]
 800d862:	9307      	str	r3, [sp, #28]
 800d864:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d868:	931a      	str	r3, [sp, #104]	@ 0x68
 800d86a:	4654      	mov	r4, sl
 800d86c:	2205      	movs	r2, #5
 800d86e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d872:	4853      	ldr	r0, [pc, #332]	@ (800d9c0 <_vfiprintf_r+0x21c>)
 800d874:	f7fe f9b7 	bl	800bbe6 <memchr>
 800d878:	9a04      	ldr	r2, [sp, #16]
 800d87a:	b9d8      	cbnz	r0, 800d8b4 <_vfiprintf_r+0x110>
 800d87c:	06d1      	lsls	r1, r2, #27
 800d87e:	bf44      	itt	mi
 800d880:	2320      	movmi	r3, #32
 800d882:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d886:	0713      	lsls	r3, r2, #28
 800d888:	bf44      	itt	mi
 800d88a:	232b      	movmi	r3, #43	@ 0x2b
 800d88c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d890:	f89a 3000 	ldrb.w	r3, [sl]
 800d894:	2b2a      	cmp	r3, #42	@ 0x2a
 800d896:	d015      	beq.n	800d8c4 <_vfiprintf_r+0x120>
 800d898:	4654      	mov	r4, sl
 800d89a:	2000      	movs	r0, #0
 800d89c:	f04f 0c0a 	mov.w	ip, #10
 800d8a0:	9a07      	ldr	r2, [sp, #28]
 800d8a2:	4621      	mov	r1, r4
 800d8a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8a8:	3b30      	subs	r3, #48	@ 0x30
 800d8aa:	2b09      	cmp	r3, #9
 800d8ac:	d94b      	bls.n	800d946 <_vfiprintf_r+0x1a2>
 800d8ae:	b1b0      	cbz	r0, 800d8de <_vfiprintf_r+0x13a>
 800d8b0:	9207      	str	r2, [sp, #28]
 800d8b2:	e014      	b.n	800d8de <_vfiprintf_r+0x13a>
 800d8b4:	eba0 0308 	sub.w	r3, r0, r8
 800d8b8:	fa09 f303 	lsl.w	r3, r9, r3
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	46a2      	mov	sl, r4
 800d8c0:	9304      	str	r3, [sp, #16]
 800d8c2:	e7d2      	b.n	800d86a <_vfiprintf_r+0xc6>
 800d8c4:	9b03      	ldr	r3, [sp, #12]
 800d8c6:	1d19      	adds	r1, r3, #4
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	9103      	str	r1, [sp, #12]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	bfbb      	ittet	lt
 800d8d0:	425b      	neglt	r3, r3
 800d8d2:	f042 0202 	orrlt.w	r2, r2, #2
 800d8d6:	9307      	strge	r3, [sp, #28]
 800d8d8:	9307      	strlt	r3, [sp, #28]
 800d8da:	bfb8      	it	lt
 800d8dc:	9204      	strlt	r2, [sp, #16]
 800d8de:	7823      	ldrb	r3, [r4, #0]
 800d8e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8e2:	d10a      	bne.n	800d8fa <_vfiprintf_r+0x156>
 800d8e4:	7863      	ldrb	r3, [r4, #1]
 800d8e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8e8:	d132      	bne.n	800d950 <_vfiprintf_r+0x1ac>
 800d8ea:	9b03      	ldr	r3, [sp, #12]
 800d8ec:	3402      	adds	r4, #2
 800d8ee:	1d1a      	adds	r2, r3, #4
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	9203      	str	r2, [sp, #12]
 800d8f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d8f8:	9305      	str	r3, [sp, #20]
 800d8fa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d9c4 <_vfiprintf_r+0x220>
 800d8fe:	2203      	movs	r2, #3
 800d900:	4650      	mov	r0, sl
 800d902:	7821      	ldrb	r1, [r4, #0]
 800d904:	f7fe f96f 	bl	800bbe6 <memchr>
 800d908:	b138      	cbz	r0, 800d91a <_vfiprintf_r+0x176>
 800d90a:	2240      	movs	r2, #64	@ 0x40
 800d90c:	9b04      	ldr	r3, [sp, #16]
 800d90e:	eba0 000a 	sub.w	r0, r0, sl
 800d912:	4082      	lsls	r2, r0
 800d914:	4313      	orrs	r3, r2
 800d916:	3401      	adds	r4, #1
 800d918:	9304      	str	r3, [sp, #16]
 800d91a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d91e:	2206      	movs	r2, #6
 800d920:	4829      	ldr	r0, [pc, #164]	@ (800d9c8 <_vfiprintf_r+0x224>)
 800d922:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d926:	f7fe f95e 	bl	800bbe6 <memchr>
 800d92a:	2800      	cmp	r0, #0
 800d92c:	d03f      	beq.n	800d9ae <_vfiprintf_r+0x20a>
 800d92e:	4b27      	ldr	r3, [pc, #156]	@ (800d9cc <_vfiprintf_r+0x228>)
 800d930:	bb1b      	cbnz	r3, 800d97a <_vfiprintf_r+0x1d6>
 800d932:	9b03      	ldr	r3, [sp, #12]
 800d934:	3307      	adds	r3, #7
 800d936:	f023 0307 	bic.w	r3, r3, #7
 800d93a:	3308      	adds	r3, #8
 800d93c:	9303      	str	r3, [sp, #12]
 800d93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d940:	443b      	add	r3, r7
 800d942:	9309      	str	r3, [sp, #36]	@ 0x24
 800d944:	e76a      	b.n	800d81c <_vfiprintf_r+0x78>
 800d946:	460c      	mov	r4, r1
 800d948:	2001      	movs	r0, #1
 800d94a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d94e:	e7a8      	b.n	800d8a2 <_vfiprintf_r+0xfe>
 800d950:	2300      	movs	r3, #0
 800d952:	f04f 0c0a 	mov.w	ip, #10
 800d956:	4619      	mov	r1, r3
 800d958:	3401      	adds	r4, #1
 800d95a:	9305      	str	r3, [sp, #20]
 800d95c:	4620      	mov	r0, r4
 800d95e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d962:	3a30      	subs	r2, #48	@ 0x30
 800d964:	2a09      	cmp	r2, #9
 800d966:	d903      	bls.n	800d970 <_vfiprintf_r+0x1cc>
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d0c6      	beq.n	800d8fa <_vfiprintf_r+0x156>
 800d96c:	9105      	str	r1, [sp, #20]
 800d96e:	e7c4      	b.n	800d8fa <_vfiprintf_r+0x156>
 800d970:	4604      	mov	r4, r0
 800d972:	2301      	movs	r3, #1
 800d974:	fb0c 2101 	mla	r1, ip, r1, r2
 800d978:	e7f0      	b.n	800d95c <_vfiprintf_r+0x1b8>
 800d97a:	ab03      	add	r3, sp, #12
 800d97c:	9300      	str	r3, [sp, #0]
 800d97e:	462a      	mov	r2, r5
 800d980:	4630      	mov	r0, r6
 800d982:	4b13      	ldr	r3, [pc, #76]	@ (800d9d0 <_vfiprintf_r+0x22c>)
 800d984:	a904      	add	r1, sp, #16
 800d986:	f7fd fbcb 	bl	800b120 <_printf_float>
 800d98a:	4607      	mov	r7, r0
 800d98c:	1c78      	adds	r0, r7, #1
 800d98e:	d1d6      	bne.n	800d93e <_vfiprintf_r+0x19a>
 800d990:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d992:	07d9      	lsls	r1, r3, #31
 800d994:	d405      	bmi.n	800d9a2 <_vfiprintf_r+0x1fe>
 800d996:	89ab      	ldrh	r3, [r5, #12]
 800d998:	059a      	lsls	r2, r3, #22
 800d99a:	d402      	bmi.n	800d9a2 <_vfiprintf_r+0x1fe>
 800d99c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d99e:	f7fe f921 	bl	800bbe4 <__retarget_lock_release_recursive>
 800d9a2:	89ab      	ldrh	r3, [r5, #12]
 800d9a4:	065b      	lsls	r3, r3, #25
 800d9a6:	f53f af1f 	bmi.w	800d7e8 <_vfiprintf_r+0x44>
 800d9aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d9ac:	e71e      	b.n	800d7ec <_vfiprintf_r+0x48>
 800d9ae:	ab03      	add	r3, sp, #12
 800d9b0:	9300      	str	r3, [sp, #0]
 800d9b2:	462a      	mov	r2, r5
 800d9b4:	4630      	mov	r0, r6
 800d9b6:	4b06      	ldr	r3, [pc, #24]	@ (800d9d0 <_vfiprintf_r+0x22c>)
 800d9b8:	a904      	add	r1, sp, #16
 800d9ba:	f7fd fe4f 	bl	800b65c <_printf_i>
 800d9be:	e7e4      	b.n	800d98a <_vfiprintf_r+0x1e6>
 800d9c0:	0800f280 	.word	0x0800f280
 800d9c4:	0800f286 	.word	0x0800f286
 800d9c8:	0800f28a 	.word	0x0800f28a
 800d9cc:	0800b121 	.word	0x0800b121
 800d9d0:	0800d781 	.word	0x0800d781

0800d9d4 <__swbuf_r>:
 800d9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d6:	460e      	mov	r6, r1
 800d9d8:	4614      	mov	r4, r2
 800d9da:	4605      	mov	r5, r0
 800d9dc:	b118      	cbz	r0, 800d9e6 <__swbuf_r+0x12>
 800d9de:	6a03      	ldr	r3, [r0, #32]
 800d9e0:	b90b      	cbnz	r3, 800d9e6 <__swbuf_r+0x12>
 800d9e2:	f7fd ffe7 	bl	800b9b4 <__sinit>
 800d9e6:	69a3      	ldr	r3, [r4, #24]
 800d9e8:	60a3      	str	r3, [r4, #8]
 800d9ea:	89a3      	ldrh	r3, [r4, #12]
 800d9ec:	071a      	lsls	r2, r3, #28
 800d9ee:	d501      	bpl.n	800d9f4 <__swbuf_r+0x20>
 800d9f0:	6923      	ldr	r3, [r4, #16]
 800d9f2:	b943      	cbnz	r3, 800da06 <__swbuf_r+0x32>
 800d9f4:	4621      	mov	r1, r4
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	f000 f82a 	bl	800da50 <__swsetup_r>
 800d9fc:	b118      	cbz	r0, 800da06 <__swbuf_r+0x32>
 800d9fe:	f04f 37ff 	mov.w	r7, #4294967295
 800da02:	4638      	mov	r0, r7
 800da04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da06:	6823      	ldr	r3, [r4, #0]
 800da08:	6922      	ldr	r2, [r4, #16]
 800da0a:	b2f6      	uxtb	r6, r6
 800da0c:	1a98      	subs	r0, r3, r2
 800da0e:	6963      	ldr	r3, [r4, #20]
 800da10:	4637      	mov	r7, r6
 800da12:	4283      	cmp	r3, r0
 800da14:	dc05      	bgt.n	800da22 <__swbuf_r+0x4e>
 800da16:	4621      	mov	r1, r4
 800da18:	4628      	mov	r0, r5
 800da1a:	f7ff fd9b 	bl	800d554 <_fflush_r>
 800da1e:	2800      	cmp	r0, #0
 800da20:	d1ed      	bne.n	800d9fe <__swbuf_r+0x2a>
 800da22:	68a3      	ldr	r3, [r4, #8]
 800da24:	3b01      	subs	r3, #1
 800da26:	60a3      	str	r3, [r4, #8]
 800da28:	6823      	ldr	r3, [r4, #0]
 800da2a:	1c5a      	adds	r2, r3, #1
 800da2c:	6022      	str	r2, [r4, #0]
 800da2e:	701e      	strb	r6, [r3, #0]
 800da30:	6962      	ldr	r2, [r4, #20]
 800da32:	1c43      	adds	r3, r0, #1
 800da34:	429a      	cmp	r2, r3
 800da36:	d004      	beq.n	800da42 <__swbuf_r+0x6e>
 800da38:	89a3      	ldrh	r3, [r4, #12]
 800da3a:	07db      	lsls	r3, r3, #31
 800da3c:	d5e1      	bpl.n	800da02 <__swbuf_r+0x2e>
 800da3e:	2e0a      	cmp	r6, #10
 800da40:	d1df      	bne.n	800da02 <__swbuf_r+0x2e>
 800da42:	4621      	mov	r1, r4
 800da44:	4628      	mov	r0, r5
 800da46:	f7ff fd85 	bl	800d554 <_fflush_r>
 800da4a:	2800      	cmp	r0, #0
 800da4c:	d0d9      	beq.n	800da02 <__swbuf_r+0x2e>
 800da4e:	e7d6      	b.n	800d9fe <__swbuf_r+0x2a>

0800da50 <__swsetup_r>:
 800da50:	b538      	push	{r3, r4, r5, lr}
 800da52:	4b29      	ldr	r3, [pc, #164]	@ (800daf8 <__swsetup_r+0xa8>)
 800da54:	4605      	mov	r5, r0
 800da56:	6818      	ldr	r0, [r3, #0]
 800da58:	460c      	mov	r4, r1
 800da5a:	b118      	cbz	r0, 800da64 <__swsetup_r+0x14>
 800da5c:	6a03      	ldr	r3, [r0, #32]
 800da5e:	b90b      	cbnz	r3, 800da64 <__swsetup_r+0x14>
 800da60:	f7fd ffa8 	bl	800b9b4 <__sinit>
 800da64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da68:	0719      	lsls	r1, r3, #28
 800da6a:	d422      	bmi.n	800dab2 <__swsetup_r+0x62>
 800da6c:	06da      	lsls	r2, r3, #27
 800da6e:	d407      	bmi.n	800da80 <__swsetup_r+0x30>
 800da70:	2209      	movs	r2, #9
 800da72:	602a      	str	r2, [r5, #0]
 800da74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da78:	f04f 30ff 	mov.w	r0, #4294967295
 800da7c:	81a3      	strh	r3, [r4, #12]
 800da7e:	e033      	b.n	800dae8 <__swsetup_r+0x98>
 800da80:	0758      	lsls	r0, r3, #29
 800da82:	d512      	bpl.n	800daaa <__swsetup_r+0x5a>
 800da84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da86:	b141      	cbz	r1, 800da9a <__swsetup_r+0x4a>
 800da88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da8c:	4299      	cmp	r1, r3
 800da8e:	d002      	beq.n	800da96 <__swsetup_r+0x46>
 800da90:	4628      	mov	r0, r5
 800da92:	f7fe ff09 	bl	800c8a8 <_free_r>
 800da96:	2300      	movs	r3, #0
 800da98:	6363      	str	r3, [r4, #52]	@ 0x34
 800da9a:	89a3      	ldrh	r3, [r4, #12]
 800da9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800daa0:	81a3      	strh	r3, [r4, #12]
 800daa2:	2300      	movs	r3, #0
 800daa4:	6063      	str	r3, [r4, #4]
 800daa6:	6923      	ldr	r3, [r4, #16]
 800daa8:	6023      	str	r3, [r4, #0]
 800daaa:	89a3      	ldrh	r3, [r4, #12]
 800daac:	f043 0308 	orr.w	r3, r3, #8
 800dab0:	81a3      	strh	r3, [r4, #12]
 800dab2:	6923      	ldr	r3, [r4, #16]
 800dab4:	b94b      	cbnz	r3, 800daca <__swsetup_r+0x7a>
 800dab6:	89a3      	ldrh	r3, [r4, #12]
 800dab8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dabc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dac0:	d003      	beq.n	800daca <__swsetup_r+0x7a>
 800dac2:	4621      	mov	r1, r4
 800dac4:	4628      	mov	r0, r5
 800dac6:	f000 f882 	bl	800dbce <__smakebuf_r>
 800daca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dace:	f013 0201 	ands.w	r2, r3, #1
 800dad2:	d00a      	beq.n	800daea <__swsetup_r+0x9a>
 800dad4:	2200      	movs	r2, #0
 800dad6:	60a2      	str	r2, [r4, #8]
 800dad8:	6962      	ldr	r2, [r4, #20]
 800dada:	4252      	negs	r2, r2
 800dadc:	61a2      	str	r2, [r4, #24]
 800dade:	6922      	ldr	r2, [r4, #16]
 800dae0:	b942      	cbnz	r2, 800daf4 <__swsetup_r+0xa4>
 800dae2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dae6:	d1c5      	bne.n	800da74 <__swsetup_r+0x24>
 800dae8:	bd38      	pop	{r3, r4, r5, pc}
 800daea:	0799      	lsls	r1, r3, #30
 800daec:	bf58      	it	pl
 800daee:	6962      	ldrpl	r2, [r4, #20]
 800daf0:	60a2      	str	r2, [r4, #8]
 800daf2:	e7f4      	b.n	800dade <__swsetup_r+0x8e>
 800daf4:	2000      	movs	r0, #0
 800daf6:	e7f7      	b.n	800dae8 <__swsetup_r+0x98>
 800daf8:	20000038 	.word	0x20000038

0800dafc <_raise_r>:
 800dafc:	291f      	cmp	r1, #31
 800dafe:	b538      	push	{r3, r4, r5, lr}
 800db00:	4605      	mov	r5, r0
 800db02:	460c      	mov	r4, r1
 800db04:	d904      	bls.n	800db10 <_raise_r+0x14>
 800db06:	2316      	movs	r3, #22
 800db08:	6003      	str	r3, [r0, #0]
 800db0a:	f04f 30ff 	mov.w	r0, #4294967295
 800db0e:	bd38      	pop	{r3, r4, r5, pc}
 800db10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800db12:	b112      	cbz	r2, 800db1a <_raise_r+0x1e>
 800db14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db18:	b94b      	cbnz	r3, 800db2e <_raise_r+0x32>
 800db1a:	4628      	mov	r0, r5
 800db1c:	f000 f830 	bl	800db80 <_getpid_r>
 800db20:	4622      	mov	r2, r4
 800db22:	4601      	mov	r1, r0
 800db24:	4628      	mov	r0, r5
 800db26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db2a:	f000 b817 	b.w	800db5c <_kill_r>
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d00a      	beq.n	800db48 <_raise_r+0x4c>
 800db32:	1c59      	adds	r1, r3, #1
 800db34:	d103      	bne.n	800db3e <_raise_r+0x42>
 800db36:	2316      	movs	r3, #22
 800db38:	6003      	str	r3, [r0, #0]
 800db3a:	2001      	movs	r0, #1
 800db3c:	e7e7      	b.n	800db0e <_raise_r+0x12>
 800db3e:	2100      	movs	r1, #0
 800db40:	4620      	mov	r0, r4
 800db42:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800db46:	4798      	blx	r3
 800db48:	2000      	movs	r0, #0
 800db4a:	e7e0      	b.n	800db0e <_raise_r+0x12>

0800db4c <raise>:
 800db4c:	4b02      	ldr	r3, [pc, #8]	@ (800db58 <raise+0xc>)
 800db4e:	4601      	mov	r1, r0
 800db50:	6818      	ldr	r0, [r3, #0]
 800db52:	f7ff bfd3 	b.w	800dafc <_raise_r>
 800db56:	bf00      	nop
 800db58:	20000038 	.word	0x20000038

0800db5c <_kill_r>:
 800db5c:	b538      	push	{r3, r4, r5, lr}
 800db5e:	2300      	movs	r3, #0
 800db60:	4d06      	ldr	r5, [pc, #24]	@ (800db7c <_kill_r+0x20>)
 800db62:	4604      	mov	r4, r0
 800db64:	4608      	mov	r0, r1
 800db66:	4611      	mov	r1, r2
 800db68:	602b      	str	r3, [r5, #0]
 800db6a:	f7f5 f81a 	bl	8002ba2 <_kill>
 800db6e:	1c43      	adds	r3, r0, #1
 800db70:	d102      	bne.n	800db78 <_kill_r+0x1c>
 800db72:	682b      	ldr	r3, [r5, #0]
 800db74:	b103      	cbz	r3, 800db78 <_kill_r+0x1c>
 800db76:	6023      	str	r3, [r4, #0]
 800db78:	bd38      	pop	{r3, r4, r5, pc}
 800db7a:	bf00      	nop
 800db7c:	20002cf8 	.word	0x20002cf8

0800db80 <_getpid_r>:
 800db80:	f7f5 b808 	b.w	8002b94 <_getpid>

0800db84 <__swhatbuf_r>:
 800db84:	b570      	push	{r4, r5, r6, lr}
 800db86:	460c      	mov	r4, r1
 800db88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db8c:	4615      	mov	r5, r2
 800db8e:	2900      	cmp	r1, #0
 800db90:	461e      	mov	r6, r3
 800db92:	b096      	sub	sp, #88	@ 0x58
 800db94:	da0c      	bge.n	800dbb0 <__swhatbuf_r+0x2c>
 800db96:	89a3      	ldrh	r3, [r4, #12]
 800db98:	2100      	movs	r1, #0
 800db9a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800db9e:	bf14      	ite	ne
 800dba0:	2340      	movne	r3, #64	@ 0x40
 800dba2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dba6:	2000      	movs	r0, #0
 800dba8:	6031      	str	r1, [r6, #0]
 800dbaa:	602b      	str	r3, [r5, #0]
 800dbac:	b016      	add	sp, #88	@ 0x58
 800dbae:	bd70      	pop	{r4, r5, r6, pc}
 800dbb0:	466a      	mov	r2, sp
 800dbb2:	f000 f849 	bl	800dc48 <_fstat_r>
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	dbed      	blt.n	800db96 <__swhatbuf_r+0x12>
 800dbba:	9901      	ldr	r1, [sp, #4]
 800dbbc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dbc0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dbc4:	4259      	negs	r1, r3
 800dbc6:	4159      	adcs	r1, r3
 800dbc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dbcc:	e7eb      	b.n	800dba6 <__swhatbuf_r+0x22>

0800dbce <__smakebuf_r>:
 800dbce:	898b      	ldrh	r3, [r1, #12]
 800dbd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbd2:	079d      	lsls	r5, r3, #30
 800dbd4:	4606      	mov	r6, r0
 800dbd6:	460c      	mov	r4, r1
 800dbd8:	d507      	bpl.n	800dbea <__smakebuf_r+0x1c>
 800dbda:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dbde:	6023      	str	r3, [r4, #0]
 800dbe0:	6123      	str	r3, [r4, #16]
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	6163      	str	r3, [r4, #20]
 800dbe6:	b003      	add	sp, #12
 800dbe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbea:	466a      	mov	r2, sp
 800dbec:	ab01      	add	r3, sp, #4
 800dbee:	f7ff ffc9 	bl	800db84 <__swhatbuf_r>
 800dbf2:	9f00      	ldr	r7, [sp, #0]
 800dbf4:	4605      	mov	r5, r0
 800dbf6:	4639      	mov	r1, r7
 800dbf8:	4630      	mov	r0, r6
 800dbfa:	f7fe fec7 	bl	800c98c <_malloc_r>
 800dbfe:	b948      	cbnz	r0, 800dc14 <__smakebuf_r+0x46>
 800dc00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc04:	059a      	lsls	r2, r3, #22
 800dc06:	d4ee      	bmi.n	800dbe6 <__smakebuf_r+0x18>
 800dc08:	f023 0303 	bic.w	r3, r3, #3
 800dc0c:	f043 0302 	orr.w	r3, r3, #2
 800dc10:	81a3      	strh	r3, [r4, #12]
 800dc12:	e7e2      	b.n	800dbda <__smakebuf_r+0xc>
 800dc14:	89a3      	ldrh	r3, [r4, #12]
 800dc16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dc1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc1e:	81a3      	strh	r3, [r4, #12]
 800dc20:	9b01      	ldr	r3, [sp, #4]
 800dc22:	6020      	str	r0, [r4, #0]
 800dc24:	b15b      	cbz	r3, 800dc3e <__smakebuf_r+0x70>
 800dc26:	4630      	mov	r0, r6
 800dc28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc2c:	f000 f81e 	bl	800dc6c <_isatty_r>
 800dc30:	b128      	cbz	r0, 800dc3e <__smakebuf_r+0x70>
 800dc32:	89a3      	ldrh	r3, [r4, #12]
 800dc34:	f023 0303 	bic.w	r3, r3, #3
 800dc38:	f043 0301 	orr.w	r3, r3, #1
 800dc3c:	81a3      	strh	r3, [r4, #12]
 800dc3e:	89a3      	ldrh	r3, [r4, #12]
 800dc40:	431d      	orrs	r5, r3
 800dc42:	81a5      	strh	r5, [r4, #12]
 800dc44:	e7cf      	b.n	800dbe6 <__smakebuf_r+0x18>
	...

0800dc48 <_fstat_r>:
 800dc48:	b538      	push	{r3, r4, r5, lr}
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	4d06      	ldr	r5, [pc, #24]	@ (800dc68 <_fstat_r+0x20>)
 800dc4e:	4604      	mov	r4, r0
 800dc50:	4608      	mov	r0, r1
 800dc52:	4611      	mov	r1, r2
 800dc54:	602b      	str	r3, [r5, #0]
 800dc56:	f7f5 f803 	bl	8002c60 <_fstat>
 800dc5a:	1c43      	adds	r3, r0, #1
 800dc5c:	d102      	bne.n	800dc64 <_fstat_r+0x1c>
 800dc5e:	682b      	ldr	r3, [r5, #0]
 800dc60:	b103      	cbz	r3, 800dc64 <_fstat_r+0x1c>
 800dc62:	6023      	str	r3, [r4, #0]
 800dc64:	bd38      	pop	{r3, r4, r5, pc}
 800dc66:	bf00      	nop
 800dc68:	20002cf8 	.word	0x20002cf8

0800dc6c <_isatty_r>:
 800dc6c:	b538      	push	{r3, r4, r5, lr}
 800dc6e:	2300      	movs	r3, #0
 800dc70:	4d05      	ldr	r5, [pc, #20]	@ (800dc88 <_isatty_r+0x1c>)
 800dc72:	4604      	mov	r4, r0
 800dc74:	4608      	mov	r0, r1
 800dc76:	602b      	str	r3, [r5, #0]
 800dc78:	f7f5 f801 	bl	8002c7e <_isatty>
 800dc7c:	1c43      	adds	r3, r0, #1
 800dc7e:	d102      	bne.n	800dc86 <_isatty_r+0x1a>
 800dc80:	682b      	ldr	r3, [r5, #0]
 800dc82:	b103      	cbz	r3, 800dc86 <_isatty_r+0x1a>
 800dc84:	6023      	str	r3, [r4, #0]
 800dc86:	bd38      	pop	{r3, r4, r5, pc}
 800dc88:	20002cf8 	.word	0x20002cf8

0800dc8c <_init>:
 800dc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc8e:	bf00      	nop
 800dc90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc92:	bc08      	pop	{r3}
 800dc94:	469e      	mov	lr, r3
 800dc96:	4770      	bx	lr

0800dc98 <_fini>:
 800dc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc9a:	bf00      	nop
 800dc9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc9e:	bc08      	pop	{r3}
 800dca0:	469e      	mov	lr, r3
 800dca2:	4770      	bx	lr
