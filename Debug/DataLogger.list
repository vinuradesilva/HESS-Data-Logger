
DataLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000960c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08009720  08009720  0000a720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ad0  08009ad0  0000b1ec  2**0
                  CONTENTS
  4 .ARM          00000008  08009ad0  08009ad0  0000aad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ad8  08009ad8  0000b1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ad8  08009ad8  0000aad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009adc  08009adc  0000aadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08009ae0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  200001ec  08009ccc  0000b1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a08  08009ccc  0000ba08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d37  00000000  00000000  0000b215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033a0  00000000  00000000  0001df4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  000212f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f5f  00000000  00000000  000226b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a377  00000000  00000000  00023617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018332  00000000  00000000  0003d98e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000945e4  00000000  00000000  00055cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea2a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006274  00000000  00000000  000ea2e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000f055c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08009704 	.word	0x08009704

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08009704 	.word	0x08009704

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <bcd2bin>:
#include "ds1307.h"

extern I2C_HandleTypeDef hi2c1;


uint8_t bcd2bin(uint8_t data){
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
 return ((data>>4)*10)+(data&0x0F);
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	0092      	lsls	r2, r2, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 030f 	and.w	r3, r3, #15
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2db      	uxtb	r3, r3
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <rtc_write>:
	
	return data;
}

void rtc_write(uint8_t address,uint8_t data)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af04      	add	r7, sp, #16
 8000cda:	4603      	mov	r3, r0
 8000cdc:	460a      	mov	r2, r1
 8000cde:	71fb      	strb	r3, [r7, #7]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,address,I2C_MEMADD_SIZE_8BIT,&data,1,100)!=HAL_OK){
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	2364      	movs	r3, #100	@ 0x64
 8000cea:	9302      	str	r3, [sp, #8]
 8000cec:	2301      	movs	r3, #1
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	1dbb      	adds	r3, r7, #6
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	f64f 71d0 	movw	r1, #65488	@ 0xffd0
 8000cfa:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <rtc_write+0x44>)
 8000cfc:	f003 fa10 	bl	8004120 <HAL_I2C_Mem_Write>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <rtc_write+0x3a>
		Error_Handler(__FILE__,__LINE__);
 8000d06:	211c      	movs	r1, #28
 8000d08:	4804      	ldr	r0, [pc, #16]	@ (8000d1c <rtc_write+0x48>)
 8000d0a:	f001 f93f 	bl	8001f8c <Error_Handler>
	}
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000284 	.word	0x20000284
 8000d1c:	08009720 	.word	0x08009720

08000d20 <rtc_init>:

void rtc_init(uint8_t rs,uint8_t sqwe,uint8_t out)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	71bb      	strb	r3, [r7, #6]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	717b      	strb	r3, [r7, #5]
	rs&=3;
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 0303 	and.w	r3, r3, #3
 8000d38:	71fb      	strb	r3, [r7, #7]
	if (sqwe) rs|=0x10;
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d003      	beq.n	8000d48 <rtc_init+0x28>
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	71fb      	strb	r3, [r7, #7]
	if (out) rs|=0x80;
 8000d48:	797b      	ldrb	r3, [r7, #5]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <rtc_init+0x36>
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d54:	71fb      	strb	r3, [r7, #7]
	
	rtc_write(0x07,rs);
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	2007      	movs	r0, #7
 8000d5c:	f7ff ffba 	bl	8000cd4 <rtc_write>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <rtc_get_time>:

void rtc_get_time(uint8_t *hour,uint8_t *min,uint8_t *sec)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	@ 0x28
 8000d6c:	af04      	add	r7, sp, #16
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
	uint8_t data[3];
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 8000d74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2301      	movs	r3, #1
 8000d86:	2200      	movs	r2, #0
 8000d88:	f64f 71d0 	movw	r1, #65488	@ 0xffd0
 8000d8c:	4812      	ldr	r0, [pc, #72]	@ (8000dd8 <rtc_get_time+0x70>)
 8000d8e:	f003 fac1 	bl	8004314 <HAL_I2C_Mem_Read>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d003      	beq.n	8000da0 <rtc_get_time+0x38>
		Error_Handler(__FILE__,__LINE__);
 8000d98:	212d      	movs	r1, #45	@ 0x2d
 8000d9a:	4810      	ldr	r0, [pc, #64]	@ (8000ddc <rtc_get_time+0x74>)
 8000d9c:	f001 f8f6 	bl	8001f8c <Error_Handler>
	}	

	*sec=bcd2bin(data[0]);
 8000da0:	7d3b      	ldrb	r3, [r7, #20]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff7e 	bl	8000ca4 <bcd2bin>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	701a      	strb	r2, [r3, #0]
	*min=bcd2bin(data[1]);
 8000db0:	7d7b      	ldrb	r3, [r7, #21]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff76 	bl	8000ca4 <bcd2bin>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	701a      	strb	r2, [r3, #0]
	*hour=bcd2bin(data[2]);
 8000dc0:	7dbb      	ldrb	r3, [r7, #22]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff ff6e 	bl	8000ca4 <bcd2bin>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	701a      	strb	r2, [r3, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000284 	.word	0x20000284
 8000ddc:	08009720 	.word	0x08009720

08000de0 <rtc_get_date>:
		Error_Handler(__FILE__,__LINE__);
	}
}

void rtc_get_date(uint8_t *week_day,uint8_t *day,uint8_t *month,uint8_t *year)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	@ 0x28
 8000de4:	af04      	add	r7, sp, #16
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
 8000dec:	603b      	str	r3, [r7, #0]
	uint8_t data[4]={0,0,0,0};
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x03,I2C_MEMADD_SIZE_8BIT,data,4,1000)!=HAL_OK){
 8000df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df6:	9302      	str	r3, [sp, #8]
 8000df8:	2304      	movs	r3, #4
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2301      	movs	r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	f64f 71d0 	movw	r1, #65488	@ 0xffd0
 8000e0a:	4814      	ldr	r0, [pc, #80]	@ (8000e5c <rtc_get_date+0x7c>)
 8000e0c:	f003 fa82 	bl	8004314 <HAL_I2C_Mem_Read>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <rtc_get_date+0x3e>
		Error_Handler(__FILE__,__LINE__);
 8000e16:	2141      	movs	r1, #65	@ 0x41
 8000e18:	4811      	ldr	r0, [pc, #68]	@ (8000e60 <rtc_get_date+0x80>)
 8000e1a:	f001 f8b7 	bl	8001f8c <Error_Handler>
	}
	
	*week_day=data[0];
 8000e1e:	7d3a      	ldrb	r2, [r7, #20]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	701a      	strb	r2, [r3, #0]
	*day=bcd2bin(data[1]);
 8000e24:	7d7b      	ldrb	r3, [r7, #21]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff3c 	bl	8000ca4 <bcd2bin>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	701a      	strb	r2, [r3, #0]
	*month=bcd2bin(data[2]);
 8000e34:	7dbb      	ldrb	r3, [r7, #22]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ff34 	bl	8000ca4 <bcd2bin>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461a      	mov	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	701a      	strb	r2, [r3, #0]
	*year=bcd2bin(data[3]);
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff2c 	bl	8000ca4 <bcd2bin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	461a      	mov	r2, r3
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	701a      	strb	r2, [r3, #0]
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000284 	.word	0x20000284
 8000e60:	08009720 	.word	0x08009720

08000e64 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e6e:	4804      	ldr	r0, [pc, #16]	@ (8000e80 <SELECT+0x1c>)
 8000e70:	f002 fee2 	bl	8003c38 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f001 fda9 	bl	80029cc <HAL_Delay>
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40010800 	.word	0x40010800

08000e84 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e8e:	4804      	ldr	r0, [pc, #16]	@ (8000ea0 <DESELECT+0x1c>)
 8000e90:	f002 fed2 	bl	8003c38 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e94:	2001      	movs	r0, #1
 8000e96:	f001 fd99 	bl	80029cc <HAL_Delay>
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40010800 	.word	0x40010800

08000ea4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000eae:	bf00      	nop
 8000eb0:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <SPI_TxByte+0x30>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d1f8      	bne.n	8000eb0 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000ebe:	1df9      	adds	r1, r7, #7
 8000ec0:	2364      	movs	r3, #100	@ 0x64
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4803      	ldr	r0, [pc, #12]	@ (8000ed4 <SPI_TxByte+0x30>)
 8000ec6:	f004 ff33 	bl	8005d30 <HAL_SPI_Transmit>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000032c 	.word	0x2000032c

08000ed8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ee4:	bf00      	nop
 8000ee6:	4b08      	ldr	r3, [pc, #32]	@ (8000f08 <SPI_TxBuffer+0x30>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d1f8      	bne.n	8000ee6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000ef4:	887a      	ldrh	r2, [r7, #2]
 8000ef6:	2364      	movs	r3, #100	@ 0x64
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <SPI_TxBuffer+0x30>)
 8000efc:	f004 ff18 	bl	8005d30 <HAL_SPI_Transmit>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	2000032c 	.word	0x2000032c

08000f0c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000f12:	23ff      	movs	r3, #255	@ 0xff
 8000f14:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f16:	bf00      	nop
 8000f18:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <SPI_RxByte+0x34>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d1f8      	bne.n	8000f18 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000f26:	1dba      	adds	r2, r7, #6
 8000f28:	1df9      	adds	r1, r7, #7
 8000f2a:	2364      	movs	r3, #100	@ 0x64
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	4803      	ldr	r0, [pc, #12]	@ (8000f40 <SPI_RxByte+0x34>)
 8000f32:	f005 f841 	bl	8005fb8 <HAL_SPI_TransmitReceive>

	return data;
 8000f36:	79bb      	ldrb	r3, [r7, #6]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2000032c 	.word	0x2000032c

08000f44 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000f4c:	f7ff ffde 	bl	8000f0c <SPI_RxByte>
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	701a      	strb	r2, [r3, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <SD_ReadyWait+0x30>)
 8000f68:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f6c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000f6e:	f7ff ffcd 	bl	8000f0c <SPI_RxByte>
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2bff      	cmp	r3, #255	@ 0xff
 8000f7a:	d003      	beq.n	8000f84 <SD_ReadyWait+0x24>
 8000f7c:	4b04      	ldr	r3, [pc, #16]	@ (8000f90 <SD_ReadyWait+0x30>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1f4      	bne.n	8000f6e <SD_ReadyWait+0xe>

	return res;
 8000f84:	79fb      	ldrb	r3, [r7, #7]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000020a 	.word	0x2000020a

08000f94 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000f9a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000f9e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000fa0:	f7ff ff70 	bl	8000e84 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	e005      	b.n	8000fb6 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000faa:	20ff      	movs	r0, #255	@ 0xff
 8000fac:	f7ff ff7a 	bl	8000ea4 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	2b09      	cmp	r3, #9
 8000fba:	ddf6      	ble.n	8000faa <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000fbc:	f7ff ff52 	bl	8000e64 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000fc0:	2340      	movs	r3, #64	@ 0x40
 8000fc2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000fd4:	2395      	movs	r3, #149	@ 0x95
 8000fd6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2106      	movs	r1, #6
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff7b 	bl	8000ed8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000fe2:	e002      	b.n	8000fea <SD_PowerOn+0x56>
	{
		cnt--;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000fea:	f7ff ff8f 	bl	8000f0c <SPI_RxByte>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d002      	beq.n	8000ffa <SD_PowerOn+0x66>
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f4      	bne.n	8000fe4 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000ffa:	f7ff ff43 	bl	8000e84 <DESELECT>
	SPI_TxByte(0XFF);
 8000ffe:	20ff      	movs	r0, #255	@ 0xff
 8001000:	f7ff ff50 	bl	8000ea4 <SPI_TxByte>

	PowerFlag = 1;
 8001004:	4b03      	ldr	r3, [pc, #12]	@ (8001014 <SD_PowerOn+0x80>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	2000020d 	.word	0x2000020d

08001018 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800101c:	4b03      	ldr	r3, [pc, #12]	@ (800102c <SD_PowerOff+0x14>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	2000020d 	.word	0x2000020d

08001030 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001034:	4b02      	ldr	r3, [pc, #8]	@ (8001040 <SD_CheckPower+0x10>)
 8001036:	781b      	ldrb	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	2000020d 	.word	0x2000020d

08001044 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800104e:	4b13      	ldr	r3, [pc, #76]	@ (800109c <SD_RxDataBlock+0x58>)
 8001050:	22c8      	movs	r2, #200	@ 0xc8
 8001052:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001054:	f7ff ff5a 	bl	8000f0c <SPI_RxByte>
 8001058:	4603      	mov	r3, r0
 800105a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2bff      	cmp	r3, #255	@ 0xff
 8001060:	d103      	bne.n	800106a <SD_RxDataBlock+0x26>
 8001062:	4b0e      	ldr	r3, [pc, #56]	@ (800109c <SD_RxDataBlock+0x58>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f4      	bne.n	8001054 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	2bfe      	cmp	r3, #254	@ 0xfe
 800106e:	d001      	beq.n	8001074 <SD_RxDataBlock+0x30>
 8001070:	2300      	movs	r3, #0
 8001072:	e00f      	b.n	8001094 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff62 	bl	8000f44 <SPI_RxBytePtr>
	} while(len--);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	1e5a      	subs	r2, r3, #1
 8001084:	603a      	str	r2, [r7, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f4      	bne.n	8001074 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800108a:	f7ff ff3f 	bl	8000f0c <SPI_RxByte>
	SPI_RxByte();
 800108e:	f7ff ff3d 	bl	8000f0c <SPI_RxByte>

	return TRUE;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000208 	.word	0x20000208

080010a0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80010b0:	f7ff ff56 	bl	8000f60 <SD_ReadyWait>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2bff      	cmp	r3, #255	@ 0xff
 80010b8:	d001      	beq.n	80010be <SD_TxDataBlock+0x1e>
 80010ba:	2300      	movs	r3, #0
 80010bc:	e02f      	b.n	800111e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff feef 	bl	8000ea4 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	2bfd      	cmp	r3, #253	@ 0xfd
 80010ca:	d020      	beq.n	800110e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80010cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff01 	bl	8000ed8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80010d6:	f7ff ff19 	bl	8000f0c <SPI_RxByte>
		SPI_RxByte();
 80010da:	f7ff ff17 	bl	8000f0c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80010de:	e00b      	b.n	80010f8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80010e0:	f7ff ff14 	bl	8000f0c <SPI_RxByte>
 80010e4:	4603      	mov	r3, r0
 80010e6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	d006      	beq.n	8001100 <SD_TxDataBlock+0x60>
			i++;
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	3301      	adds	r3, #1
 80010f6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80010f8:	7bbb      	ldrb	r3, [r7, #14]
 80010fa:	2b40      	cmp	r3, #64	@ 0x40
 80010fc:	d9f0      	bls.n	80010e0 <SD_TxDataBlock+0x40>
 80010fe:	e000      	b.n	8001102 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001100:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001102:	bf00      	nop
 8001104:	f7ff ff02 	bl	8000f0c <SPI_RxByte>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0fa      	beq.n	8001104 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	f003 031f 	and.w	r3, r3, #31
 8001114:	2b05      	cmp	r3, #5
 8001116:	d101      	bne.n	800111c <SD_TxDataBlock+0x7c>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <SD_TxDataBlock+0x7e>

	return FALSE;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	6039      	str	r1, [r7, #0]
 8001130:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001132:	f7ff ff15 	bl	8000f60 <SD_ReadyWait>
 8001136:	4603      	mov	r3, r0
 8001138:	2bff      	cmp	r3, #255	@ 0xff
 800113a:	d001      	beq.n	8001140 <SD_SendCmd+0x1a>
 800113c:	23ff      	movs	r3, #255	@ 0xff
 800113e:	e042      	b.n	80011c6 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff feae 	bl	8000ea4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	0e1b      	lsrs	r3, r3, #24
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fea8 	bl	8000ea4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	0c1b      	lsrs	r3, r3, #16
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fea2 	bl	8000ea4 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	0a1b      	lsrs	r3, r3, #8
 8001164:	b2db      	uxtb	r3, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fe9c 	bl	8000ea4 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fe97 	bl	8000ea4 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2b40      	cmp	r3, #64	@ 0x40
 800117a:	d102      	bne.n	8001182 <SD_SendCmd+0x5c>
 800117c:	2395      	movs	r3, #149	@ 0x95
 800117e:	73fb      	strb	r3, [r7, #15]
 8001180:	e007      	b.n	8001192 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b48      	cmp	r3, #72	@ 0x48
 8001186:	d102      	bne.n	800118e <SD_SendCmd+0x68>
 8001188:	2387      	movs	r3, #135	@ 0x87
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e001      	b.n	8001192 <SD_SendCmd+0x6c>
	else crc = 1;
 800118e:	2301      	movs	r3, #1
 8001190:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fe85 	bl	8000ea4 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b4c      	cmp	r3, #76	@ 0x4c
 800119e:	d101      	bne.n	80011a4 <SD_SendCmd+0x7e>
 80011a0:	f7ff feb4 	bl	8000f0c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80011a4:	230a      	movs	r3, #10
 80011a6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80011a8:	f7ff feb0 	bl	8000f0c <SPI_RxByte>
 80011ac:	4603      	mov	r3, r0
 80011ae:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80011b0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	da05      	bge.n	80011c4 <SD_SendCmd+0x9e>
 80011b8:	7bbb      	ldrb	r3, [r7, #14]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	73bb      	strb	r3, [r7, #14]
 80011be:	7bbb      	ldrb	r3, [r7, #14]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f1      	bne.n	80011a8 <SD_SendCmd+0x82>

	return res;
 80011c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SD_disk_initialize+0x14>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e0d1      	b.n	8001388 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80011e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001390 <SD_disk_initialize+0x1c0>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <SD_disk_initialize+0x2a>
 80011f2:	4b67      	ldr	r3, [pc, #412]	@ (8001390 <SD_disk_initialize+0x1c0>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	e0c6      	b.n	8001388 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80011fa:	f7ff fecb 	bl	8000f94 <SD_PowerOn>

	/* slave select */
	SELECT();
 80011fe:	f7ff fe31 	bl	8000e64 <SELECT>

	/* check disk type */
	type = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001206:	2100      	movs	r1, #0
 8001208:	2040      	movs	r0, #64	@ 0x40
 800120a:	f7ff ff8c 	bl	8001126 <SD_SendCmd>
 800120e:	4603      	mov	r3, r0
 8001210:	2b01      	cmp	r3, #1
 8001212:	f040 80a1 	bne.w	8001358 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001216:	4b5f      	ldr	r3, [pc, #380]	@ (8001394 <SD_disk_initialize+0x1c4>)
 8001218:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800121c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800121e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001222:	2048      	movs	r0, #72	@ 0x48
 8001224:	f7ff ff7f 	bl	8001126 <SD_SendCmd>
 8001228:	4603      	mov	r3, r0
 800122a:	2b01      	cmp	r3, #1
 800122c:	d155      	bne.n	80012da <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e00c      	b.n	800124e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001234:	7bfc      	ldrb	r4, [r7, #15]
 8001236:	f7ff fe69 	bl	8000f0c <SPI_RxByte>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	f104 0310 	add.w	r3, r4, #16
 8001242:	443b      	add	r3, r7
 8001244:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	3301      	adds	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	2b03      	cmp	r3, #3
 8001252:	d9ef      	bls.n	8001234 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001254:	7abb      	ldrb	r3, [r7, #10]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d17e      	bne.n	8001358 <SD_disk_initialize+0x188>
 800125a:	7afb      	ldrb	r3, [r7, #11]
 800125c:	2baa      	cmp	r3, #170	@ 0xaa
 800125e:	d17b      	bne.n	8001358 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001260:	2100      	movs	r1, #0
 8001262:	2077      	movs	r0, #119	@ 0x77
 8001264:	f7ff ff5f 	bl	8001126 <SD_SendCmd>
 8001268:	4603      	mov	r3, r0
 800126a:	2b01      	cmp	r3, #1
 800126c:	d807      	bhi.n	800127e <SD_disk_initialize+0xae>
 800126e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001272:	2069      	movs	r0, #105	@ 0x69
 8001274:	f7ff ff57 	bl	8001126 <SD_SendCmd>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d004      	beq.n	8001288 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800127e:	4b45      	ldr	r3, [pc, #276]	@ (8001394 <SD_disk_initialize+0x1c4>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1ec      	bne.n	8001260 <SD_disk_initialize+0x90>
 8001286:	e000      	b.n	800128a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001288:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800128a:	4b42      	ldr	r3, [pc, #264]	@ (8001394 <SD_disk_initialize+0x1c4>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d062      	beq.n	8001358 <SD_disk_initialize+0x188>
 8001292:	2100      	movs	r1, #0
 8001294:	207a      	movs	r0, #122	@ 0x7a
 8001296:	f7ff ff46 	bl	8001126 <SD_SendCmd>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d15b      	bne.n	8001358 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	e00c      	b.n	80012c0 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80012a6:	7bfc      	ldrb	r4, [r7, #15]
 80012a8:	f7ff fe30 	bl	8000f0c <SPI_RxByte>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	f104 0310 	add.w	r3, r4, #16
 80012b4:	443b      	add	r3, r7
 80012b6:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	3301      	adds	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d9ef      	bls.n	80012a6 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80012c6:	7a3b      	ldrb	r3, [r7, #8]
 80012c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SD_disk_initialize+0x104>
 80012d0:	230c      	movs	r3, #12
 80012d2:	e000      	b.n	80012d6 <SD_disk_initialize+0x106>
 80012d4:	2304      	movs	r3, #4
 80012d6:	73bb      	strb	r3, [r7, #14]
 80012d8:	e03e      	b.n	8001358 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80012da:	2100      	movs	r1, #0
 80012dc:	2077      	movs	r0, #119	@ 0x77
 80012de:	f7ff ff22 	bl	8001126 <SD_SendCmd>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d808      	bhi.n	80012fa <SD_disk_initialize+0x12a>
 80012e8:	2100      	movs	r1, #0
 80012ea:	2069      	movs	r0, #105	@ 0x69
 80012ec:	f7ff ff1b 	bl	8001126 <SD_SendCmd>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d801      	bhi.n	80012fa <SD_disk_initialize+0x12a>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e000      	b.n	80012fc <SD_disk_initialize+0x12c>
 80012fa:	2301      	movs	r3, #1
 80012fc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	2b02      	cmp	r3, #2
 8001302:	d10e      	bne.n	8001322 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001304:	2100      	movs	r1, #0
 8001306:	2077      	movs	r0, #119	@ 0x77
 8001308:	f7ff ff0d 	bl	8001126 <SD_SendCmd>
 800130c:	4603      	mov	r3, r0
 800130e:	2b01      	cmp	r3, #1
 8001310:	d80e      	bhi.n	8001330 <SD_disk_initialize+0x160>
 8001312:	2100      	movs	r1, #0
 8001314:	2069      	movs	r0, #105	@ 0x69
 8001316:	f7ff ff06 	bl	8001126 <SD_SendCmd>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d107      	bne.n	8001330 <SD_disk_initialize+0x160>
 8001320:	e00c      	b.n	800133c <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001322:	2100      	movs	r1, #0
 8001324:	2041      	movs	r0, #65	@ 0x41
 8001326:	f7ff fefe 	bl	8001126 <SD_SendCmd>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <SD_disk_initialize+0x1c4>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1e2      	bne.n	80012fe <SD_disk_initialize+0x12e>
 8001338:	e000      	b.n	800133c <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800133a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <SD_disk_initialize+0x1c4>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d007      	beq.n	8001354 <SD_disk_initialize+0x184>
 8001344:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001348:	2050      	movs	r0, #80	@ 0x50
 800134a:	f7ff feec 	bl	8001126 <SD_SendCmd>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SD_disk_initialize+0x188>
 8001354:	2300      	movs	r3, #0
 8001356:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001358:	4a0f      	ldr	r2, [pc, #60]	@ (8001398 <SD_disk_initialize+0x1c8>)
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800135e:	f7ff fd91 	bl	8000e84 <DESELECT>
	SPI_RxByte();
 8001362:	f7ff fdd3 	bl	8000f0c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d008      	beq.n	800137e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 800136c:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <SD_disk_initialize+0x1c0>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f023 0301 	bic.w	r3, r3, #1
 8001376:	b2da      	uxtb	r2, r3
 8001378:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <SD_disk_initialize+0x1c0>)
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	e001      	b.n	8001382 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800137e:	f7ff fe4b 	bl	8001018 <SD_PowerOff>
	}

	return Stat;
 8001382:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <SD_disk_initialize+0x1c0>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}
 8001390:	20000000 	.word	0x20000000
 8001394:	20000208 	.word	0x20000208
 8001398:	2000020c 	.word	0x2000020c

0800139c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SD_disk_status+0x14>
 80013ac:	2301      	movs	r3, #1
 80013ae:	e002      	b.n	80013b6 <SD_disk_status+0x1a>
	return Stat;
 80013b0:	4b03      	ldr	r3, [pc, #12]	@ (80013c0 <SD_disk_status+0x24>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b2db      	uxtb	r3, r3
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr
 80013c0:	20000000 	.word	0x20000000

080013c4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	4603      	mov	r3, r0
 80013d2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <SD_disk_read+0x1c>
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <SD_disk_read+0x20>
 80013e0:	2304      	movs	r3, #4
 80013e2:	e051      	b.n	8001488 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80013e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <SD_disk_read+0xcc>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SD_disk_read+0x32>
 80013f2:	2303      	movs	r3, #3
 80013f4:	e048      	b.n	8001488 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80013f6:	4b27      	ldr	r3, [pc, #156]	@ (8001494 <SD_disk_read+0xd0>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <SD_disk_read+0x44>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	025b      	lsls	r3, r3, #9
 8001406:	607b      	str	r3, [r7, #4]

	SELECT();
 8001408:	f7ff fd2c 	bl	8000e64 <SELECT>

	if (count == 1)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d111      	bne.n	8001436 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	2051      	movs	r0, #81	@ 0x51
 8001416:	f7ff fe86 	bl	8001126 <SD_SendCmd>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d129      	bne.n	8001474 <SD_disk_read+0xb0>
 8001420:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001424:	68b8      	ldr	r0, [r7, #8]
 8001426:	f7ff fe0d 	bl	8001044 <SD_RxDataBlock>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d021      	beq.n	8001474 <SD_disk_read+0xb0>
 8001430:	2300      	movs	r3, #0
 8001432:	603b      	str	r3, [r7, #0]
 8001434:	e01e      	b.n	8001474 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	2052      	movs	r0, #82	@ 0x52
 800143a:	f7ff fe74 	bl	8001126 <SD_SendCmd>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d117      	bne.n	8001474 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001444:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001448:	68b8      	ldr	r0, [r7, #8]
 800144a:	f7ff fdfb 	bl	8001044 <SD_RxDataBlock>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00a      	beq.n	800146a <SD_disk_read+0xa6>
				buff += 512;
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800145a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	3b01      	subs	r3, #1
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1ed      	bne.n	8001444 <SD_disk_read+0x80>
 8001468:	e000      	b.n	800146c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800146a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800146c:	2100      	movs	r1, #0
 800146e:	204c      	movs	r0, #76	@ 0x4c
 8001470:	f7ff fe59 	bl	8001126 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001474:	f7ff fd06 	bl	8000e84 <DESELECT>
	SPI_RxByte();
 8001478:	f7ff fd48 	bl	8000f0c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	bf14      	ite	ne
 8001482:	2301      	movne	r3, #1
 8001484:	2300      	moveq	r3, #0
 8001486:	b2db      	uxtb	r3, r3
}
 8001488:	4618      	mov	r0, r3
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000000 	.word	0x20000000
 8001494:	2000020c 	.word	0x2000020c

08001498 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	4603      	mov	r3, r0
 80014a6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <SD_disk_write+0x1c>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <SD_disk_write+0x20>
 80014b4:	2304      	movs	r3, #4
 80014b6:	e06b      	b.n	8001590 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014b8:	4b37      	ldr	r3, [pc, #220]	@ (8001598 <SD_disk_write+0x100>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SD_disk_write+0x32>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e062      	b.n	8001590 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80014ca:	4b33      	ldr	r3, [pc, #204]	@ (8001598 <SD_disk_write+0x100>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SD_disk_write+0x44>
 80014d8:	2302      	movs	r3, #2
 80014da:	e059      	b.n	8001590 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80014dc:	4b2f      	ldr	r3, [pc, #188]	@ (800159c <SD_disk_write+0x104>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <SD_disk_write+0x56>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	025b      	lsls	r3, r3, #9
 80014ec:	607b      	str	r3, [r7, #4]

	SELECT();
 80014ee:	f7ff fcb9 	bl	8000e64 <SELECT>

	if (count == 1)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d110      	bne.n	800151a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	2058      	movs	r0, #88	@ 0x58
 80014fc:	f7ff fe13 	bl	8001126 <SD_SendCmd>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d13a      	bne.n	800157c <SD_disk_write+0xe4>
 8001506:	21fe      	movs	r1, #254	@ 0xfe
 8001508:	68b8      	ldr	r0, [r7, #8]
 800150a:	f7ff fdc9 	bl	80010a0 <SD_TxDataBlock>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d033      	beq.n	800157c <SD_disk_write+0xe4>
			count = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	e030      	b.n	800157c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800151a:	4b20      	ldr	r3, [pc, #128]	@ (800159c <SD_disk_write+0x104>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001526:	2100      	movs	r1, #0
 8001528:	2077      	movs	r0, #119	@ 0x77
 800152a:	f7ff fdfc 	bl	8001126 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800152e:	6839      	ldr	r1, [r7, #0]
 8001530:	2057      	movs	r0, #87	@ 0x57
 8001532:	f7ff fdf8 	bl	8001126 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	2059      	movs	r0, #89	@ 0x59
 800153a:	f7ff fdf4 	bl	8001126 <SD_SendCmd>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d11b      	bne.n	800157c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001544:	21fc      	movs	r1, #252	@ 0xfc
 8001546:	68b8      	ldr	r0, [r7, #8]
 8001548:	f7ff fdaa 	bl	80010a0 <SD_TxDataBlock>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00a      	beq.n	8001568 <SD_disk_write+0xd0>
				buff += 512;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001558:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	3b01      	subs	r3, #1
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1ee      	bne.n	8001544 <SD_disk_write+0xac>
 8001566:	e000      	b.n	800156a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001568:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800156a:	21fd      	movs	r1, #253	@ 0xfd
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff fd97 	bl	80010a0 <SD_TxDataBlock>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <SD_disk_write+0xe4>
			{
				count = 1;
 8001578:	2301      	movs	r3, #1
 800157a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800157c:	f7ff fc82 	bl	8000e84 <DESELECT>
	SPI_RxByte();
 8001580:	f7ff fcc4 	bl	8000f0c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	bf14      	ite	ne
 800158a:	2301      	movne	r3, #1
 800158c:	2300      	moveq	r3, #0
 800158e:	b2db      	uxtb	r3, r3
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000000 	.word	0x20000000
 800159c:	2000020c 	.word	0x2000020c

080015a0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b08b      	sub	sp, #44	@ 0x2c
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	603a      	str	r2, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	460b      	mov	r3, r1
 80015ae:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SD_disk_ioctl+0x1e>
 80015ba:	2304      	movs	r3, #4
 80015bc:	e113      	b.n	80017e6 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80015c4:	79bb      	ldrb	r3, [r7, #6]
 80015c6:	2b05      	cmp	r3, #5
 80015c8:	d124      	bne.n	8001614 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d012      	beq.n	80015f8 <SD_disk_ioctl+0x58>
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	dc1a      	bgt.n	800160c <SD_disk_ioctl+0x6c>
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <SD_disk_ioctl+0x40>
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d006      	beq.n	80015ec <SD_disk_ioctl+0x4c>
 80015de:	e015      	b.n	800160c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80015e0:	f7ff fd1a 	bl	8001018 <SD_PowerOff>
			res = RES_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80015ea:	e0fa      	b.n	80017e2 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80015ec:	f7ff fcd2 	bl	8000f94 <SD_PowerOn>
			res = RES_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80015f6:	e0f4      	b.n	80017e2 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	1c5c      	adds	r4, r3, #1
 80015fc:	f7ff fd18 	bl	8001030 <SD_CheckPower>
 8001600:	4603      	mov	r3, r0
 8001602:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001604:	2300      	movs	r3, #0
 8001606:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800160a:	e0ea      	b.n	80017e2 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 800160c:	2304      	movs	r3, #4
 800160e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001612:	e0e6      	b.n	80017e2 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001614:	4b76      	ldr	r3, [pc, #472]	@ (80017f0 <SD_disk_ioctl+0x250>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <SD_disk_ioctl+0x86>
 8001622:	2303      	movs	r3, #3
 8001624:	e0df      	b.n	80017e6 <SD_disk_ioctl+0x246>

		SELECT();
 8001626:	f7ff fc1d 	bl	8000e64 <SELECT>

		switch (ctrl)
 800162a:	79bb      	ldrb	r3, [r7, #6]
 800162c:	2b0d      	cmp	r3, #13
 800162e:	f200 80c9 	bhi.w	80017c4 <SD_disk_ioctl+0x224>
 8001632:	a201      	add	r2, pc, #4	@ (adr r2, 8001638 <SD_disk_ioctl+0x98>)
 8001634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001638:	0800172f 	.word	0x0800172f
 800163c:	08001671 	.word	0x08001671
 8001640:	0800171f 	.word	0x0800171f
 8001644:	080017c5 	.word	0x080017c5
 8001648:	080017c5 	.word	0x080017c5
 800164c:	080017c5 	.word	0x080017c5
 8001650:	080017c5 	.word	0x080017c5
 8001654:	080017c5 	.word	0x080017c5
 8001658:	080017c5 	.word	0x080017c5
 800165c:	080017c5 	.word	0x080017c5
 8001660:	080017c5 	.word	0x080017c5
 8001664:	08001741 	.word	0x08001741
 8001668:	08001765 	.word	0x08001765
 800166c:	08001789 	.word	0x08001789
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001670:	2100      	movs	r1, #0
 8001672:	2049      	movs	r0, #73	@ 0x49
 8001674:	f7ff fd57 	bl	8001126 <SD_SendCmd>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	f040 80a6 	bne.w	80017cc <SD_disk_ioctl+0x22c>
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	2110      	movs	r1, #16
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fcdc 	bl	8001044 <SD_RxDataBlock>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 809c 	beq.w	80017cc <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001694:	7b3b      	ldrb	r3, [r7, #12]
 8001696:	099b      	lsrs	r3, r3, #6
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b01      	cmp	r3, #1
 800169c:	d10d      	bne.n	80016ba <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800169e:	7d7b      	ldrb	r3, [r7, #21]
 80016a0:	461a      	mov	r2, r3
 80016a2:	7d3b      	ldrb	r3, [r7, #20]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	3301      	adds	r3, #1
 80016ae:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80016b0:	8bfb      	ldrh	r3, [r7, #30]
 80016b2:	029a      	lsls	r2, r3, #10
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e02d      	b.n	8001716 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80016ba:	7c7b      	ldrb	r3, [r7, #17]
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	7dbb      	ldrb	r3, [r7, #22]
 80016c4:	09db      	lsrs	r3, r3, #7
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	7d7b      	ldrb	r3, [r7, #21]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f003 0306 	and.w	r3, r3, #6
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4413      	add	r3, r2
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	3302      	adds	r3, #2
 80016de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80016e2:	7d3b      	ldrb	r3, [r7, #20]
 80016e4:	099b      	lsrs	r3, r3, #6
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	461a      	mov	r2, r3
 80016ea:	7cfb      	ldrb	r3, [r7, #19]
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	7cbb      	ldrb	r3, [r7, #18]
 80016f6:	029b      	lsls	r3, r3, #10
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4413      	add	r3, r2
 8001702:	b29b      	uxth	r3, r3
 8001704:	3301      	adds	r3, #1
 8001706:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001708:	8bfa      	ldrh	r2, [r7, #30]
 800170a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800170e:	3b09      	subs	r3, #9
 8001710:	409a      	lsls	r2, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 800171c:	e056      	b.n	80017cc <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001724:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800172c:	e055      	b.n	80017da <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800172e:	f7ff fc17 	bl	8000f60 <SD_ReadyWait>
 8001732:	4603      	mov	r3, r0
 8001734:	2bff      	cmp	r3, #255	@ 0xff
 8001736:	d14b      	bne.n	80017d0 <SD_disk_ioctl+0x230>
 8001738:	2300      	movs	r3, #0
 800173a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800173e:	e047      	b.n	80017d0 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001740:	2100      	movs	r1, #0
 8001742:	2049      	movs	r0, #73	@ 0x49
 8001744:	f7ff fcef 	bl	8001126 <SD_SendCmd>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d142      	bne.n	80017d4 <SD_disk_ioctl+0x234>
 800174e:	2110      	movs	r1, #16
 8001750:	6a38      	ldr	r0, [r7, #32]
 8001752:	f7ff fc77 	bl	8001044 <SD_RxDataBlock>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d03b      	beq.n	80017d4 <SD_disk_ioctl+0x234>
 800175c:	2300      	movs	r3, #0
 800175e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001762:	e037      	b.n	80017d4 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001764:	2100      	movs	r1, #0
 8001766:	204a      	movs	r0, #74	@ 0x4a
 8001768:	f7ff fcdd 	bl	8001126 <SD_SendCmd>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d132      	bne.n	80017d8 <SD_disk_ioctl+0x238>
 8001772:	2110      	movs	r1, #16
 8001774:	6a38      	ldr	r0, [r7, #32]
 8001776:	f7ff fc65 	bl	8001044 <SD_RxDataBlock>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d02b      	beq.n	80017d8 <SD_disk_ioctl+0x238>
 8001780:	2300      	movs	r3, #0
 8001782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001786:	e027      	b.n	80017d8 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001788:	2100      	movs	r1, #0
 800178a:	207a      	movs	r0, #122	@ 0x7a
 800178c:	f7ff fccb 	bl	8001126 <SD_SendCmd>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d116      	bne.n	80017c4 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001796:	2300      	movs	r3, #0
 8001798:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800179c:	e00b      	b.n	80017b6 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 800179e:	6a3c      	ldr	r4, [r7, #32]
 80017a0:	1c63      	adds	r3, r4, #1
 80017a2:	623b      	str	r3, [r7, #32]
 80017a4:	f7ff fbb2 	bl	8000f0c <SPI_RxByte>
 80017a8:	4603      	mov	r3, r0
 80017aa:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80017ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017b0:	3301      	adds	r3, #1
 80017b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80017b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d9ef      	bls.n	800179e <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 80017c4:	2304      	movs	r3, #4
 80017c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80017ca:	e006      	b.n	80017da <SD_disk_ioctl+0x23a>
			break;
 80017cc:	bf00      	nop
 80017ce:	e004      	b.n	80017da <SD_disk_ioctl+0x23a>
			break;
 80017d0:	bf00      	nop
 80017d2:	e002      	b.n	80017da <SD_disk_ioctl+0x23a>
			break;
 80017d4:	bf00      	nop
 80017d6:	e000      	b.n	80017da <SD_disk_ioctl+0x23a>
			break;
 80017d8:	bf00      	nop
		}

		DESELECT();
 80017da:	f7ff fb53 	bl	8000e84 <DESELECT>
		SPI_RxByte();
 80017de:	f7ff fb95 	bl	8000f0c <SPI_RxByte>
	}

	return res;
 80017e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	372c      	adds	r7, #44	@ 0x2c
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000000 	.word	0x20000000

080017f4 <get_time>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_time(){
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
	rtc_get_time(&hour, &min, &sec);
 80017f8:	4a06      	ldr	r2, [pc, #24]	@ (8001814 <get_time+0x20>)
 80017fa:	4907      	ldr	r1, [pc, #28]	@ (8001818 <get_time+0x24>)
 80017fc:	4807      	ldr	r0, [pc, #28]	@ (800181c <get_time+0x28>)
 80017fe:	f7ff fab3 	bl	8000d68 <rtc_get_time>
	rtc_get_date(&week_day, &day, &month, &year);
 8001802:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <get_time+0x2c>)
 8001804:	4a07      	ldr	r2, [pc, #28]	@ (8001824 <get_time+0x30>)
 8001806:	4908      	ldr	r1, [pc, #32]	@ (8001828 <get_time+0x34>)
 8001808:	4808      	ldr	r0, [pc, #32]	@ (800182c <get_time+0x38>)
 800180a:	f7ff fae9 	bl	8000de0 <rtc_get_date>
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000048c 	.word	0x2000048c
 8001818:	2000048d 	.word	0x2000048d
 800181c:	2000048e 	.word	0x2000048e
 8001820:	20000492 	.word	0x20000492
 8001824:	20000491 	.word	0x20000491
 8001828:	20000490 	.word	0x20000490
 800182c:	2000048f 	.word	0x2000048f

08001830 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 10; i++) {
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	e00a      	b.n	8001854 <HAL_ADC_ConvCpltCallback+0x24>
		adc[i] = buf[i];
 800183e:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <HAL_ADC_ConvCpltCallback+0x38>)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001846:	4909      	ldr	r1, [pc, #36]	@ (800186c <HAL_ADC_ConvCpltCallback+0x3c>)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3301      	adds	r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2b09      	cmp	r3, #9
 8001858:	ddf1      	ble.n	800183e <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 800185a:	bf00      	nop
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000414 	.word	0x20000414
 800186c:	2000043c 	.word	0x2000043c

08001870 <HAL_TIM_PeriodElapsedCallback>:

    // Unmount the filesystem
    f_mount(NULL, "", 1);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a30      	ldr	r2, [pc, #192]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d159      	bne.n	8001936 <HAL_TIM_PeriodElapsedCallback+0xc6>
		HAL_ADC_Start_DMA(&hadc1, buf, 12);
 8001882:	220c      	movs	r2, #12
 8001884:	492f      	ldr	r1, [pc, #188]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001886:	4830      	ldr	r0, [pc, #192]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001888:	f001 f99c 	bl	8002bc4 <HAL_ADC_Start_DMA>

		bat1 = adc[0];		//A5
 800188c:	4b2f      	ldr	r3, [pc, #188]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff f9af 	bl	8000bf4 <__aeabi_ui2f>
 8001896:	4603      	mov	r3, r0
 8001898:	4a2d      	ldr	r2, [pc, #180]	@ (8001950 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800189a:	6013      	str	r3, [r2, #0]
		bat2 = adc[1];		//A6
 800189c:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff f9a7 	bl	8000bf4 <__aeabi_ui2f>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80018aa:	6013      	str	r3, [r2, #0]
		bat3 = adc[2];		//A7
 80018ac:	4b27      	ldr	r3, [pc, #156]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff f99f 	bl	8000bf4 <__aeabi_ui2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a27      	ldr	r2, [pc, #156]	@ (8001958 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80018ba:	6013      	str	r3, [r2, #0]
		bat4 = adc[3];		//B0
 80018bc:	4b23      	ldr	r3, [pc, #140]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff f997 	bl	8000bf4 <__aeabi_ui2f>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4a24      	ldr	r2, [pc, #144]	@ (800195c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80018ca:	6013      	str	r3, [r2, #0]
		bat5 = adc[4];		//B1
 80018cc:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff f98f 	bl	8000bf4 <__aeabi_ui2f>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4a21      	ldr	r2, [pc, #132]	@ (8001960 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80018da:	6013      	str	r3, [r2, #0]
		bat6 = adc[5];		//A0
 80018dc:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff f987 	bl	8000bf4 <__aeabi_ui2f>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001964 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80018ea:	6013      	str	r3, [r2, #0]
		bat7 = adc[6];		//A1
 80018ec:	4b17      	ldr	r3, [pc, #92]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff f97f 	bl	8000bf4 <__aeabi_ui2f>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001968 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80018fa:	6013      	str	r3, [r2, #0]
		bat8 = adc[7];		//A2
 80018fc:	4b13      	ldr	r3, [pc, #76]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff f977 	bl	8000bf4 <__aeabi_ui2f>
 8001906:	4603      	mov	r3, r0
 8001908:	4a18      	ldr	r2, [pc, #96]	@ (800196c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800190a:	6013      	str	r3, [r2, #0]
		bat9 = adc[8];		//A3
 800190c:	4b0f      	ldr	r3, [pc, #60]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff f96f 	bl	8000bf4 <__aeabi_ui2f>
 8001916:	4603      	mov	r3, r0
 8001918:	4a15      	ldr	r2, [pc, #84]	@ (8001970 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800191a:	6013      	str	r3, [r2, #0]
		bat10 = adc[9];		//A4
 800191c:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff f967 	bl	8000bf4 <__aeabi_ui2f>
 8001926:	4603      	mov	r3, r0
 8001928:	4a12      	ldr	r2, [pc, #72]	@ (8001974 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800192a:	6013      	str	r3, [r2, #0]

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800192c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001930:	4811      	ldr	r0, [pc, #68]	@ (8001978 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001932:	f002 f999 	bl	8003c68 <HAL_GPIO_TogglePin>
//		sprintf(buffer, "%02d:%02d:%02d", hour, min, sec);
//		SSD1306_Puts(buffer, &Font_11x18, 1);
//
//		SSD1306_UpdateScreen();
	}
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40000400 	.word	0x40000400
 8001944:	20000414 	.word	0x20000414
 8001948:	20000210 	.word	0x20000210
 800194c:	2000043c 	.word	0x2000043c
 8001950:	20000464 	.word	0x20000464
 8001954:	20000468 	.word	0x20000468
 8001958:	2000046c 	.word	0x2000046c
 800195c:	20000470 	.word	0x20000470
 8001960:	20000474 	.word	0x20000474
 8001964:	20000478 	.word	0x20000478
 8001968:	2000047c 	.word	0x2000047c
 800196c:	20000480 	.word	0x20000480
 8001970:	20000484 	.word	0x20000484
 8001974:	20000488 	.word	0x20000488
 8001978:	40011000 	.word	0x40011000

0800197c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001980:	f000 ffc2 	bl	8002908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001984:	f000 f846 	bl	8001a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001988:	f000 fa9e 	bl	8001ec8 <MX_GPIO_Init>
  MX_DMA_Init();
 800198c:	f000 fa7e 	bl	8001e8c <MX_DMA_Init>
  MX_TIM3_Init();
 8001990:	f000 fa2e 	bl	8001df0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001994:	f000 f88e 	bl	8001ab4 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001998:	f000 f9a6 	bl	8001ce8 <MX_SPI2_Init>
  MX_FATFS_Init();
 800199c:	f005 f960 	bl	8006c60 <MX_FATFS_Init>
  MX_TIM2_Init();
 80019a0:	f000 f9d8 	bl	8001d54 <MX_TIM2_Init>
  MX_I2C1_Init();
 80019a4:	f000 f944 	bl	8001c30 <MX_I2C1_Init>
  MX_I2C2_Init();
 80019a8:	f000 f970 	bl	8001c8c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80019ac:	4815      	ldr	r0, [pc, #84]	@ (8001a04 <main+0x88>)
 80019ae:	f004 fdb5 	bl	800651c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80019b2:	4815      	ldr	r0, [pc, #84]	@ (8001a08 <main+0x8c>)
 80019b4:	f004 fdb2 	bl	800651c <HAL_TIM_Base_Start_IT>

  rtc_init(3, 1, 1);
 80019b8:	2201      	movs	r2, #1
 80019ba:	2101      	movs	r1, #1
 80019bc:	2003      	movs	r0, #3
 80019be:	f7ff f9af 	bl	8000d20 <rtc_init>
  SSD1306_Init();
 80019c2:	f000 faf3 	bl	8001fac <SSD1306_Init>
  while (1)
  {
//	  save_data_to_csv();
//	  HAL_Delay(1000);

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80019c6:	2201      	movs	r2, #1
 80019c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019cc:	480f      	ldr	r0, [pc, #60]	@ (8001a0c <main+0x90>)
 80019ce:	f002 f933 	bl	8003c38 <HAL_GPIO_WritePin>
	  HAL_Delay(5000);
 80019d2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80019d6:	f000 fff9 	bl	80029cc <HAL_Delay>
	  a=1;
 80019da:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <main+0x94>)
 80019dc:	2201      	movs	r2, #1
 80019de:	601a      	str	r2, [r3, #0]

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019e6:	4809      	ldr	r0, [pc, #36]	@ (8001a0c <main+0x90>)
 80019e8:	f002 f926 	bl	8003c38 <HAL_GPIO_WritePin>
	  HAL_Delay(5000);
 80019ec:	f241 3088 	movw	r0, #5000	@ 0x1388
 80019f0:	f000 ffec 	bl	80029cc <HAL_Delay>
	  a=0;
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <main+0x94>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]

	  get_time();
 80019fa:	f7ff fefb 	bl	80017f4 <get_time>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80019fe:	bf00      	nop
 8001a00:	e7e1      	b.n	80019c6 <main+0x4a>
 8001a02:	bf00      	nop
 8001a04:	200003cc 	.word	0x200003cc
 8001a08:	20000384 	.word	0x20000384
 8001a0c:	40010800 	.word	0x40010800
 8001a10:	20000494 	.word	0x20000494

08001a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b094      	sub	sp, #80	@ 0x50
 8001a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a1e:	2228      	movs	r2, #40	@ 0x28
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f005 ff43 	bl	80078ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a44:	2302      	movs	r3, #2
 8001a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a4c:	2310      	movs	r3, #16
 8001a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 fc33 	bl	80052c4 <HAL_RCC_OscConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001a64:	f000 fa92 	bl	8001f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a68:	230f      	movs	r3, #15
 8001a6a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 fea0 	bl	80057c8 <HAL_RCC_ClockConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001a8e:	f000 fa7d 	bl	8001f8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a92:	2302      	movs	r3, #2
 8001a94:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f004 f80d 	bl	8005abc <HAL_RCCEx_PeriphCLKConfig>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001aa8:	f000 fa70 	bl	8001f8c <Error_Handler>
  }
}
 8001aac:	bf00      	nop
 8001aae:	3750      	adds	r7, #80	@ 0x50
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ac4:	4b58      	ldr	r3, [pc, #352]	@ (8001c28 <MX_ADC1_Init+0x174>)
 8001ac6:	4a59      	ldr	r2, [pc, #356]	@ (8001c2c <MX_ADC1_Init+0x178>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001aca:	4b57      	ldr	r3, [pc, #348]	@ (8001c28 <MX_ADC1_Init+0x174>)
 8001acc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ad0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ad2:	4b55      	ldr	r3, [pc, #340]	@ (8001c28 <MX_ADC1_Init+0x174>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ad8:	4b53      	ldr	r3, [pc, #332]	@ (8001c28 <MX_ADC1_Init+0x174>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ade:	4b52      	ldr	r3, [pc, #328]	@ (8001c28 <MX_ADC1_Init+0x174>)
 8001ae0:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001ae4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ae6:	4b50      	ldr	r3, [pc, #320]	@ (8001c28 <MX_ADC1_Init+0x174>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 10;
 8001aec:	4b4e      	ldr	r3, [pc, #312]	@ (8001c28 <MX_ADC1_Init+0x174>)
 8001aee:	220a      	movs	r2, #10
 8001af0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001af2:	484d      	ldr	r0, [pc, #308]	@ (8001c28 <MX_ADC1_Init+0x174>)
 8001af4:	f000 ff8e 	bl	8002a14 <HAL_ADC_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001afe:	f000 fa45 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b06:	2301      	movs	r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	4619      	mov	r1, r3
 8001b12:	4845      	ldr	r0, [pc, #276]	@ (8001c28 <MX_ADC1_Init+0x174>)
 8001b14:	f001 fa0e 	bl	8002f34 <HAL_ADC_ConfigChannel>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b1e:	f000 fa35 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b26:	2302      	movs	r3, #2
 8001b28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	483e      	ldr	r0, [pc, #248]	@ (8001c28 <MX_ADC1_Init+0x174>)
 8001b30:	f001 fa00 	bl	8002f34 <HAL_ADC_ConfigChannel>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001b3a:	f000 fa27 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001b42:	2303      	movs	r3, #3
 8001b44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4837      	ldr	r0, [pc, #220]	@ (8001c28 <MX_ADC1_Init+0x174>)
 8001b4c:	f001 f9f2 	bl	8002f34 <HAL_ADC_ConfigChannel>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001b56:	f000 fa19 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001b5e:	2304      	movs	r3, #4
 8001b60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	4830      	ldr	r0, [pc, #192]	@ (8001c28 <MX_ADC1_Init+0x174>)
 8001b68:	f001 f9e4 	bl	8002f34 <HAL_ADC_ConfigChannel>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001b72:	f000 fa0b 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001b76:	2304      	movs	r3, #4
 8001b78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001b7a:	2305      	movs	r3, #5
 8001b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	4619      	mov	r1, r3
 8001b82:	4829      	ldr	r0, [pc, #164]	@ (8001c28 <MX_ADC1_Init+0x174>)
 8001b84:	f001 f9d6 	bl	8002f34 <HAL_ADC_ConfigChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001b8e:	f000 f9fd 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001b92:	2305      	movs	r3, #5
 8001b94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001b96:	2306      	movs	r3, #6
 8001b98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4822      	ldr	r0, [pc, #136]	@ (8001c28 <MX_ADC1_Init+0x174>)
 8001ba0:	f001 f9c8 	bl	8002f34 <HAL_ADC_ConfigChannel>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001baa:	f000 f9ef 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001bae:	2306      	movs	r3, #6
 8001bb0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001bb2:	2307      	movs	r3, #7
 8001bb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	481b      	ldr	r0, [pc, #108]	@ (8001c28 <MX_ADC1_Init+0x174>)
 8001bbc:	f001 f9ba 	bl	8002f34 <HAL_ADC_ConfigChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001bc6:	f000 f9e1 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001bca:	2307      	movs	r3, #7
 8001bcc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001bce:	2308      	movs	r3, #8
 8001bd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4814      	ldr	r0, [pc, #80]	@ (8001c28 <MX_ADC1_Init+0x174>)
 8001bd8:	f001 f9ac 	bl	8002f34 <HAL_ADC_ConfigChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001be2:	f000 f9d3 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001be6:	2308      	movs	r3, #8
 8001be8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001bea:	2309      	movs	r3, #9
 8001bec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	480d      	ldr	r0, [pc, #52]	@ (8001c28 <MX_ADC1_Init+0x174>)
 8001bf4:	f001 f99e 	bl	8002f34 <HAL_ADC_ConfigChannel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8001bfe:	f000 f9c5 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001c02:	2309      	movs	r3, #9
 8001c04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001c06:	230a      	movs	r3, #10
 8001c08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4806      	ldr	r0, [pc, #24]	@ (8001c28 <MX_ADC1_Init+0x174>)
 8001c10:	f001 f990 	bl	8002f34 <HAL_ADC_ConfigChannel>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 8001c1a:	f000 f9b7 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000210 	.word	0x20000210
 8001c2c:	40012400 	.word	0x40012400

08001c30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <MX_I2C1_Init+0x50>)
 8001c36:	4a13      	ldr	r2, [pc, #76]	@ (8001c84 <MX_I2C1_Init+0x54>)
 8001c38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <MX_I2C1_Init+0x50>)
 8001c3c:	4a12      	ldr	r2, [pc, #72]	@ (8001c88 <MX_I2C1_Init+0x58>)
 8001c3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <MX_I2C1_Init+0x50>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <MX_I2C1_Init+0x50>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <MX_I2C1_Init+0x50>)
 8001c4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <MX_I2C1_Init+0x50>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c5a:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <MX_I2C1_Init+0x50>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c60:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <MX_I2C1_Init+0x50>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <MX_I2C1_Init+0x50>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c6c:	4804      	ldr	r0, [pc, #16]	@ (8001c80 <MX_I2C1_Init+0x50>)
 8001c6e:	f002 f815 	bl	8003c9c <HAL_I2C_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c78:	f000 f988 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000284 	.word	0x20000284
 8001c84:	40005400 	.word	0x40005400
 8001c88:	00061a80 	.word	0x00061a80

08001c8c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c90:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <MX_I2C2_Init+0x50>)
 8001c92:	4a13      	ldr	r2, [pc, #76]	@ (8001ce0 <MX_I2C2_Init+0x54>)
 8001c94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001c96:	4b11      	ldr	r3, [pc, #68]	@ (8001cdc <MX_I2C2_Init+0x50>)
 8001c98:	4a12      	ldr	r2, [pc, #72]	@ (8001ce4 <MX_I2C2_Init+0x58>)
 8001c9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <MX_I2C2_Init+0x50>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cdc <MX_I2C2_Init+0x50>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <MX_I2C2_Init+0x50>)
 8001caa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cdc <MX_I2C2_Init+0x50>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cb6:	4b09      	ldr	r3, [pc, #36]	@ (8001cdc <MX_I2C2_Init+0x50>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cbc:	4b07      	ldr	r3, [pc, #28]	@ (8001cdc <MX_I2C2_Init+0x50>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cc2:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <MX_I2C2_Init+0x50>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cc8:	4804      	ldr	r0, [pc, #16]	@ (8001cdc <MX_I2C2_Init+0x50>)
 8001cca:	f001 ffe7 	bl	8003c9c <HAL_I2C_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001cd4:	f000 f95a 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200002d8 	.word	0x200002d8
 8001ce0:	40005800 	.word	0x40005800
 8001ce4:	00061a80 	.word	0x00061a80

08001ce8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001cec:	4b17      	ldr	r3, [pc, #92]	@ (8001d4c <MX_SPI2_Init+0x64>)
 8001cee:	4a18      	ldr	r2, [pc, #96]	@ (8001d50 <MX_SPI2_Init+0x68>)
 8001cf0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cf2:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <MX_SPI2_Init+0x64>)
 8001cf4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cf8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cfa:	4b14      	ldr	r3, [pc, #80]	@ (8001d4c <MX_SPI2_Init+0x64>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d00:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <MX_SPI2_Init+0x64>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d06:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <MX_SPI2_Init+0x64>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d4c <MX_SPI2_Init+0x64>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <MX_SPI2_Init+0x64>)
 8001d14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d18:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d4c <MX_SPI2_Init+0x64>)
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d20:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <MX_SPI2_Init+0x64>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d26:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <MX_SPI2_Init+0x64>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d2c:	4b07      	ldr	r3, [pc, #28]	@ (8001d4c <MX_SPI2_Init+0x64>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <MX_SPI2_Init+0x64>)
 8001d34:	220a      	movs	r2, #10
 8001d36:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d38:	4804      	ldr	r0, [pc, #16]	@ (8001d4c <MX_SPI2_Init+0x64>)
 8001d3a:	f003 ff75 	bl	8005c28 <HAL_SPI_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d44:	f000 f922 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	2000032c 	.word	0x2000032c
 8001d50:	40003800 	.word	0x40003800

08001d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5a:	f107 0308 	add.w	r3, r7, #8
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d68:	463b      	mov	r3, r7
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d70:	4b1e      	ldr	r3, [pc, #120]	@ (8001dec <MX_TIM2_Init+0x98>)
 8001d72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8001d78:	4b1c      	ldr	r3, [pc, #112]	@ (8001dec <MX_TIM2_Init+0x98>)
 8001d7a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001d7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d80:	4b1a      	ldr	r3, [pc, #104]	@ (8001dec <MX_TIM2_Init+0x98>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001d86:	4b19      	ldr	r3, [pc, #100]	@ (8001dec <MX_TIM2_Init+0x98>)
 8001d88:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8e:	4b17      	ldr	r3, [pc, #92]	@ (8001dec <MX_TIM2_Init+0x98>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d94:	4b15      	ldr	r3, [pc, #84]	@ (8001dec <MX_TIM2_Init+0x98>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d9a:	4814      	ldr	r0, [pc, #80]	@ (8001dec <MX_TIM2_Init+0x98>)
 8001d9c:	f004 fb6f 	bl	800647e <HAL_TIM_Base_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001da6:	f000 f8f1 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001daa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001db0:	f107 0308 	add.w	r3, r7, #8
 8001db4:	4619      	mov	r1, r3
 8001db6:	480d      	ldr	r0, [pc, #52]	@ (8001dec <MX_TIM2_Init+0x98>)
 8001db8:	f004 fcf2 	bl	80067a0 <HAL_TIM_ConfigClockSource>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001dc2:	f000 f8e3 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dce:	463b      	mov	r3, r7
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4806      	ldr	r0, [pc, #24]	@ (8001dec <MX_TIM2_Init+0x98>)
 8001dd4:	f004 fed4 	bl	8006b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001dde:	f000 f8d5 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000384 	.word	0x20000384

08001df0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001df6:	f107 0308 	add.w	r3, r7, #8
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e04:	463b      	mov	r3, r7
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e84 <MX_TIM3_Init+0x94>)
 8001e0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001e88 <MX_TIM3_Init+0x98>)
 8001e10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 8001e12:	4b1c      	ldr	r3, [pc, #112]	@ (8001e84 <MX_TIM3_Init+0x94>)
 8001e14:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001e18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <MX_TIM3_Init+0x94>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001e20:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <MX_TIM3_Init+0x94>)
 8001e22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e28:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <MX_TIM3_Init+0x94>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <MX_TIM3_Init+0x94>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e34:	4813      	ldr	r0, [pc, #76]	@ (8001e84 <MX_TIM3_Init+0x94>)
 8001e36:	f004 fb22 	bl	800647e <HAL_TIM_Base_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001e40:	f000 f8a4 	bl	8001f8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e4a:	f107 0308 	add.w	r3, r7, #8
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480c      	ldr	r0, [pc, #48]	@ (8001e84 <MX_TIM3_Init+0x94>)
 8001e52:	f004 fca5 	bl	80067a0 <HAL_TIM_ConfigClockSource>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e5c:	f000 f896 	bl	8001f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	@ (8001e84 <MX_TIM3_Init+0x94>)
 8001e6e:	f004 fe87 	bl	8006b80 <HAL_TIMEx_MasterConfigSynchronization>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e78:	f000 f888 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e7c:	bf00      	nop
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	200003cc 	.word	0x200003cc
 8001e88:	40000400 	.word	0x40000400

08001e8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e92:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <MX_DMA_Init+0x38>)
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	4a0b      	ldr	r2, [pc, #44]	@ (8001ec4 <MX_DMA_Init+0x38>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	6153      	str	r3, [r2, #20]
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <MX_DMA_Init+0x38>)
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	200b      	movs	r0, #11
 8001eb0:	f001 fb19 	bl	80034e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001eb4:	200b      	movs	r0, #11
 8001eb6:	f001 fb32 	bl	800351e <HAL_NVIC_EnableIRQ>

}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000

08001ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ece:	f107 0310 	add.w	r3, r7, #16
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001edc:	4b28      	ldr	r3, [pc, #160]	@ (8001f80 <MX_GPIO_Init+0xb8>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a27      	ldr	r2, [pc, #156]	@ (8001f80 <MX_GPIO_Init+0xb8>)
 8001ee2:	f043 0310 	orr.w	r3, r3, #16
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b25      	ldr	r3, [pc, #148]	@ (8001f80 <MX_GPIO_Init+0xb8>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef4:	4b22      	ldr	r3, [pc, #136]	@ (8001f80 <MX_GPIO_Init+0xb8>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a21      	ldr	r2, [pc, #132]	@ (8001f80 <MX_GPIO_Init+0xb8>)
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b1f      	ldr	r3, [pc, #124]	@ (8001f80 <MX_GPIO_Init+0xb8>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f80 <MX_GPIO_Init+0xb8>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4a1b      	ldr	r2, [pc, #108]	@ (8001f80 <MX_GPIO_Init+0xb8>)
 8001f12:	f043 0308 	orr.w	r3, r3, #8
 8001f16:	6193      	str	r3, [r2, #24]
 8001f18:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <MX_GPIO_Init+0xb8>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f24:	2200      	movs	r2, #0
 8001f26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f2a:	4816      	ldr	r0, [pc, #88]	@ (8001f84 <MX_GPIO_Init+0xbc>)
 8001f2c:	f001 fe84 	bl	8003c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_12, GPIO_PIN_RESET);
 8001f30:	2200      	movs	r2, #0
 8001f32:	f44f 5190 	mov.w	r1, #4608	@ 0x1200
 8001f36:	4814      	ldr	r0, [pc, #80]	@ (8001f88 <MX_GPIO_Init+0xc0>)
 8001f38:	f001 fe7e 	bl	8003c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f42:	2301      	movs	r3, #1
 8001f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	4619      	mov	r1, r3
 8001f54:	480b      	ldr	r0, [pc, #44]	@ (8001f84 <MX_GPIO_Init+0xbc>)
 8001f56:	f001 fceb 	bl	8003930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 8001f5a:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8001f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f60:	2301      	movs	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4619      	mov	r1, r3
 8001f72:	4805      	ldr	r0, [pc, #20]	@ (8001f88 <MX_GPIO_Init+0xc0>)
 8001f74:	f001 fcdc 	bl	8003930 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f78:	bf00      	nop
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40011000 	.word	0x40011000
 8001f88:	40010800 	.word	0x40010800

08001f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f90:	b672      	cpsid	i
}
 8001f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001f94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f98:	4803      	ldr	r0, [pc, #12]	@ (8001fa8 <Error_Handler+0x1c>)
 8001f9a:	f001 fe65 	bl	8003c68 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8001f9e:	2064      	movs	r0, #100	@ 0x64
 8001fa0:	f000 fd14 	bl	80029cc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001fa4:	bf00      	nop
 8001fa6:	e7f5      	b.n	8001f94 <Error_Handler+0x8>
 8001fa8:	40011000 	.word	0x40011000

08001fac <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001fb2:	f000 f905 	bl	80021c0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001fb6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001fba:	2201      	movs	r2, #1
 8001fbc:	2178      	movs	r1, #120	@ 0x78
 8001fbe:	485b      	ldr	r0, [pc, #364]	@ (800212c <SSD1306_Init+0x180>)
 8001fc0:	f002 fc1c 	bl	80047fc <HAL_I2C_IsDeviceReady>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e0a9      	b.n	8002122 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001fce:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001fd2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fd4:	e002      	b.n	8001fdc <SSD1306_Init+0x30>
		p--;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f9      	bne.n	8001fd6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001fe2:	22ae      	movs	r2, #174	@ 0xae
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	2078      	movs	r0, #120	@ 0x78
 8001fe8:	f000 f964 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001fec:	2220      	movs	r2, #32
 8001fee:	2100      	movs	r1, #0
 8001ff0:	2078      	movs	r0, #120	@ 0x78
 8001ff2:	f000 f95f 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2078      	movs	r0, #120	@ 0x78
 8001ffc:	f000 f95a 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002000:	22b0      	movs	r2, #176	@ 0xb0
 8002002:	2100      	movs	r1, #0
 8002004:	2078      	movs	r0, #120	@ 0x78
 8002006:	f000 f955 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800200a:	22c8      	movs	r2, #200	@ 0xc8
 800200c:	2100      	movs	r1, #0
 800200e:	2078      	movs	r0, #120	@ 0x78
 8002010:	f000 f950 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002014:	2200      	movs	r2, #0
 8002016:	2100      	movs	r1, #0
 8002018:	2078      	movs	r0, #120	@ 0x78
 800201a:	f000 f94b 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800201e:	2210      	movs	r2, #16
 8002020:	2100      	movs	r1, #0
 8002022:	2078      	movs	r0, #120	@ 0x78
 8002024:	f000 f946 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002028:	2240      	movs	r2, #64	@ 0x40
 800202a:	2100      	movs	r1, #0
 800202c:	2078      	movs	r0, #120	@ 0x78
 800202e:	f000 f941 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002032:	2281      	movs	r2, #129	@ 0x81
 8002034:	2100      	movs	r1, #0
 8002036:	2078      	movs	r0, #120	@ 0x78
 8002038:	f000 f93c 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800203c:	22ff      	movs	r2, #255	@ 0xff
 800203e:	2100      	movs	r1, #0
 8002040:	2078      	movs	r0, #120	@ 0x78
 8002042:	f000 f937 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002046:	22a1      	movs	r2, #161	@ 0xa1
 8002048:	2100      	movs	r1, #0
 800204a:	2078      	movs	r0, #120	@ 0x78
 800204c:	f000 f932 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002050:	22a6      	movs	r2, #166	@ 0xa6
 8002052:	2100      	movs	r1, #0
 8002054:	2078      	movs	r0, #120	@ 0x78
 8002056:	f000 f92d 	bl	80022b4 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800205a:	22a8      	movs	r2, #168	@ 0xa8
 800205c:	2100      	movs	r1, #0
 800205e:	2078      	movs	r0, #120	@ 0x78
 8002060:	f000 f928 	bl	80022b4 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8002064:	223f      	movs	r2, #63	@ 0x3f
 8002066:	2100      	movs	r1, #0
 8002068:	2078      	movs	r0, #120	@ 0x78
 800206a:	f000 f923 	bl	80022b4 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800206e:	22a4      	movs	r2, #164	@ 0xa4
 8002070:	2100      	movs	r1, #0
 8002072:	2078      	movs	r0, #120	@ 0x78
 8002074:	f000 f91e 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002078:	22d3      	movs	r2, #211	@ 0xd3
 800207a:	2100      	movs	r1, #0
 800207c:	2078      	movs	r0, #120	@ 0x78
 800207e:	f000 f919 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002082:	2200      	movs	r2, #0
 8002084:	2100      	movs	r1, #0
 8002086:	2078      	movs	r0, #120	@ 0x78
 8002088:	f000 f914 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800208c:	22d5      	movs	r2, #213	@ 0xd5
 800208e:	2100      	movs	r1, #0
 8002090:	2078      	movs	r0, #120	@ 0x78
 8002092:	f000 f90f 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002096:	22f0      	movs	r2, #240	@ 0xf0
 8002098:	2100      	movs	r1, #0
 800209a:	2078      	movs	r0, #120	@ 0x78
 800209c:	f000 f90a 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80020a0:	22d9      	movs	r2, #217	@ 0xd9
 80020a2:	2100      	movs	r1, #0
 80020a4:	2078      	movs	r0, #120	@ 0x78
 80020a6:	f000 f905 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80020aa:	2222      	movs	r2, #34	@ 0x22
 80020ac:	2100      	movs	r1, #0
 80020ae:	2078      	movs	r0, #120	@ 0x78
 80020b0:	f000 f900 	bl	80022b4 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80020b4:	22da      	movs	r2, #218	@ 0xda
 80020b6:	2100      	movs	r1, #0
 80020b8:	2078      	movs	r0, #120	@ 0x78
 80020ba:	f000 f8fb 	bl	80022b4 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 80020be:	2212      	movs	r2, #18
 80020c0:	2100      	movs	r1, #0
 80020c2:	2078      	movs	r0, #120	@ 0x78
 80020c4:	f000 f8f6 	bl	80022b4 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80020c8:	22db      	movs	r2, #219	@ 0xdb
 80020ca:	2100      	movs	r1, #0
 80020cc:	2078      	movs	r0, #120	@ 0x78
 80020ce:	f000 f8f1 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80020d2:	2220      	movs	r2, #32
 80020d4:	2100      	movs	r1, #0
 80020d6:	2078      	movs	r0, #120	@ 0x78
 80020d8:	f000 f8ec 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80020dc:	228d      	movs	r2, #141	@ 0x8d
 80020de:	2100      	movs	r1, #0
 80020e0:	2078      	movs	r0, #120	@ 0x78
 80020e2:	f000 f8e7 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80020e6:	2214      	movs	r2, #20
 80020e8:	2100      	movs	r1, #0
 80020ea:	2078      	movs	r0, #120	@ 0x78
 80020ec:	f000 f8e2 	bl	80022b4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80020f0:	22af      	movs	r2, #175	@ 0xaf
 80020f2:	2100      	movs	r1, #0
 80020f4:	2078      	movs	r0, #120	@ 0x78
 80020f6:	f000 f8dd 	bl	80022b4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80020fa:	222e      	movs	r2, #46	@ 0x2e
 80020fc:	2100      	movs	r1, #0
 80020fe:	2078      	movs	r0, #120	@ 0x78
 8002100:	f000 f8d8 	bl	80022b4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002104:	2000      	movs	r0, #0
 8002106:	f000 f843 	bl	8002190 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800210a:	f000 f813 	bl	8002134 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800210e:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <SSD1306_Init+0x184>)
 8002110:	2200      	movs	r2, #0
 8002112:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002114:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <SSD1306_Init+0x184>)
 8002116:	2200      	movs	r2, #0
 8002118:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800211a:	4b05      	ldr	r3, [pc, #20]	@ (8002130 <SSD1306_Init+0x184>)
 800211c:	2201      	movs	r2, #1
 800211e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002120:	2301      	movs	r3, #1
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200002d8 	.word	0x200002d8
 8002130:	20000898 	.word	0x20000898

08002134 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800213a:	2300      	movs	r3, #0
 800213c:	71fb      	strb	r3, [r7, #7]
 800213e:	e01d      	b.n	800217c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	3b50      	subs	r3, #80	@ 0x50
 8002144:	b2db      	uxtb	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	2100      	movs	r1, #0
 800214a:	2078      	movs	r0, #120	@ 0x78
 800214c:	f000 f8b2 	bl	80022b4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002150:	2200      	movs	r2, #0
 8002152:	2100      	movs	r1, #0
 8002154:	2078      	movs	r0, #120	@ 0x78
 8002156:	f000 f8ad 	bl	80022b4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800215a:	2210      	movs	r2, #16
 800215c:	2100      	movs	r1, #0
 800215e:	2078      	movs	r0, #120	@ 0x78
 8002160:	f000 f8a8 	bl	80022b4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	01db      	lsls	r3, r3, #7
 8002168:	4a08      	ldr	r2, [pc, #32]	@ (800218c <SSD1306_UpdateScreen+0x58>)
 800216a:	441a      	add	r2, r3
 800216c:	2380      	movs	r3, #128	@ 0x80
 800216e:	2140      	movs	r1, #64	@ 0x40
 8002170:	2078      	movs	r0, #120	@ 0x78
 8002172:	f000 f839 	bl	80021e8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	3301      	adds	r3, #1
 800217a:	71fb      	strb	r3, [r7, #7]
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	2b07      	cmp	r3, #7
 8002180:	d9de      	bls.n	8002140 <SSD1306_UpdateScreen+0xc>
	}
}
 8002182:	bf00      	nop
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000498 	.word	0x20000498

08002190 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <SSD1306_Fill+0x14>
 80021a0:	2300      	movs	r3, #0
 80021a2:	e000      	b.n	80021a6 <SSD1306_Fill+0x16>
 80021a4:	23ff      	movs	r3, #255	@ 0xff
 80021a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021aa:	4619      	mov	r1, r3
 80021ac:	4803      	ldr	r0, [pc, #12]	@ (80021bc <SSD1306_Fill+0x2c>)
 80021ae:	f005 fb7e 	bl	80078ae <memset>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000498 	.word	0x20000498

080021c0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
	//MX_i2c2_Init();
	uint32_t p = 250000;
 80021c6:	4b07      	ldr	r3, [pc, #28]	@ (80021e4 <ssd1306_I2C_Init+0x24>)
 80021c8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021ca:	e002      	b.n	80021d2 <ssd1306_I2C_Init+0x12>
		p--;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f9      	bne.n	80021cc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_i2c2_Init();
}
 80021d8:	bf00      	nop
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	0003d090 	.word	0x0003d090

080021e8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b0c7      	sub	sp, #284	@ 0x11c
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	4604      	mov	r4, r0
 80021f0:	4608      	mov	r0, r1
 80021f2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80021f6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80021fa:	600a      	str	r2, [r1, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002202:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002206:	4622      	mov	r2, r4
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800220e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002212:	4602      	mov	r2, r0
 8002214:	701a      	strb	r2, [r3, #0]
 8002216:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800221a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800221e:	460a      	mov	r2, r1
 8002220:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002222:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002226:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800222a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800222e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8002232:	7812      	ldrb	r2, [r2, #0]
 8002234:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002236:	2300      	movs	r3, #0
 8002238:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800223c:	e015      	b.n	800226a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800223e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002242:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002246:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	441a      	add	r2, r3
 800224e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002252:	3301      	adds	r3, #1
 8002254:	7811      	ldrb	r1, [r2, #0]
 8002256:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800225a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800225e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002260:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002264:	3301      	adds	r3, #1
 8002266:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800226a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800226e:	b29b      	uxth	r3, r3
 8002270:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002274:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8002278:	8812      	ldrh	r2, [r2, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d8df      	bhi.n	800223e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 800227e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002282:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	b299      	uxth	r1, r3
 800228a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800228e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	b29b      	uxth	r3, r3
 8002298:	f107 020c 	add.w	r2, r7, #12
 800229c:	200a      	movs	r0, #10
 800229e:	9000      	str	r0, [sp, #0]
 80022a0:	4803      	ldr	r0, [pc, #12]	@ (80022b0 <ssd1306_I2C_WriteMulti+0xc8>)
 80022a2:	f001 fe3f 	bl	8003f24 <HAL_I2C_Master_Transmit>
}
 80022a6:	bf00      	nop
 80022a8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd90      	pop	{r4, r7, pc}
 80022b0:	200002d8 	.word	0x200002d8

080022b4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
 80022be:	460b      	mov	r3, r1
 80022c0:	71bb      	strb	r3, [r7, #6]
 80022c2:	4613      	mov	r3, r2
 80022c4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80022c6:	79bb      	ldrb	r3, [r7, #6]
 80022c8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80022ca:	797b      	ldrb	r3, [r7, #5]
 80022cc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	b299      	uxth	r1, r3
 80022d2:	f107 020c 	add.w	r2, r7, #12
 80022d6:	230a      	movs	r3, #10
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2302      	movs	r3, #2
 80022dc:	4803      	ldr	r0, [pc, #12]	@ (80022ec <ssd1306_I2C_Write+0x38>)
 80022de:	f001 fe21 	bl	8003f24 <HAL_I2C_Master_Transmit>
}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200002d8 	.word	0x200002d8

080022f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022f6:	4b15      	ldr	r3, [pc, #84]	@ (800234c <HAL_MspInit+0x5c>)
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	4a14      	ldr	r2, [pc, #80]	@ (800234c <HAL_MspInit+0x5c>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6193      	str	r3, [r2, #24]
 8002302:	4b12      	ldr	r3, [pc, #72]	@ (800234c <HAL_MspInit+0x5c>)
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	4b0f      	ldr	r3, [pc, #60]	@ (800234c <HAL_MspInit+0x5c>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	4a0e      	ldr	r2, [pc, #56]	@ (800234c <HAL_MspInit+0x5c>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002318:	61d3      	str	r3, [r2, #28]
 800231a:	4b0c      	ldr	r3, [pc, #48]	@ (800234c <HAL_MspInit+0x5c>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002326:	4b0a      	ldr	r3, [pc, #40]	@ (8002350 <HAL_MspInit+0x60>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	4a04      	ldr	r2, [pc, #16]	@ (8002350 <HAL_MspInit+0x60>)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002342:	bf00      	nop
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	40021000 	.word	0x40021000
 8002350:	40010000 	.word	0x40010000

08002354 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	@ 0x28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 0318 	add.w	r3, r7, #24
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a37      	ldr	r2, [pc, #220]	@ (800244c <HAL_ADC_MspInit+0xf8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d167      	bne.n	8002444 <HAL_ADC_MspInit+0xf0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002374:	4b36      	ldr	r3, [pc, #216]	@ (8002450 <HAL_ADC_MspInit+0xfc>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a35      	ldr	r2, [pc, #212]	@ (8002450 <HAL_ADC_MspInit+0xfc>)
 800237a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b33      	ldr	r3, [pc, #204]	@ (8002450 <HAL_ADC_MspInit+0xfc>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238c:	4b30      	ldr	r3, [pc, #192]	@ (8002450 <HAL_ADC_MspInit+0xfc>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4a2f      	ldr	r2, [pc, #188]	@ (8002450 <HAL_ADC_MspInit+0xfc>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6193      	str	r3, [r2, #24]
 8002398:	4b2d      	ldr	r3, [pc, #180]	@ (8002450 <HAL_ADC_MspInit+0xfc>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002450 <HAL_ADC_MspInit+0xfc>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	4a29      	ldr	r2, [pc, #164]	@ (8002450 <HAL_ADC_MspInit+0xfc>)
 80023aa:	f043 0308 	orr.w	r3, r3, #8
 80023ae:	6193      	str	r3, [r2, #24]
 80023b0:	4b27      	ldr	r3, [pc, #156]	@ (8002450 <HAL_ADC_MspInit+0xfc>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80023bc:	23ff      	movs	r3, #255	@ 0xff
 80023be:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023c0:	2303      	movs	r3, #3
 80023c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c4:	f107 0318 	add.w	r3, r7, #24
 80023c8:	4619      	mov	r1, r3
 80023ca:	4822      	ldr	r0, [pc, #136]	@ (8002454 <HAL_ADC_MspInit+0x100>)
 80023cc:	f001 fab0 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023d0:	2303      	movs	r3, #3
 80023d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023d4:	2303      	movs	r3, #3
 80023d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d8:	f107 0318 	add.w	r3, r7, #24
 80023dc:	4619      	mov	r1, r3
 80023de:	481e      	ldr	r0, [pc, #120]	@ (8002458 <HAL_ADC_MspInit+0x104>)
 80023e0:	f001 faa6 	bl	8003930 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80023e4:	4b1d      	ldr	r3, [pc, #116]	@ (800245c <HAL_ADC_MspInit+0x108>)
 80023e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002460 <HAL_ADC_MspInit+0x10c>)
 80023e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ea:	4b1c      	ldr	r3, [pc, #112]	@ (800245c <HAL_ADC_MspInit+0x108>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023f0:	4b1a      	ldr	r3, [pc, #104]	@ (800245c <HAL_ADC_MspInit+0x108>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023f6:	4b19      	ldr	r3, [pc, #100]	@ (800245c <HAL_ADC_MspInit+0x108>)
 80023f8:	2280      	movs	r2, #128	@ 0x80
 80023fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023fc:	4b17      	ldr	r3, [pc, #92]	@ (800245c <HAL_ADC_MspInit+0x108>)
 80023fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002402:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002404:	4b15      	ldr	r3, [pc, #84]	@ (800245c <HAL_ADC_MspInit+0x108>)
 8002406:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800240a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800240c:	4b13      	ldr	r3, [pc, #76]	@ (800245c <HAL_ADC_MspInit+0x108>)
 800240e:	2200      	movs	r2, #0
 8002410:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002412:	4b12      	ldr	r3, [pc, #72]	@ (800245c <HAL_ADC_MspInit+0x108>)
 8002414:	2200      	movs	r2, #0
 8002416:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002418:	4810      	ldr	r0, [pc, #64]	@ (800245c <HAL_ADC_MspInit+0x108>)
 800241a:	f001 f89b 	bl	8003554 <HAL_DMA_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8002424:	f7ff fdb2 	bl	8001f8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a0c      	ldr	r2, [pc, #48]	@ (800245c <HAL_ADC_MspInit+0x108>)
 800242c:	621a      	str	r2, [r3, #32]
 800242e:	4a0b      	ldr	r2, [pc, #44]	@ (800245c <HAL_ADC_MspInit+0x108>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002434:	2200      	movs	r2, #0
 8002436:	2100      	movs	r1, #0
 8002438:	2012      	movs	r0, #18
 800243a:	f001 f854 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800243e:	2012      	movs	r0, #18
 8002440:	f001 f86d 	bl	800351e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002444:	bf00      	nop
 8002446:	3728      	adds	r7, #40	@ 0x28
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40012400 	.word	0x40012400
 8002450:	40021000 	.word	0x40021000
 8002454:	40010800 	.word	0x40010800
 8002458:	40010c00 	.word	0x40010c00
 800245c:	20000240 	.word	0x20000240
 8002460:	40020008 	.word	0x40020008

08002464 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	@ 0x28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0318 	add.w	r3, r7, #24
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a2b      	ldr	r2, [pc, #172]	@ (800252c <HAL_I2C_MspInit+0xc8>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d124      	bne.n	80024ce <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002484:	4b2a      	ldr	r3, [pc, #168]	@ (8002530 <HAL_I2C_MspInit+0xcc>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4a29      	ldr	r2, [pc, #164]	@ (8002530 <HAL_I2C_MspInit+0xcc>)
 800248a:	f043 0308 	orr.w	r3, r3, #8
 800248e:	6193      	str	r3, [r2, #24]
 8002490:	4b27      	ldr	r3, [pc, #156]	@ (8002530 <HAL_I2C_MspInit+0xcc>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800249c:	23c0      	movs	r3, #192	@ 0xc0
 800249e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024a0:	2312      	movs	r3, #18
 80024a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024a4:	2303      	movs	r3, #3
 80024a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a8:	f107 0318 	add.w	r3, r7, #24
 80024ac:	4619      	mov	r1, r3
 80024ae:	4821      	ldr	r0, [pc, #132]	@ (8002534 <HAL_I2C_MspInit+0xd0>)
 80024b0:	f001 fa3e 	bl	8003930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002530 <HAL_I2C_MspInit+0xcc>)
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002530 <HAL_I2C_MspInit+0xcc>)
 80024ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024be:	61d3      	str	r3, [r2, #28]
 80024c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002530 <HAL_I2C_MspInit+0xcc>)
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80024cc:	e029      	b.n	8002522 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a19      	ldr	r2, [pc, #100]	@ (8002538 <HAL_I2C_MspInit+0xd4>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d124      	bne.n	8002522 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d8:	4b15      	ldr	r3, [pc, #84]	@ (8002530 <HAL_I2C_MspInit+0xcc>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	4a14      	ldr	r2, [pc, #80]	@ (8002530 <HAL_I2C_MspInit+0xcc>)
 80024de:	f043 0308 	orr.w	r3, r3, #8
 80024e2:	6193      	str	r3, [r2, #24]
 80024e4:	4b12      	ldr	r3, [pc, #72]	@ (8002530 <HAL_I2C_MspInit+0xcc>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024f0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80024f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024f6:	2312      	movs	r3, #18
 80024f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fe:	f107 0318 	add.w	r3, r7, #24
 8002502:	4619      	mov	r1, r3
 8002504:	480b      	ldr	r0, [pc, #44]	@ (8002534 <HAL_I2C_MspInit+0xd0>)
 8002506:	f001 fa13 	bl	8003930 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800250a:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <HAL_I2C_MspInit+0xcc>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	4a08      	ldr	r2, [pc, #32]	@ (8002530 <HAL_I2C_MspInit+0xcc>)
 8002510:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002514:	61d3      	str	r3, [r2, #28]
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_I2C_MspInit+0xcc>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
}
 8002522:	bf00      	nop
 8002524:	3728      	adds	r7, #40	@ 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40005400 	.word	0x40005400
 8002530:	40021000 	.word	0x40021000
 8002534:	40010c00 	.word	0x40010c00
 8002538:	40005800 	.word	0x40005800

0800253c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0310 	add.w	r3, r7, #16
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1c      	ldr	r2, [pc, #112]	@ (80025c8 <HAL_SPI_MspInit+0x8c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d131      	bne.n	80025c0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800255c:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <HAL_SPI_MspInit+0x90>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	4a1a      	ldr	r2, [pc, #104]	@ (80025cc <HAL_SPI_MspInit+0x90>)
 8002562:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002566:	61d3      	str	r3, [r2, #28]
 8002568:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <HAL_SPI_MspInit+0x90>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002574:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <HAL_SPI_MspInit+0x90>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	4a14      	ldr	r2, [pc, #80]	@ (80025cc <HAL_SPI_MspInit+0x90>)
 800257a:	f043 0308 	orr.w	r3, r3, #8
 800257e:	6193      	str	r3, [r2, #24]
 8002580:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <HAL_SPI_MspInit+0x90>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800258c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002590:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259a:	f107 0310 	add.w	r3, r7, #16
 800259e:	4619      	mov	r1, r3
 80025a0:	480b      	ldr	r0, [pc, #44]	@ (80025d0 <HAL_SPI_MspInit+0x94>)
 80025a2:	f001 f9c5 	bl	8003930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80025a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b4:	f107 0310 	add.w	r3, r7, #16
 80025b8:	4619      	mov	r1, r3
 80025ba:	4805      	ldr	r0, [pc, #20]	@ (80025d0 <HAL_SPI_MspInit+0x94>)
 80025bc:	f001 f9b8 	bl	8003930 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80025c0:	bf00      	nop
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40003800 	.word	0x40003800
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40010c00 	.word	0x40010c00

080025d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e4:	d114      	bne.n	8002610 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025e6:	4b19      	ldr	r3, [pc, #100]	@ (800264c <HAL_TIM_Base_MspInit+0x78>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	4a18      	ldr	r2, [pc, #96]	@ (800264c <HAL_TIM_Base_MspInit+0x78>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	61d3      	str	r3, [r2, #28]
 80025f2:	4b16      	ldr	r3, [pc, #88]	@ (800264c <HAL_TIM_Base_MspInit+0x78>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	201c      	movs	r0, #28
 8002604:	f000 ff6f 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002608:	201c      	movs	r0, #28
 800260a:	f000 ff88 	bl	800351e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800260e:	e018      	b.n	8002642 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0e      	ldr	r2, [pc, #56]	@ (8002650 <HAL_TIM_Base_MspInit+0x7c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d113      	bne.n	8002642 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800261a:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <HAL_TIM_Base_MspInit+0x78>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4a0b      	ldr	r2, [pc, #44]	@ (800264c <HAL_TIM_Base_MspInit+0x78>)
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	61d3      	str	r3, [r2, #28]
 8002626:	4b09      	ldr	r3, [pc, #36]	@ (800264c <HAL_TIM_Base_MspInit+0x78>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	201d      	movs	r0, #29
 8002638:	f000 ff55 	bl	80034e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800263c:	201d      	movs	r0, #29
 800263e:	f000 ff6e 	bl	800351e <HAL_NVIC_EnableIRQ>
}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	40000400 	.word	0x40000400

08002654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <NMI_Handler+0x4>

0800265c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002660:	bf00      	nop
 8002662:	e7fd      	b.n	8002660 <HardFault_Handler+0x4>

08002664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002668:	bf00      	nop
 800266a:	e7fd      	b.n	8002668 <MemManage_Handler+0x4>

0800266c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002670:	bf00      	nop
 8002672:	e7fd      	b.n	8002670 <BusFault_Handler+0x4>

08002674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002678:	bf00      	nop
 800267a:	e7fd      	b.n	8002678 <UsageFault_Handler+0x4>

0800267c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	if(Timer1 > 0)
 80026a4:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <SysTick_Handler+0x34>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <SysTick_Handler+0x18>
		Timer1--;
 80026ac:	4b09      	ldr	r3, [pc, #36]	@ (80026d4 <SysTick_Handler+0x34>)
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	4b07      	ldr	r3, [pc, #28]	@ (80026d4 <SysTick_Handler+0x34>)
 80026b6:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80026b8:	4b07      	ldr	r3, [pc, #28]	@ (80026d8 <SysTick_Handler+0x38>)
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <SysTick_Handler+0x2c>
		Timer2--;
 80026c0:	4b05      	ldr	r3, [pc, #20]	@ (80026d8 <SysTick_Handler+0x38>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	4b03      	ldr	r3, [pc, #12]	@ (80026d8 <SysTick_Handler+0x38>)
 80026ca:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026cc:	f000 f962 	bl	8002994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	20000208 	.word	0x20000208
 80026d8:	2000020a 	.word	0x2000020a

080026dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026e0:	4802      	ldr	r0, [pc, #8]	@ (80026ec <DMA1_Channel1_IRQHandler+0x10>)
 80026e2:	f000 fff1 	bl	80036c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000240 	.word	0x20000240

080026f0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80026f4:	4802      	ldr	r0, [pc, #8]	@ (8002700 <ADC1_2_IRQHandler+0x10>)
 80026f6:	f000 fb43 	bl	8002d80 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000210 	.word	0x20000210

08002704 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002708:	4802      	ldr	r0, [pc, #8]	@ (8002714 <TIM2_IRQHandler+0x10>)
 800270a:	f003 ff59 	bl	80065c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000384 	.word	0x20000384

08002718 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800271c:	4802      	ldr	r0, [pc, #8]	@ (8002728 <TIM3_IRQHandler+0x10>)
 800271e:	f003 ff4f 	bl	80065c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200003cc 	.word	0x200003cc

0800272c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return 1;
 8002730:	2301      	movs	r3, #1
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <_kill>:

int _kill(int pid, int sig)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002744:	f005 f906 	bl	8007954 <__errno>
 8002748:	4603      	mov	r3, r0
 800274a:	2216      	movs	r2, #22
 800274c:	601a      	str	r2, [r3, #0]
  return -1;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <_exit>:

void _exit (int status)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002762:	f04f 31ff 	mov.w	r1, #4294967295
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ffe7 	bl	800273a <_kill>
  while (1) {}    /* Make sure we hang here */
 800276c:	bf00      	nop
 800276e:	e7fd      	b.n	800276c <_exit+0x12>

08002770 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	e00a      	b.n	8002798 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002782:	f3af 8000 	nop.w
 8002786:	4601      	mov	r1, r0
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	60ba      	str	r2, [r7, #8]
 800278e:	b2ca      	uxtb	r2, r1
 8002790:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	3301      	adds	r3, #1
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	dbf0      	blt.n	8002782 <_read+0x12>
  }

  return len;
 80027a0:	687b      	ldr	r3, [r7, #4]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	e009      	b.n	80027d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	60ba      	str	r2, [r7, #8]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	3301      	adds	r3, #1
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	dbf1      	blt.n	80027bc <_write+0x12>
  }
  return len;
 80027d8:	687b      	ldr	r3, [r7, #4]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <_close>:

int _close(int file)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002808:	605a      	str	r2, [r3, #4]
  return 0;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <_isatty>:

int _isatty(int file)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800281e:	2301      	movs	r3, #1
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800282a:	b480      	push	{r7}
 800282c:	b085      	sub	sp, #20
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
	...

08002844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800284c:	4a14      	ldr	r2, [pc, #80]	@ (80028a0 <_sbrk+0x5c>)
 800284e:	4b15      	ldr	r3, [pc, #84]	@ (80028a4 <_sbrk+0x60>)
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002858:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <_sbrk+0x64>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d102      	bne.n	8002866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002860:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <_sbrk+0x64>)
 8002862:	4a12      	ldr	r2, [pc, #72]	@ (80028ac <_sbrk+0x68>)
 8002864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002866:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <_sbrk+0x64>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	429a      	cmp	r2, r3
 8002872:	d207      	bcs.n	8002884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002874:	f005 f86e 	bl	8007954 <__errno>
 8002878:	4603      	mov	r3, r0
 800287a:	220c      	movs	r2, #12
 800287c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800287e:	f04f 33ff 	mov.w	r3, #4294967295
 8002882:	e009      	b.n	8002898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002884:	4b08      	ldr	r3, [pc, #32]	@ (80028a8 <_sbrk+0x64>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800288a:	4b07      	ldr	r3, [pc, #28]	@ (80028a8 <_sbrk+0x64>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	4a05      	ldr	r2, [pc, #20]	@ (80028a8 <_sbrk+0x64>)
 8002894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002896:	68fb      	ldr	r3, [r7, #12]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20005000 	.word	0x20005000
 80028a4:	00000400 	.word	0x00000400
 80028a8:	200008a0 	.word	0x200008a0
 80028ac:	20000a08 	.word	0x20000a08

080028b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028bc:	f7ff fff8 	bl	80028b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028c0:	480b      	ldr	r0, [pc, #44]	@ (80028f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028c2:	490c      	ldr	r1, [pc, #48]	@ (80028f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028c4:	4a0c      	ldr	r2, [pc, #48]	@ (80028f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80028c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c8:	e002      	b.n	80028d0 <LoopCopyDataInit>

080028ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ce:	3304      	adds	r3, #4

080028d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028d4:	d3f9      	bcc.n	80028ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028d6:	4a09      	ldr	r2, [pc, #36]	@ (80028fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028d8:	4c09      	ldr	r4, [pc, #36]	@ (8002900 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028dc:	e001      	b.n	80028e2 <LoopFillZerobss>

080028de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e0:	3204      	adds	r2, #4

080028e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028e4:	d3fb      	bcc.n	80028de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028e6:	f005 f83b 	bl	8007960 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028ea:	f7ff f847 	bl	800197c <main>
  bx lr
 80028ee:	4770      	bx	lr
  ldr r0, =_sdata
 80028f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028f4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80028f8:	08009ae0 	.word	0x08009ae0
  ldr r2, =_sbss
 80028fc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002900:	20000a08 	.word	0x20000a08

08002904 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002904:	e7fe      	b.n	8002904 <CAN1_RX1_IRQHandler>
	...

08002908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800290c:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <HAL_Init+0x28>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a07      	ldr	r2, [pc, #28]	@ (8002930 <HAL_Init+0x28>)
 8002912:	f043 0310 	orr.w	r3, r3, #16
 8002916:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002918:	2003      	movs	r0, #3
 800291a:	f000 fdd9 	bl	80034d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800291e:	200f      	movs	r0, #15
 8002920:	f000 f808 	bl	8002934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002924:	f7ff fce4 	bl	80022f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40022000 	.word	0x40022000

08002934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800293c:	4b12      	ldr	r3, [pc, #72]	@ (8002988 <HAL_InitTick+0x54>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b12      	ldr	r3, [pc, #72]	@ (800298c <HAL_InitTick+0x58>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800294a:	fbb3 f3f1 	udiv	r3, r3, r1
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fdf1 	bl	800353a <HAL_SYSTICK_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e00e      	b.n	8002980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b0f      	cmp	r3, #15
 8002966:	d80a      	bhi.n	800297e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002968:	2200      	movs	r2, #0
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	f04f 30ff 	mov.w	r0, #4294967295
 8002970:	f000 fdb9 	bl	80034e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002974:	4a06      	ldr	r2, [pc, #24]	@ (8002990 <HAL_InitTick+0x5c>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e000      	b.n	8002980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000004 	.word	0x20000004
 800298c:	2000000c 	.word	0x2000000c
 8002990:	20000008 	.word	0x20000008

08002994 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002998:	4b05      	ldr	r3, [pc, #20]	@ (80029b0 <HAL_IncTick+0x1c>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <HAL_IncTick+0x20>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4413      	add	r3, r2
 80029a4:	4a03      	ldr	r2, [pc, #12]	@ (80029b4 <HAL_IncTick+0x20>)
 80029a6:	6013      	str	r3, [r2, #0]
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	2000000c 	.word	0x2000000c
 80029b4:	200008a4 	.word	0x200008a4

080029b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return uwTick;
 80029bc:	4b02      	ldr	r3, [pc, #8]	@ (80029c8 <HAL_GetTick+0x10>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	200008a4 	.word	0x200008a4

080029cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff fff0 	bl	80029b8 <HAL_GetTick>
 80029d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d005      	beq.n	80029f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <HAL_Delay+0x44>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4413      	add	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029f2:	bf00      	nop
 80029f4:	f7ff ffe0 	bl	80029b8 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d8f7      	bhi.n	80029f4 <HAL_Delay+0x28>
  {
  }
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2000000c 	.word	0x2000000c

08002a14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e0be      	b.n	8002bb4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d109      	bne.n	8002a58 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff fc7e 	bl	8002354 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fbbd 	bl	80031d8 <ADC_ConversionStop_Disable>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f040 8099 	bne.w	8002ba2 <HAL_ADC_Init+0x18e>
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f040 8095 	bne.w	8002ba2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a80:	f023 0302 	bic.w	r3, r3, #2
 8002a84:	f043 0202 	orr.w	r2, r3, #2
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a94:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	7b1b      	ldrb	r3, [r3, #12]
 8002a9a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a9c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aac:	d003      	beq.n	8002ab6 <HAL_ADC_Init+0xa2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d102      	bne.n	8002abc <HAL_ADC_Init+0xa8>
 8002ab6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002aba:	e000      	b.n	8002abe <HAL_ADC_Init+0xaa>
 8002abc:	2300      	movs	r3, #0
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	7d1b      	ldrb	r3, [r3, #20]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d119      	bne.n	8002b00 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7b1b      	ldrb	r3, [r3, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d109      	bne.n	8002ae8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	035a      	lsls	r2, r3, #13
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	e00b      	b.n	8002b00 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aec:	f043 0220 	orr.w	r2, r3, #32
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af8:	f043 0201 	orr.w	r2, r3, #1
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	4b28      	ldr	r3, [pc, #160]	@ (8002bbc <HAL_ADC_Init+0x1a8>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	430b      	orrs	r3, r1
 8002b26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b30:	d003      	beq.n	8002b3a <HAL_ADC_Init+0x126>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d104      	bne.n	8002b44 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	051b      	lsls	r3, r3, #20
 8002b42:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	4b18      	ldr	r3, [pc, #96]	@ (8002bc0 <HAL_ADC_Init+0x1ac>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d10b      	bne.n	8002b80 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b72:	f023 0303 	bic.w	r3, r3, #3
 8002b76:	f043 0201 	orr.w	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b7e:	e018      	b.n	8002bb2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b84:	f023 0312 	bic.w	r3, r3, #18
 8002b88:	f043 0210 	orr.w	r2, r3, #16
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b94:	f043 0201 	orr.w	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ba0:	e007      	b.n	8002bb2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba6:	f043 0210 	orr.w	r2, r3, #16
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	ffe1f7fd 	.word	0xffe1f7fd
 8002bc0:	ff1f0efe 	.word	0xff1f0efe

08002bc4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a64      	ldr	r2, [pc, #400]	@ (8002d6c <HAL_ADC_Start_DMA+0x1a8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d004      	beq.n	8002be8 <HAL_ADC_Start_DMA+0x24>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a63      	ldr	r2, [pc, #396]	@ (8002d70 <HAL_ADC_Start_DMA+0x1ac>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d106      	bne.n	8002bf6 <HAL_ADC_Start_DMA+0x32>
 8002be8:	4b60      	ldr	r3, [pc, #384]	@ (8002d6c <HAL_ADC_Start_DMA+0x1a8>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f040 80b3 	bne.w	8002d5c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_Start_DMA+0x40>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e0ae      	b.n	8002d62 <HAL_ADC_Start_DMA+0x19e>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 fa89 	bl	8003124 <ADC_Enable>
 8002c12:	4603      	mov	r3, r0
 8002c14:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f040 809a 	bne.w	8002d52 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c22:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a4e      	ldr	r2, [pc, #312]	@ (8002d70 <HAL_ADC_Start_DMA+0x1ac>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d105      	bne.n	8002c48 <HAL_ADC_Start_DMA+0x84>
 8002c3c:	4b4b      	ldr	r3, [pc, #300]	@ (8002d6c <HAL_ADC_Start_DMA+0x1a8>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d115      	bne.n	8002c74 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d026      	beq.n	8002cb0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c66:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c6a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c72:	e01d      	b.n	8002cb0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c78:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a39      	ldr	r2, [pc, #228]	@ (8002d6c <HAL_ADC_Start_DMA+0x1a8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d004      	beq.n	8002c94 <HAL_ADC_Start_DMA+0xd0>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a38      	ldr	r2, [pc, #224]	@ (8002d70 <HAL_ADC_Start_DMA+0x1ac>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d10d      	bne.n	8002cb0 <HAL_ADC_Start_DMA+0xec>
 8002c94:	4b35      	ldr	r3, [pc, #212]	@ (8002d6c <HAL_ADC_Start_DMA+0x1a8>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ca8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d006      	beq.n	8002cca <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc0:	f023 0206 	bic.w	r2, r3, #6
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002cc8:	e002      	b.n	8002cd0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	4a25      	ldr	r2, [pc, #148]	@ (8002d74 <HAL_ADC_Start_DMA+0x1b0>)
 8002cde:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4a24      	ldr	r2, [pc, #144]	@ (8002d78 <HAL_ADC_Start_DMA+0x1b4>)
 8002ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	4a23      	ldr	r2, [pc, #140]	@ (8002d7c <HAL_ADC_Start_DMA+0x1b8>)
 8002cee:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0202 	mvn.w	r2, #2
 8002cf8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d08:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a18      	ldr	r0, [r3, #32]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	334c      	adds	r3, #76	@ 0x4c
 8002d14:	4619      	mov	r1, r3
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f000 fc75 	bl	8003608 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002d28:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002d2c:	d108      	bne.n	8002d40 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002d3c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002d3e:	e00f      	b.n	8002d60 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002d4e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002d50:	e006      	b.n	8002d60 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002d5a:	e001      	b.n	8002d60 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40012400 	.word	0x40012400
 8002d70:	40012800 	.word	0x40012800
 8002d74:	0800325b 	.word	0x0800325b
 8002d78:	080032d7 	.word	0x080032d7
 8002d7c:	080032f3 	.word	0x080032f3

08002d80 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d03e      	beq.n	8002e20 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d039      	beq.n	8002e20 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d105      	bne.n	8002dc4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002dce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002dd2:	d11d      	bne.n	8002e10 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d119      	bne.n	8002e10 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0220 	bic.w	r2, r2, #32
 8002dea:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d105      	bne.n	8002e10 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e08:	f043 0201 	orr.w	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7fe fd0d 	bl	8001830 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f06f 0212 	mvn.w	r2, #18
 8002e1e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d04d      	beq.n	8002ec6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d048      	beq.n	8002ec6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d105      	bne.n	8002e4c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e44:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002e56:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002e5a:	d012      	beq.n	8002e82 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d125      	bne.n	8002eb6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002e74:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002e78:	d11d      	bne.n	8002eb6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d119      	bne.n	8002eb6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e90:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eae:	f043 0201 	orr.w	r2, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fa35 	bl	8003326 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 020c 	mvn.w	r2, #12
 8002ec4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d012      	beq.n	8002ef6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00d      	beq.n	8002ef6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ede:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f812 	bl	8002f10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0201 	mvn.w	r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x20>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e0dc      	b.n	800310e <HAL_ADC_ConfigChannel+0x1da>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b06      	cmp	r3, #6
 8002f62:	d81c      	bhi.n	8002f9e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	3b05      	subs	r3, #5
 8002f76:	221f      	movs	r2, #31
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	4019      	ands	r1, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3b05      	subs	r3, #5
 8002f90:	fa00 f203 	lsl.w	r2, r0, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f9c:	e03c      	b.n	8003018 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b0c      	cmp	r3, #12
 8002fa4:	d81c      	bhi.n	8002fe0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3b23      	subs	r3, #35	@ 0x23
 8002fb8:	221f      	movs	r2, #31
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	4019      	ands	r1, r3
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	3b23      	subs	r3, #35	@ 0x23
 8002fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fde:	e01b      	b.n	8003018 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	3b41      	subs	r3, #65	@ 0x41
 8002ff2:	221f      	movs	r2, #31
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	4019      	ands	r1, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	3b41      	subs	r3, #65	@ 0x41
 800300c:	fa00 f203 	lsl.w	r2, r0, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b09      	cmp	r3, #9
 800301e:	d91c      	bls.n	800305a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68d9      	ldr	r1, [r3, #12]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4613      	mov	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4413      	add	r3, r2
 8003030:	3b1e      	subs	r3, #30
 8003032:	2207      	movs	r2, #7
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	4019      	ands	r1, r3
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	6898      	ldr	r0, [r3, #8]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4413      	add	r3, r2
 800304a:	3b1e      	subs	r3, #30
 800304c:	fa00 f203 	lsl.w	r2, r0, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	60da      	str	r2, [r3, #12]
 8003058:	e019      	b.n	800308e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6919      	ldr	r1, [r3, #16]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4613      	mov	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4413      	add	r3, r2
 800306a:	2207      	movs	r2, #7
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	4019      	ands	r1, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	6898      	ldr	r0, [r3, #8]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	fa00 f203 	lsl.w	r2, r0, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b10      	cmp	r3, #16
 8003094:	d003      	beq.n	800309e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800309a:	2b11      	cmp	r3, #17
 800309c:	d132      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003118 <HAL_ADC_ConfigChannel+0x1e4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d125      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d126      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80030c4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b10      	cmp	r3, #16
 80030cc:	d11a      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030ce:	4b13      	ldr	r3, [pc, #76]	@ (800311c <HAL_ADC_ConfigChannel+0x1e8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a13      	ldr	r2, [pc, #76]	@ (8003120 <HAL_ADC_ConfigChannel+0x1ec>)
 80030d4:	fba2 2303 	umull	r2, r3, r2, r3
 80030d8:	0c9a      	lsrs	r2, r3, #18
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030e4:	e002      	b.n	80030ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f9      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x1b2>
 80030f2:	e007      	b.n	8003104 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f8:	f043 0220 	orr.w	r2, r3, #32
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800310c:	7bfb      	ldrb	r3, [r7, #15]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr
 8003118:	40012400 	.word	0x40012400
 800311c:	20000004 	.word	0x20000004
 8003120:	431bde83 	.word	0x431bde83

08003124 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	d040      	beq.n	80031c4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 0201 	orr.w	r2, r2, #1
 8003150:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003152:	4b1f      	ldr	r3, [pc, #124]	@ (80031d0 <ADC_Enable+0xac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1f      	ldr	r2, [pc, #124]	@ (80031d4 <ADC_Enable+0xb0>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	0c9b      	lsrs	r3, r3, #18
 800315e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003160:	e002      	b.n	8003168 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	3b01      	subs	r3, #1
 8003166:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f9      	bne.n	8003162 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800316e:	f7ff fc23 	bl	80029b8 <HAL_GetTick>
 8003172:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003174:	e01f      	b.n	80031b6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003176:	f7ff fc1f 	bl	80029b8 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d918      	bls.n	80031b6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b01      	cmp	r3, #1
 8003190:	d011      	beq.n	80031b6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003196:	f043 0210 	orr.w	r2, r3, #16
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a2:	f043 0201 	orr.w	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e007      	b.n	80031c6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d1d8      	bne.n	8003176 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000004 	.word	0x20000004
 80031d4:	431bde83 	.word	0x431bde83

080031d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d12e      	bne.n	8003250 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0201 	bic.w	r2, r2, #1
 8003200:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003202:	f7ff fbd9 	bl	80029b8 <HAL_GetTick>
 8003206:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003208:	e01b      	b.n	8003242 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800320a:	f7ff fbd5 	bl	80029b8 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d914      	bls.n	8003242 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d10d      	bne.n	8003242 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322a:	f043 0210 	orr.w	r2, r3, #16
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003236:	f043 0201 	orr.w	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e007      	b.n	8003252 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b01      	cmp	r3, #1
 800324e:	d0dc      	beq.n	800320a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003270:	2b00      	cmp	r3, #0
 8003272:	d127      	bne.n	80032c4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003278:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800328a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800328e:	d115      	bne.n	80032bc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003294:	2b00      	cmp	r3, #0
 8003296:	d111      	bne.n	80032bc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b4:	f043 0201 	orr.w	r2, r3, #1
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f7fe fab7 	bl	8001830 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80032c2:	e004      	b.n	80032ce <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	4798      	blx	r3
}
 80032ce:	bf00      	nop
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f7ff fe0a 	bl	8002efe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032ea:	bf00      	nop
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fe:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003304:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003310:	f043 0204 	orr.w	r2, r3, #4
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f7ff fe02 	bl	8002f22 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003348:	4b0c      	ldr	r3, [pc, #48]	@ (800337c <__NVIC_SetPriorityGrouping+0x44>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003354:	4013      	ands	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003360:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800336a:	4a04      	ldr	r2, [pc, #16]	@ (800337c <__NVIC_SetPriorityGrouping+0x44>)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	60d3      	str	r3, [r2, #12]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003384:	4b04      	ldr	r3, [pc, #16]	@ (8003398 <__NVIC_GetPriorityGrouping+0x18>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	f003 0307 	and.w	r3, r3, #7
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	db0b      	blt.n	80033c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	f003 021f 	and.w	r2, r3, #31
 80033b4:	4906      	ldr	r1, [pc, #24]	@ (80033d0 <__NVIC_EnableIRQ+0x34>)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	2001      	movs	r0, #1
 80033be:	fa00 f202 	lsl.w	r2, r0, r2
 80033c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr
 80033d0:	e000e100 	.word	0xe000e100

080033d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	6039      	str	r1, [r7, #0]
 80033de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	db0a      	blt.n	80033fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	490c      	ldr	r1, [pc, #48]	@ (8003420 <__NVIC_SetPriority+0x4c>)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	0112      	lsls	r2, r2, #4
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	440b      	add	r3, r1
 80033f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033fc:	e00a      	b.n	8003414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	b2da      	uxtb	r2, r3
 8003402:	4908      	ldr	r1, [pc, #32]	@ (8003424 <__NVIC_SetPriority+0x50>)
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	3b04      	subs	r3, #4
 800340c:	0112      	lsls	r2, r2, #4
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	440b      	add	r3, r1
 8003412:	761a      	strb	r2, [r3, #24]
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	e000e100 	.word	0xe000e100
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	@ 0x24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f1c3 0307 	rsb	r3, r3, #7
 8003442:	2b04      	cmp	r3, #4
 8003444:	bf28      	it	cs
 8003446:	2304      	movcs	r3, #4
 8003448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3304      	adds	r3, #4
 800344e:	2b06      	cmp	r3, #6
 8003450:	d902      	bls.n	8003458 <NVIC_EncodePriority+0x30>
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3b03      	subs	r3, #3
 8003456:	e000      	b.n	800345a <NVIC_EncodePriority+0x32>
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800345c:	f04f 32ff 	mov.w	r2, #4294967295
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43da      	mvns	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	401a      	ands	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003470:	f04f 31ff 	mov.w	r1, #4294967295
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	43d9      	mvns	r1, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003480:	4313      	orrs	r3, r2
         );
}
 8003482:	4618      	mov	r0, r3
 8003484:	3724      	adds	r7, #36	@ 0x24
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800349c:	d301      	bcc.n	80034a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800349e:	2301      	movs	r3, #1
 80034a0:	e00f      	b.n	80034c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034a2:	4a0a      	ldr	r2, [pc, #40]	@ (80034cc <SysTick_Config+0x40>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034aa:	210f      	movs	r1, #15
 80034ac:	f04f 30ff 	mov.w	r0, #4294967295
 80034b0:	f7ff ff90 	bl	80033d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b4:	4b05      	ldr	r3, [pc, #20]	@ (80034cc <SysTick_Config+0x40>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ba:	4b04      	ldr	r3, [pc, #16]	@ (80034cc <SysTick_Config+0x40>)
 80034bc:	2207      	movs	r2, #7
 80034be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	e000e010 	.word	0xe000e010

080034d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff ff2d 	bl	8003338 <__NVIC_SetPriorityGrouping>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b086      	sub	sp, #24
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034f8:	f7ff ff42 	bl	8003380 <__NVIC_GetPriorityGrouping>
 80034fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	6978      	ldr	r0, [r7, #20]
 8003504:	f7ff ff90 	bl	8003428 <NVIC_EncodePriority>
 8003508:	4602      	mov	r2, r0
 800350a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350e:	4611      	mov	r1, r2
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff5f 	bl	80033d4 <__NVIC_SetPriority>
}
 8003516:	bf00      	nop
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	4603      	mov	r3, r0
 8003526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff35 	bl	800339c <__NVIC_EnableIRQ>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff ffa2 	bl	800348c <SysTick_Config>
 8003548:	4603      	mov	r3, r0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e043      	b.n	80035f2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	4b22      	ldr	r3, [pc, #136]	@ (80035fc <HAL_DMA_Init+0xa8>)
 8003572:	4413      	add	r3, r2
 8003574:	4a22      	ldr	r2, [pc, #136]	@ (8003600 <HAL_DMA_Init+0xac>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	009a      	lsls	r2, r3, #2
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a1f      	ldr	r2, [pc, #124]	@ (8003604 <HAL_DMA_Init+0xb0>)
 8003586:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800359e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80035a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80035ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	bffdfff8 	.word	0xbffdfff8
 8003600:	cccccccd 	.word	0xcccccccd
 8003604:	40020000 	.word	0x40020000

08003608 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_DMA_Start_IT+0x20>
 8003624:	2302      	movs	r3, #2
 8003626:	e04b      	b.n	80036c0 <HAL_DMA_Start_IT+0xb8>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d13a      	bne.n	80036b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0201 	bic.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	68b9      	ldr	r1, [r7, #8]
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 f937 	bl	80038d4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f042 020e 	orr.w	r2, r2, #14
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	e00f      	b.n	80036a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0204 	bic.w	r2, r2, #4
 800368e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 020a 	orr.w	r2, r2, #10
 800369e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	e005      	b.n	80036be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80036ba:	2302      	movs	r3, #2
 80036bc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80036be:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	2204      	movs	r2, #4
 80036e6:	409a      	lsls	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d04f      	beq.n	8003790 <HAL_DMA_IRQHandler+0xc8>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d04a      	beq.n	8003790 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d107      	bne.n	8003718 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0204 	bic.w	r2, r2, #4
 8003716:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a66      	ldr	r2, [pc, #408]	@ (80038b8 <HAL_DMA_IRQHandler+0x1f0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d029      	beq.n	8003776 <HAL_DMA_IRQHandler+0xae>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a65      	ldr	r2, [pc, #404]	@ (80038bc <HAL_DMA_IRQHandler+0x1f4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d022      	beq.n	8003772 <HAL_DMA_IRQHandler+0xaa>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a63      	ldr	r2, [pc, #396]	@ (80038c0 <HAL_DMA_IRQHandler+0x1f8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d01a      	beq.n	800376c <HAL_DMA_IRQHandler+0xa4>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a62      	ldr	r2, [pc, #392]	@ (80038c4 <HAL_DMA_IRQHandler+0x1fc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d012      	beq.n	8003766 <HAL_DMA_IRQHandler+0x9e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a60      	ldr	r2, [pc, #384]	@ (80038c8 <HAL_DMA_IRQHandler+0x200>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00a      	beq.n	8003760 <HAL_DMA_IRQHandler+0x98>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a5f      	ldr	r2, [pc, #380]	@ (80038cc <HAL_DMA_IRQHandler+0x204>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d102      	bne.n	800375a <HAL_DMA_IRQHandler+0x92>
 8003754:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003758:	e00e      	b.n	8003778 <HAL_DMA_IRQHandler+0xb0>
 800375a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800375e:	e00b      	b.n	8003778 <HAL_DMA_IRQHandler+0xb0>
 8003760:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003764:	e008      	b.n	8003778 <HAL_DMA_IRQHandler+0xb0>
 8003766:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800376a:	e005      	b.n	8003778 <HAL_DMA_IRQHandler+0xb0>
 800376c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003770:	e002      	b.n	8003778 <HAL_DMA_IRQHandler+0xb0>
 8003772:	2340      	movs	r3, #64	@ 0x40
 8003774:	e000      	b.n	8003778 <HAL_DMA_IRQHandler+0xb0>
 8003776:	2304      	movs	r3, #4
 8003778:	4a55      	ldr	r2, [pc, #340]	@ (80038d0 <HAL_DMA_IRQHandler+0x208>)
 800377a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8094 	beq.w	80038ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800378e:	e08e      	b.n	80038ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	2202      	movs	r2, #2
 8003796:	409a      	lsls	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4013      	ands	r3, r2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d056      	beq.n	800384e <HAL_DMA_IRQHandler+0x186>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d051      	beq.n	800384e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0320 	and.w	r3, r3, #32
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10b      	bne.n	80037d0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 020a 	bic.w	r2, r2, #10
 80037c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a38      	ldr	r2, [pc, #224]	@ (80038b8 <HAL_DMA_IRQHandler+0x1f0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d029      	beq.n	800382e <HAL_DMA_IRQHandler+0x166>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a37      	ldr	r2, [pc, #220]	@ (80038bc <HAL_DMA_IRQHandler+0x1f4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d022      	beq.n	800382a <HAL_DMA_IRQHandler+0x162>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a35      	ldr	r2, [pc, #212]	@ (80038c0 <HAL_DMA_IRQHandler+0x1f8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d01a      	beq.n	8003824 <HAL_DMA_IRQHandler+0x15c>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a34      	ldr	r2, [pc, #208]	@ (80038c4 <HAL_DMA_IRQHandler+0x1fc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d012      	beq.n	800381e <HAL_DMA_IRQHandler+0x156>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a32      	ldr	r2, [pc, #200]	@ (80038c8 <HAL_DMA_IRQHandler+0x200>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00a      	beq.n	8003818 <HAL_DMA_IRQHandler+0x150>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a31      	ldr	r2, [pc, #196]	@ (80038cc <HAL_DMA_IRQHandler+0x204>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d102      	bne.n	8003812 <HAL_DMA_IRQHandler+0x14a>
 800380c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003810:	e00e      	b.n	8003830 <HAL_DMA_IRQHandler+0x168>
 8003812:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003816:	e00b      	b.n	8003830 <HAL_DMA_IRQHandler+0x168>
 8003818:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800381c:	e008      	b.n	8003830 <HAL_DMA_IRQHandler+0x168>
 800381e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003822:	e005      	b.n	8003830 <HAL_DMA_IRQHandler+0x168>
 8003824:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003828:	e002      	b.n	8003830 <HAL_DMA_IRQHandler+0x168>
 800382a:	2320      	movs	r3, #32
 800382c:	e000      	b.n	8003830 <HAL_DMA_IRQHandler+0x168>
 800382e:	2302      	movs	r3, #2
 8003830:	4a27      	ldr	r2, [pc, #156]	@ (80038d0 <HAL_DMA_IRQHandler+0x208>)
 8003832:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003840:	2b00      	cmp	r3, #0
 8003842:	d034      	beq.n	80038ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800384c:	e02f      	b.n	80038ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	2208      	movs	r2, #8
 8003854:	409a      	lsls	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4013      	ands	r3, r2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d028      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x1e8>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b00      	cmp	r3, #0
 8003866:	d023      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 020e 	bic.w	r2, r2, #14
 8003876:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003880:	2101      	movs	r1, #1
 8003882:	fa01 f202 	lsl.w	r2, r1, r2
 8003886:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
    }
  }
  return;
 80038ae:	bf00      	nop
 80038b0:	bf00      	nop
}
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40020008 	.word	0x40020008
 80038bc:	4002001c 	.word	0x4002001c
 80038c0:	40020030 	.word	0x40020030
 80038c4:	40020044 	.word	0x40020044
 80038c8:	40020058 	.word	0x40020058
 80038cc:	4002006c 	.word	0x4002006c
 80038d0:	40020000 	.word	0x40020000

080038d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ea:	2101      	movs	r1, #1
 80038ec:	fa01 f202 	lsl.w	r2, r1, r2
 80038f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b10      	cmp	r3, #16
 8003900:	d108      	bne.n	8003914 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003912:	e007      	b.n	8003924 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	60da      	str	r2, [r3, #12]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr
	...

08003930 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003930:	b480      	push	{r7}
 8003932:	b08b      	sub	sp, #44	@ 0x2c
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800393a:	2300      	movs	r3, #0
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800393e:	2300      	movs	r3, #0
 8003940:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003942:	e169      	b.n	8003c18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003944:	2201      	movs	r2, #1
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69fa      	ldr	r2, [r7, #28]
 8003954:	4013      	ands	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	429a      	cmp	r2, r3
 800395e:	f040 8158 	bne.w	8003c12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4a9a      	ldr	r2, [pc, #616]	@ (8003bd0 <HAL_GPIO_Init+0x2a0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d05e      	beq.n	8003a2a <HAL_GPIO_Init+0xfa>
 800396c:	4a98      	ldr	r2, [pc, #608]	@ (8003bd0 <HAL_GPIO_Init+0x2a0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d875      	bhi.n	8003a5e <HAL_GPIO_Init+0x12e>
 8003972:	4a98      	ldr	r2, [pc, #608]	@ (8003bd4 <HAL_GPIO_Init+0x2a4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d058      	beq.n	8003a2a <HAL_GPIO_Init+0xfa>
 8003978:	4a96      	ldr	r2, [pc, #600]	@ (8003bd4 <HAL_GPIO_Init+0x2a4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d86f      	bhi.n	8003a5e <HAL_GPIO_Init+0x12e>
 800397e:	4a96      	ldr	r2, [pc, #600]	@ (8003bd8 <HAL_GPIO_Init+0x2a8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d052      	beq.n	8003a2a <HAL_GPIO_Init+0xfa>
 8003984:	4a94      	ldr	r2, [pc, #592]	@ (8003bd8 <HAL_GPIO_Init+0x2a8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d869      	bhi.n	8003a5e <HAL_GPIO_Init+0x12e>
 800398a:	4a94      	ldr	r2, [pc, #592]	@ (8003bdc <HAL_GPIO_Init+0x2ac>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d04c      	beq.n	8003a2a <HAL_GPIO_Init+0xfa>
 8003990:	4a92      	ldr	r2, [pc, #584]	@ (8003bdc <HAL_GPIO_Init+0x2ac>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d863      	bhi.n	8003a5e <HAL_GPIO_Init+0x12e>
 8003996:	4a92      	ldr	r2, [pc, #584]	@ (8003be0 <HAL_GPIO_Init+0x2b0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d046      	beq.n	8003a2a <HAL_GPIO_Init+0xfa>
 800399c:	4a90      	ldr	r2, [pc, #576]	@ (8003be0 <HAL_GPIO_Init+0x2b0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d85d      	bhi.n	8003a5e <HAL_GPIO_Init+0x12e>
 80039a2:	2b12      	cmp	r3, #18
 80039a4:	d82a      	bhi.n	80039fc <HAL_GPIO_Init+0xcc>
 80039a6:	2b12      	cmp	r3, #18
 80039a8:	d859      	bhi.n	8003a5e <HAL_GPIO_Init+0x12e>
 80039aa:	a201      	add	r2, pc, #4	@ (adr r2, 80039b0 <HAL_GPIO_Init+0x80>)
 80039ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b0:	08003a2b 	.word	0x08003a2b
 80039b4:	08003a05 	.word	0x08003a05
 80039b8:	08003a17 	.word	0x08003a17
 80039bc:	08003a59 	.word	0x08003a59
 80039c0:	08003a5f 	.word	0x08003a5f
 80039c4:	08003a5f 	.word	0x08003a5f
 80039c8:	08003a5f 	.word	0x08003a5f
 80039cc:	08003a5f 	.word	0x08003a5f
 80039d0:	08003a5f 	.word	0x08003a5f
 80039d4:	08003a5f 	.word	0x08003a5f
 80039d8:	08003a5f 	.word	0x08003a5f
 80039dc:	08003a5f 	.word	0x08003a5f
 80039e0:	08003a5f 	.word	0x08003a5f
 80039e4:	08003a5f 	.word	0x08003a5f
 80039e8:	08003a5f 	.word	0x08003a5f
 80039ec:	08003a5f 	.word	0x08003a5f
 80039f0:	08003a5f 	.word	0x08003a5f
 80039f4:	08003a0d 	.word	0x08003a0d
 80039f8:	08003a21 	.word	0x08003a21
 80039fc:	4a79      	ldr	r2, [pc, #484]	@ (8003be4 <HAL_GPIO_Init+0x2b4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a02:	e02c      	b.n	8003a5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	623b      	str	r3, [r7, #32]
          break;
 8003a0a:	e029      	b.n	8003a60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	3304      	adds	r3, #4
 8003a12:	623b      	str	r3, [r7, #32]
          break;
 8003a14:	e024      	b.n	8003a60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	623b      	str	r3, [r7, #32]
          break;
 8003a1e:	e01f      	b.n	8003a60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	330c      	adds	r3, #12
 8003a26:	623b      	str	r3, [r7, #32]
          break;
 8003a28:	e01a      	b.n	8003a60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a32:	2304      	movs	r3, #4
 8003a34:	623b      	str	r3, [r7, #32]
          break;
 8003a36:	e013      	b.n	8003a60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d105      	bne.n	8003a4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a40:	2308      	movs	r3, #8
 8003a42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69fa      	ldr	r2, [r7, #28]
 8003a48:	611a      	str	r2, [r3, #16]
          break;
 8003a4a:	e009      	b.n	8003a60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a4c:	2308      	movs	r3, #8
 8003a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69fa      	ldr	r2, [r7, #28]
 8003a54:	615a      	str	r2, [r3, #20]
          break;
 8003a56:	e003      	b.n	8003a60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	623b      	str	r3, [r7, #32]
          break;
 8003a5c:	e000      	b.n	8003a60 <HAL_GPIO_Init+0x130>
          break;
 8003a5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	2bff      	cmp	r3, #255	@ 0xff
 8003a64:	d801      	bhi.n	8003a6a <HAL_GPIO_Init+0x13a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	e001      	b.n	8003a6e <HAL_GPIO_Init+0x13e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2bff      	cmp	r3, #255	@ 0xff
 8003a74:	d802      	bhi.n	8003a7c <HAL_GPIO_Init+0x14c>
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	e002      	b.n	8003a82 <HAL_GPIO_Init+0x152>
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7e:	3b08      	subs	r3, #8
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	210f      	movs	r1, #15
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	401a      	ands	r2, r3
 8003a94:	6a39      	ldr	r1, [r7, #32]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 80b1 	beq.w	8003c12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ab0:	4b4d      	ldr	r3, [pc, #308]	@ (8003be8 <HAL_GPIO_Init+0x2b8>)
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	4a4c      	ldr	r2, [pc, #304]	@ (8003be8 <HAL_GPIO_Init+0x2b8>)
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	6193      	str	r3, [r2, #24]
 8003abc:	4b4a      	ldr	r3, [pc, #296]	@ (8003be8 <HAL_GPIO_Init+0x2b8>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ac8:	4a48      	ldr	r2, [pc, #288]	@ (8003bec <HAL_GPIO_Init+0x2bc>)
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	089b      	lsrs	r3, r3, #2
 8003ace:	3302      	adds	r3, #2
 8003ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	220f      	movs	r2, #15
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a40      	ldr	r2, [pc, #256]	@ (8003bf0 <HAL_GPIO_Init+0x2c0>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d013      	beq.n	8003b1c <HAL_GPIO_Init+0x1ec>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a3f      	ldr	r2, [pc, #252]	@ (8003bf4 <HAL_GPIO_Init+0x2c4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00d      	beq.n	8003b18 <HAL_GPIO_Init+0x1e8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a3e      	ldr	r2, [pc, #248]	@ (8003bf8 <HAL_GPIO_Init+0x2c8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d007      	beq.n	8003b14 <HAL_GPIO_Init+0x1e4>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a3d      	ldr	r2, [pc, #244]	@ (8003bfc <HAL_GPIO_Init+0x2cc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d101      	bne.n	8003b10 <HAL_GPIO_Init+0x1e0>
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e006      	b.n	8003b1e <HAL_GPIO_Init+0x1ee>
 8003b10:	2304      	movs	r3, #4
 8003b12:	e004      	b.n	8003b1e <HAL_GPIO_Init+0x1ee>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e002      	b.n	8003b1e <HAL_GPIO_Init+0x1ee>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <HAL_GPIO_Init+0x1ee>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b20:	f002 0203 	and.w	r2, r2, #3
 8003b24:	0092      	lsls	r2, r2, #2
 8003b26:	4093      	lsls	r3, r2
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b2e:	492f      	ldr	r1, [pc, #188]	@ (8003bec <HAL_GPIO_Init+0x2bc>)
 8003b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b32:	089b      	lsrs	r3, r3, #2
 8003b34:	3302      	adds	r3, #2
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d006      	beq.n	8003b56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b48:	4b2d      	ldr	r3, [pc, #180]	@ (8003c00 <HAL_GPIO_Init+0x2d0>)
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	492c      	ldr	r1, [pc, #176]	@ (8003c00 <HAL_GPIO_Init+0x2d0>)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	608b      	str	r3, [r1, #8]
 8003b54:	e006      	b.n	8003b64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b56:	4b2a      	ldr	r3, [pc, #168]	@ (8003c00 <HAL_GPIO_Init+0x2d0>)
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	4928      	ldr	r1, [pc, #160]	@ (8003c00 <HAL_GPIO_Init+0x2d0>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d006      	beq.n	8003b7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b70:	4b23      	ldr	r3, [pc, #140]	@ (8003c00 <HAL_GPIO_Init+0x2d0>)
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	4922      	ldr	r1, [pc, #136]	@ (8003c00 <HAL_GPIO_Init+0x2d0>)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60cb      	str	r3, [r1, #12]
 8003b7c:	e006      	b.n	8003b8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b7e:	4b20      	ldr	r3, [pc, #128]	@ (8003c00 <HAL_GPIO_Init+0x2d0>)
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	43db      	mvns	r3, r3
 8003b86:	491e      	ldr	r1, [pc, #120]	@ (8003c00 <HAL_GPIO_Init+0x2d0>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d006      	beq.n	8003ba6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b98:	4b19      	ldr	r3, [pc, #100]	@ (8003c00 <HAL_GPIO_Init+0x2d0>)
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	4918      	ldr	r1, [pc, #96]	@ (8003c00 <HAL_GPIO_Init+0x2d0>)
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	604b      	str	r3, [r1, #4]
 8003ba4:	e006      	b.n	8003bb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ba6:	4b16      	ldr	r3, [pc, #88]	@ (8003c00 <HAL_GPIO_Init+0x2d0>)
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	43db      	mvns	r3, r3
 8003bae:	4914      	ldr	r1, [pc, #80]	@ (8003c00 <HAL_GPIO_Init+0x2d0>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d021      	beq.n	8003c04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c00 <HAL_GPIO_Init+0x2d0>)
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	490e      	ldr	r1, [pc, #56]	@ (8003c00 <HAL_GPIO_Init+0x2d0>)
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	600b      	str	r3, [r1, #0]
 8003bcc:	e021      	b.n	8003c12 <HAL_GPIO_Init+0x2e2>
 8003bce:	bf00      	nop
 8003bd0:	10320000 	.word	0x10320000
 8003bd4:	10310000 	.word	0x10310000
 8003bd8:	10220000 	.word	0x10220000
 8003bdc:	10210000 	.word	0x10210000
 8003be0:	10120000 	.word	0x10120000
 8003be4:	10110000 	.word	0x10110000
 8003be8:	40021000 	.word	0x40021000
 8003bec:	40010000 	.word	0x40010000
 8003bf0:	40010800 	.word	0x40010800
 8003bf4:	40010c00 	.word	0x40010c00
 8003bf8:	40011000 	.word	0x40011000
 8003bfc:	40011400 	.word	0x40011400
 8003c00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c04:	4b0b      	ldr	r3, [pc, #44]	@ (8003c34 <HAL_GPIO_Init+0x304>)
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	4909      	ldr	r1, [pc, #36]	@ (8003c34 <HAL_GPIO_Init+0x304>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c14:	3301      	adds	r3, #1
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f47f ae8e 	bne.w	8003944 <HAL_GPIO_Init+0x14>
  }
}
 8003c28:	bf00      	nop
 8003c2a:	bf00      	nop
 8003c2c:	372c      	adds	r7, #44	@ 0x2c
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	40010400 	.word	0x40010400

08003c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	807b      	strh	r3, [r7, #2]
 8003c44:	4613      	mov	r3, r2
 8003c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c48:	787b      	ldrb	r3, [r7, #1]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c4e:	887a      	ldrh	r2, [r7, #2]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c54:	e003      	b.n	8003c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c56:	887b      	ldrh	r3, [r7, #2]
 8003c58:	041a      	lsls	r2, r3, #16
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	611a      	str	r2, [r3, #16]
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c7a:	887a      	ldrh	r2, [r7, #2]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	041a      	lsls	r2, r3, #16
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	43d9      	mvns	r1, r3
 8003c86:	887b      	ldrh	r3, [r7, #2]
 8003c88:	400b      	ands	r3, r1
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	611a      	str	r2, [r3, #16]
}
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr
	...

08003c9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e12b      	b.n	8003f06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fe fbce 	bl	8002464 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2224      	movs	r2, #36	@ 0x24
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0201 	bic.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d00:	f001 feaa 	bl	8005a58 <HAL_RCC_GetPCLK1Freq>
 8003d04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	4a81      	ldr	r2, [pc, #516]	@ (8003f10 <HAL_I2C_Init+0x274>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d807      	bhi.n	8003d20 <HAL_I2C_Init+0x84>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4a80      	ldr	r2, [pc, #512]	@ (8003f14 <HAL_I2C_Init+0x278>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	bf94      	ite	ls
 8003d18:	2301      	movls	r3, #1
 8003d1a:	2300      	movhi	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	e006      	b.n	8003d2e <HAL_I2C_Init+0x92>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4a7d      	ldr	r2, [pc, #500]	@ (8003f18 <HAL_I2C_Init+0x27c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	bf94      	ite	ls
 8003d28:	2301      	movls	r3, #1
 8003d2a:	2300      	movhi	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e0e7      	b.n	8003f06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4a78      	ldr	r2, [pc, #480]	@ (8003f1c <HAL_I2C_Init+0x280>)
 8003d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3e:	0c9b      	lsrs	r3, r3, #18
 8003d40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4a6a      	ldr	r2, [pc, #424]	@ (8003f10 <HAL_I2C_Init+0x274>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d802      	bhi.n	8003d70 <HAL_I2C_Init+0xd4>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	e009      	b.n	8003d84 <HAL_I2C_Init+0xe8>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	4a69      	ldr	r2, [pc, #420]	@ (8003f20 <HAL_I2C_Init+0x284>)
 8003d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d80:	099b      	lsrs	r3, r3, #6
 8003d82:	3301      	adds	r3, #1
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003d96:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	495c      	ldr	r1, [pc, #368]	@ (8003f10 <HAL_I2C_Init+0x274>)
 8003da0:	428b      	cmp	r3, r1
 8003da2:	d819      	bhi.n	8003dd8 <HAL_I2C_Init+0x13c>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	1e59      	subs	r1, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	fbb1 f3f3 	udiv	r3, r1, r3
 8003db2:	1c59      	adds	r1, r3, #1
 8003db4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003db8:	400b      	ands	r3, r1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <HAL_I2C_Init+0x138>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	1e59      	subs	r1, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dcc:	3301      	adds	r3, #1
 8003dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd2:	e051      	b.n	8003e78 <HAL_I2C_Init+0x1dc>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	e04f      	b.n	8003e78 <HAL_I2C_Init+0x1dc>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d111      	bne.n	8003e04 <HAL_I2C_Init+0x168>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	1e58      	subs	r0, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6859      	ldr	r1, [r3, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	440b      	add	r3, r1
 8003dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003df2:	3301      	adds	r3, #1
 8003df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	bf0c      	ite	eq
 8003dfc:	2301      	moveq	r3, #1
 8003dfe:	2300      	movne	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	e012      	b.n	8003e2a <HAL_I2C_Init+0x18e>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1e58      	subs	r0, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6859      	ldr	r1, [r3, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	0099      	lsls	r1, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf0c      	ite	eq
 8003e24:	2301      	moveq	r3, #1
 8003e26:	2300      	movne	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_I2C_Init+0x196>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e022      	b.n	8003e78 <HAL_I2C_Init+0x1dc>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10e      	bne.n	8003e58 <HAL_I2C_Init+0x1bc>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1e58      	subs	r0, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6859      	ldr	r1, [r3, #4]
 8003e42:	460b      	mov	r3, r1
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	440b      	add	r3, r1
 8003e48:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e56:	e00f      	b.n	8003e78 <HAL_I2C_Init+0x1dc>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1e58      	subs	r0, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6859      	ldr	r1, [r3, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	0099      	lsls	r1, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e6e:	3301      	adds	r3, #1
 8003e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	6809      	ldr	r1, [r1, #0]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	69da      	ldr	r2, [r3, #28]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ea6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6911      	ldr	r1, [r2, #16]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68d2      	ldr	r2, [r2, #12]
 8003eb2:	4311      	orrs	r1, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	000186a0 	.word	0x000186a0
 8003f14:	001e847f 	.word	0x001e847f
 8003f18:	003d08ff 	.word	0x003d08ff
 8003f1c:	431bde83 	.word	0x431bde83
 8003f20:	10624dd3 	.word	0x10624dd3

08003f24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	460b      	mov	r3, r1
 8003f32:	817b      	strh	r3, [r7, #10]
 8003f34:	4613      	mov	r3, r2
 8003f36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f38:	f7fe fd3e 	bl	80029b8 <HAL_GetTick>
 8003f3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	f040 80e0 	bne.w	800410c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	2319      	movs	r3, #25
 8003f52:	2201      	movs	r2, #1
 8003f54:	4970      	ldr	r1, [pc, #448]	@ (8004118 <HAL_I2C_Master_Transmit+0x1f4>)
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 ff7e 	bl	8004e58 <I2C_WaitOnFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f62:	2302      	movs	r3, #2
 8003f64:	e0d3      	b.n	800410e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_I2C_Master_Transmit+0x50>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e0cc      	b.n	800410e <HAL_I2C_Master_Transmit+0x1ea>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d007      	beq.n	8003f9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2221      	movs	r2, #33	@ 0x21
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	893a      	ldrh	r2, [r7, #8]
 8003fca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4a50      	ldr	r2, [pc, #320]	@ (800411c <HAL_I2C_Master_Transmit+0x1f8>)
 8003fda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fdc:	8979      	ldrh	r1, [r7, #10]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	6a3a      	ldr	r2, [r7, #32]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fd38 	bl	8004a58 <I2C_MasterRequestWrite>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e08d      	b.n	800410e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004008:	e066      	b.n	80040d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	6a39      	ldr	r1, [r7, #32]
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f001 f83c 	bl	800508c <I2C_WaitOnTXEFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00d      	beq.n	8004036 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	2b04      	cmp	r3, #4
 8004020:	d107      	bne.n	8004032 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004030:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e06b      	b.n	800410e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	781a      	ldrb	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b04      	cmp	r3, #4
 8004072:	d11b      	bne.n	80040ac <HAL_I2C_Master_Transmit+0x188>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004078:	2b00      	cmp	r3, #0
 800407a:	d017      	beq.n	80040ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	781a      	ldrb	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	6a39      	ldr	r1, [r7, #32]
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f001 f833 	bl	800511c <I2C_WaitOnBTFFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00d      	beq.n	80040d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	2b04      	cmp	r3, #4
 80040c2:	d107      	bne.n	80040d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e01a      	b.n	800410e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d194      	bne.n	800400a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	e000      	b.n	800410e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800410c:	2302      	movs	r3, #2
  }
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	00100002 	.word	0x00100002
 800411c:	ffff0000 	.word	0xffff0000

08004120 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	4608      	mov	r0, r1
 800412a:	4611      	mov	r1, r2
 800412c:	461a      	mov	r2, r3
 800412e:	4603      	mov	r3, r0
 8004130:	817b      	strh	r3, [r7, #10]
 8004132:	460b      	mov	r3, r1
 8004134:	813b      	strh	r3, [r7, #8]
 8004136:	4613      	mov	r3, r2
 8004138:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800413a:	f7fe fc3d 	bl	80029b8 <HAL_GetTick>
 800413e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b20      	cmp	r3, #32
 800414a:	f040 80d9 	bne.w	8004300 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	2319      	movs	r3, #25
 8004154:	2201      	movs	r2, #1
 8004156:	496d      	ldr	r1, [pc, #436]	@ (800430c <HAL_I2C_Mem_Write+0x1ec>)
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 fe7d 	bl	8004e58 <I2C_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004164:	2302      	movs	r3, #2
 8004166:	e0cc      	b.n	8004302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <HAL_I2C_Mem_Write+0x56>
 8004172:	2302      	movs	r3, #2
 8004174:	e0c5      	b.n	8004302 <HAL_I2C_Mem_Write+0x1e2>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b01      	cmp	r3, #1
 800418a:	d007      	beq.n	800419c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2221      	movs	r2, #33	@ 0x21
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2240      	movs	r2, #64	@ 0x40
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a3a      	ldr	r2, [r7, #32]
 80041c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4a4d      	ldr	r2, [pc, #308]	@ (8004310 <HAL_I2C_Mem_Write+0x1f0>)
 80041dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041de:	88f8      	ldrh	r0, [r7, #6]
 80041e0:	893a      	ldrh	r2, [r7, #8]
 80041e2:	8979      	ldrh	r1, [r7, #10]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	9301      	str	r3, [sp, #4]
 80041e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	4603      	mov	r3, r0
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fcb4 	bl	8004b5c <I2C_RequestMemoryWrite>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d052      	beq.n	80042a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e081      	b.n	8004302 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 ff42 	bl	800508c <I2C_WaitOnTXEFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00d      	beq.n	800422a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	2b04      	cmp	r3, #4
 8004214:	d107      	bne.n	8004226 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004224:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e06b      	b.n	8004302 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422e:	781a      	ldrb	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b04      	cmp	r3, #4
 8004266:	d11b      	bne.n	80042a0 <HAL_I2C_Mem_Write+0x180>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426c:	2b00      	cmp	r3, #0
 800426e:	d017      	beq.n	80042a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004274:	781a      	ldrb	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1aa      	bne.n	80041fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 ff35 	bl	800511c <I2C_WaitOnBTFFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00d      	beq.n	80042d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d107      	bne.n	80042d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e016      	b.n	8004302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	e000      	b.n	8004302 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004300:	2302      	movs	r3, #2
  }
}
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	00100002 	.word	0x00100002
 8004310:	ffff0000 	.word	0xffff0000

08004314 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08c      	sub	sp, #48	@ 0x30
 8004318:	af02      	add	r7, sp, #8
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	4608      	mov	r0, r1
 800431e:	4611      	mov	r1, r2
 8004320:	461a      	mov	r2, r3
 8004322:	4603      	mov	r3, r0
 8004324:	817b      	strh	r3, [r7, #10]
 8004326:	460b      	mov	r3, r1
 8004328:	813b      	strh	r3, [r7, #8]
 800432a:	4613      	mov	r3, r2
 800432c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004332:	f7fe fb41 	bl	80029b8 <HAL_GetTick>
 8004336:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b20      	cmp	r3, #32
 8004342:	f040 8250 	bne.w	80047e6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	2319      	movs	r3, #25
 800434c:	2201      	movs	r2, #1
 800434e:	4982      	ldr	r1, [pc, #520]	@ (8004558 <HAL_I2C_Mem_Read+0x244>)
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 fd81 	bl	8004e58 <I2C_WaitOnFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800435c:	2302      	movs	r3, #2
 800435e:	e243      	b.n	80047e8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_I2C_Mem_Read+0x5a>
 800436a:	2302      	movs	r3, #2
 800436c:	e23c      	b.n	80047e8 <HAL_I2C_Mem_Read+0x4d4>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b01      	cmp	r3, #1
 8004382:	d007      	beq.n	8004394 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2222      	movs	r2, #34	@ 0x22
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2240      	movs	r2, #64	@ 0x40
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80043c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a62      	ldr	r2, [pc, #392]	@ (800455c <HAL_I2C_Mem_Read+0x248>)
 80043d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043d6:	88f8      	ldrh	r0, [r7, #6]
 80043d8:	893a      	ldrh	r2, [r7, #8]
 80043da:	8979      	ldrh	r1, [r7, #10]
 80043dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043de:	9301      	str	r3, [sp, #4]
 80043e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	4603      	mov	r3, r0
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 fc4e 	bl	8004c88 <I2C_RequestMemoryRead>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e1f8      	b.n	80047e8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d113      	bne.n	8004426 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	61fb      	str	r3, [r7, #28]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	e1cc      	b.n	80047c0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800442a:	2b01      	cmp	r3, #1
 800442c:	d11e      	bne.n	800446c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800443c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800443e:	b672      	cpsid	i
}
 8004440:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004442:	2300      	movs	r3, #0
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004466:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004468:	b662      	cpsie	i
}
 800446a:	e035      	b.n	80044d8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004470:	2b02      	cmp	r3, #2
 8004472:	d11e      	bne.n	80044b2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004482:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004484:	b672      	cpsid	i
}
 8004486:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	617b      	str	r3, [r7, #20]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044ae:	b662      	cpsie	i
}
 80044b0:	e012      	b.n	80044d8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044c0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c2:	2300      	movs	r3, #0
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	613b      	str	r3, [r7, #16]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80044d8:	e172      	b.n	80047c0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044de:	2b03      	cmp	r3, #3
 80044e0:	f200 811f 	bhi.w	8004722 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d123      	bne.n	8004534 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fe5b 	bl	80051ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e173      	b.n	80047e8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691a      	ldr	r2, [r3, #16]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004532:	e145      	b.n	80047c0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004538:	2b02      	cmp	r3, #2
 800453a:	d152      	bne.n	80045e2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800453c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004542:	2200      	movs	r2, #0
 8004544:	4906      	ldr	r1, [pc, #24]	@ (8004560 <HAL_I2C_Mem_Read+0x24c>)
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 fc86 	bl	8004e58 <I2C_WaitOnFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d008      	beq.n	8004564 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e148      	b.n	80047e8 <HAL_I2C_Mem_Read+0x4d4>
 8004556:	bf00      	nop
 8004558:	00100002 	.word	0x00100002
 800455c:	ffff0000 	.word	0xffff0000
 8004560:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004564:	b672      	cpsid	i
}
 8004566:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004576:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691a      	ldr	r2, [r3, #16]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80045aa:	b662      	cpsie	i
}
 80045ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	691a      	ldr	r2, [r3, #16]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045e0:	e0ee      	b.n	80047c0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e8:	2200      	movs	r2, #0
 80045ea:	4981      	ldr	r1, [pc, #516]	@ (80047f0 <HAL_I2C_Mem_Read+0x4dc>)
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 fc33 	bl	8004e58 <I2C_WaitOnFlagUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0f5      	b.n	80047e8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800460a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800460c:	b672      	cpsid	i
}
 800460e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004642:	4b6c      	ldr	r3, [pc, #432]	@ (80047f4 <HAL_I2C_Mem_Read+0x4e0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	08db      	lsrs	r3, r3, #3
 8004648:	4a6b      	ldr	r2, [pc, #428]	@ (80047f8 <HAL_I2C_Mem_Read+0x4e4>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	0a1a      	lsrs	r2, r3, #8
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	00da      	lsls	r2, r3, #3
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	3b01      	subs	r3, #1
 8004660:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004662:	6a3b      	ldr	r3, [r7, #32]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d118      	bne.n	800469a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004682:	f043 0220 	orr.w	r2, r3, #32
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800468a:	b662      	cpsie	i
}
 800468c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e0a6      	b.n	80047e8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d1d9      	bne.n	800465c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80046ea:	b662      	cpsie	i
}
 80046ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004720:	e04e      	b.n	80047c0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004724:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 fd40 	bl	80051ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e058      	b.n	80047e8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b04      	cmp	r3, #4
 8004774:	d124      	bne.n	80047c0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800477a:	2b03      	cmp	r3, #3
 800477c:	d107      	bne.n	800478e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800478c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f47f ae88 	bne.w	80044da <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	e000      	b.n	80047e8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80047e6:	2302      	movs	r3, #2
  }
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3728      	adds	r7, #40	@ 0x28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	00010004 	.word	0x00010004
 80047f4:	20000004 	.word	0x20000004
 80047f8:	14f8b589 	.word	0x14f8b589

080047fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08a      	sub	sp, #40	@ 0x28
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	607a      	str	r2, [r7, #4]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	460b      	mov	r3, r1
 800480a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800480c:	f7fe f8d4 	bl	80029b8 <HAL_GetTick>
 8004810:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b20      	cmp	r3, #32
 8004820:	f040 8111 	bne.w	8004a46 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	2319      	movs	r3, #25
 800482a:	2201      	movs	r2, #1
 800482c:	4988      	ldr	r1, [pc, #544]	@ (8004a50 <HAL_I2C_IsDeviceReady+0x254>)
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fb12 	bl	8004e58 <I2C_WaitOnFlagUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800483a:	2302      	movs	r3, #2
 800483c:	e104      	b.n	8004a48 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_I2C_IsDeviceReady+0x50>
 8004848:	2302      	movs	r3, #2
 800484a:	e0fd      	b.n	8004a48 <HAL_I2C_IsDeviceReady+0x24c>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b01      	cmp	r3, #1
 8004860:	d007      	beq.n	8004872 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0201 	orr.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004880:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2224      	movs	r2, #36	@ 0x24
 8004886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4a70      	ldr	r2, [pc, #448]	@ (8004a54 <HAL_I2C_IsDeviceReady+0x258>)
 8004894:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 fad0 	bl	8004e58 <I2C_WaitOnFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00d      	beq.n	80048da <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048cc:	d103      	bne.n	80048d6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048d4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e0b6      	b.n	8004a48 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048da:	897b      	ldrh	r3, [r7, #10]
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	461a      	mov	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048e8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80048ea:	f7fe f865 	bl	80029b8 <HAL_GetTick>
 80048ee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	bf0c      	ite	eq
 80048fe:	2301      	moveq	r3, #1
 8004900:	2300      	movne	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004914:	bf0c      	ite	eq
 8004916:	2301      	moveq	r3, #1
 8004918:	2300      	movne	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800491e:	e025      	b.n	800496c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004920:	f7fe f84a 	bl	80029b8 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d302      	bcc.n	8004936 <HAL_I2C_IsDeviceReady+0x13a>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	22a0      	movs	r2, #160	@ 0xa0
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b02      	cmp	r3, #2
 800494a:	bf0c      	ite	eq
 800494c:	2301      	moveq	r3, #1
 800494e:	2300      	movne	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800495e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2ba0      	cmp	r3, #160	@ 0xa0
 8004976:	d005      	beq.n	8004984 <HAL_I2C_IsDeviceReady+0x188>
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <HAL_I2C_IsDeviceReady+0x188>
 800497e:	7dbb      	ldrb	r3, [r7, #22]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0cd      	beq.n	8004920 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b02      	cmp	r3, #2
 8004998:	d129      	bne.n	80049ee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049aa:	2300      	movs	r3, #0
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	2319      	movs	r3, #25
 80049c6:	2201      	movs	r2, #1
 80049c8:	4921      	ldr	r1, [pc, #132]	@ (8004a50 <HAL_I2C_IsDeviceReady+0x254>)
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 fa44 	bl	8004e58 <I2C_WaitOnFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e036      	b.n	8004a48 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	e02c      	b.n	8004a48 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a06:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	2319      	movs	r3, #25
 8004a0e:	2201      	movs	r2, #1
 8004a10:	490f      	ldr	r1, [pc, #60]	@ (8004a50 <HAL_I2C_IsDeviceReady+0x254>)
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 fa20 	bl	8004e58 <I2C_WaitOnFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e012      	b.n	8004a48 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	3301      	adds	r3, #1
 8004a26:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	f4ff af32 	bcc.w	8004896 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004a46:	2302      	movs	r3, #2
  }
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3720      	adds	r7, #32
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	00100002 	.word	0x00100002
 8004a54:	ffff0000 	.word	0xffff0000

08004a58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b088      	sub	sp, #32
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	460b      	mov	r3, r1
 8004a66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d006      	beq.n	8004a82 <I2C_MasterRequestWrite+0x2a>
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d003      	beq.n	8004a82 <I2C_MasterRequestWrite+0x2a>
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a80:	d108      	bne.n	8004a94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	e00b      	b.n	8004aac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a98:	2b12      	cmp	r3, #18
 8004a9a:	d107      	bne.n	8004aac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aaa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f9cd 	bl	8004e58 <I2C_WaitOnFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00d      	beq.n	8004ae0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ad2:	d103      	bne.n	8004adc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ada:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e035      	b.n	8004b4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ae8:	d108      	bne.n	8004afc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aea:	897b      	ldrh	r3, [r7, #10]
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004af8:	611a      	str	r2, [r3, #16]
 8004afa:	e01b      	b.n	8004b34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004afc:	897b      	ldrh	r3, [r7, #10]
 8004afe:	11db      	asrs	r3, r3, #7
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	f003 0306 	and.w	r3, r3, #6
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f063 030f 	orn	r3, r3, #15
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	490e      	ldr	r1, [pc, #56]	@ (8004b54 <I2C_MasterRequestWrite+0xfc>)
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fa16 	bl	8004f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e010      	b.n	8004b4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b2a:	897b      	ldrh	r3, [r7, #10]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	4907      	ldr	r1, [pc, #28]	@ (8004b58 <I2C_MasterRequestWrite+0x100>)
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fa06 	bl	8004f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	00010008 	.word	0x00010008
 8004b58:	00010002 	.word	0x00010002

08004b5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	4608      	mov	r0, r1
 8004b66:	4611      	mov	r1, r2
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	817b      	strh	r3, [r7, #10]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	813b      	strh	r3, [r7, #8]
 8004b72:	4613      	mov	r3, r2
 8004b74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f960 	bl	8004e58 <I2C_WaitOnFlagUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00d      	beq.n	8004bba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bac:	d103      	bne.n	8004bb6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e05f      	b.n	8004c7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bba:	897b      	ldrh	r3, [r7, #10]
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004bc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	6a3a      	ldr	r2, [r7, #32]
 8004bce:	492d      	ldr	r1, [pc, #180]	@ (8004c84 <I2C_RequestMemoryWrite+0x128>)
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f9bb 	bl	8004f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e04c      	b.n	8004c7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf8:	6a39      	ldr	r1, [r7, #32]
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 fa46 	bl	800508c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00d      	beq.n	8004c22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d107      	bne.n	8004c1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e02b      	b.n	8004c7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d105      	bne.n	8004c34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c28:	893b      	ldrh	r3, [r7, #8]
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	611a      	str	r2, [r3, #16]
 8004c32:	e021      	b.n	8004c78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c34:	893b      	ldrh	r3, [r7, #8]
 8004c36:	0a1b      	lsrs	r3, r3, #8
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c44:	6a39      	ldr	r1, [r7, #32]
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fa20 	bl	800508c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00d      	beq.n	8004c6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c56:	2b04      	cmp	r3, #4
 8004c58:	d107      	bne.n	8004c6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e005      	b.n	8004c7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c6e:	893b      	ldrh	r3, [r7, #8]
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	00010002 	.word	0x00010002

08004c88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	4608      	mov	r0, r1
 8004c92:	4611      	mov	r1, r2
 8004c94:	461a      	mov	r2, r3
 8004c96:	4603      	mov	r3, r0
 8004c98:	817b      	strh	r3, [r7, #10]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	813b      	strh	r3, [r7, #8]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cb0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 f8c2 	bl	8004e58 <I2C_WaitOnFlagUntilTimeout>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00d      	beq.n	8004cf6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ce8:	d103      	bne.n	8004cf2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cf0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e0aa      	b.n	8004e4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cf6:	897b      	ldrh	r3, [r7, #10]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	6a3a      	ldr	r2, [r7, #32]
 8004d0a:	4952      	ldr	r1, [pc, #328]	@ (8004e54 <I2C_RequestMemoryRead+0x1cc>)
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 f91d 	bl	8004f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e097      	b.n	8004e4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d34:	6a39      	ldr	r1, [r7, #32]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 f9a8 	bl	800508c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00d      	beq.n	8004d5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d107      	bne.n	8004d5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e076      	b.n	8004e4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d5e:	88fb      	ldrh	r3, [r7, #6]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d105      	bne.n	8004d70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d64:	893b      	ldrh	r3, [r7, #8]
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	611a      	str	r2, [r3, #16]
 8004d6e:	e021      	b.n	8004db4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d70:	893b      	ldrh	r3, [r7, #8]
 8004d72:	0a1b      	lsrs	r3, r3, #8
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d80:	6a39      	ldr	r1, [r7, #32]
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f982 	bl	800508c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00d      	beq.n	8004daa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d92:	2b04      	cmp	r3, #4
 8004d94:	d107      	bne.n	8004da6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004da4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e050      	b.n	8004e4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004daa:	893b      	ldrh	r3, [r7, #8]
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004db6:	6a39      	ldr	r1, [r7, #32]
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f967 	bl	800508c <I2C_WaitOnTXEFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00d      	beq.n	8004de0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d107      	bne.n	8004ddc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e035      	b.n	8004e4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f82b 	bl	8004e58 <I2C_WaitOnFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00d      	beq.n	8004e24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e16:	d103      	bne.n	8004e20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e013      	b.n	8004e4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e24:	897b      	ldrh	r3, [r7, #10]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e36:	6a3a      	ldr	r2, [r7, #32]
 8004e38:	4906      	ldr	r1, [pc, #24]	@ (8004e54 <I2C_RequestMemoryRead+0x1cc>)
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f886 	bl	8004f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	00010002 	.word	0x00010002

08004e58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	603b      	str	r3, [r7, #0]
 8004e64:	4613      	mov	r3, r2
 8004e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e68:	e048      	b.n	8004efc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e70:	d044      	beq.n	8004efc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e72:	f7fd fda1 	bl	80029b8 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d302      	bcc.n	8004e88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d139      	bne.n	8004efc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	0c1b      	lsrs	r3, r3, #16
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d10d      	bne.n	8004eae <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	43da      	mvns	r2, r3
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	bf0c      	ite	eq
 8004ea4:	2301      	moveq	r3, #1
 8004ea6:	2300      	movne	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	461a      	mov	r2, r3
 8004eac:	e00c      	b.n	8004ec8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	43da      	mvns	r2, r3
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	bf0c      	ite	eq
 8004ec0:	2301      	moveq	r3, #1
 8004ec2:	2300      	movne	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d116      	bne.n	8004efc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee8:	f043 0220 	orr.w	r2, r3, #32
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e023      	b.n	8004f44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	0c1b      	lsrs	r3, r3, #16
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d10d      	bne.n	8004f22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	43da      	mvns	r2, r3
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4013      	ands	r3, r2
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bf0c      	ite	eq
 8004f18:	2301      	moveq	r3, #1
 8004f1a:	2300      	movne	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	461a      	mov	r2, r3
 8004f20:	e00c      	b.n	8004f3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	43da      	mvns	r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bf0c      	ite	eq
 8004f34:	2301      	moveq	r3, #1
 8004f36:	2300      	movne	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d093      	beq.n	8004e6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f5a:	e071      	b.n	8005040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6a:	d123      	bne.n	8004fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa0:	f043 0204 	orr.w	r2, r3, #4
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e067      	b.n	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d041      	beq.n	8005040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fbc:	f7fd fcfc 	bl	80029b8 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d302      	bcc.n	8004fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d136      	bne.n	8005040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	0c1b      	lsrs	r3, r3, #16
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d10c      	bne.n	8004ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	43da      	mvns	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	bf14      	ite	ne
 8004fee:	2301      	movne	r3, #1
 8004ff0:	2300      	moveq	r3, #0
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	e00b      	b.n	800500e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	43da      	mvns	r2, r3
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	4013      	ands	r3, r2
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	bf14      	ite	ne
 8005008:	2301      	movne	r3, #1
 800500a:	2300      	moveq	r3, #0
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d016      	beq.n	8005040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502c:	f043 0220 	orr.w	r2, r3, #32
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e021      	b.n	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	0c1b      	lsrs	r3, r3, #16
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b01      	cmp	r3, #1
 8005048:	d10c      	bne.n	8005064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	43da      	mvns	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	4013      	ands	r3, r2
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	bf14      	ite	ne
 800505c:	2301      	movne	r3, #1
 800505e:	2300      	moveq	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	e00b      	b.n	800507c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	43da      	mvns	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4013      	ands	r3, r2
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	bf14      	ite	ne
 8005076:	2301      	movne	r3, #1
 8005078:	2300      	moveq	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	f47f af6d 	bne.w	8004f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005098:	e034      	b.n	8005104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f8e3 	bl	8005266 <I2C_IsAcknowledgeFailed>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e034      	b.n	8005114 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b0:	d028      	beq.n	8005104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b2:	f7fd fc81 	bl	80029b8 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d302      	bcc.n	80050c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d11d      	bne.n	8005104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d2:	2b80      	cmp	r3, #128	@ 0x80
 80050d4:	d016      	beq.n	8005104 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f0:	f043 0220 	orr.w	r2, r3, #32
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e007      	b.n	8005114 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800510e:	2b80      	cmp	r3, #128	@ 0x80
 8005110:	d1c3      	bne.n	800509a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005128:	e034      	b.n	8005194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 f89b 	bl	8005266 <I2C_IsAcknowledgeFailed>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e034      	b.n	80051a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005140:	d028      	beq.n	8005194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005142:	f7fd fc39 	bl	80029b8 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	429a      	cmp	r2, r3
 8005150:	d302      	bcc.n	8005158 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d11d      	bne.n	8005194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b04      	cmp	r3, #4
 8005164:	d016      	beq.n	8005194 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005180:	f043 0220 	orr.w	r2, r3, #32
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e007      	b.n	80051a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d1c3      	bne.n	800512a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051b8:	e049      	b.n	800524e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	2b10      	cmp	r3, #16
 80051c6:	d119      	bne.n	80051fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0210 	mvn.w	r2, #16
 80051d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e030      	b.n	800525e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fc:	f7fd fbdc 	bl	80029b8 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	429a      	cmp	r2, r3
 800520a:	d302      	bcc.n	8005212 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d11d      	bne.n	800524e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800521c:	2b40      	cmp	r3, #64	@ 0x40
 800521e:	d016      	beq.n	800524e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523a:	f043 0220 	orr.w	r2, r3, #32
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e007      	b.n	800525e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005258:	2b40      	cmp	r3, #64	@ 0x40
 800525a:	d1ae      	bne.n	80051ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800527c:	d11b      	bne.n	80052b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005286:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2220      	movs	r2, #32
 8005292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a2:	f043 0204 	orr.w	r2, r3, #4
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	bc80      	pop	{r7}
 80052c0:	4770      	bx	lr
	...

080052c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e272      	b.n	80057bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 8087 	beq.w	80053f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052e4:	4b92      	ldr	r3, [pc, #584]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f003 030c 	and.w	r3, r3, #12
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d00c      	beq.n	800530a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80052f0:	4b8f      	ldr	r3, [pc, #572]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 030c 	and.w	r3, r3, #12
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d112      	bne.n	8005322 <HAL_RCC_OscConfig+0x5e>
 80052fc:	4b8c      	ldr	r3, [pc, #560]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005308:	d10b      	bne.n	8005322 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530a:	4b89      	ldr	r3, [pc, #548]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d06c      	beq.n	80053f0 <HAL_RCC_OscConfig+0x12c>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d168      	bne.n	80053f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e24c      	b.n	80057bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800532a:	d106      	bne.n	800533a <HAL_RCC_OscConfig+0x76>
 800532c:	4b80      	ldr	r3, [pc, #512]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a7f      	ldr	r2, [pc, #508]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	e02e      	b.n	8005398 <HAL_RCC_OscConfig+0xd4>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10c      	bne.n	800535c <HAL_RCC_OscConfig+0x98>
 8005342:	4b7b      	ldr	r3, [pc, #492]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a7a      	ldr	r2, [pc, #488]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	4b78      	ldr	r3, [pc, #480]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a77      	ldr	r2, [pc, #476]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005354:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	e01d      	b.n	8005398 <HAL_RCC_OscConfig+0xd4>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005364:	d10c      	bne.n	8005380 <HAL_RCC_OscConfig+0xbc>
 8005366:	4b72      	ldr	r3, [pc, #456]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a71      	ldr	r2, [pc, #452]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 800536c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	4b6f      	ldr	r3, [pc, #444]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a6e      	ldr	r2, [pc, #440]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	e00b      	b.n	8005398 <HAL_RCC_OscConfig+0xd4>
 8005380:	4b6b      	ldr	r3, [pc, #428]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a6a      	ldr	r2, [pc, #424]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	4b68      	ldr	r3, [pc, #416]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a67      	ldr	r2, [pc, #412]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005396:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d013      	beq.n	80053c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a0:	f7fd fb0a 	bl	80029b8 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053a8:	f7fd fb06 	bl	80029b8 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b64      	cmp	r3, #100	@ 0x64
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e200      	b.n	80057bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ba:	4b5d      	ldr	r3, [pc, #372]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0f0      	beq.n	80053a8 <HAL_RCC_OscConfig+0xe4>
 80053c6:	e014      	b.n	80053f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c8:	f7fd faf6 	bl	80029b8 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053d0:	f7fd faf2 	bl	80029b8 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b64      	cmp	r3, #100	@ 0x64
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e1ec      	b.n	80057bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053e2:	4b53      	ldr	r3, [pc, #332]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0x10c>
 80053ee:	e000      	b.n	80053f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d063      	beq.n	80054c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053fe:	4b4c      	ldr	r3, [pc, #304]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 030c 	and.w	r3, r3, #12
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800540a:	4b49      	ldr	r3, [pc, #292]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f003 030c 	and.w	r3, r3, #12
 8005412:	2b08      	cmp	r3, #8
 8005414:	d11c      	bne.n	8005450 <HAL_RCC_OscConfig+0x18c>
 8005416:	4b46      	ldr	r3, [pc, #280]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d116      	bne.n	8005450 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005422:	4b43      	ldr	r3, [pc, #268]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <HAL_RCC_OscConfig+0x176>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d001      	beq.n	800543a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e1c0      	b.n	80057bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800543a:	4b3d      	ldr	r3, [pc, #244]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4939      	ldr	r1, [pc, #228]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 800544a:	4313      	orrs	r3, r2
 800544c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800544e:	e03a      	b.n	80054c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d020      	beq.n	800549a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005458:	4b36      	ldr	r3, [pc, #216]	@ (8005534 <HAL_RCC_OscConfig+0x270>)
 800545a:	2201      	movs	r2, #1
 800545c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800545e:	f7fd faab 	bl	80029b8 <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005464:	e008      	b.n	8005478 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005466:	f7fd faa7 	bl	80029b8 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e1a1      	b.n	80057bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005478:	4b2d      	ldr	r3, [pc, #180]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d0f0      	beq.n	8005466 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005484:	4b2a      	ldr	r3, [pc, #168]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	4927      	ldr	r1, [pc, #156]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 8005494:	4313      	orrs	r3, r2
 8005496:	600b      	str	r3, [r1, #0]
 8005498:	e015      	b.n	80054c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800549a:	4b26      	ldr	r3, [pc, #152]	@ (8005534 <HAL_RCC_OscConfig+0x270>)
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a0:	f7fd fa8a 	bl	80029b8 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a8:	f7fd fa86 	bl	80029b8 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e180      	b.n	80057bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f0      	bne.n	80054a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d03a      	beq.n	8005548 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d019      	beq.n	800550e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054da:	4b17      	ldr	r3, [pc, #92]	@ (8005538 <HAL_RCC_OscConfig+0x274>)
 80054dc:	2201      	movs	r2, #1
 80054de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054e0:	f7fd fa6a 	bl	80029b8 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054e8:	f7fd fa66 	bl	80029b8 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e160      	b.n	80057bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005530 <HAL_RCC_OscConfig+0x26c>)
 80054fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0f0      	beq.n	80054e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005506:	2001      	movs	r0, #1
 8005508:	f000 faba 	bl	8005a80 <RCC_Delay>
 800550c:	e01c      	b.n	8005548 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800550e:	4b0a      	ldr	r3, [pc, #40]	@ (8005538 <HAL_RCC_OscConfig+0x274>)
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005514:	f7fd fa50 	bl	80029b8 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800551a:	e00f      	b.n	800553c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800551c:	f7fd fa4c 	bl	80029b8 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d908      	bls.n	800553c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e146      	b.n	80057bc <HAL_RCC_OscConfig+0x4f8>
 800552e:	bf00      	nop
 8005530:	40021000 	.word	0x40021000
 8005534:	42420000 	.word	0x42420000
 8005538:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800553c:	4b92      	ldr	r3, [pc, #584]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 800553e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e9      	bne.n	800551c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 80a6 	beq.w	80056a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005556:	2300      	movs	r3, #0
 8005558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800555a:	4b8b      	ldr	r3, [pc, #556]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10d      	bne.n	8005582 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005566:	4b88      	ldr	r3, [pc, #544]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	4a87      	ldr	r2, [pc, #540]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 800556c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005570:	61d3      	str	r3, [r2, #28]
 8005572:	4b85      	ldr	r3, [pc, #532]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800557a:	60bb      	str	r3, [r7, #8]
 800557c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800557e:	2301      	movs	r3, #1
 8005580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005582:	4b82      	ldr	r3, [pc, #520]	@ (800578c <HAL_RCC_OscConfig+0x4c8>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800558a:	2b00      	cmp	r3, #0
 800558c:	d118      	bne.n	80055c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800558e:	4b7f      	ldr	r3, [pc, #508]	@ (800578c <HAL_RCC_OscConfig+0x4c8>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a7e      	ldr	r2, [pc, #504]	@ (800578c <HAL_RCC_OscConfig+0x4c8>)
 8005594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800559a:	f7fd fa0d 	bl	80029b8 <HAL_GetTick>
 800559e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a0:	e008      	b.n	80055b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a2:	f7fd fa09 	bl	80029b8 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b64      	cmp	r3, #100	@ 0x64
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e103      	b.n	80057bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b4:	4b75      	ldr	r3, [pc, #468]	@ (800578c <HAL_RCC_OscConfig+0x4c8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0f0      	beq.n	80055a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d106      	bne.n	80055d6 <HAL_RCC_OscConfig+0x312>
 80055c8:	4b6f      	ldr	r3, [pc, #444]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	4a6e      	ldr	r2, [pc, #440]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 80055ce:	f043 0301 	orr.w	r3, r3, #1
 80055d2:	6213      	str	r3, [r2, #32]
 80055d4:	e02d      	b.n	8005632 <HAL_RCC_OscConfig+0x36e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10c      	bne.n	80055f8 <HAL_RCC_OscConfig+0x334>
 80055de:	4b6a      	ldr	r3, [pc, #424]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	4a69      	ldr	r2, [pc, #420]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	6213      	str	r3, [r2, #32]
 80055ea:	4b67      	ldr	r3, [pc, #412]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	4a66      	ldr	r2, [pc, #408]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 80055f0:	f023 0304 	bic.w	r3, r3, #4
 80055f4:	6213      	str	r3, [r2, #32]
 80055f6:	e01c      	b.n	8005632 <HAL_RCC_OscConfig+0x36e>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	2b05      	cmp	r3, #5
 80055fe:	d10c      	bne.n	800561a <HAL_RCC_OscConfig+0x356>
 8005600:	4b61      	ldr	r3, [pc, #388]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	4a60      	ldr	r2, [pc, #384]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 8005606:	f043 0304 	orr.w	r3, r3, #4
 800560a:	6213      	str	r3, [r2, #32]
 800560c:	4b5e      	ldr	r3, [pc, #376]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	4a5d      	ldr	r2, [pc, #372]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	6213      	str	r3, [r2, #32]
 8005618:	e00b      	b.n	8005632 <HAL_RCC_OscConfig+0x36e>
 800561a:	4b5b      	ldr	r3, [pc, #364]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	4a5a      	ldr	r2, [pc, #360]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	6213      	str	r3, [r2, #32]
 8005626:	4b58      	ldr	r3, [pc, #352]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	4a57      	ldr	r2, [pc, #348]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 800562c:	f023 0304 	bic.w	r3, r3, #4
 8005630:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d015      	beq.n	8005666 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800563a:	f7fd f9bd 	bl	80029b8 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005640:	e00a      	b.n	8005658 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005642:	f7fd f9b9 	bl	80029b8 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005650:	4293      	cmp	r3, r2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e0b1      	b.n	80057bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005658:	4b4b      	ldr	r3, [pc, #300]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0ee      	beq.n	8005642 <HAL_RCC_OscConfig+0x37e>
 8005664:	e014      	b.n	8005690 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005666:	f7fd f9a7 	bl	80029b8 <HAL_GetTick>
 800566a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800566c:	e00a      	b.n	8005684 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800566e:	f7fd f9a3 	bl	80029b8 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800567c:	4293      	cmp	r3, r2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e09b      	b.n	80057bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005684:	4b40      	ldr	r3, [pc, #256]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1ee      	bne.n	800566e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005690:	7dfb      	ldrb	r3, [r7, #23]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d105      	bne.n	80056a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005696:	4b3c      	ldr	r3, [pc, #240]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	4a3b      	ldr	r2, [pc, #236]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 800569c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 8087 	beq.w	80057ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056ac:	4b36      	ldr	r3, [pc, #216]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f003 030c 	and.w	r3, r3, #12
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d061      	beq.n	800577c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d146      	bne.n	800574e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c0:	4b33      	ldr	r3, [pc, #204]	@ (8005790 <HAL_RCC_OscConfig+0x4cc>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c6:	f7fd f977 	bl	80029b8 <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056cc:	e008      	b.n	80056e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ce:	f7fd f973 	bl	80029b8 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d901      	bls.n	80056e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e06d      	b.n	80057bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056e0:	4b29      	ldr	r3, [pc, #164]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f0      	bne.n	80056ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056f4:	d108      	bne.n	8005708 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80056f6:	4b24      	ldr	r3, [pc, #144]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	4921      	ldr	r1, [pc, #132]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 8005704:	4313      	orrs	r3, r2
 8005706:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005708:	4b1f      	ldr	r3, [pc, #124]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a19      	ldr	r1, [r3, #32]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005718:	430b      	orrs	r3, r1
 800571a:	491b      	ldr	r1, [pc, #108]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 800571c:	4313      	orrs	r3, r2
 800571e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005720:	4b1b      	ldr	r3, [pc, #108]	@ (8005790 <HAL_RCC_OscConfig+0x4cc>)
 8005722:	2201      	movs	r2, #1
 8005724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005726:	f7fd f947 	bl	80029b8 <HAL_GetTick>
 800572a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800572e:	f7fd f943 	bl	80029b8 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e03d      	b.n	80057bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005740:	4b11      	ldr	r3, [pc, #68]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0f0      	beq.n	800572e <HAL_RCC_OscConfig+0x46a>
 800574c:	e035      	b.n	80057ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800574e:	4b10      	ldr	r3, [pc, #64]	@ (8005790 <HAL_RCC_OscConfig+0x4cc>)
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005754:	f7fd f930 	bl	80029b8 <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800575c:	f7fd f92c 	bl	80029b8 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e026      	b.n	80057bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800576e:	4b06      	ldr	r3, [pc, #24]	@ (8005788 <HAL_RCC_OscConfig+0x4c4>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f0      	bne.n	800575c <HAL_RCC_OscConfig+0x498>
 800577a:	e01e      	b.n	80057ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d107      	bne.n	8005794 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e019      	b.n	80057bc <HAL_RCC_OscConfig+0x4f8>
 8005788:	40021000 	.word	0x40021000
 800578c:	40007000 	.word	0x40007000
 8005790:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005794:	4b0b      	ldr	r3, [pc, #44]	@ (80057c4 <HAL_RCC_OscConfig+0x500>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d106      	bne.n	80057b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d001      	beq.n	80057ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e000      	b.n	80057bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40021000 	.word	0x40021000

080057c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e0d0      	b.n	800597e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057dc:	4b6a      	ldr	r3, [pc, #424]	@ (8005988 <HAL_RCC_ClockConfig+0x1c0>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d910      	bls.n	800580c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ea:	4b67      	ldr	r3, [pc, #412]	@ (8005988 <HAL_RCC_ClockConfig+0x1c0>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f023 0207 	bic.w	r2, r3, #7
 80057f2:	4965      	ldr	r1, [pc, #404]	@ (8005988 <HAL_RCC_ClockConfig+0x1c0>)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057fa:	4b63      	ldr	r3, [pc, #396]	@ (8005988 <HAL_RCC_ClockConfig+0x1c0>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d001      	beq.n	800580c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e0b8      	b.n	800597e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d020      	beq.n	800585a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005824:	4b59      	ldr	r3, [pc, #356]	@ (800598c <HAL_RCC_ClockConfig+0x1c4>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	4a58      	ldr	r2, [pc, #352]	@ (800598c <HAL_RCC_ClockConfig+0x1c4>)
 800582a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800582e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b00      	cmp	r3, #0
 800583a:	d005      	beq.n	8005848 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800583c:	4b53      	ldr	r3, [pc, #332]	@ (800598c <HAL_RCC_ClockConfig+0x1c4>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	4a52      	ldr	r2, [pc, #328]	@ (800598c <HAL_RCC_ClockConfig+0x1c4>)
 8005842:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005846:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005848:	4b50      	ldr	r3, [pc, #320]	@ (800598c <HAL_RCC_ClockConfig+0x1c4>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	494d      	ldr	r1, [pc, #308]	@ (800598c <HAL_RCC_ClockConfig+0x1c4>)
 8005856:	4313      	orrs	r3, r2
 8005858:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d040      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d107      	bne.n	800587e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800586e:	4b47      	ldr	r3, [pc, #284]	@ (800598c <HAL_RCC_ClockConfig+0x1c4>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d115      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e07f      	b.n	800597e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b02      	cmp	r3, #2
 8005884:	d107      	bne.n	8005896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005886:	4b41      	ldr	r3, [pc, #260]	@ (800598c <HAL_RCC_ClockConfig+0x1c4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d109      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e073      	b.n	800597e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005896:	4b3d      	ldr	r3, [pc, #244]	@ (800598c <HAL_RCC_ClockConfig+0x1c4>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e06b      	b.n	800597e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058a6:	4b39      	ldr	r3, [pc, #228]	@ (800598c <HAL_RCC_ClockConfig+0x1c4>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f023 0203 	bic.w	r2, r3, #3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	4936      	ldr	r1, [pc, #216]	@ (800598c <HAL_RCC_ClockConfig+0x1c4>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058b8:	f7fd f87e 	bl	80029b8 <HAL_GetTick>
 80058bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058be:	e00a      	b.n	80058d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058c0:	f7fd f87a 	bl	80029b8 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e053      	b.n	800597e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d6:	4b2d      	ldr	r3, [pc, #180]	@ (800598c <HAL_RCC_ClockConfig+0x1c4>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f003 020c 	and.w	r2, r3, #12
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d1eb      	bne.n	80058c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058e8:	4b27      	ldr	r3, [pc, #156]	@ (8005988 <HAL_RCC_ClockConfig+0x1c0>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d210      	bcs.n	8005918 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f6:	4b24      	ldr	r3, [pc, #144]	@ (8005988 <HAL_RCC_ClockConfig+0x1c0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f023 0207 	bic.w	r2, r3, #7
 80058fe:	4922      	ldr	r1, [pc, #136]	@ (8005988 <HAL_RCC_ClockConfig+0x1c0>)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	4313      	orrs	r3, r2
 8005904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005906:	4b20      	ldr	r3, [pc, #128]	@ (8005988 <HAL_RCC_ClockConfig+0x1c0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d001      	beq.n	8005918 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e032      	b.n	800597e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005924:	4b19      	ldr	r3, [pc, #100]	@ (800598c <HAL_RCC_ClockConfig+0x1c4>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	4916      	ldr	r1, [pc, #88]	@ (800598c <HAL_RCC_ClockConfig+0x1c4>)
 8005932:	4313      	orrs	r3, r2
 8005934:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	2b00      	cmp	r3, #0
 8005940:	d009      	beq.n	8005956 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005942:	4b12      	ldr	r3, [pc, #72]	@ (800598c <HAL_RCC_ClockConfig+0x1c4>)
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	490e      	ldr	r1, [pc, #56]	@ (800598c <HAL_RCC_ClockConfig+0x1c4>)
 8005952:	4313      	orrs	r3, r2
 8005954:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005956:	f000 f821 	bl	800599c <HAL_RCC_GetSysClockFreq>
 800595a:	4602      	mov	r2, r0
 800595c:	4b0b      	ldr	r3, [pc, #44]	@ (800598c <HAL_RCC_ClockConfig+0x1c4>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	091b      	lsrs	r3, r3, #4
 8005962:	f003 030f 	and.w	r3, r3, #15
 8005966:	490a      	ldr	r1, [pc, #40]	@ (8005990 <HAL_RCC_ClockConfig+0x1c8>)
 8005968:	5ccb      	ldrb	r3, [r1, r3]
 800596a:	fa22 f303 	lsr.w	r3, r2, r3
 800596e:	4a09      	ldr	r2, [pc, #36]	@ (8005994 <HAL_RCC_ClockConfig+0x1cc>)
 8005970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005972:	4b09      	ldr	r3, [pc, #36]	@ (8005998 <HAL_RCC_ClockConfig+0x1d0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f7fc ffdc 	bl	8002934 <HAL_InitTick>

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40022000 	.word	0x40022000
 800598c:	40021000 	.word	0x40021000
 8005990:	08009738 	.word	0x08009738
 8005994:	20000004 	.word	0x20000004
 8005998:	20000008 	.word	0x20000008

0800599c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	2300      	movs	r3, #0
 80059a8:	60bb      	str	r3, [r7, #8]
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]
 80059ae:	2300      	movs	r3, #0
 80059b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80059b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005a30 <HAL_RCC_GetSysClockFreq+0x94>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f003 030c 	and.w	r3, r3, #12
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d002      	beq.n	80059cc <HAL_RCC_GetSysClockFreq+0x30>
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d003      	beq.n	80059d2 <HAL_RCC_GetSysClockFreq+0x36>
 80059ca:	e027      	b.n	8005a1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059cc:	4b19      	ldr	r3, [pc, #100]	@ (8005a34 <HAL_RCC_GetSysClockFreq+0x98>)
 80059ce:	613b      	str	r3, [r7, #16]
      break;
 80059d0:	e027      	b.n	8005a22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	0c9b      	lsrs	r3, r3, #18
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	4a17      	ldr	r2, [pc, #92]	@ (8005a38 <HAL_RCC_GetSysClockFreq+0x9c>)
 80059dc:	5cd3      	ldrb	r3, [r2, r3]
 80059de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d010      	beq.n	8005a0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80059ea:	4b11      	ldr	r3, [pc, #68]	@ (8005a30 <HAL_RCC_GetSysClockFreq+0x94>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	0c5b      	lsrs	r3, r3, #17
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	4a11      	ldr	r2, [pc, #68]	@ (8005a3c <HAL_RCC_GetSysClockFreq+0xa0>)
 80059f6:	5cd3      	ldrb	r3, [r2, r3]
 80059f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005a34 <HAL_RCC_GetSysClockFreq+0x98>)
 80059fe:	fb03 f202 	mul.w	r2, r3, r2
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	e004      	b.n	8005a16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a10:	fb02 f303 	mul.w	r3, r2, r3
 8005a14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	613b      	str	r3, [r7, #16]
      break;
 8005a1a:	e002      	b.n	8005a22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a1c:	4b05      	ldr	r3, [pc, #20]	@ (8005a34 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a1e:	613b      	str	r3, [r7, #16]
      break;
 8005a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a22:	693b      	ldr	r3, [r7, #16]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	371c      	adds	r7, #28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bc80      	pop	{r7}
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	40021000 	.word	0x40021000
 8005a34:	007a1200 	.word	0x007a1200
 8005a38:	08009750 	.word	0x08009750
 8005a3c:	08009760 	.word	0x08009760
 8005a40:	003d0900 	.word	0x003d0900

08005a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a48:	4b02      	ldr	r3, [pc, #8]	@ (8005a54 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr
 8005a54:	20000004 	.word	0x20000004

08005a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a5c:	f7ff fff2 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 8005a60:	4602      	mov	r2, r0
 8005a62:	4b05      	ldr	r3, [pc, #20]	@ (8005a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	0a1b      	lsrs	r3, r3, #8
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	4903      	ldr	r1, [pc, #12]	@ (8005a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a6e:	5ccb      	ldrb	r3, [r1, r3]
 8005a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	08009748 	.word	0x08009748

08005a80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a88:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab4 <RCC_Delay+0x34>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ab8 <RCC_Delay+0x38>)
 8005a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a92:	0a5b      	lsrs	r3, r3, #9
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	fb02 f303 	mul.w	r3, r2, r3
 8005a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a9c:	bf00      	nop
  }
  while (Delay --);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	1e5a      	subs	r2, r3, #1
 8005aa2:	60fa      	str	r2, [r7, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1f9      	bne.n	8005a9c <RCC_Delay+0x1c>
}
 8005aa8:	bf00      	nop
 8005aaa:	bf00      	nop
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bc80      	pop	{r7}
 8005ab2:	4770      	bx	lr
 8005ab4:	20000004 	.word	0x20000004
 8005ab8:	10624dd3 	.word	0x10624dd3

08005abc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d07d      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005adc:	4b4f      	ldr	r3, [pc, #316]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10d      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae8:	4b4c      	ldr	r3, [pc, #304]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	4a4b      	ldr	r2, [pc, #300]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005aee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005af2:	61d3      	str	r3, [r2, #28]
 8005af4:	4b49      	ldr	r3, [pc, #292]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005afc:	60bb      	str	r3, [r7, #8]
 8005afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b00:	2301      	movs	r3, #1
 8005b02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b04:	4b46      	ldr	r3, [pc, #280]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d118      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b10:	4b43      	ldr	r3, [pc, #268]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a42      	ldr	r2, [pc, #264]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b1c:	f7fc ff4c 	bl	80029b8 <HAL_GetTick>
 8005b20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b22:	e008      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b24:	f7fc ff48 	bl	80029b8 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b64      	cmp	r3, #100	@ 0x64
 8005b30:	d901      	bls.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e06d      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b36:	4b3a      	ldr	r3, [pc, #232]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0f0      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b42:	4b36      	ldr	r3, [pc, #216]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d02e      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d027      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b60:	4b2e      	ldr	r3, [pc, #184]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b70:	4b2c      	ldr	r3, [pc, #176]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b76:	4a29      	ldr	r2, [pc, #164]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d014      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b86:	f7fc ff17 	bl	80029b8 <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b8c:	e00a      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b8e:	f7fc ff13 	bl	80029b8 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e036      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ba6:	6a1b      	ldr	r3, [r3, #32]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0ee      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4917      	ldr	r1, [pc, #92]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d105      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bc8:	4b14      	ldr	r3, [pc, #80]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	4a13      	ldr	r2, [pc, #76]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d008      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005be0:	4b0e      	ldr	r3, [pc, #56]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	490b      	ldr	r1, [pc, #44]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d008      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bfe:	4b07      	ldr	r3, [pc, #28]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	4904      	ldr	r1, [pc, #16]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3718      	adds	r7, #24
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	40021000 	.word	0x40021000
 8005c20:	40007000 	.word	0x40007000
 8005c24:	42420440 	.word	0x42420440

08005c28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e076      	b.n	8005d28 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d108      	bne.n	8005c54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c4a:	d009      	beq.n	8005c60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	61da      	str	r2, [r3, #28]
 8005c52:	e005      	b.n	8005c60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d106      	bne.n	8005c80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7fc fc5e 	bl	800253c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	431a      	orrs	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	431a      	orrs	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce4:	ea42 0103 	orr.w	r1, r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	0c1a      	lsrs	r2, r3, #16
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f002 0204 	and.w	r2, r2, #4
 8005d06:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69da      	ldr	r2, [r3, #28]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	603b      	str	r3, [r7, #0]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d40:	f7fc fe3a 	bl	80029b8 <HAL_GetTick>
 8005d44:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005d46:	88fb      	ldrh	r3, [r7, #6]
 8005d48:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d001      	beq.n	8005d5a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005d56:	2302      	movs	r3, #2
 8005d58:	e12a      	b.n	8005fb0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <HAL_SPI_Transmit+0x36>
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e122      	b.n	8005fb0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_SPI_Transmit+0x48>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e11b      	b.n	8005fb0 <HAL_SPI_Transmit+0x280>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2203      	movs	r2, #3
 8005d84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	88fa      	ldrh	r2, [r7, #6]
 8005d98:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	88fa      	ldrh	r2, [r7, #6]
 8005d9e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dc6:	d10f      	bne.n	8005de8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dd6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005de6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df2:	2b40      	cmp	r3, #64	@ 0x40
 8005df4:	d007      	beq.n	8005e06 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e0e:	d152      	bne.n	8005eb6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <HAL_SPI_Transmit+0xee>
 8005e18:	8b7b      	ldrh	r3, [r7, #26]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d145      	bne.n	8005eaa <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e22:	881a      	ldrh	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2e:	1c9a      	adds	r2, r3, #2
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e42:	e032      	b.n	8005eaa <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d112      	bne.n	8005e78 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e56:	881a      	ldrh	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e62:	1c9a      	adds	r2, r3, #2
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e76:	e018      	b.n	8005eaa <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e78:	f7fc fd9e 	bl	80029b8 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d803      	bhi.n	8005e90 <HAL_SPI_Transmit+0x160>
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8e:	d102      	bne.n	8005e96 <HAL_SPI_Transmit+0x166>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d109      	bne.n	8005eaa <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e082      	b.n	8005fb0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1c7      	bne.n	8005e44 <HAL_SPI_Transmit+0x114>
 8005eb4:	e053      	b.n	8005f5e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <HAL_SPI_Transmit+0x194>
 8005ebe:	8b7b      	ldrh	r3, [r7, #26]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d147      	bne.n	8005f54 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	330c      	adds	r3, #12
 8005ece:	7812      	ldrb	r2, [r2, #0]
 8005ed0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005eea:	e033      	b.n	8005f54 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d113      	bne.n	8005f22 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	330c      	adds	r3, #12
 8005f04:	7812      	ldrb	r2, [r2, #0]
 8005f06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f20:	e018      	b.n	8005f54 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f22:	f7fc fd49 	bl	80029b8 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d803      	bhi.n	8005f3a <HAL_SPI_Transmit+0x20a>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f38:	d102      	bne.n	8005f40 <HAL_SPI_Transmit+0x210>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d109      	bne.n	8005f54 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e02d      	b.n	8005fb0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1c6      	bne.n	8005eec <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	6839      	ldr	r1, [r7, #0]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 fa5a 	bl	800641c <SPI_EndRxTxTransaction>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2220      	movs	r2, #32
 8005f72:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10a      	bne.n	8005f92 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005fae:	2300      	movs	r3, #0
  }
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3720      	adds	r7, #32
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	@ 0x28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
 8005fc4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fca:	f7fc fcf5 	bl	80029b8 <HAL_GetTick>
 8005fce:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fd6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005fde:	887b      	ldrh	r3, [r7, #2]
 8005fe0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005fe2:	7ffb      	ldrb	r3, [r7, #31]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d00c      	beq.n	8006002 <HAL_SPI_TransmitReceive+0x4a>
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fee:	d106      	bne.n	8005ffe <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d102      	bne.n	8005ffe <HAL_SPI_TransmitReceive+0x46>
 8005ff8:	7ffb      	ldrb	r3, [r7, #31]
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d001      	beq.n	8006002 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005ffe:	2302      	movs	r3, #2
 8006000:	e17f      	b.n	8006302 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d005      	beq.n	8006014 <HAL_SPI_TransmitReceive+0x5c>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <HAL_SPI_TransmitReceive+0x5c>
 800600e:	887b      	ldrh	r3, [r7, #2]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e174      	b.n	8006302 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800601e:	2b01      	cmp	r3, #1
 8006020:	d101      	bne.n	8006026 <HAL_SPI_TransmitReceive+0x6e>
 8006022:	2302      	movs	r3, #2
 8006024:	e16d      	b.n	8006302 <HAL_SPI_TransmitReceive+0x34a>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b04      	cmp	r3, #4
 8006038:	d003      	beq.n	8006042 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2205      	movs	r2, #5
 800603e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	887a      	ldrh	r2, [r7, #2]
 8006052:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	887a      	ldrh	r2, [r7, #2]
 8006058:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	887a      	ldrh	r2, [r7, #2]
 8006064:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	887a      	ldrh	r2, [r7, #2]
 800606a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006082:	2b40      	cmp	r3, #64	@ 0x40
 8006084:	d007      	beq.n	8006096 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006094:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800609e:	d17e      	bne.n	800619e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <HAL_SPI_TransmitReceive+0xf6>
 80060a8:	8afb      	ldrh	r3, [r7, #22]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d16c      	bne.n	8006188 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b2:	881a      	ldrh	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060be:	1c9a      	adds	r2, r3, #2
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	3b01      	subs	r3, #1
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060d2:	e059      	b.n	8006188 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d11b      	bne.n	800611a <HAL_SPI_TransmitReceive+0x162>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d016      	beq.n	800611a <HAL_SPI_TransmitReceive+0x162>
 80060ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d113      	bne.n	800611a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f6:	881a      	ldrh	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006102:	1c9a      	adds	r2, r3, #2
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800610c:	b29b      	uxth	r3, r3
 800610e:	3b01      	subs	r3, #1
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b01      	cmp	r3, #1
 8006126:	d119      	bne.n	800615c <HAL_SPI_TransmitReceive+0x1a4>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d014      	beq.n	800615c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800613c:	b292      	uxth	r2, r2
 800613e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006144:	1c9a      	adds	r2, r3, #2
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800614e:	b29b      	uxth	r3, r3
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006158:	2301      	movs	r3, #1
 800615a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800615c:	f7fc fc2c 	bl	80029b8 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006168:	429a      	cmp	r2, r3
 800616a:	d80d      	bhi.n	8006188 <HAL_SPI_TransmitReceive+0x1d0>
 800616c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006172:	d009      	beq.n	8006188 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e0bc      	b.n	8006302 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1a0      	bne.n	80060d4 <HAL_SPI_TransmitReceive+0x11c>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006196:	b29b      	uxth	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d19b      	bne.n	80060d4 <HAL_SPI_TransmitReceive+0x11c>
 800619c:	e082      	b.n	80062a4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <HAL_SPI_TransmitReceive+0x1f4>
 80061a6:	8afb      	ldrh	r3, [r7, #22]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d171      	bne.n	8006290 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	330c      	adds	r3, #12
 80061b6:	7812      	ldrb	r2, [r2, #0]
 80061b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061d2:	e05d      	b.n	8006290 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d11c      	bne.n	800621c <HAL_SPI_TransmitReceive+0x264>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d017      	beq.n	800621c <HAL_SPI_TransmitReceive+0x264>
 80061ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d114      	bne.n	800621c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	330c      	adds	r3, #12
 80061fc:	7812      	ldrb	r2, [r2, #0]
 80061fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b01      	subs	r3, #1
 8006212:	b29a      	uxth	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b01      	cmp	r3, #1
 8006228:	d119      	bne.n	800625e <HAL_SPI_TransmitReceive+0x2a6>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d014      	beq.n	800625e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800625a:	2301      	movs	r3, #1
 800625c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800625e:	f7fc fbab 	bl	80029b8 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800626a:	429a      	cmp	r2, r3
 800626c:	d803      	bhi.n	8006276 <HAL_SPI_TransmitReceive+0x2be>
 800626e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006274:	d102      	bne.n	800627c <HAL_SPI_TransmitReceive+0x2c4>
 8006276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006278:	2b00      	cmp	r3, #0
 800627a:	d109      	bne.n	8006290 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e038      	b.n	8006302 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d19c      	bne.n	80061d4 <HAL_SPI_TransmitReceive+0x21c>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800629e:	b29b      	uxth	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d197      	bne.n	80061d4 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062a4:	6a3a      	ldr	r2, [r7, #32]
 80062a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f8b7 	bl	800641c <SPI_EndRxTxTransaction>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d008      	beq.n	80062c6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e01d      	b.n	8006302 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10a      	bne.n	80062e4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062ce:	2300      	movs	r3, #0
 80062d0:	613b      	str	r3, [r7, #16]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	613b      	str	r3, [r7, #16]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e000      	b.n	8006302 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006300:	2300      	movs	r3, #0
  }
}
 8006302:	4618      	mov	r0, r3
 8006304:	3728      	adds	r7, #40	@ 0x28
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	4613      	mov	r3, r2
 800631a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800631c:	f7fc fb4c 	bl	80029b8 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006324:	1a9b      	subs	r3, r3, r2
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	4413      	add	r3, r2
 800632a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800632c:	f7fc fb44 	bl	80029b8 <HAL_GetTick>
 8006330:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006332:	4b39      	ldr	r3, [pc, #228]	@ (8006418 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	015b      	lsls	r3, r3, #5
 8006338:	0d1b      	lsrs	r3, r3, #20
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	fb02 f303 	mul.w	r3, r2, r3
 8006340:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006342:	e054      	b.n	80063ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634a:	d050      	beq.n	80063ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800634c:	f7fc fb34 	bl	80029b8 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	429a      	cmp	r2, r3
 800635a:	d902      	bls.n	8006362 <SPI_WaitFlagStateUntilTimeout+0x56>
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d13d      	bne.n	80063de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006370:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800637a:	d111      	bne.n	80063a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006384:	d004      	beq.n	8006390 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800638e:	d107      	bne.n	80063a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800639e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063a8:	d10f      	bne.n	80063ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e017      	b.n	800640e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063e4:	2300      	movs	r3, #0
 80063e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	3b01      	subs	r3, #1
 80063ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	4013      	ands	r3, r2
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	bf0c      	ite	eq
 80063fe:	2301      	moveq	r3, #1
 8006400:	2300      	movne	r3, #0
 8006402:	b2db      	uxtb	r3, r3
 8006404:	461a      	mov	r2, r3
 8006406:	79fb      	ldrb	r3, [r7, #7]
 8006408:	429a      	cmp	r2, r3
 800640a:	d19b      	bne.n	8006344 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3720      	adds	r7, #32
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000004 	.word	0x20000004

0800641c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af02      	add	r7, sp, #8
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2201      	movs	r2, #1
 8006430:	2102      	movs	r1, #2
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f7ff ff6a 	bl	800630c <SPI_WaitFlagStateUntilTimeout>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d007      	beq.n	800644e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006442:	f043 0220 	orr.w	r2, r3, #32
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e013      	b.n	8006476 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2200      	movs	r2, #0
 8006456:	2180      	movs	r1, #128	@ 0x80
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f7ff ff57 	bl	800630c <SPI_WaitFlagStateUntilTimeout>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d007      	beq.n	8006474 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006468:	f043 0220 	orr.w	r2, r3, #32
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e000      	b.n	8006476 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b082      	sub	sp, #8
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e041      	b.n	8006514 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d106      	bne.n	80064aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f7fc f895 	bl	80025d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2202      	movs	r2, #2
 80064ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	3304      	adds	r3, #4
 80064ba:	4619      	mov	r1, r3
 80064bc:	4610      	mov	r0, r2
 80064be:	f000 fa5b 	bl	8006978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b01      	cmp	r3, #1
 800652e:	d001      	beq.n	8006534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e03a      	b.n	80065aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0201 	orr.w	r2, r2, #1
 800654a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a18      	ldr	r2, [pc, #96]	@ (80065b4 <HAL_TIM_Base_Start_IT+0x98>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00e      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x58>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800655e:	d009      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x58>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a14      	ldr	r2, [pc, #80]	@ (80065b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d004      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x58>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a13      	ldr	r2, [pc, #76]	@ (80065bc <HAL_TIM_Base_Start_IT+0xa0>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d111      	bne.n	8006598 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 0307 	and.w	r3, r3, #7
 800657e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b06      	cmp	r3, #6
 8006584:	d010      	beq.n	80065a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f042 0201 	orr.w	r2, r2, #1
 8006594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006596:	e007      	b.n	80065a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0201 	orr.w	r2, r2, #1
 80065a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bc80      	pop	{r7}
 80065b2:	4770      	bx	lr
 80065b4:	40012c00 	.word	0x40012c00
 80065b8:	40000400 	.word	0x40000400
 80065bc:	40000800 	.word	0x40000800

080065c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d020      	beq.n	8006624 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01b      	beq.n	8006624 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f06f 0202 	mvn.w	r2, #2
 80065f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f998 	bl	8006940 <HAL_TIM_IC_CaptureCallback>
 8006610:	e005      	b.n	800661e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f98b 	bl	800692e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f99a 	bl	8006952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	2b00      	cmp	r3, #0
 800662c:	d020      	beq.n	8006670 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d01b      	beq.n	8006670 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f06f 0204 	mvn.w	r2, #4
 8006640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2202      	movs	r2, #2
 8006646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f972 	bl	8006940 <HAL_TIM_IC_CaptureCallback>
 800665c:	e005      	b.n	800666a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f965 	bl	800692e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f974 	bl	8006952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f003 0308 	and.w	r3, r3, #8
 8006676:	2b00      	cmp	r3, #0
 8006678:	d020      	beq.n	80066bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f003 0308 	and.w	r3, r3, #8
 8006680:	2b00      	cmp	r3, #0
 8006682:	d01b      	beq.n	80066bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0208 	mvn.w	r2, #8
 800668c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2204      	movs	r2, #4
 8006692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f94c 	bl	8006940 <HAL_TIM_IC_CaptureCallback>
 80066a8:	e005      	b.n	80066b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f93f 	bl	800692e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f94e 	bl	8006952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f003 0310 	and.w	r3, r3, #16
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d020      	beq.n	8006708 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f003 0310 	and.w	r3, r3, #16
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01b      	beq.n	8006708 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f06f 0210 	mvn.w	r2, #16
 80066d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2208      	movs	r2, #8
 80066de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f926 	bl	8006940 <HAL_TIM_IC_CaptureCallback>
 80066f4:	e005      	b.n	8006702 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f919 	bl	800692e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f928 	bl	8006952 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00c      	beq.n	800672c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0201 	mvn.w	r2, #1
 8006724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7fb f8a2 	bl	8001870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00c      	beq.n	8006750 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800673c:	2b00      	cmp	r3, #0
 800673e:	d007      	beq.n	8006750 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fa7f 	bl	8006c4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00c      	beq.n	8006774 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006760:	2b00      	cmp	r3, #0
 8006762:	d007      	beq.n	8006774 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800676c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f8f8 	bl	8006964 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00c      	beq.n	8006798 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f003 0320 	and.w	r3, r3, #32
 8006784:	2b00      	cmp	r3, #0
 8006786:	d007      	beq.n	8006798 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f06f 0220 	mvn.w	r2, #32
 8006790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fa52 	bl	8006c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d101      	bne.n	80067bc <HAL_TIM_ConfigClockSource+0x1c>
 80067b8:	2302      	movs	r3, #2
 80067ba:	e0b4      	b.n	8006926 <HAL_TIM_ConfigClockSource+0x186>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80067da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067f4:	d03e      	beq.n	8006874 <HAL_TIM_ConfigClockSource+0xd4>
 80067f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067fa:	f200 8087 	bhi.w	800690c <HAL_TIM_ConfigClockSource+0x16c>
 80067fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006802:	f000 8086 	beq.w	8006912 <HAL_TIM_ConfigClockSource+0x172>
 8006806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800680a:	d87f      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x16c>
 800680c:	2b70      	cmp	r3, #112	@ 0x70
 800680e:	d01a      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0xa6>
 8006810:	2b70      	cmp	r3, #112	@ 0x70
 8006812:	d87b      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x16c>
 8006814:	2b60      	cmp	r3, #96	@ 0x60
 8006816:	d050      	beq.n	80068ba <HAL_TIM_ConfigClockSource+0x11a>
 8006818:	2b60      	cmp	r3, #96	@ 0x60
 800681a:	d877      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x16c>
 800681c:	2b50      	cmp	r3, #80	@ 0x50
 800681e:	d03c      	beq.n	800689a <HAL_TIM_ConfigClockSource+0xfa>
 8006820:	2b50      	cmp	r3, #80	@ 0x50
 8006822:	d873      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x16c>
 8006824:	2b40      	cmp	r3, #64	@ 0x40
 8006826:	d058      	beq.n	80068da <HAL_TIM_ConfigClockSource+0x13a>
 8006828:	2b40      	cmp	r3, #64	@ 0x40
 800682a:	d86f      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x16c>
 800682c:	2b30      	cmp	r3, #48	@ 0x30
 800682e:	d064      	beq.n	80068fa <HAL_TIM_ConfigClockSource+0x15a>
 8006830:	2b30      	cmp	r3, #48	@ 0x30
 8006832:	d86b      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x16c>
 8006834:	2b20      	cmp	r3, #32
 8006836:	d060      	beq.n	80068fa <HAL_TIM_ConfigClockSource+0x15a>
 8006838:	2b20      	cmp	r3, #32
 800683a:	d867      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x16c>
 800683c:	2b00      	cmp	r3, #0
 800683e:	d05c      	beq.n	80068fa <HAL_TIM_ConfigClockSource+0x15a>
 8006840:	2b10      	cmp	r3, #16
 8006842:	d05a      	beq.n	80068fa <HAL_TIM_ConfigClockSource+0x15a>
 8006844:	e062      	b.n	800690c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006856:	f000 f974 	bl	8006b42 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006868:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	609a      	str	r2, [r3, #8]
      break;
 8006872:	e04f      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006884:	f000 f95d 	bl	8006b42 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689a      	ldr	r2, [r3, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006896:	609a      	str	r2, [r3, #8]
      break;
 8006898:	e03c      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068a6:	461a      	mov	r2, r3
 80068a8:	f000 f8d4 	bl	8006a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2150      	movs	r1, #80	@ 0x50
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 f92b 	bl	8006b0e <TIM_ITRx_SetConfig>
      break;
 80068b8:	e02c      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068c6:	461a      	mov	r2, r3
 80068c8:	f000 f8f2 	bl	8006ab0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2160      	movs	r1, #96	@ 0x60
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 f91b 	bl	8006b0e <TIM_ITRx_SetConfig>
      break;
 80068d8:	e01c      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e6:	461a      	mov	r2, r3
 80068e8:	f000 f8b4 	bl	8006a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2140      	movs	r1, #64	@ 0x40
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 f90b 	bl	8006b0e <TIM_ITRx_SetConfig>
      break;
 80068f8:	e00c      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4619      	mov	r1, r3
 8006904:	4610      	mov	r0, r2
 8006906:	f000 f902 	bl	8006b0e <TIM_ITRx_SetConfig>
      break;
 800690a:	e003      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	73fb      	strb	r3, [r7, #15]
      break;
 8006910:	e000      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006912:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800692e:	b480      	push	{r7}
 8006930:	b083      	sub	sp, #12
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	bc80      	pop	{r7}
 800693e:	4770      	bx	lr

08006940 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	bc80      	pop	{r7}
 8006950:	4770      	bx	lr

08006952 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	bc80      	pop	{r7}
 8006962:	4770      	bx	lr

08006964 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	bc80      	pop	{r7}
 8006974:	4770      	bx	lr
	...

08006978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a2f      	ldr	r2, [pc, #188]	@ (8006a48 <TIM_Base_SetConfig+0xd0>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d00b      	beq.n	80069a8 <TIM_Base_SetConfig+0x30>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006996:	d007      	beq.n	80069a8 <TIM_Base_SetConfig+0x30>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a2c      	ldr	r2, [pc, #176]	@ (8006a4c <TIM_Base_SetConfig+0xd4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d003      	beq.n	80069a8 <TIM_Base_SetConfig+0x30>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a2b      	ldr	r2, [pc, #172]	@ (8006a50 <TIM_Base_SetConfig+0xd8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d108      	bne.n	80069ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a22      	ldr	r2, [pc, #136]	@ (8006a48 <TIM_Base_SetConfig+0xd0>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d00b      	beq.n	80069da <TIM_Base_SetConfig+0x62>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069c8:	d007      	beq.n	80069da <TIM_Base_SetConfig+0x62>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a1f      	ldr	r2, [pc, #124]	@ (8006a4c <TIM_Base_SetConfig+0xd4>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d003      	beq.n	80069da <TIM_Base_SetConfig+0x62>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a1e      	ldr	r2, [pc, #120]	@ (8006a50 <TIM_Base_SetConfig+0xd8>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d108      	bne.n	80069ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	689a      	ldr	r2, [r3, #8]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a0d      	ldr	r2, [pc, #52]	@ (8006a48 <TIM_Base_SetConfig+0xd0>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d103      	bne.n	8006a20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	691a      	ldr	r2, [r3, #16]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d005      	beq.n	8006a3e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f023 0201 	bic.w	r2, r3, #1
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	611a      	str	r2, [r3, #16]
  }
}
 8006a3e:	bf00      	nop
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr
 8006a48:	40012c00 	.word	0x40012c00
 8006a4c:	40000400 	.word	0x40000400
 8006a50:	40000800 	.word	0x40000800

08006a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b087      	sub	sp, #28
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	f023 0201 	bic.w	r2, r3, #1
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f023 030a 	bic.w	r3, r3, #10
 8006a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	697a      	ldr	r2, [r7, #20]
 8006aa4:	621a      	str	r2, [r3, #32]
}
 8006aa6:	bf00      	nop
 8006aa8:	371c      	adds	r7, #28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr

08006ab0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f023 0210 	bic.w	r2, r3, #16
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	031b      	lsls	r3, r3, #12
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006aec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	621a      	str	r2, [r3, #32]
}
 8006b04:	bf00      	nop
 8006b06:	371c      	adds	r7, #28
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bc80      	pop	{r7}
 8006b0c:	4770      	bx	lr

08006b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b085      	sub	sp, #20
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	f043 0307 	orr.w	r3, r3, #7
 8006b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	609a      	str	r2, [r3, #8]
}
 8006b38:	bf00      	nop
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr

08006b42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b087      	sub	sp, #28
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	607a      	str	r2, [r7, #4]
 8006b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	021a      	lsls	r2, r3, #8
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	431a      	orrs	r2, r3
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	609a      	str	r2, [r3, #8]
}
 8006b76:	bf00      	nop
 8006b78:	371c      	adds	r7, #28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bc80      	pop	{r7}
 8006b7e:	4770      	bx	lr

08006b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e046      	b.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a16      	ldr	r2, [pc, #88]	@ (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d00e      	beq.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006be4:	d009      	beq.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a12      	ldr	r2, [pc, #72]	@ (8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d004      	beq.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a10      	ldr	r2, [pc, #64]	@ (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d10c      	bne.n	8006c14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bc80      	pop	{r7}
 8006c2e:	4770      	bx	lr
 8006c30:	40012c00 	.word	0x40012c00
 8006c34:	40000400 	.word	0x40000400
 8006c38:	40000800 	.word	0x40000800

08006c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bc80      	pop	{r7}
 8006c4c:	4770      	bx	lr

08006c4e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bc80      	pop	{r7}
 8006c5e:	4770      	bx	lr

08006c60 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006c64:	4904      	ldr	r1, [pc, #16]	@ (8006c78 <MX_FATFS_Init+0x18>)
 8006c66:	4805      	ldr	r0, [pc, #20]	@ (8006c7c <MX_FATFS_Init+0x1c>)
 8006c68:	f000 f8b0 	bl	8006dcc <FATFS_LinkDriver>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	461a      	mov	r2, r3
 8006c70:	4b03      	ldr	r3, [pc, #12]	@ (8006c80 <MX_FATFS_Init+0x20>)
 8006c72:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006c74:	bf00      	nop
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	200008ac 	.word	0x200008ac
 8006c7c:	20000010 	.word	0x20000010
 8006c80:	200008a8 	.word	0x200008a8

08006c84 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fa fa9d 	bl	80011d0 <SD_disk_initialize>
 8006c96:	4603      	mov	r3, r0
 8006c98:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b082      	sub	sp, #8
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	4603      	mov	r3, r0
 8006caa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fa fb74 	bl	800139c <SD_disk_status>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60b9      	str	r1, [r7, #8]
 8006cc8:	607a      	str	r2, [r7, #4]
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	4603      	mov	r3, r0
 8006cce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8006cd0:	7bf8      	ldrb	r0, [r7, #15]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	68b9      	ldr	r1, [r7, #8]
 8006cd8:	f7fa fb74 	bl	80013c4 <SD_disk_read>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	607a      	str	r2, [r7, #4]
 8006cf2:	603b      	str	r3, [r7, #0]
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8006cf8:	7bf8      	ldrb	r0, [r7, #15]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	68b9      	ldr	r1, [r7, #8]
 8006d00:	f7fa fbca 	bl	8001498 <SD_disk_write>
 8006d04:	4603      	mov	r3, r0
 8006d06:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	4603      	mov	r3, r0
 8006d18:	603a      	str	r2, [r7, #0]
 8006d1a:	71fb      	strb	r3, [r7, #7]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006d20:	79fb      	ldrb	r3, [r7, #7]
 8006d22:	79b9      	ldrb	r1, [r7, #6]
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fa fc3a 	bl	80015a0 <SD_disk_ioctl>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	4613      	mov	r3, r2
 8006d44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006d46:	2301      	movs	r3, #1
 8006d48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8006d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006dc8 <FATFS_LinkDriverEx+0x90>)
 8006d50:	7a5b      	ldrb	r3, [r3, #9]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d831      	bhi.n	8006dbc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006d58:	4b1b      	ldr	r3, [pc, #108]	@ (8006dc8 <FATFS_LinkDriverEx+0x90>)
 8006d5a:	7a5b      	ldrb	r3, [r3, #9]
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	461a      	mov	r2, r3
 8006d60:	4b19      	ldr	r3, [pc, #100]	@ (8006dc8 <FATFS_LinkDriverEx+0x90>)
 8006d62:	2100      	movs	r1, #0
 8006d64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8006d66:	4b18      	ldr	r3, [pc, #96]	@ (8006dc8 <FATFS_LinkDriverEx+0x90>)
 8006d68:	7a5b      	ldrb	r3, [r3, #9]
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	4a16      	ldr	r2, [pc, #88]	@ (8006dc8 <FATFS_LinkDriverEx+0x90>)
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8006d76:	4b14      	ldr	r3, [pc, #80]	@ (8006dc8 <FATFS_LinkDriverEx+0x90>)
 8006d78:	7a5b      	ldrb	r3, [r3, #9]
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	4b12      	ldr	r3, [pc, #72]	@ (8006dc8 <FATFS_LinkDriverEx+0x90>)
 8006d80:	4413      	add	r3, r2
 8006d82:	79fa      	ldrb	r2, [r7, #7]
 8006d84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006d86:	4b10      	ldr	r3, [pc, #64]	@ (8006dc8 <FATFS_LinkDriverEx+0x90>)
 8006d88:	7a5b      	ldrb	r3, [r3, #9]
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	1c5a      	adds	r2, r3, #1
 8006d8e:	b2d1      	uxtb	r1, r2
 8006d90:	4a0d      	ldr	r2, [pc, #52]	@ (8006dc8 <FATFS_LinkDriverEx+0x90>)
 8006d92:	7251      	strb	r1, [r2, #9]
 8006d94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006d96:	7dbb      	ldrb	r3, [r7, #22]
 8006d98:	3330      	adds	r3, #48	@ 0x30
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	3301      	adds	r3, #1
 8006da4:	223a      	movs	r2, #58	@ 0x3a
 8006da6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	3302      	adds	r3, #2
 8006dac:	222f      	movs	r2, #47	@ 0x2f
 8006dae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	3303      	adds	r3, #3
 8006db4:	2200      	movs	r2, #0
 8006db6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006db8:	2300      	movs	r3, #0
 8006dba:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8006dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr
 8006dc8:	200008b0 	.word	0x200008b0

08006dcc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7ff ffac 	bl	8006d38 <FATFS_LinkDriverEx>
 8006de0:	4603      	mov	r3, r0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <__cvt>:
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df0:	461d      	mov	r5, r3
 8006df2:	bfbb      	ittet	lt
 8006df4:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006df8:	461d      	movlt	r5, r3
 8006dfa:	2300      	movge	r3, #0
 8006dfc:	232d      	movlt	r3, #45	@ 0x2d
 8006dfe:	b088      	sub	sp, #32
 8006e00:	4614      	mov	r4, r2
 8006e02:	bfb8      	it	lt
 8006e04:	4614      	movlt	r4, r2
 8006e06:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006e08:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006e0a:	7013      	strb	r3, [r2, #0]
 8006e0c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e0e:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006e12:	f023 0820 	bic.w	r8, r3, #32
 8006e16:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e1a:	d005      	beq.n	8006e28 <__cvt+0x3e>
 8006e1c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006e20:	d100      	bne.n	8006e24 <__cvt+0x3a>
 8006e22:	3601      	adds	r6, #1
 8006e24:	2302      	movs	r3, #2
 8006e26:	e000      	b.n	8006e2a <__cvt+0x40>
 8006e28:	2303      	movs	r3, #3
 8006e2a:	aa07      	add	r2, sp, #28
 8006e2c:	9204      	str	r2, [sp, #16]
 8006e2e:	aa06      	add	r2, sp, #24
 8006e30:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006e34:	e9cd 3600 	strd	r3, r6, [sp]
 8006e38:	4622      	mov	r2, r4
 8006e3a:	462b      	mov	r3, r5
 8006e3c:	f000 fe50 	bl	8007ae0 <_dtoa_r>
 8006e40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006e44:	4607      	mov	r7, r0
 8006e46:	d119      	bne.n	8006e7c <__cvt+0x92>
 8006e48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e4a:	07db      	lsls	r3, r3, #31
 8006e4c:	d50e      	bpl.n	8006e6c <__cvt+0x82>
 8006e4e:	eb00 0906 	add.w	r9, r0, r6
 8006e52:	2200      	movs	r2, #0
 8006e54:	2300      	movs	r3, #0
 8006e56:	4620      	mov	r0, r4
 8006e58:	4629      	mov	r1, r5
 8006e5a:	f7f9 fda5 	bl	80009a8 <__aeabi_dcmpeq>
 8006e5e:	b108      	cbz	r0, 8006e64 <__cvt+0x7a>
 8006e60:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e64:	2230      	movs	r2, #48	@ 0x30
 8006e66:	9b07      	ldr	r3, [sp, #28]
 8006e68:	454b      	cmp	r3, r9
 8006e6a:	d31e      	bcc.n	8006eaa <__cvt+0xc0>
 8006e6c:	4638      	mov	r0, r7
 8006e6e:	9b07      	ldr	r3, [sp, #28]
 8006e70:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006e72:	1bdb      	subs	r3, r3, r7
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	b008      	add	sp, #32
 8006e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e80:	eb00 0906 	add.w	r9, r0, r6
 8006e84:	d1e5      	bne.n	8006e52 <__cvt+0x68>
 8006e86:	7803      	ldrb	r3, [r0, #0]
 8006e88:	2b30      	cmp	r3, #48	@ 0x30
 8006e8a:	d10a      	bne.n	8006ea2 <__cvt+0xb8>
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2300      	movs	r3, #0
 8006e90:	4620      	mov	r0, r4
 8006e92:	4629      	mov	r1, r5
 8006e94:	f7f9 fd88 	bl	80009a8 <__aeabi_dcmpeq>
 8006e98:	b918      	cbnz	r0, 8006ea2 <__cvt+0xb8>
 8006e9a:	f1c6 0601 	rsb	r6, r6, #1
 8006e9e:	f8ca 6000 	str.w	r6, [sl]
 8006ea2:	f8da 3000 	ldr.w	r3, [sl]
 8006ea6:	4499      	add	r9, r3
 8006ea8:	e7d3      	b.n	8006e52 <__cvt+0x68>
 8006eaa:	1c59      	adds	r1, r3, #1
 8006eac:	9107      	str	r1, [sp, #28]
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	e7d9      	b.n	8006e66 <__cvt+0x7c>

08006eb2 <__exponent>:
 8006eb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006eb4:	2900      	cmp	r1, #0
 8006eb6:	bfb6      	itet	lt
 8006eb8:	232d      	movlt	r3, #45	@ 0x2d
 8006eba:	232b      	movge	r3, #43	@ 0x2b
 8006ebc:	4249      	neglt	r1, r1
 8006ebe:	2909      	cmp	r1, #9
 8006ec0:	7002      	strb	r2, [r0, #0]
 8006ec2:	7043      	strb	r3, [r0, #1]
 8006ec4:	dd29      	ble.n	8006f1a <__exponent+0x68>
 8006ec6:	f10d 0307 	add.w	r3, sp, #7
 8006eca:	461d      	mov	r5, r3
 8006ecc:	270a      	movs	r7, #10
 8006ece:	fbb1 f6f7 	udiv	r6, r1, r7
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	fb07 1416 	mls	r4, r7, r6, r1
 8006ed8:	3430      	adds	r4, #48	@ 0x30
 8006eda:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ede:	460c      	mov	r4, r1
 8006ee0:	2c63      	cmp	r4, #99	@ 0x63
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ee8:	dcf1      	bgt.n	8006ece <__exponent+0x1c>
 8006eea:	3130      	adds	r1, #48	@ 0x30
 8006eec:	1e94      	subs	r4, r2, #2
 8006eee:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006ef2:	4623      	mov	r3, r4
 8006ef4:	1c41      	adds	r1, r0, #1
 8006ef6:	42ab      	cmp	r3, r5
 8006ef8:	d30a      	bcc.n	8006f10 <__exponent+0x5e>
 8006efa:	f10d 0309 	add.w	r3, sp, #9
 8006efe:	1a9b      	subs	r3, r3, r2
 8006f00:	42ac      	cmp	r4, r5
 8006f02:	bf88      	it	hi
 8006f04:	2300      	movhi	r3, #0
 8006f06:	3302      	adds	r3, #2
 8006f08:	4403      	add	r3, r0
 8006f0a:	1a18      	subs	r0, r3, r0
 8006f0c:	b003      	add	sp, #12
 8006f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f10:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006f14:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006f18:	e7ed      	b.n	8006ef6 <__exponent+0x44>
 8006f1a:	2330      	movs	r3, #48	@ 0x30
 8006f1c:	3130      	adds	r1, #48	@ 0x30
 8006f1e:	7083      	strb	r3, [r0, #2]
 8006f20:	70c1      	strb	r1, [r0, #3]
 8006f22:	1d03      	adds	r3, r0, #4
 8006f24:	e7f1      	b.n	8006f0a <__exponent+0x58>
	...

08006f28 <_printf_float>:
 8006f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f2c:	b091      	sub	sp, #68	@ 0x44
 8006f2e:	460c      	mov	r4, r1
 8006f30:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006f34:	4616      	mov	r6, r2
 8006f36:	461f      	mov	r7, r3
 8006f38:	4605      	mov	r5, r0
 8006f3a:	f000 fcc1 	bl	80078c0 <_localeconv_r>
 8006f3e:	6803      	ldr	r3, [r0, #0]
 8006f40:	4618      	mov	r0, r3
 8006f42:	9308      	str	r3, [sp, #32]
 8006f44:	f7f9 f904 	bl	8000150 <strlen>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f50:	9009      	str	r0, [sp, #36]	@ 0x24
 8006f52:	3307      	adds	r3, #7
 8006f54:	f023 0307 	bic.w	r3, r3, #7
 8006f58:	f103 0208 	add.w	r2, r3, #8
 8006f5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006f60:	f8d4 b000 	ldr.w	fp, [r4]
 8006f64:	f8c8 2000 	str.w	r2, [r8]
 8006f68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006f70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f72:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006f76:	f04f 32ff 	mov.w	r2, #4294967295
 8006f7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f82:	4b9c      	ldr	r3, [pc, #624]	@ (80071f4 <_printf_float+0x2cc>)
 8006f84:	f7f9 fd42 	bl	8000a0c <__aeabi_dcmpun>
 8006f88:	bb70      	cbnz	r0, 8006fe8 <_printf_float+0xc0>
 8006f8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f92:	4b98      	ldr	r3, [pc, #608]	@ (80071f4 <_printf_float+0x2cc>)
 8006f94:	f7f9 fd1c 	bl	80009d0 <__aeabi_dcmple>
 8006f98:	bb30      	cbnz	r0, 8006fe8 <_printf_float+0xc0>
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	4649      	mov	r1, r9
 8006fa2:	f7f9 fd0b 	bl	80009bc <__aeabi_dcmplt>
 8006fa6:	b110      	cbz	r0, 8006fae <_printf_float+0x86>
 8006fa8:	232d      	movs	r3, #45	@ 0x2d
 8006faa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fae:	4a92      	ldr	r2, [pc, #584]	@ (80071f8 <_printf_float+0x2d0>)
 8006fb0:	4b92      	ldr	r3, [pc, #584]	@ (80071fc <_printf_float+0x2d4>)
 8006fb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006fb6:	bf94      	ite	ls
 8006fb8:	4690      	movls	r8, r2
 8006fba:	4698      	movhi	r8, r3
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	f04f 0900 	mov.w	r9, #0
 8006fc2:	6123      	str	r3, [r4, #16]
 8006fc4:	f02b 0304 	bic.w	r3, fp, #4
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	4633      	mov	r3, r6
 8006fcc:	4621      	mov	r1, r4
 8006fce:	4628      	mov	r0, r5
 8006fd0:	9700      	str	r7, [sp, #0]
 8006fd2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006fd4:	f000 f9d4 	bl	8007380 <_printf_common>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	f040 8090 	bne.w	80070fe <_printf_float+0x1d6>
 8006fde:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe2:	b011      	add	sp, #68	@ 0x44
 8006fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe8:	4642      	mov	r2, r8
 8006fea:	464b      	mov	r3, r9
 8006fec:	4640      	mov	r0, r8
 8006fee:	4649      	mov	r1, r9
 8006ff0:	f7f9 fd0c 	bl	8000a0c <__aeabi_dcmpun>
 8006ff4:	b148      	cbz	r0, 800700a <_printf_float+0xe2>
 8006ff6:	464b      	mov	r3, r9
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	bfb8      	it	lt
 8006ffc:	232d      	movlt	r3, #45	@ 0x2d
 8006ffe:	4a80      	ldr	r2, [pc, #512]	@ (8007200 <_printf_float+0x2d8>)
 8007000:	bfb8      	it	lt
 8007002:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007006:	4b7f      	ldr	r3, [pc, #508]	@ (8007204 <_printf_float+0x2dc>)
 8007008:	e7d3      	b.n	8006fb2 <_printf_float+0x8a>
 800700a:	6863      	ldr	r3, [r4, #4]
 800700c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007010:	1c5a      	adds	r2, r3, #1
 8007012:	d13f      	bne.n	8007094 <_printf_float+0x16c>
 8007014:	2306      	movs	r3, #6
 8007016:	6063      	str	r3, [r4, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800701e:	6023      	str	r3, [r4, #0]
 8007020:	9206      	str	r2, [sp, #24]
 8007022:	aa0e      	add	r2, sp, #56	@ 0x38
 8007024:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007028:	aa0d      	add	r2, sp, #52	@ 0x34
 800702a:	9203      	str	r2, [sp, #12]
 800702c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007030:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007034:	6863      	ldr	r3, [r4, #4]
 8007036:	4642      	mov	r2, r8
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	4628      	mov	r0, r5
 800703c:	464b      	mov	r3, r9
 800703e:	910a      	str	r1, [sp, #40]	@ 0x28
 8007040:	f7ff fed3 	bl	8006dea <__cvt>
 8007044:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007046:	4680      	mov	r8, r0
 8007048:	2947      	cmp	r1, #71	@ 0x47
 800704a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800704c:	d128      	bne.n	80070a0 <_printf_float+0x178>
 800704e:	1cc8      	adds	r0, r1, #3
 8007050:	db02      	blt.n	8007058 <_printf_float+0x130>
 8007052:	6863      	ldr	r3, [r4, #4]
 8007054:	4299      	cmp	r1, r3
 8007056:	dd40      	ble.n	80070da <_printf_float+0x1b2>
 8007058:	f1aa 0a02 	sub.w	sl, sl, #2
 800705c:	fa5f fa8a 	uxtb.w	sl, sl
 8007060:	4652      	mov	r2, sl
 8007062:	3901      	subs	r1, #1
 8007064:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007068:	910d      	str	r1, [sp, #52]	@ 0x34
 800706a:	f7ff ff22 	bl	8006eb2 <__exponent>
 800706e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007070:	4681      	mov	r9, r0
 8007072:	1813      	adds	r3, r2, r0
 8007074:	2a01      	cmp	r2, #1
 8007076:	6123      	str	r3, [r4, #16]
 8007078:	dc02      	bgt.n	8007080 <_printf_float+0x158>
 800707a:	6822      	ldr	r2, [r4, #0]
 800707c:	07d2      	lsls	r2, r2, #31
 800707e:	d501      	bpl.n	8007084 <_printf_float+0x15c>
 8007080:	3301      	adds	r3, #1
 8007082:	6123      	str	r3, [r4, #16]
 8007084:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007088:	2b00      	cmp	r3, #0
 800708a:	d09e      	beq.n	8006fca <_printf_float+0xa2>
 800708c:	232d      	movs	r3, #45	@ 0x2d
 800708e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007092:	e79a      	b.n	8006fca <_printf_float+0xa2>
 8007094:	2947      	cmp	r1, #71	@ 0x47
 8007096:	d1bf      	bne.n	8007018 <_printf_float+0xf0>
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1bd      	bne.n	8007018 <_printf_float+0xf0>
 800709c:	2301      	movs	r3, #1
 800709e:	e7ba      	b.n	8007016 <_printf_float+0xee>
 80070a0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80070a4:	d9dc      	bls.n	8007060 <_printf_float+0x138>
 80070a6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80070aa:	d118      	bne.n	80070de <_printf_float+0x1b6>
 80070ac:	2900      	cmp	r1, #0
 80070ae:	6863      	ldr	r3, [r4, #4]
 80070b0:	dd0b      	ble.n	80070ca <_printf_float+0x1a2>
 80070b2:	6121      	str	r1, [r4, #16]
 80070b4:	b913      	cbnz	r3, 80070bc <_printf_float+0x194>
 80070b6:	6822      	ldr	r2, [r4, #0]
 80070b8:	07d0      	lsls	r0, r2, #31
 80070ba:	d502      	bpl.n	80070c2 <_printf_float+0x19a>
 80070bc:	3301      	adds	r3, #1
 80070be:	440b      	add	r3, r1
 80070c0:	6123      	str	r3, [r4, #16]
 80070c2:	f04f 0900 	mov.w	r9, #0
 80070c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80070c8:	e7dc      	b.n	8007084 <_printf_float+0x15c>
 80070ca:	b913      	cbnz	r3, 80070d2 <_printf_float+0x1aa>
 80070cc:	6822      	ldr	r2, [r4, #0]
 80070ce:	07d2      	lsls	r2, r2, #31
 80070d0:	d501      	bpl.n	80070d6 <_printf_float+0x1ae>
 80070d2:	3302      	adds	r3, #2
 80070d4:	e7f4      	b.n	80070c0 <_printf_float+0x198>
 80070d6:	2301      	movs	r3, #1
 80070d8:	e7f2      	b.n	80070c0 <_printf_float+0x198>
 80070da:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80070de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070e0:	4299      	cmp	r1, r3
 80070e2:	db05      	blt.n	80070f0 <_printf_float+0x1c8>
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	6121      	str	r1, [r4, #16]
 80070e8:	07d8      	lsls	r0, r3, #31
 80070ea:	d5ea      	bpl.n	80070c2 <_printf_float+0x19a>
 80070ec:	1c4b      	adds	r3, r1, #1
 80070ee:	e7e7      	b.n	80070c0 <_printf_float+0x198>
 80070f0:	2900      	cmp	r1, #0
 80070f2:	bfcc      	ite	gt
 80070f4:	2201      	movgt	r2, #1
 80070f6:	f1c1 0202 	rsble	r2, r1, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	e7e0      	b.n	80070c0 <_printf_float+0x198>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	055a      	lsls	r2, r3, #21
 8007102:	d407      	bmi.n	8007114 <_printf_float+0x1ec>
 8007104:	6923      	ldr	r3, [r4, #16]
 8007106:	4642      	mov	r2, r8
 8007108:	4631      	mov	r1, r6
 800710a:	4628      	mov	r0, r5
 800710c:	47b8      	blx	r7
 800710e:	3001      	adds	r0, #1
 8007110:	d12b      	bne.n	800716a <_printf_float+0x242>
 8007112:	e764      	b.n	8006fde <_printf_float+0xb6>
 8007114:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007118:	f240 80dc 	bls.w	80072d4 <_printf_float+0x3ac>
 800711c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007120:	2200      	movs	r2, #0
 8007122:	2300      	movs	r3, #0
 8007124:	f7f9 fc40 	bl	80009a8 <__aeabi_dcmpeq>
 8007128:	2800      	cmp	r0, #0
 800712a:	d033      	beq.n	8007194 <_printf_float+0x26c>
 800712c:	2301      	movs	r3, #1
 800712e:	4631      	mov	r1, r6
 8007130:	4628      	mov	r0, r5
 8007132:	4a35      	ldr	r2, [pc, #212]	@ (8007208 <_printf_float+0x2e0>)
 8007134:	47b8      	blx	r7
 8007136:	3001      	adds	r0, #1
 8007138:	f43f af51 	beq.w	8006fde <_printf_float+0xb6>
 800713c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007140:	4543      	cmp	r3, r8
 8007142:	db02      	blt.n	800714a <_printf_float+0x222>
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	07d8      	lsls	r0, r3, #31
 8007148:	d50f      	bpl.n	800716a <_printf_float+0x242>
 800714a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800714e:	4631      	mov	r1, r6
 8007150:	4628      	mov	r0, r5
 8007152:	47b8      	blx	r7
 8007154:	3001      	adds	r0, #1
 8007156:	f43f af42 	beq.w	8006fde <_printf_float+0xb6>
 800715a:	f04f 0900 	mov.w	r9, #0
 800715e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007162:	f104 0a1a 	add.w	sl, r4, #26
 8007166:	45c8      	cmp	r8, r9
 8007168:	dc09      	bgt.n	800717e <_printf_float+0x256>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	079b      	lsls	r3, r3, #30
 800716e:	f100 8102 	bmi.w	8007376 <_printf_float+0x44e>
 8007172:	68e0      	ldr	r0, [r4, #12]
 8007174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007176:	4298      	cmp	r0, r3
 8007178:	bfb8      	it	lt
 800717a:	4618      	movlt	r0, r3
 800717c:	e731      	b.n	8006fe2 <_printf_float+0xba>
 800717e:	2301      	movs	r3, #1
 8007180:	4652      	mov	r2, sl
 8007182:	4631      	mov	r1, r6
 8007184:	4628      	mov	r0, r5
 8007186:	47b8      	blx	r7
 8007188:	3001      	adds	r0, #1
 800718a:	f43f af28 	beq.w	8006fde <_printf_float+0xb6>
 800718e:	f109 0901 	add.w	r9, r9, #1
 8007192:	e7e8      	b.n	8007166 <_printf_float+0x23e>
 8007194:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007196:	2b00      	cmp	r3, #0
 8007198:	dc38      	bgt.n	800720c <_printf_float+0x2e4>
 800719a:	2301      	movs	r3, #1
 800719c:	4631      	mov	r1, r6
 800719e:	4628      	mov	r0, r5
 80071a0:	4a19      	ldr	r2, [pc, #100]	@ (8007208 <_printf_float+0x2e0>)
 80071a2:	47b8      	blx	r7
 80071a4:	3001      	adds	r0, #1
 80071a6:	f43f af1a 	beq.w	8006fde <_printf_float+0xb6>
 80071aa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80071ae:	ea59 0303 	orrs.w	r3, r9, r3
 80071b2:	d102      	bne.n	80071ba <_printf_float+0x292>
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	07d9      	lsls	r1, r3, #31
 80071b8:	d5d7      	bpl.n	800716a <_printf_float+0x242>
 80071ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80071be:	4631      	mov	r1, r6
 80071c0:	4628      	mov	r0, r5
 80071c2:	47b8      	blx	r7
 80071c4:	3001      	adds	r0, #1
 80071c6:	f43f af0a 	beq.w	8006fde <_printf_float+0xb6>
 80071ca:	f04f 0a00 	mov.w	sl, #0
 80071ce:	f104 0b1a 	add.w	fp, r4, #26
 80071d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071d4:	425b      	negs	r3, r3
 80071d6:	4553      	cmp	r3, sl
 80071d8:	dc01      	bgt.n	80071de <_printf_float+0x2b6>
 80071da:	464b      	mov	r3, r9
 80071dc:	e793      	b.n	8007106 <_printf_float+0x1de>
 80071de:	2301      	movs	r3, #1
 80071e0:	465a      	mov	r2, fp
 80071e2:	4631      	mov	r1, r6
 80071e4:	4628      	mov	r0, r5
 80071e6:	47b8      	blx	r7
 80071e8:	3001      	adds	r0, #1
 80071ea:	f43f aef8 	beq.w	8006fde <_printf_float+0xb6>
 80071ee:	f10a 0a01 	add.w	sl, sl, #1
 80071f2:	e7ee      	b.n	80071d2 <_printf_float+0x2aa>
 80071f4:	7fefffff 	.word	0x7fefffff
 80071f8:	08009762 	.word	0x08009762
 80071fc:	08009766 	.word	0x08009766
 8007200:	0800976a 	.word	0x0800976a
 8007204:	0800976e 	.word	0x0800976e
 8007208:	08009772 	.word	0x08009772
 800720c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800720e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007212:	4553      	cmp	r3, sl
 8007214:	bfa8      	it	ge
 8007216:	4653      	movge	r3, sl
 8007218:	2b00      	cmp	r3, #0
 800721a:	4699      	mov	r9, r3
 800721c:	dc36      	bgt.n	800728c <_printf_float+0x364>
 800721e:	f04f 0b00 	mov.w	fp, #0
 8007222:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007226:	f104 021a 	add.w	r2, r4, #26
 800722a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800722c:	930a      	str	r3, [sp, #40]	@ 0x28
 800722e:	eba3 0309 	sub.w	r3, r3, r9
 8007232:	455b      	cmp	r3, fp
 8007234:	dc31      	bgt.n	800729a <_printf_float+0x372>
 8007236:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007238:	459a      	cmp	sl, r3
 800723a:	dc3a      	bgt.n	80072b2 <_printf_float+0x38a>
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	07da      	lsls	r2, r3, #31
 8007240:	d437      	bmi.n	80072b2 <_printf_float+0x38a>
 8007242:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007244:	ebaa 0903 	sub.w	r9, sl, r3
 8007248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800724a:	ebaa 0303 	sub.w	r3, sl, r3
 800724e:	4599      	cmp	r9, r3
 8007250:	bfa8      	it	ge
 8007252:	4699      	movge	r9, r3
 8007254:	f1b9 0f00 	cmp.w	r9, #0
 8007258:	dc33      	bgt.n	80072c2 <_printf_float+0x39a>
 800725a:	f04f 0800 	mov.w	r8, #0
 800725e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007262:	f104 0b1a 	add.w	fp, r4, #26
 8007266:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007268:	ebaa 0303 	sub.w	r3, sl, r3
 800726c:	eba3 0309 	sub.w	r3, r3, r9
 8007270:	4543      	cmp	r3, r8
 8007272:	f77f af7a 	ble.w	800716a <_printf_float+0x242>
 8007276:	2301      	movs	r3, #1
 8007278:	465a      	mov	r2, fp
 800727a:	4631      	mov	r1, r6
 800727c:	4628      	mov	r0, r5
 800727e:	47b8      	blx	r7
 8007280:	3001      	adds	r0, #1
 8007282:	f43f aeac 	beq.w	8006fde <_printf_float+0xb6>
 8007286:	f108 0801 	add.w	r8, r8, #1
 800728a:	e7ec      	b.n	8007266 <_printf_float+0x33e>
 800728c:	4642      	mov	r2, r8
 800728e:	4631      	mov	r1, r6
 8007290:	4628      	mov	r0, r5
 8007292:	47b8      	blx	r7
 8007294:	3001      	adds	r0, #1
 8007296:	d1c2      	bne.n	800721e <_printf_float+0x2f6>
 8007298:	e6a1      	b.n	8006fde <_printf_float+0xb6>
 800729a:	2301      	movs	r3, #1
 800729c:	4631      	mov	r1, r6
 800729e:	4628      	mov	r0, r5
 80072a0:	920a      	str	r2, [sp, #40]	@ 0x28
 80072a2:	47b8      	blx	r7
 80072a4:	3001      	adds	r0, #1
 80072a6:	f43f ae9a 	beq.w	8006fde <_printf_float+0xb6>
 80072aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072ac:	f10b 0b01 	add.w	fp, fp, #1
 80072b0:	e7bb      	b.n	800722a <_printf_float+0x302>
 80072b2:	4631      	mov	r1, r6
 80072b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072b8:	4628      	mov	r0, r5
 80072ba:	47b8      	blx	r7
 80072bc:	3001      	adds	r0, #1
 80072be:	d1c0      	bne.n	8007242 <_printf_float+0x31a>
 80072c0:	e68d      	b.n	8006fde <_printf_float+0xb6>
 80072c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072c4:	464b      	mov	r3, r9
 80072c6:	4631      	mov	r1, r6
 80072c8:	4628      	mov	r0, r5
 80072ca:	4442      	add	r2, r8
 80072cc:	47b8      	blx	r7
 80072ce:	3001      	adds	r0, #1
 80072d0:	d1c3      	bne.n	800725a <_printf_float+0x332>
 80072d2:	e684      	b.n	8006fde <_printf_float+0xb6>
 80072d4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80072d8:	f1ba 0f01 	cmp.w	sl, #1
 80072dc:	dc01      	bgt.n	80072e2 <_printf_float+0x3ba>
 80072de:	07db      	lsls	r3, r3, #31
 80072e0:	d536      	bpl.n	8007350 <_printf_float+0x428>
 80072e2:	2301      	movs	r3, #1
 80072e4:	4642      	mov	r2, r8
 80072e6:	4631      	mov	r1, r6
 80072e8:	4628      	mov	r0, r5
 80072ea:	47b8      	blx	r7
 80072ec:	3001      	adds	r0, #1
 80072ee:	f43f ae76 	beq.w	8006fde <_printf_float+0xb6>
 80072f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072f6:	4631      	mov	r1, r6
 80072f8:	4628      	mov	r0, r5
 80072fa:	47b8      	blx	r7
 80072fc:	3001      	adds	r0, #1
 80072fe:	f43f ae6e 	beq.w	8006fde <_printf_float+0xb6>
 8007302:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007306:	2200      	movs	r2, #0
 8007308:	2300      	movs	r3, #0
 800730a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800730e:	f7f9 fb4b 	bl	80009a8 <__aeabi_dcmpeq>
 8007312:	b9c0      	cbnz	r0, 8007346 <_printf_float+0x41e>
 8007314:	4653      	mov	r3, sl
 8007316:	f108 0201 	add.w	r2, r8, #1
 800731a:	4631      	mov	r1, r6
 800731c:	4628      	mov	r0, r5
 800731e:	47b8      	blx	r7
 8007320:	3001      	adds	r0, #1
 8007322:	d10c      	bne.n	800733e <_printf_float+0x416>
 8007324:	e65b      	b.n	8006fde <_printf_float+0xb6>
 8007326:	2301      	movs	r3, #1
 8007328:	465a      	mov	r2, fp
 800732a:	4631      	mov	r1, r6
 800732c:	4628      	mov	r0, r5
 800732e:	47b8      	blx	r7
 8007330:	3001      	adds	r0, #1
 8007332:	f43f ae54 	beq.w	8006fde <_printf_float+0xb6>
 8007336:	f108 0801 	add.w	r8, r8, #1
 800733a:	45d0      	cmp	r8, sl
 800733c:	dbf3      	blt.n	8007326 <_printf_float+0x3fe>
 800733e:	464b      	mov	r3, r9
 8007340:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007344:	e6e0      	b.n	8007108 <_printf_float+0x1e0>
 8007346:	f04f 0800 	mov.w	r8, #0
 800734a:	f104 0b1a 	add.w	fp, r4, #26
 800734e:	e7f4      	b.n	800733a <_printf_float+0x412>
 8007350:	2301      	movs	r3, #1
 8007352:	4642      	mov	r2, r8
 8007354:	e7e1      	b.n	800731a <_printf_float+0x3f2>
 8007356:	2301      	movs	r3, #1
 8007358:	464a      	mov	r2, r9
 800735a:	4631      	mov	r1, r6
 800735c:	4628      	mov	r0, r5
 800735e:	47b8      	blx	r7
 8007360:	3001      	adds	r0, #1
 8007362:	f43f ae3c 	beq.w	8006fde <_printf_float+0xb6>
 8007366:	f108 0801 	add.w	r8, r8, #1
 800736a:	68e3      	ldr	r3, [r4, #12]
 800736c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800736e:	1a5b      	subs	r3, r3, r1
 8007370:	4543      	cmp	r3, r8
 8007372:	dcf0      	bgt.n	8007356 <_printf_float+0x42e>
 8007374:	e6fd      	b.n	8007172 <_printf_float+0x24a>
 8007376:	f04f 0800 	mov.w	r8, #0
 800737a:	f104 0919 	add.w	r9, r4, #25
 800737e:	e7f4      	b.n	800736a <_printf_float+0x442>

08007380 <_printf_common>:
 8007380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007384:	4616      	mov	r6, r2
 8007386:	4698      	mov	r8, r3
 8007388:	688a      	ldr	r2, [r1, #8]
 800738a:	690b      	ldr	r3, [r1, #16]
 800738c:	4607      	mov	r7, r0
 800738e:	4293      	cmp	r3, r2
 8007390:	bfb8      	it	lt
 8007392:	4613      	movlt	r3, r2
 8007394:	6033      	str	r3, [r6, #0]
 8007396:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800739a:	460c      	mov	r4, r1
 800739c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073a0:	b10a      	cbz	r2, 80073a6 <_printf_common+0x26>
 80073a2:	3301      	adds	r3, #1
 80073a4:	6033      	str	r3, [r6, #0]
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	0699      	lsls	r1, r3, #26
 80073aa:	bf42      	ittt	mi
 80073ac:	6833      	ldrmi	r3, [r6, #0]
 80073ae:	3302      	addmi	r3, #2
 80073b0:	6033      	strmi	r3, [r6, #0]
 80073b2:	6825      	ldr	r5, [r4, #0]
 80073b4:	f015 0506 	ands.w	r5, r5, #6
 80073b8:	d106      	bne.n	80073c8 <_printf_common+0x48>
 80073ba:	f104 0a19 	add.w	sl, r4, #25
 80073be:	68e3      	ldr	r3, [r4, #12]
 80073c0:	6832      	ldr	r2, [r6, #0]
 80073c2:	1a9b      	subs	r3, r3, r2
 80073c4:	42ab      	cmp	r3, r5
 80073c6:	dc2b      	bgt.n	8007420 <_printf_common+0xa0>
 80073c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073cc:	6822      	ldr	r2, [r4, #0]
 80073ce:	3b00      	subs	r3, #0
 80073d0:	bf18      	it	ne
 80073d2:	2301      	movne	r3, #1
 80073d4:	0692      	lsls	r2, r2, #26
 80073d6:	d430      	bmi.n	800743a <_printf_common+0xba>
 80073d8:	4641      	mov	r1, r8
 80073da:	4638      	mov	r0, r7
 80073dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073e0:	47c8      	blx	r9
 80073e2:	3001      	adds	r0, #1
 80073e4:	d023      	beq.n	800742e <_printf_common+0xae>
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	6922      	ldr	r2, [r4, #16]
 80073ea:	f003 0306 	and.w	r3, r3, #6
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	bf14      	ite	ne
 80073f2:	2500      	movne	r5, #0
 80073f4:	6833      	ldreq	r3, [r6, #0]
 80073f6:	f04f 0600 	mov.w	r6, #0
 80073fa:	bf08      	it	eq
 80073fc:	68e5      	ldreq	r5, [r4, #12]
 80073fe:	f104 041a 	add.w	r4, r4, #26
 8007402:	bf08      	it	eq
 8007404:	1aed      	subeq	r5, r5, r3
 8007406:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800740a:	bf08      	it	eq
 800740c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007410:	4293      	cmp	r3, r2
 8007412:	bfc4      	itt	gt
 8007414:	1a9b      	subgt	r3, r3, r2
 8007416:	18ed      	addgt	r5, r5, r3
 8007418:	42b5      	cmp	r5, r6
 800741a:	d11a      	bne.n	8007452 <_printf_common+0xd2>
 800741c:	2000      	movs	r0, #0
 800741e:	e008      	b.n	8007432 <_printf_common+0xb2>
 8007420:	2301      	movs	r3, #1
 8007422:	4652      	mov	r2, sl
 8007424:	4641      	mov	r1, r8
 8007426:	4638      	mov	r0, r7
 8007428:	47c8      	blx	r9
 800742a:	3001      	adds	r0, #1
 800742c:	d103      	bne.n	8007436 <_printf_common+0xb6>
 800742e:	f04f 30ff 	mov.w	r0, #4294967295
 8007432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007436:	3501      	adds	r5, #1
 8007438:	e7c1      	b.n	80073be <_printf_common+0x3e>
 800743a:	2030      	movs	r0, #48	@ 0x30
 800743c:	18e1      	adds	r1, r4, r3
 800743e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007448:	4422      	add	r2, r4
 800744a:	3302      	adds	r3, #2
 800744c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007450:	e7c2      	b.n	80073d8 <_printf_common+0x58>
 8007452:	2301      	movs	r3, #1
 8007454:	4622      	mov	r2, r4
 8007456:	4641      	mov	r1, r8
 8007458:	4638      	mov	r0, r7
 800745a:	47c8      	blx	r9
 800745c:	3001      	adds	r0, #1
 800745e:	d0e6      	beq.n	800742e <_printf_common+0xae>
 8007460:	3601      	adds	r6, #1
 8007462:	e7d9      	b.n	8007418 <_printf_common+0x98>

08007464 <_printf_i>:
 8007464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007468:	7e0f      	ldrb	r7, [r1, #24]
 800746a:	4691      	mov	r9, r2
 800746c:	2f78      	cmp	r7, #120	@ 0x78
 800746e:	4680      	mov	r8, r0
 8007470:	460c      	mov	r4, r1
 8007472:	469a      	mov	sl, r3
 8007474:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007476:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800747a:	d807      	bhi.n	800748c <_printf_i+0x28>
 800747c:	2f62      	cmp	r7, #98	@ 0x62
 800747e:	d80a      	bhi.n	8007496 <_printf_i+0x32>
 8007480:	2f00      	cmp	r7, #0
 8007482:	f000 80d3 	beq.w	800762c <_printf_i+0x1c8>
 8007486:	2f58      	cmp	r7, #88	@ 0x58
 8007488:	f000 80ba 	beq.w	8007600 <_printf_i+0x19c>
 800748c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007490:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007494:	e03a      	b.n	800750c <_printf_i+0xa8>
 8007496:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800749a:	2b15      	cmp	r3, #21
 800749c:	d8f6      	bhi.n	800748c <_printf_i+0x28>
 800749e:	a101      	add	r1, pc, #4	@ (adr r1, 80074a4 <_printf_i+0x40>)
 80074a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074a4:	080074fd 	.word	0x080074fd
 80074a8:	08007511 	.word	0x08007511
 80074ac:	0800748d 	.word	0x0800748d
 80074b0:	0800748d 	.word	0x0800748d
 80074b4:	0800748d 	.word	0x0800748d
 80074b8:	0800748d 	.word	0x0800748d
 80074bc:	08007511 	.word	0x08007511
 80074c0:	0800748d 	.word	0x0800748d
 80074c4:	0800748d 	.word	0x0800748d
 80074c8:	0800748d 	.word	0x0800748d
 80074cc:	0800748d 	.word	0x0800748d
 80074d0:	08007613 	.word	0x08007613
 80074d4:	0800753b 	.word	0x0800753b
 80074d8:	080075cd 	.word	0x080075cd
 80074dc:	0800748d 	.word	0x0800748d
 80074e0:	0800748d 	.word	0x0800748d
 80074e4:	08007635 	.word	0x08007635
 80074e8:	0800748d 	.word	0x0800748d
 80074ec:	0800753b 	.word	0x0800753b
 80074f0:	0800748d 	.word	0x0800748d
 80074f4:	0800748d 	.word	0x0800748d
 80074f8:	080075d5 	.word	0x080075d5
 80074fc:	6833      	ldr	r3, [r6, #0]
 80074fe:	1d1a      	adds	r2, r3, #4
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6032      	str	r2, [r6, #0]
 8007504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007508:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800750c:	2301      	movs	r3, #1
 800750e:	e09e      	b.n	800764e <_printf_i+0x1ea>
 8007510:	6833      	ldr	r3, [r6, #0]
 8007512:	6820      	ldr	r0, [r4, #0]
 8007514:	1d19      	adds	r1, r3, #4
 8007516:	6031      	str	r1, [r6, #0]
 8007518:	0606      	lsls	r6, r0, #24
 800751a:	d501      	bpl.n	8007520 <_printf_i+0xbc>
 800751c:	681d      	ldr	r5, [r3, #0]
 800751e:	e003      	b.n	8007528 <_printf_i+0xc4>
 8007520:	0645      	lsls	r5, r0, #25
 8007522:	d5fb      	bpl.n	800751c <_printf_i+0xb8>
 8007524:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007528:	2d00      	cmp	r5, #0
 800752a:	da03      	bge.n	8007534 <_printf_i+0xd0>
 800752c:	232d      	movs	r3, #45	@ 0x2d
 800752e:	426d      	negs	r5, r5
 8007530:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007534:	230a      	movs	r3, #10
 8007536:	4859      	ldr	r0, [pc, #356]	@ (800769c <_printf_i+0x238>)
 8007538:	e011      	b.n	800755e <_printf_i+0xfa>
 800753a:	6821      	ldr	r1, [r4, #0]
 800753c:	6833      	ldr	r3, [r6, #0]
 800753e:	0608      	lsls	r0, r1, #24
 8007540:	f853 5b04 	ldr.w	r5, [r3], #4
 8007544:	d402      	bmi.n	800754c <_printf_i+0xe8>
 8007546:	0649      	lsls	r1, r1, #25
 8007548:	bf48      	it	mi
 800754a:	b2ad      	uxthmi	r5, r5
 800754c:	2f6f      	cmp	r7, #111	@ 0x6f
 800754e:	6033      	str	r3, [r6, #0]
 8007550:	bf14      	ite	ne
 8007552:	230a      	movne	r3, #10
 8007554:	2308      	moveq	r3, #8
 8007556:	4851      	ldr	r0, [pc, #324]	@ (800769c <_printf_i+0x238>)
 8007558:	2100      	movs	r1, #0
 800755a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800755e:	6866      	ldr	r6, [r4, #4]
 8007560:	2e00      	cmp	r6, #0
 8007562:	bfa8      	it	ge
 8007564:	6821      	ldrge	r1, [r4, #0]
 8007566:	60a6      	str	r6, [r4, #8]
 8007568:	bfa4      	itt	ge
 800756a:	f021 0104 	bicge.w	r1, r1, #4
 800756e:	6021      	strge	r1, [r4, #0]
 8007570:	b90d      	cbnz	r5, 8007576 <_printf_i+0x112>
 8007572:	2e00      	cmp	r6, #0
 8007574:	d04b      	beq.n	800760e <_printf_i+0x1aa>
 8007576:	4616      	mov	r6, r2
 8007578:	fbb5 f1f3 	udiv	r1, r5, r3
 800757c:	fb03 5711 	mls	r7, r3, r1, r5
 8007580:	5dc7      	ldrb	r7, [r0, r7]
 8007582:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007586:	462f      	mov	r7, r5
 8007588:	42bb      	cmp	r3, r7
 800758a:	460d      	mov	r5, r1
 800758c:	d9f4      	bls.n	8007578 <_printf_i+0x114>
 800758e:	2b08      	cmp	r3, #8
 8007590:	d10b      	bne.n	80075aa <_printf_i+0x146>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	07df      	lsls	r7, r3, #31
 8007596:	d508      	bpl.n	80075aa <_printf_i+0x146>
 8007598:	6923      	ldr	r3, [r4, #16]
 800759a:	6861      	ldr	r1, [r4, #4]
 800759c:	4299      	cmp	r1, r3
 800759e:	bfde      	ittt	le
 80075a0:	2330      	movle	r3, #48	@ 0x30
 80075a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075aa:	1b92      	subs	r2, r2, r6
 80075ac:	6122      	str	r2, [r4, #16]
 80075ae:	464b      	mov	r3, r9
 80075b0:	4621      	mov	r1, r4
 80075b2:	4640      	mov	r0, r8
 80075b4:	f8cd a000 	str.w	sl, [sp]
 80075b8:	aa03      	add	r2, sp, #12
 80075ba:	f7ff fee1 	bl	8007380 <_printf_common>
 80075be:	3001      	adds	r0, #1
 80075c0:	d14a      	bne.n	8007658 <_printf_i+0x1f4>
 80075c2:	f04f 30ff 	mov.w	r0, #4294967295
 80075c6:	b004      	add	sp, #16
 80075c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	f043 0320 	orr.w	r3, r3, #32
 80075d2:	6023      	str	r3, [r4, #0]
 80075d4:	2778      	movs	r7, #120	@ 0x78
 80075d6:	4832      	ldr	r0, [pc, #200]	@ (80076a0 <_printf_i+0x23c>)
 80075d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	6831      	ldr	r1, [r6, #0]
 80075e0:	061f      	lsls	r7, r3, #24
 80075e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80075e6:	d402      	bmi.n	80075ee <_printf_i+0x18a>
 80075e8:	065f      	lsls	r7, r3, #25
 80075ea:	bf48      	it	mi
 80075ec:	b2ad      	uxthmi	r5, r5
 80075ee:	6031      	str	r1, [r6, #0]
 80075f0:	07d9      	lsls	r1, r3, #31
 80075f2:	bf44      	itt	mi
 80075f4:	f043 0320 	orrmi.w	r3, r3, #32
 80075f8:	6023      	strmi	r3, [r4, #0]
 80075fa:	b11d      	cbz	r5, 8007604 <_printf_i+0x1a0>
 80075fc:	2310      	movs	r3, #16
 80075fe:	e7ab      	b.n	8007558 <_printf_i+0xf4>
 8007600:	4826      	ldr	r0, [pc, #152]	@ (800769c <_printf_i+0x238>)
 8007602:	e7e9      	b.n	80075d8 <_printf_i+0x174>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	f023 0320 	bic.w	r3, r3, #32
 800760a:	6023      	str	r3, [r4, #0]
 800760c:	e7f6      	b.n	80075fc <_printf_i+0x198>
 800760e:	4616      	mov	r6, r2
 8007610:	e7bd      	b.n	800758e <_printf_i+0x12a>
 8007612:	6833      	ldr	r3, [r6, #0]
 8007614:	6825      	ldr	r5, [r4, #0]
 8007616:	1d18      	adds	r0, r3, #4
 8007618:	6961      	ldr	r1, [r4, #20]
 800761a:	6030      	str	r0, [r6, #0]
 800761c:	062e      	lsls	r6, r5, #24
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	d501      	bpl.n	8007626 <_printf_i+0x1c2>
 8007622:	6019      	str	r1, [r3, #0]
 8007624:	e002      	b.n	800762c <_printf_i+0x1c8>
 8007626:	0668      	lsls	r0, r5, #25
 8007628:	d5fb      	bpl.n	8007622 <_printf_i+0x1be>
 800762a:	8019      	strh	r1, [r3, #0]
 800762c:	2300      	movs	r3, #0
 800762e:	4616      	mov	r6, r2
 8007630:	6123      	str	r3, [r4, #16]
 8007632:	e7bc      	b.n	80075ae <_printf_i+0x14a>
 8007634:	6833      	ldr	r3, [r6, #0]
 8007636:	2100      	movs	r1, #0
 8007638:	1d1a      	adds	r2, r3, #4
 800763a:	6032      	str	r2, [r6, #0]
 800763c:	681e      	ldr	r6, [r3, #0]
 800763e:	6862      	ldr	r2, [r4, #4]
 8007640:	4630      	mov	r0, r6
 8007642:	f000 f9b4 	bl	80079ae <memchr>
 8007646:	b108      	cbz	r0, 800764c <_printf_i+0x1e8>
 8007648:	1b80      	subs	r0, r0, r6
 800764a:	6060      	str	r0, [r4, #4]
 800764c:	6863      	ldr	r3, [r4, #4]
 800764e:	6123      	str	r3, [r4, #16]
 8007650:	2300      	movs	r3, #0
 8007652:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007656:	e7aa      	b.n	80075ae <_printf_i+0x14a>
 8007658:	4632      	mov	r2, r6
 800765a:	4649      	mov	r1, r9
 800765c:	4640      	mov	r0, r8
 800765e:	6923      	ldr	r3, [r4, #16]
 8007660:	47d0      	blx	sl
 8007662:	3001      	adds	r0, #1
 8007664:	d0ad      	beq.n	80075c2 <_printf_i+0x15e>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	079b      	lsls	r3, r3, #30
 800766a:	d413      	bmi.n	8007694 <_printf_i+0x230>
 800766c:	68e0      	ldr	r0, [r4, #12]
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	4298      	cmp	r0, r3
 8007672:	bfb8      	it	lt
 8007674:	4618      	movlt	r0, r3
 8007676:	e7a6      	b.n	80075c6 <_printf_i+0x162>
 8007678:	2301      	movs	r3, #1
 800767a:	4632      	mov	r2, r6
 800767c:	4649      	mov	r1, r9
 800767e:	4640      	mov	r0, r8
 8007680:	47d0      	blx	sl
 8007682:	3001      	adds	r0, #1
 8007684:	d09d      	beq.n	80075c2 <_printf_i+0x15e>
 8007686:	3501      	adds	r5, #1
 8007688:	68e3      	ldr	r3, [r4, #12]
 800768a:	9903      	ldr	r1, [sp, #12]
 800768c:	1a5b      	subs	r3, r3, r1
 800768e:	42ab      	cmp	r3, r5
 8007690:	dcf2      	bgt.n	8007678 <_printf_i+0x214>
 8007692:	e7eb      	b.n	800766c <_printf_i+0x208>
 8007694:	2500      	movs	r5, #0
 8007696:	f104 0619 	add.w	r6, r4, #25
 800769a:	e7f5      	b.n	8007688 <_printf_i+0x224>
 800769c:	08009774 	.word	0x08009774
 80076a0:	08009785 	.word	0x08009785

080076a4 <std>:
 80076a4:	2300      	movs	r3, #0
 80076a6:	b510      	push	{r4, lr}
 80076a8:	4604      	mov	r4, r0
 80076aa:	e9c0 3300 	strd	r3, r3, [r0]
 80076ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076b2:	6083      	str	r3, [r0, #8]
 80076b4:	8181      	strh	r1, [r0, #12]
 80076b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80076b8:	81c2      	strh	r2, [r0, #14]
 80076ba:	6183      	str	r3, [r0, #24]
 80076bc:	4619      	mov	r1, r3
 80076be:	2208      	movs	r2, #8
 80076c0:	305c      	adds	r0, #92	@ 0x5c
 80076c2:	f000 f8f4 	bl	80078ae <memset>
 80076c6:	4b0d      	ldr	r3, [pc, #52]	@ (80076fc <std+0x58>)
 80076c8:	6224      	str	r4, [r4, #32]
 80076ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80076cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007700 <std+0x5c>)
 80076ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007704 <std+0x60>)
 80076d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007708 <std+0x64>)
 80076d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80076d8:	4b0c      	ldr	r3, [pc, #48]	@ (800770c <std+0x68>)
 80076da:	429c      	cmp	r4, r3
 80076dc:	d006      	beq.n	80076ec <std+0x48>
 80076de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076e2:	4294      	cmp	r4, r2
 80076e4:	d002      	beq.n	80076ec <std+0x48>
 80076e6:	33d0      	adds	r3, #208	@ 0xd0
 80076e8:	429c      	cmp	r4, r3
 80076ea:	d105      	bne.n	80076f8 <std+0x54>
 80076ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076f4:	f000 b958 	b.w	80079a8 <__retarget_lock_init_recursive>
 80076f8:	bd10      	pop	{r4, pc}
 80076fa:	bf00      	nop
 80076fc:	08007829 	.word	0x08007829
 8007700:	0800784b 	.word	0x0800784b
 8007704:	08007883 	.word	0x08007883
 8007708:	080078a7 	.word	0x080078a7
 800770c:	200008bc 	.word	0x200008bc

08007710 <stdio_exit_handler>:
 8007710:	4a02      	ldr	r2, [pc, #8]	@ (800771c <stdio_exit_handler+0xc>)
 8007712:	4903      	ldr	r1, [pc, #12]	@ (8007720 <stdio_exit_handler+0x10>)
 8007714:	4803      	ldr	r0, [pc, #12]	@ (8007724 <stdio_exit_handler+0x14>)
 8007716:	f000 b869 	b.w	80077ec <_fwalk_sglue>
 800771a:	bf00      	nop
 800771c:	20000024 	.word	0x20000024
 8007720:	0800906d 	.word	0x0800906d
 8007724:	20000034 	.word	0x20000034

08007728 <cleanup_stdio>:
 8007728:	6841      	ldr	r1, [r0, #4]
 800772a:	4b0c      	ldr	r3, [pc, #48]	@ (800775c <cleanup_stdio+0x34>)
 800772c:	b510      	push	{r4, lr}
 800772e:	4299      	cmp	r1, r3
 8007730:	4604      	mov	r4, r0
 8007732:	d001      	beq.n	8007738 <cleanup_stdio+0x10>
 8007734:	f001 fc9a 	bl	800906c <_fflush_r>
 8007738:	68a1      	ldr	r1, [r4, #8]
 800773a:	4b09      	ldr	r3, [pc, #36]	@ (8007760 <cleanup_stdio+0x38>)
 800773c:	4299      	cmp	r1, r3
 800773e:	d002      	beq.n	8007746 <cleanup_stdio+0x1e>
 8007740:	4620      	mov	r0, r4
 8007742:	f001 fc93 	bl	800906c <_fflush_r>
 8007746:	68e1      	ldr	r1, [r4, #12]
 8007748:	4b06      	ldr	r3, [pc, #24]	@ (8007764 <cleanup_stdio+0x3c>)
 800774a:	4299      	cmp	r1, r3
 800774c:	d004      	beq.n	8007758 <cleanup_stdio+0x30>
 800774e:	4620      	mov	r0, r4
 8007750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007754:	f001 bc8a 	b.w	800906c <_fflush_r>
 8007758:	bd10      	pop	{r4, pc}
 800775a:	bf00      	nop
 800775c:	200008bc 	.word	0x200008bc
 8007760:	20000924 	.word	0x20000924
 8007764:	2000098c 	.word	0x2000098c

08007768 <global_stdio_init.part.0>:
 8007768:	b510      	push	{r4, lr}
 800776a:	4b0b      	ldr	r3, [pc, #44]	@ (8007798 <global_stdio_init.part.0+0x30>)
 800776c:	4c0b      	ldr	r4, [pc, #44]	@ (800779c <global_stdio_init.part.0+0x34>)
 800776e:	4a0c      	ldr	r2, [pc, #48]	@ (80077a0 <global_stdio_init.part.0+0x38>)
 8007770:	4620      	mov	r0, r4
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	2104      	movs	r1, #4
 8007776:	2200      	movs	r2, #0
 8007778:	f7ff ff94 	bl	80076a4 <std>
 800777c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007780:	2201      	movs	r2, #1
 8007782:	2109      	movs	r1, #9
 8007784:	f7ff ff8e 	bl	80076a4 <std>
 8007788:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800778c:	2202      	movs	r2, #2
 800778e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007792:	2112      	movs	r1, #18
 8007794:	f7ff bf86 	b.w	80076a4 <std>
 8007798:	200009f4 	.word	0x200009f4
 800779c:	200008bc 	.word	0x200008bc
 80077a0:	08007711 	.word	0x08007711

080077a4 <__sfp_lock_acquire>:
 80077a4:	4801      	ldr	r0, [pc, #4]	@ (80077ac <__sfp_lock_acquire+0x8>)
 80077a6:	f000 b900 	b.w	80079aa <__retarget_lock_acquire_recursive>
 80077aa:	bf00      	nop
 80077ac:	200009fd 	.word	0x200009fd

080077b0 <__sfp_lock_release>:
 80077b0:	4801      	ldr	r0, [pc, #4]	@ (80077b8 <__sfp_lock_release+0x8>)
 80077b2:	f000 b8fb 	b.w	80079ac <__retarget_lock_release_recursive>
 80077b6:	bf00      	nop
 80077b8:	200009fd 	.word	0x200009fd

080077bc <__sinit>:
 80077bc:	b510      	push	{r4, lr}
 80077be:	4604      	mov	r4, r0
 80077c0:	f7ff fff0 	bl	80077a4 <__sfp_lock_acquire>
 80077c4:	6a23      	ldr	r3, [r4, #32]
 80077c6:	b11b      	cbz	r3, 80077d0 <__sinit+0x14>
 80077c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077cc:	f7ff bff0 	b.w	80077b0 <__sfp_lock_release>
 80077d0:	4b04      	ldr	r3, [pc, #16]	@ (80077e4 <__sinit+0x28>)
 80077d2:	6223      	str	r3, [r4, #32]
 80077d4:	4b04      	ldr	r3, [pc, #16]	@ (80077e8 <__sinit+0x2c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f5      	bne.n	80077c8 <__sinit+0xc>
 80077dc:	f7ff ffc4 	bl	8007768 <global_stdio_init.part.0>
 80077e0:	e7f2      	b.n	80077c8 <__sinit+0xc>
 80077e2:	bf00      	nop
 80077e4:	08007729 	.word	0x08007729
 80077e8:	200009f4 	.word	0x200009f4

080077ec <_fwalk_sglue>:
 80077ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f0:	4607      	mov	r7, r0
 80077f2:	4688      	mov	r8, r1
 80077f4:	4614      	mov	r4, r2
 80077f6:	2600      	movs	r6, #0
 80077f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077fc:	f1b9 0901 	subs.w	r9, r9, #1
 8007800:	d505      	bpl.n	800780e <_fwalk_sglue+0x22>
 8007802:	6824      	ldr	r4, [r4, #0]
 8007804:	2c00      	cmp	r4, #0
 8007806:	d1f7      	bne.n	80077f8 <_fwalk_sglue+0xc>
 8007808:	4630      	mov	r0, r6
 800780a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800780e:	89ab      	ldrh	r3, [r5, #12]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d907      	bls.n	8007824 <_fwalk_sglue+0x38>
 8007814:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007818:	3301      	adds	r3, #1
 800781a:	d003      	beq.n	8007824 <_fwalk_sglue+0x38>
 800781c:	4629      	mov	r1, r5
 800781e:	4638      	mov	r0, r7
 8007820:	47c0      	blx	r8
 8007822:	4306      	orrs	r6, r0
 8007824:	3568      	adds	r5, #104	@ 0x68
 8007826:	e7e9      	b.n	80077fc <_fwalk_sglue+0x10>

08007828 <__sread>:
 8007828:	b510      	push	{r4, lr}
 800782a:	460c      	mov	r4, r1
 800782c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007830:	f000 f86c 	bl	800790c <_read_r>
 8007834:	2800      	cmp	r0, #0
 8007836:	bfab      	itete	ge
 8007838:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800783a:	89a3      	ldrhlt	r3, [r4, #12]
 800783c:	181b      	addge	r3, r3, r0
 800783e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007842:	bfac      	ite	ge
 8007844:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007846:	81a3      	strhlt	r3, [r4, #12]
 8007848:	bd10      	pop	{r4, pc}

0800784a <__swrite>:
 800784a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784e:	461f      	mov	r7, r3
 8007850:	898b      	ldrh	r3, [r1, #12]
 8007852:	4605      	mov	r5, r0
 8007854:	05db      	lsls	r3, r3, #23
 8007856:	460c      	mov	r4, r1
 8007858:	4616      	mov	r6, r2
 800785a:	d505      	bpl.n	8007868 <__swrite+0x1e>
 800785c:	2302      	movs	r3, #2
 800785e:	2200      	movs	r2, #0
 8007860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007864:	f000 f840 	bl	80078e8 <_lseek_r>
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	4632      	mov	r2, r6
 800786c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007870:	81a3      	strh	r3, [r4, #12]
 8007872:	4628      	mov	r0, r5
 8007874:	463b      	mov	r3, r7
 8007876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800787a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800787e:	f000 b857 	b.w	8007930 <_write_r>

08007882 <__sseek>:
 8007882:	b510      	push	{r4, lr}
 8007884:	460c      	mov	r4, r1
 8007886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800788a:	f000 f82d 	bl	80078e8 <_lseek_r>
 800788e:	1c43      	adds	r3, r0, #1
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	bf15      	itete	ne
 8007894:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007896:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800789a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800789e:	81a3      	strheq	r3, [r4, #12]
 80078a0:	bf18      	it	ne
 80078a2:	81a3      	strhne	r3, [r4, #12]
 80078a4:	bd10      	pop	{r4, pc}

080078a6 <__sclose>:
 80078a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078aa:	f000 b80d 	b.w	80078c8 <_close_r>

080078ae <memset>:
 80078ae:	4603      	mov	r3, r0
 80078b0:	4402      	add	r2, r0
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d100      	bne.n	80078b8 <memset+0xa>
 80078b6:	4770      	bx	lr
 80078b8:	f803 1b01 	strb.w	r1, [r3], #1
 80078bc:	e7f9      	b.n	80078b2 <memset+0x4>
	...

080078c0 <_localeconv_r>:
 80078c0:	4800      	ldr	r0, [pc, #0]	@ (80078c4 <_localeconv_r+0x4>)
 80078c2:	4770      	bx	lr
 80078c4:	20000170 	.word	0x20000170

080078c8 <_close_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	2300      	movs	r3, #0
 80078cc:	4d05      	ldr	r5, [pc, #20]	@ (80078e4 <_close_r+0x1c>)
 80078ce:	4604      	mov	r4, r0
 80078d0:	4608      	mov	r0, r1
 80078d2:	602b      	str	r3, [r5, #0]
 80078d4:	f7fa ff85 	bl	80027e2 <_close>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d102      	bne.n	80078e2 <_close_r+0x1a>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	b103      	cbz	r3, 80078e2 <_close_r+0x1a>
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
 80078e4:	200009f8 	.word	0x200009f8

080078e8 <_lseek_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4604      	mov	r4, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	4611      	mov	r1, r2
 80078f0:	2200      	movs	r2, #0
 80078f2:	4d05      	ldr	r5, [pc, #20]	@ (8007908 <_lseek_r+0x20>)
 80078f4:	602a      	str	r2, [r5, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	f7fa ff97 	bl	800282a <_lseek>
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	d102      	bne.n	8007906 <_lseek_r+0x1e>
 8007900:	682b      	ldr	r3, [r5, #0]
 8007902:	b103      	cbz	r3, 8007906 <_lseek_r+0x1e>
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	200009f8 	.word	0x200009f8

0800790c <_read_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4604      	mov	r4, r0
 8007910:	4608      	mov	r0, r1
 8007912:	4611      	mov	r1, r2
 8007914:	2200      	movs	r2, #0
 8007916:	4d05      	ldr	r5, [pc, #20]	@ (800792c <_read_r+0x20>)
 8007918:	602a      	str	r2, [r5, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	f7fa ff28 	bl	8002770 <_read>
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	d102      	bne.n	800792a <_read_r+0x1e>
 8007924:	682b      	ldr	r3, [r5, #0]
 8007926:	b103      	cbz	r3, 800792a <_read_r+0x1e>
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	bd38      	pop	{r3, r4, r5, pc}
 800792c:	200009f8 	.word	0x200009f8

08007930 <_write_r>:
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	4604      	mov	r4, r0
 8007934:	4608      	mov	r0, r1
 8007936:	4611      	mov	r1, r2
 8007938:	2200      	movs	r2, #0
 800793a:	4d05      	ldr	r5, [pc, #20]	@ (8007950 <_write_r+0x20>)
 800793c:	602a      	str	r2, [r5, #0]
 800793e:	461a      	mov	r2, r3
 8007940:	f7fa ff33 	bl	80027aa <_write>
 8007944:	1c43      	adds	r3, r0, #1
 8007946:	d102      	bne.n	800794e <_write_r+0x1e>
 8007948:	682b      	ldr	r3, [r5, #0]
 800794a:	b103      	cbz	r3, 800794e <_write_r+0x1e>
 800794c:	6023      	str	r3, [r4, #0]
 800794e:	bd38      	pop	{r3, r4, r5, pc}
 8007950:	200009f8 	.word	0x200009f8

08007954 <__errno>:
 8007954:	4b01      	ldr	r3, [pc, #4]	@ (800795c <__errno+0x8>)
 8007956:	6818      	ldr	r0, [r3, #0]
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	20000030 	.word	0x20000030

08007960 <__libc_init_array>:
 8007960:	b570      	push	{r4, r5, r6, lr}
 8007962:	2600      	movs	r6, #0
 8007964:	4d0c      	ldr	r5, [pc, #48]	@ (8007998 <__libc_init_array+0x38>)
 8007966:	4c0d      	ldr	r4, [pc, #52]	@ (800799c <__libc_init_array+0x3c>)
 8007968:	1b64      	subs	r4, r4, r5
 800796a:	10a4      	asrs	r4, r4, #2
 800796c:	42a6      	cmp	r6, r4
 800796e:	d109      	bne.n	8007984 <__libc_init_array+0x24>
 8007970:	f001 fec8 	bl	8009704 <_init>
 8007974:	2600      	movs	r6, #0
 8007976:	4d0a      	ldr	r5, [pc, #40]	@ (80079a0 <__libc_init_array+0x40>)
 8007978:	4c0a      	ldr	r4, [pc, #40]	@ (80079a4 <__libc_init_array+0x44>)
 800797a:	1b64      	subs	r4, r4, r5
 800797c:	10a4      	asrs	r4, r4, #2
 800797e:	42a6      	cmp	r6, r4
 8007980:	d105      	bne.n	800798e <__libc_init_array+0x2e>
 8007982:	bd70      	pop	{r4, r5, r6, pc}
 8007984:	f855 3b04 	ldr.w	r3, [r5], #4
 8007988:	4798      	blx	r3
 800798a:	3601      	adds	r6, #1
 800798c:	e7ee      	b.n	800796c <__libc_init_array+0xc>
 800798e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007992:	4798      	blx	r3
 8007994:	3601      	adds	r6, #1
 8007996:	e7f2      	b.n	800797e <__libc_init_array+0x1e>
 8007998:	08009ad8 	.word	0x08009ad8
 800799c:	08009ad8 	.word	0x08009ad8
 80079a0:	08009ad8 	.word	0x08009ad8
 80079a4:	08009adc 	.word	0x08009adc

080079a8 <__retarget_lock_init_recursive>:
 80079a8:	4770      	bx	lr

080079aa <__retarget_lock_acquire_recursive>:
 80079aa:	4770      	bx	lr

080079ac <__retarget_lock_release_recursive>:
 80079ac:	4770      	bx	lr

080079ae <memchr>:
 80079ae:	4603      	mov	r3, r0
 80079b0:	b510      	push	{r4, lr}
 80079b2:	b2c9      	uxtb	r1, r1
 80079b4:	4402      	add	r2, r0
 80079b6:	4293      	cmp	r3, r2
 80079b8:	4618      	mov	r0, r3
 80079ba:	d101      	bne.n	80079c0 <memchr+0x12>
 80079bc:	2000      	movs	r0, #0
 80079be:	e003      	b.n	80079c8 <memchr+0x1a>
 80079c0:	7804      	ldrb	r4, [r0, #0]
 80079c2:	3301      	adds	r3, #1
 80079c4:	428c      	cmp	r4, r1
 80079c6:	d1f6      	bne.n	80079b6 <memchr+0x8>
 80079c8:	bd10      	pop	{r4, pc}

080079ca <quorem>:
 80079ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ce:	6903      	ldr	r3, [r0, #16]
 80079d0:	690c      	ldr	r4, [r1, #16]
 80079d2:	4607      	mov	r7, r0
 80079d4:	42a3      	cmp	r3, r4
 80079d6:	db7e      	blt.n	8007ad6 <quorem+0x10c>
 80079d8:	3c01      	subs	r4, #1
 80079da:	00a3      	lsls	r3, r4, #2
 80079dc:	f100 0514 	add.w	r5, r0, #20
 80079e0:	f101 0814 	add.w	r8, r1, #20
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079ea:	9301      	str	r3, [sp, #4]
 80079ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079f4:	3301      	adds	r3, #1
 80079f6:	429a      	cmp	r2, r3
 80079f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80079fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a00:	d32e      	bcc.n	8007a60 <quorem+0x96>
 8007a02:	f04f 0a00 	mov.w	sl, #0
 8007a06:	46c4      	mov	ip, r8
 8007a08:	46ae      	mov	lr, r5
 8007a0a:	46d3      	mov	fp, sl
 8007a0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a10:	b298      	uxth	r0, r3
 8007a12:	fb06 a000 	mla	r0, r6, r0, sl
 8007a16:	0c1b      	lsrs	r3, r3, #16
 8007a18:	0c02      	lsrs	r2, r0, #16
 8007a1a:	fb06 2303 	mla	r3, r6, r3, r2
 8007a1e:	f8de 2000 	ldr.w	r2, [lr]
 8007a22:	b280      	uxth	r0, r0
 8007a24:	b292      	uxth	r2, r2
 8007a26:	1a12      	subs	r2, r2, r0
 8007a28:	445a      	add	r2, fp
 8007a2a:	f8de 0000 	ldr.w	r0, [lr]
 8007a2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007a38:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007a3c:	b292      	uxth	r2, r2
 8007a3e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a42:	45e1      	cmp	r9, ip
 8007a44:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a48:	f84e 2b04 	str.w	r2, [lr], #4
 8007a4c:	d2de      	bcs.n	8007a0c <quorem+0x42>
 8007a4e:	9b00      	ldr	r3, [sp, #0]
 8007a50:	58eb      	ldr	r3, [r5, r3]
 8007a52:	b92b      	cbnz	r3, 8007a60 <quorem+0x96>
 8007a54:	9b01      	ldr	r3, [sp, #4]
 8007a56:	3b04      	subs	r3, #4
 8007a58:	429d      	cmp	r5, r3
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	d32f      	bcc.n	8007abe <quorem+0xf4>
 8007a5e:	613c      	str	r4, [r7, #16]
 8007a60:	4638      	mov	r0, r7
 8007a62:	f001 f97b 	bl	8008d5c <__mcmp>
 8007a66:	2800      	cmp	r0, #0
 8007a68:	db25      	blt.n	8007ab6 <quorem+0xec>
 8007a6a:	4629      	mov	r1, r5
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a72:	f8d1 c000 	ldr.w	ip, [r1]
 8007a76:	fa1f fe82 	uxth.w	lr, r2
 8007a7a:	fa1f f38c 	uxth.w	r3, ip
 8007a7e:	eba3 030e 	sub.w	r3, r3, lr
 8007a82:	4403      	add	r3, r0
 8007a84:	0c12      	lsrs	r2, r2, #16
 8007a86:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a8a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a94:	45c1      	cmp	r9, r8
 8007a96:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a9a:	f841 3b04 	str.w	r3, [r1], #4
 8007a9e:	d2e6      	bcs.n	8007a6e <quorem+0xa4>
 8007aa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aa4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007aa8:	b922      	cbnz	r2, 8007ab4 <quorem+0xea>
 8007aaa:	3b04      	subs	r3, #4
 8007aac:	429d      	cmp	r5, r3
 8007aae:	461a      	mov	r2, r3
 8007ab0:	d30b      	bcc.n	8007aca <quorem+0x100>
 8007ab2:	613c      	str	r4, [r7, #16]
 8007ab4:	3601      	adds	r6, #1
 8007ab6:	4630      	mov	r0, r6
 8007ab8:	b003      	add	sp, #12
 8007aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007abe:	6812      	ldr	r2, [r2, #0]
 8007ac0:	3b04      	subs	r3, #4
 8007ac2:	2a00      	cmp	r2, #0
 8007ac4:	d1cb      	bne.n	8007a5e <quorem+0x94>
 8007ac6:	3c01      	subs	r4, #1
 8007ac8:	e7c6      	b.n	8007a58 <quorem+0x8e>
 8007aca:	6812      	ldr	r2, [r2, #0]
 8007acc:	3b04      	subs	r3, #4
 8007ace:	2a00      	cmp	r2, #0
 8007ad0:	d1ef      	bne.n	8007ab2 <quorem+0xe8>
 8007ad2:	3c01      	subs	r4, #1
 8007ad4:	e7ea      	b.n	8007aac <quorem+0xe2>
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e7ee      	b.n	8007ab8 <quorem+0xee>
 8007ada:	0000      	movs	r0, r0
 8007adc:	0000      	movs	r0, r0
	...

08007ae0 <_dtoa_r>:
 8007ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae4:	4614      	mov	r4, r2
 8007ae6:	461d      	mov	r5, r3
 8007ae8:	69c7      	ldr	r7, [r0, #28]
 8007aea:	b097      	sub	sp, #92	@ 0x5c
 8007aec:	4683      	mov	fp, r0
 8007aee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007af2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007af4:	b97f      	cbnz	r7, 8007b16 <_dtoa_r+0x36>
 8007af6:	2010      	movs	r0, #16
 8007af8:	f000 fe02 	bl	8008700 <malloc>
 8007afc:	4602      	mov	r2, r0
 8007afe:	f8cb 001c 	str.w	r0, [fp, #28]
 8007b02:	b920      	cbnz	r0, 8007b0e <_dtoa_r+0x2e>
 8007b04:	21ef      	movs	r1, #239	@ 0xef
 8007b06:	4ba8      	ldr	r3, [pc, #672]	@ (8007da8 <_dtoa_r+0x2c8>)
 8007b08:	48a8      	ldr	r0, [pc, #672]	@ (8007dac <_dtoa_r+0x2cc>)
 8007b0a:	f001 faf5 	bl	80090f8 <__assert_func>
 8007b0e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b12:	6007      	str	r7, [r0, #0]
 8007b14:	60c7      	str	r7, [r0, #12]
 8007b16:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b1a:	6819      	ldr	r1, [r3, #0]
 8007b1c:	b159      	cbz	r1, 8007b36 <_dtoa_r+0x56>
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	2301      	movs	r3, #1
 8007b22:	4093      	lsls	r3, r2
 8007b24:	604a      	str	r2, [r1, #4]
 8007b26:	608b      	str	r3, [r1, #8]
 8007b28:	4658      	mov	r0, fp
 8007b2a:	f000 fedf 	bl	80088ec <_Bfree>
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	1e2b      	subs	r3, r5, #0
 8007b38:	bfaf      	iteee	ge
 8007b3a:	2300      	movge	r3, #0
 8007b3c:	2201      	movlt	r2, #1
 8007b3e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007b42:	9303      	strlt	r3, [sp, #12]
 8007b44:	bfa8      	it	ge
 8007b46:	6033      	strge	r3, [r6, #0]
 8007b48:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007b4c:	4b98      	ldr	r3, [pc, #608]	@ (8007db0 <_dtoa_r+0x2d0>)
 8007b4e:	bfb8      	it	lt
 8007b50:	6032      	strlt	r2, [r6, #0]
 8007b52:	ea33 0308 	bics.w	r3, r3, r8
 8007b56:	d112      	bne.n	8007b7e <_dtoa_r+0x9e>
 8007b58:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b5c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007b64:	4323      	orrs	r3, r4
 8007b66:	f000 8550 	beq.w	800860a <_dtoa_r+0xb2a>
 8007b6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b6c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007db4 <_dtoa_r+0x2d4>
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 8552 	beq.w	800861a <_dtoa_r+0xb3a>
 8007b76:	f10a 0303 	add.w	r3, sl, #3
 8007b7a:	f000 bd4c 	b.w	8008616 <_dtoa_r+0xb36>
 8007b7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b82:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007b86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f7f8 ff0b 	bl	80009a8 <__aeabi_dcmpeq>
 8007b92:	4607      	mov	r7, r0
 8007b94:	b158      	cbz	r0, 8007bae <_dtoa_r+0xce>
 8007b96:	2301      	movs	r3, #1
 8007b98:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b9e:	b113      	cbz	r3, 8007ba6 <_dtoa_r+0xc6>
 8007ba0:	4b85      	ldr	r3, [pc, #532]	@ (8007db8 <_dtoa_r+0x2d8>)
 8007ba2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007ba4:	6013      	str	r3, [r2, #0]
 8007ba6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007dbc <_dtoa_r+0x2dc>
 8007baa:	f000 bd36 	b.w	800861a <_dtoa_r+0xb3a>
 8007bae:	ab14      	add	r3, sp, #80	@ 0x50
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	ab15      	add	r3, sp, #84	@ 0x54
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	4658      	mov	r0, fp
 8007bb8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007bbc:	f001 f97e 	bl	8008ebc <__d2b>
 8007bc0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007bc4:	4681      	mov	r9, r0
 8007bc6:	2e00      	cmp	r6, #0
 8007bc8:	d077      	beq.n	8007cba <_dtoa_r+0x1da>
 8007bca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bd0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bd8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007bdc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007be0:	9712      	str	r7, [sp, #72]	@ 0x48
 8007be2:	4619      	mov	r1, r3
 8007be4:	2200      	movs	r2, #0
 8007be6:	4b76      	ldr	r3, [pc, #472]	@ (8007dc0 <_dtoa_r+0x2e0>)
 8007be8:	f7f8 fabe 	bl	8000168 <__aeabi_dsub>
 8007bec:	a368      	add	r3, pc, #416	@ (adr r3, 8007d90 <_dtoa_r+0x2b0>)
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	f7f8 fc71 	bl	80004d8 <__aeabi_dmul>
 8007bf6:	a368      	add	r3, pc, #416	@ (adr r3, 8007d98 <_dtoa_r+0x2b8>)
 8007bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfc:	f7f8 fab6 	bl	800016c <__adddf3>
 8007c00:	4604      	mov	r4, r0
 8007c02:	4630      	mov	r0, r6
 8007c04:	460d      	mov	r5, r1
 8007c06:	f7f8 fbfd 	bl	8000404 <__aeabi_i2d>
 8007c0a:	a365      	add	r3, pc, #404	@ (adr r3, 8007da0 <_dtoa_r+0x2c0>)
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	f7f8 fc62 	bl	80004d8 <__aeabi_dmul>
 8007c14:	4602      	mov	r2, r0
 8007c16:	460b      	mov	r3, r1
 8007c18:	4620      	mov	r0, r4
 8007c1a:	4629      	mov	r1, r5
 8007c1c:	f7f8 faa6 	bl	800016c <__adddf3>
 8007c20:	4604      	mov	r4, r0
 8007c22:	460d      	mov	r5, r1
 8007c24:	f7f8 ff08 	bl	8000a38 <__aeabi_d2iz>
 8007c28:	2200      	movs	r2, #0
 8007c2a:	4607      	mov	r7, r0
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4620      	mov	r0, r4
 8007c30:	4629      	mov	r1, r5
 8007c32:	f7f8 fec3 	bl	80009bc <__aeabi_dcmplt>
 8007c36:	b140      	cbz	r0, 8007c4a <_dtoa_r+0x16a>
 8007c38:	4638      	mov	r0, r7
 8007c3a:	f7f8 fbe3 	bl	8000404 <__aeabi_i2d>
 8007c3e:	4622      	mov	r2, r4
 8007c40:	462b      	mov	r3, r5
 8007c42:	f7f8 feb1 	bl	80009a8 <__aeabi_dcmpeq>
 8007c46:	b900      	cbnz	r0, 8007c4a <_dtoa_r+0x16a>
 8007c48:	3f01      	subs	r7, #1
 8007c4a:	2f16      	cmp	r7, #22
 8007c4c:	d853      	bhi.n	8007cf6 <_dtoa_r+0x216>
 8007c4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c52:	4b5c      	ldr	r3, [pc, #368]	@ (8007dc4 <_dtoa_r+0x2e4>)
 8007c54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5c:	f7f8 feae 	bl	80009bc <__aeabi_dcmplt>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d04a      	beq.n	8007cfa <_dtoa_r+0x21a>
 8007c64:	2300      	movs	r3, #0
 8007c66:	3f01      	subs	r7, #1
 8007c68:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c6a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c6c:	1b9b      	subs	r3, r3, r6
 8007c6e:	1e5a      	subs	r2, r3, #1
 8007c70:	bf46      	itte	mi
 8007c72:	f1c3 0801 	rsbmi	r8, r3, #1
 8007c76:	2300      	movmi	r3, #0
 8007c78:	f04f 0800 	movpl.w	r8, #0
 8007c7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c7e:	bf48      	it	mi
 8007c80:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007c82:	2f00      	cmp	r7, #0
 8007c84:	db3b      	blt.n	8007cfe <_dtoa_r+0x21e>
 8007c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c88:	970e      	str	r7, [sp, #56]	@ 0x38
 8007c8a:	443b      	add	r3, r7
 8007c8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c8e:	2300      	movs	r3, #0
 8007c90:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c92:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c94:	2b09      	cmp	r3, #9
 8007c96:	d866      	bhi.n	8007d66 <_dtoa_r+0x286>
 8007c98:	2b05      	cmp	r3, #5
 8007c9a:	bfc4      	itt	gt
 8007c9c:	3b04      	subgt	r3, #4
 8007c9e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007ca0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ca2:	bfc8      	it	gt
 8007ca4:	2400      	movgt	r4, #0
 8007ca6:	f1a3 0302 	sub.w	r3, r3, #2
 8007caa:	bfd8      	it	le
 8007cac:	2401      	movle	r4, #1
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	d864      	bhi.n	8007d7c <_dtoa_r+0x29c>
 8007cb2:	e8df f003 	tbb	[pc, r3]
 8007cb6:	382b      	.short	0x382b
 8007cb8:	5636      	.short	0x5636
 8007cba:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007cbe:	441e      	add	r6, r3
 8007cc0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007cc4:	2b20      	cmp	r3, #32
 8007cc6:	bfc1      	itttt	gt
 8007cc8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007ccc:	fa08 f803 	lslgt.w	r8, r8, r3
 8007cd0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007cd4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007cd8:	bfd6      	itet	le
 8007cda:	f1c3 0320 	rsble	r3, r3, #32
 8007cde:	ea48 0003 	orrgt.w	r0, r8, r3
 8007ce2:	fa04 f003 	lslle.w	r0, r4, r3
 8007ce6:	f7f8 fb7d 	bl	80003e4 <__aeabi_ui2d>
 8007cea:	2201      	movs	r2, #1
 8007cec:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007cf0:	3e01      	subs	r6, #1
 8007cf2:	9212      	str	r2, [sp, #72]	@ 0x48
 8007cf4:	e775      	b.n	8007be2 <_dtoa_r+0x102>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e7b6      	b.n	8007c68 <_dtoa_r+0x188>
 8007cfa:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007cfc:	e7b5      	b.n	8007c6a <_dtoa_r+0x18a>
 8007cfe:	427b      	negs	r3, r7
 8007d00:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d02:	2300      	movs	r3, #0
 8007d04:	eba8 0807 	sub.w	r8, r8, r7
 8007d08:	930e      	str	r3, [sp, #56]	@ 0x38
 8007d0a:	e7c2      	b.n	8007c92 <_dtoa_r+0x1b2>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	dc35      	bgt.n	8007d82 <_dtoa_r+0x2a2>
 8007d16:	2301      	movs	r3, #1
 8007d18:	461a      	mov	r2, r3
 8007d1a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007d1e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007d20:	e00b      	b.n	8007d3a <_dtoa_r+0x25a>
 8007d22:	2301      	movs	r3, #1
 8007d24:	e7f3      	b.n	8007d0e <_dtoa_r+0x22e>
 8007d26:	2300      	movs	r3, #0
 8007d28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d2c:	18fb      	adds	r3, r7, r3
 8007d2e:	9308      	str	r3, [sp, #32]
 8007d30:	3301      	adds	r3, #1
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	9307      	str	r3, [sp, #28]
 8007d36:	bfb8      	it	lt
 8007d38:	2301      	movlt	r3, #1
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	2204      	movs	r2, #4
 8007d3e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007d42:	f102 0514 	add.w	r5, r2, #20
 8007d46:	429d      	cmp	r5, r3
 8007d48:	d91f      	bls.n	8007d8a <_dtoa_r+0x2aa>
 8007d4a:	6041      	str	r1, [r0, #4]
 8007d4c:	4658      	mov	r0, fp
 8007d4e:	f000 fd8d 	bl	800886c <_Balloc>
 8007d52:	4682      	mov	sl, r0
 8007d54:	2800      	cmp	r0, #0
 8007d56:	d139      	bne.n	8007dcc <_dtoa_r+0x2ec>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8007dc8 <_dtoa_r+0x2e8>)
 8007d60:	e6d2      	b.n	8007b08 <_dtoa_r+0x28>
 8007d62:	2301      	movs	r3, #1
 8007d64:	e7e0      	b.n	8007d28 <_dtoa_r+0x248>
 8007d66:	2401      	movs	r4, #1
 8007d68:	2300      	movs	r3, #0
 8007d6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d6c:	9320      	str	r3, [sp, #128]	@ 0x80
 8007d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d72:	2200      	movs	r2, #0
 8007d74:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007d78:	2312      	movs	r3, #18
 8007d7a:	e7d0      	b.n	8007d1e <_dtoa_r+0x23e>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d80:	e7f5      	b.n	8007d6e <_dtoa_r+0x28e>
 8007d82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d84:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007d88:	e7d7      	b.n	8007d3a <_dtoa_r+0x25a>
 8007d8a:	3101      	adds	r1, #1
 8007d8c:	0052      	lsls	r2, r2, #1
 8007d8e:	e7d8      	b.n	8007d42 <_dtoa_r+0x262>
 8007d90:	636f4361 	.word	0x636f4361
 8007d94:	3fd287a7 	.word	0x3fd287a7
 8007d98:	8b60c8b3 	.word	0x8b60c8b3
 8007d9c:	3fc68a28 	.word	0x3fc68a28
 8007da0:	509f79fb 	.word	0x509f79fb
 8007da4:	3fd34413 	.word	0x3fd34413
 8007da8:	080097a3 	.word	0x080097a3
 8007dac:	080097ba 	.word	0x080097ba
 8007db0:	7ff00000 	.word	0x7ff00000
 8007db4:	0800979f 	.word	0x0800979f
 8007db8:	08009773 	.word	0x08009773
 8007dbc:	08009772 	.word	0x08009772
 8007dc0:	3ff80000 	.word	0x3ff80000
 8007dc4:	080098b0 	.word	0x080098b0
 8007dc8:	08009812 	.word	0x08009812
 8007dcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007dd0:	6018      	str	r0, [r3, #0]
 8007dd2:	9b07      	ldr	r3, [sp, #28]
 8007dd4:	2b0e      	cmp	r3, #14
 8007dd6:	f200 80a4 	bhi.w	8007f22 <_dtoa_r+0x442>
 8007dda:	2c00      	cmp	r4, #0
 8007ddc:	f000 80a1 	beq.w	8007f22 <_dtoa_r+0x442>
 8007de0:	2f00      	cmp	r7, #0
 8007de2:	dd33      	ble.n	8007e4c <_dtoa_r+0x36c>
 8007de4:	4b86      	ldr	r3, [pc, #536]	@ (8008000 <_dtoa_r+0x520>)
 8007de6:	f007 020f 	and.w	r2, r7, #15
 8007dea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dee:	05f8      	lsls	r0, r7, #23
 8007df0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007df4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007df8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007dfc:	d516      	bpl.n	8007e2c <_dtoa_r+0x34c>
 8007dfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e02:	4b80      	ldr	r3, [pc, #512]	@ (8008004 <_dtoa_r+0x524>)
 8007e04:	2603      	movs	r6, #3
 8007e06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e0a:	f7f8 fc8f 	bl	800072c <__aeabi_ddiv>
 8007e0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e12:	f004 040f 	and.w	r4, r4, #15
 8007e16:	4d7b      	ldr	r5, [pc, #492]	@ (8008004 <_dtoa_r+0x524>)
 8007e18:	b954      	cbnz	r4, 8007e30 <_dtoa_r+0x350>
 8007e1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e22:	f7f8 fc83 	bl	800072c <__aeabi_ddiv>
 8007e26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e2a:	e028      	b.n	8007e7e <_dtoa_r+0x39e>
 8007e2c:	2602      	movs	r6, #2
 8007e2e:	e7f2      	b.n	8007e16 <_dtoa_r+0x336>
 8007e30:	07e1      	lsls	r1, r4, #31
 8007e32:	d508      	bpl.n	8007e46 <_dtoa_r+0x366>
 8007e34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e3c:	f7f8 fb4c 	bl	80004d8 <__aeabi_dmul>
 8007e40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e44:	3601      	adds	r6, #1
 8007e46:	1064      	asrs	r4, r4, #1
 8007e48:	3508      	adds	r5, #8
 8007e4a:	e7e5      	b.n	8007e18 <_dtoa_r+0x338>
 8007e4c:	f000 80d2 	beq.w	8007ff4 <_dtoa_r+0x514>
 8007e50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e54:	427c      	negs	r4, r7
 8007e56:	4b6a      	ldr	r3, [pc, #424]	@ (8008000 <_dtoa_r+0x520>)
 8007e58:	f004 020f 	and.w	r2, r4, #15
 8007e5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	f7f8 fb38 	bl	80004d8 <__aeabi_dmul>
 8007e68:	2602      	movs	r6, #2
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e70:	4d64      	ldr	r5, [pc, #400]	@ (8008004 <_dtoa_r+0x524>)
 8007e72:	1124      	asrs	r4, r4, #4
 8007e74:	2c00      	cmp	r4, #0
 8007e76:	f040 80b2 	bne.w	8007fde <_dtoa_r+0x4fe>
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1d3      	bne.n	8007e26 <_dtoa_r+0x346>
 8007e7e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f000 80b7 	beq.w	8007ff8 <_dtoa_r+0x518>
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4b5d      	ldr	r3, [pc, #372]	@ (8008008 <_dtoa_r+0x528>)
 8007e92:	f7f8 fd93 	bl	80009bc <__aeabi_dcmplt>
 8007e96:	2800      	cmp	r0, #0
 8007e98:	f000 80ae 	beq.w	8007ff8 <_dtoa_r+0x518>
 8007e9c:	9b07      	ldr	r3, [sp, #28]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 80aa 	beq.w	8007ff8 <_dtoa_r+0x518>
 8007ea4:	9b08      	ldr	r3, [sp, #32]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	dd37      	ble.n	8007f1a <_dtoa_r+0x43a>
 8007eaa:	1e7b      	subs	r3, r7, #1
 8007eac:	4620      	mov	r0, r4
 8007eae:	9304      	str	r3, [sp, #16]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	4629      	mov	r1, r5
 8007eb4:	4b55      	ldr	r3, [pc, #340]	@ (800800c <_dtoa_r+0x52c>)
 8007eb6:	f7f8 fb0f 	bl	80004d8 <__aeabi_dmul>
 8007eba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ebe:	9c08      	ldr	r4, [sp, #32]
 8007ec0:	3601      	adds	r6, #1
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f7f8 fa9e 	bl	8000404 <__aeabi_i2d>
 8007ec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ecc:	f7f8 fb04 	bl	80004d8 <__aeabi_dmul>
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	4b4f      	ldr	r3, [pc, #316]	@ (8008010 <_dtoa_r+0x530>)
 8007ed4:	f7f8 f94a 	bl	800016c <__adddf3>
 8007ed8:	4605      	mov	r5, r0
 8007eda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007ede:	2c00      	cmp	r4, #0
 8007ee0:	f040 809a 	bne.w	8008018 <_dtoa_r+0x538>
 8007ee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	4b4a      	ldr	r3, [pc, #296]	@ (8008014 <_dtoa_r+0x534>)
 8007eec:	f7f8 f93c 	bl	8000168 <__aeabi_dsub>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ef8:	462a      	mov	r2, r5
 8007efa:	4633      	mov	r3, r6
 8007efc:	f7f8 fd7c 	bl	80009f8 <__aeabi_dcmpgt>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	f040 828e 	bne.w	8008422 <_dtoa_r+0x942>
 8007f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f0a:	462a      	mov	r2, r5
 8007f0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007f10:	f7f8 fd54 	bl	80009bc <__aeabi_dcmplt>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	f040 8127 	bne.w	8008168 <_dtoa_r+0x688>
 8007f1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007f1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007f22:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f2c0 8163 	blt.w	80081f0 <_dtoa_r+0x710>
 8007f2a:	2f0e      	cmp	r7, #14
 8007f2c:	f300 8160 	bgt.w	80081f0 <_dtoa_r+0x710>
 8007f30:	4b33      	ldr	r3, [pc, #204]	@ (8008000 <_dtoa_r+0x520>)
 8007f32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f3a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007f3e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	da03      	bge.n	8007f4c <_dtoa_r+0x46c>
 8007f44:	9b07      	ldr	r3, [sp, #28]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f340 8100 	ble.w	800814c <_dtoa_r+0x66c>
 8007f4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f50:	4656      	mov	r6, sl
 8007f52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f56:	4620      	mov	r0, r4
 8007f58:	4629      	mov	r1, r5
 8007f5a:	f7f8 fbe7 	bl	800072c <__aeabi_ddiv>
 8007f5e:	f7f8 fd6b 	bl	8000a38 <__aeabi_d2iz>
 8007f62:	4680      	mov	r8, r0
 8007f64:	f7f8 fa4e 	bl	8000404 <__aeabi_i2d>
 8007f68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f6c:	f7f8 fab4 	bl	80004d8 <__aeabi_dmul>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4620      	mov	r0, r4
 8007f76:	4629      	mov	r1, r5
 8007f78:	f7f8 f8f6 	bl	8000168 <__aeabi_dsub>
 8007f7c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f80:	9d07      	ldr	r5, [sp, #28]
 8007f82:	f806 4b01 	strb.w	r4, [r6], #1
 8007f86:	eba6 040a 	sub.w	r4, r6, sl
 8007f8a:	42a5      	cmp	r5, r4
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	f040 8116 	bne.w	80081c0 <_dtoa_r+0x6e0>
 8007f94:	f7f8 f8ea 	bl	800016c <__adddf3>
 8007f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	460d      	mov	r5, r1
 8007fa0:	f7f8 fd2a 	bl	80009f8 <__aeabi_dcmpgt>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	f040 80f8 	bne.w	800819a <_dtoa_r+0x6ba>
 8007faa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fae:	4620      	mov	r0, r4
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	f7f8 fcf9 	bl	80009a8 <__aeabi_dcmpeq>
 8007fb6:	b118      	cbz	r0, 8007fc0 <_dtoa_r+0x4e0>
 8007fb8:	f018 0f01 	tst.w	r8, #1
 8007fbc:	f040 80ed 	bne.w	800819a <_dtoa_r+0x6ba>
 8007fc0:	4649      	mov	r1, r9
 8007fc2:	4658      	mov	r0, fp
 8007fc4:	f000 fc92 	bl	80088ec <_Bfree>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	7033      	strb	r3, [r6, #0]
 8007fcc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007fce:	3701      	adds	r7, #1
 8007fd0:	601f      	str	r7, [r3, #0]
 8007fd2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 8320 	beq.w	800861a <_dtoa_r+0xb3a>
 8007fda:	601e      	str	r6, [r3, #0]
 8007fdc:	e31d      	b.n	800861a <_dtoa_r+0xb3a>
 8007fde:	07e2      	lsls	r2, r4, #31
 8007fe0:	d505      	bpl.n	8007fee <_dtoa_r+0x50e>
 8007fe2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fe6:	f7f8 fa77 	bl	80004d8 <__aeabi_dmul>
 8007fea:	2301      	movs	r3, #1
 8007fec:	3601      	adds	r6, #1
 8007fee:	1064      	asrs	r4, r4, #1
 8007ff0:	3508      	adds	r5, #8
 8007ff2:	e73f      	b.n	8007e74 <_dtoa_r+0x394>
 8007ff4:	2602      	movs	r6, #2
 8007ff6:	e742      	b.n	8007e7e <_dtoa_r+0x39e>
 8007ff8:	9c07      	ldr	r4, [sp, #28]
 8007ffa:	9704      	str	r7, [sp, #16]
 8007ffc:	e761      	b.n	8007ec2 <_dtoa_r+0x3e2>
 8007ffe:	bf00      	nop
 8008000:	080098b0 	.word	0x080098b0
 8008004:	08009888 	.word	0x08009888
 8008008:	3ff00000 	.word	0x3ff00000
 800800c:	40240000 	.word	0x40240000
 8008010:	401c0000 	.word	0x401c0000
 8008014:	40140000 	.word	0x40140000
 8008018:	4b70      	ldr	r3, [pc, #448]	@ (80081dc <_dtoa_r+0x6fc>)
 800801a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800801c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008020:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008024:	4454      	add	r4, sl
 8008026:	2900      	cmp	r1, #0
 8008028:	d045      	beq.n	80080b6 <_dtoa_r+0x5d6>
 800802a:	2000      	movs	r0, #0
 800802c:	496c      	ldr	r1, [pc, #432]	@ (80081e0 <_dtoa_r+0x700>)
 800802e:	f7f8 fb7d 	bl	800072c <__aeabi_ddiv>
 8008032:	4633      	mov	r3, r6
 8008034:	462a      	mov	r2, r5
 8008036:	f7f8 f897 	bl	8000168 <__aeabi_dsub>
 800803a:	4656      	mov	r6, sl
 800803c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008044:	f7f8 fcf8 	bl	8000a38 <__aeabi_d2iz>
 8008048:	4605      	mov	r5, r0
 800804a:	f7f8 f9db 	bl	8000404 <__aeabi_i2d>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008056:	f7f8 f887 	bl	8000168 <__aeabi_dsub>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	3530      	adds	r5, #48	@ 0x30
 8008060:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008064:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008068:	f806 5b01 	strb.w	r5, [r6], #1
 800806c:	f7f8 fca6 	bl	80009bc <__aeabi_dcmplt>
 8008070:	2800      	cmp	r0, #0
 8008072:	d163      	bne.n	800813c <_dtoa_r+0x65c>
 8008074:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008078:	2000      	movs	r0, #0
 800807a:	495a      	ldr	r1, [pc, #360]	@ (80081e4 <_dtoa_r+0x704>)
 800807c:	f7f8 f874 	bl	8000168 <__aeabi_dsub>
 8008080:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008084:	f7f8 fc9a 	bl	80009bc <__aeabi_dcmplt>
 8008088:	2800      	cmp	r0, #0
 800808a:	f040 8087 	bne.w	800819c <_dtoa_r+0x6bc>
 800808e:	42a6      	cmp	r6, r4
 8008090:	f43f af43 	beq.w	8007f1a <_dtoa_r+0x43a>
 8008094:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008098:	2200      	movs	r2, #0
 800809a:	4b53      	ldr	r3, [pc, #332]	@ (80081e8 <_dtoa_r+0x708>)
 800809c:	f7f8 fa1c 	bl	80004d8 <__aeabi_dmul>
 80080a0:	2200      	movs	r2, #0
 80080a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080aa:	4b4f      	ldr	r3, [pc, #316]	@ (80081e8 <_dtoa_r+0x708>)
 80080ac:	f7f8 fa14 	bl	80004d8 <__aeabi_dmul>
 80080b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080b4:	e7c4      	b.n	8008040 <_dtoa_r+0x560>
 80080b6:	4631      	mov	r1, r6
 80080b8:	4628      	mov	r0, r5
 80080ba:	f7f8 fa0d 	bl	80004d8 <__aeabi_dmul>
 80080be:	4656      	mov	r6, sl
 80080c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080c4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80080c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080ca:	f7f8 fcb5 	bl	8000a38 <__aeabi_d2iz>
 80080ce:	4605      	mov	r5, r0
 80080d0:	f7f8 f998 	bl	8000404 <__aeabi_i2d>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080dc:	f7f8 f844 	bl	8000168 <__aeabi_dsub>
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	3530      	adds	r5, #48	@ 0x30
 80080e6:	f806 5b01 	strb.w	r5, [r6], #1
 80080ea:	42a6      	cmp	r6, r4
 80080ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080f0:	f04f 0200 	mov.w	r2, #0
 80080f4:	d124      	bne.n	8008140 <_dtoa_r+0x660>
 80080f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80080fa:	4b39      	ldr	r3, [pc, #228]	@ (80081e0 <_dtoa_r+0x700>)
 80080fc:	f7f8 f836 	bl	800016c <__adddf3>
 8008100:	4602      	mov	r2, r0
 8008102:	460b      	mov	r3, r1
 8008104:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008108:	f7f8 fc76 	bl	80009f8 <__aeabi_dcmpgt>
 800810c:	2800      	cmp	r0, #0
 800810e:	d145      	bne.n	800819c <_dtoa_r+0x6bc>
 8008110:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008114:	2000      	movs	r0, #0
 8008116:	4932      	ldr	r1, [pc, #200]	@ (80081e0 <_dtoa_r+0x700>)
 8008118:	f7f8 f826 	bl	8000168 <__aeabi_dsub>
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008124:	f7f8 fc4a 	bl	80009bc <__aeabi_dcmplt>
 8008128:	2800      	cmp	r0, #0
 800812a:	f43f aef6 	beq.w	8007f1a <_dtoa_r+0x43a>
 800812e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008130:	1e73      	subs	r3, r6, #1
 8008132:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008134:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008138:	2b30      	cmp	r3, #48	@ 0x30
 800813a:	d0f8      	beq.n	800812e <_dtoa_r+0x64e>
 800813c:	9f04      	ldr	r7, [sp, #16]
 800813e:	e73f      	b.n	8007fc0 <_dtoa_r+0x4e0>
 8008140:	4b29      	ldr	r3, [pc, #164]	@ (80081e8 <_dtoa_r+0x708>)
 8008142:	f7f8 f9c9 	bl	80004d8 <__aeabi_dmul>
 8008146:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800814a:	e7bc      	b.n	80080c6 <_dtoa_r+0x5e6>
 800814c:	d10c      	bne.n	8008168 <_dtoa_r+0x688>
 800814e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008152:	2200      	movs	r2, #0
 8008154:	4b25      	ldr	r3, [pc, #148]	@ (80081ec <_dtoa_r+0x70c>)
 8008156:	f7f8 f9bf 	bl	80004d8 <__aeabi_dmul>
 800815a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800815e:	f7f8 fc41 	bl	80009e4 <__aeabi_dcmpge>
 8008162:	2800      	cmp	r0, #0
 8008164:	f000 815b 	beq.w	800841e <_dtoa_r+0x93e>
 8008168:	2400      	movs	r4, #0
 800816a:	4625      	mov	r5, r4
 800816c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800816e:	4656      	mov	r6, sl
 8008170:	43db      	mvns	r3, r3
 8008172:	9304      	str	r3, [sp, #16]
 8008174:	2700      	movs	r7, #0
 8008176:	4621      	mov	r1, r4
 8008178:	4658      	mov	r0, fp
 800817a:	f000 fbb7 	bl	80088ec <_Bfree>
 800817e:	2d00      	cmp	r5, #0
 8008180:	d0dc      	beq.n	800813c <_dtoa_r+0x65c>
 8008182:	b12f      	cbz	r7, 8008190 <_dtoa_r+0x6b0>
 8008184:	42af      	cmp	r7, r5
 8008186:	d003      	beq.n	8008190 <_dtoa_r+0x6b0>
 8008188:	4639      	mov	r1, r7
 800818a:	4658      	mov	r0, fp
 800818c:	f000 fbae 	bl	80088ec <_Bfree>
 8008190:	4629      	mov	r1, r5
 8008192:	4658      	mov	r0, fp
 8008194:	f000 fbaa 	bl	80088ec <_Bfree>
 8008198:	e7d0      	b.n	800813c <_dtoa_r+0x65c>
 800819a:	9704      	str	r7, [sp, #16]
 800819c:	4633      	mov	r3, r6
 800819e:	461e      	mov	r6, r3
 80081a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081a4:	2a39      	cmp	r2, #57	@ 0x39
 80081a6:	d107      	bne.n	80081b8 <_dtoa_r+0x6d8>
 80081a8:	459a      	cmp	sl, r3
 80081aa:	d1f8      	bne.n	800819e <_dtoa_r+0x6be>
 80081ac:	9a04      	ldr	r2, [sp, #16]
 80081ae:	3201      	adds	r2, #1
 80081b0:	9204      	str	r2, [sp, #16]
 80081b2:	2230      	movs	r2, #48	@ 0x30
 80081b4:	f88a 2000 	strb.w	r2, [sl]
 80081b8:	781a      	ldrb	r2, [r3, #0]
 80081ba:	3201      	adds	r2, #1
 80081bc:	701a      	strb	r2, [r3, #0]
 80081be:	e7bd      	b.n	800813c <_dtoa_r+0x65c>
 80081c0:	2200      	movs	r2, #0
 80081c2:	4b09      	ldr	r3, [pc, #36]	@ (80081e8 <_dtoa_r+0x708>)
 80081c4:	f7f8 f988 	bl	80004d8 <__aeabi_dmul>
 80081c8:	2200      	movs	r2, #0
 80081ca:	2300      	movs	r3, #0
 80081cc:	4604      	mov	r4, r0
 80081ce:	460d      	mov	r5, r1
 80081d0:	f7f8 fbea 	bl	80009a8 <__aeabi_dcmpeq>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	f43f aebc 	beq.w	8007f52 <_dtoa_r+0x472>
 80081da:	e6f1      	b.n	8007fc0 <_dtoa_r+0x4e0>
 80081dc:	080098b0 	.word	0x080098b0
 80081e0:	3fe00000 	.word	0x3fe00000
 80081e4:	3ff00000 	.word	0x3ff00000
 80081e8:	40240000 	.word	0x40240000
 80081ec:	40140000 	.word	0x40140000
 80081f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80081f2:	2a00      	cmp	r2, #0
 80081f4:	f000 80db 	beq.w	80083ae <_dtoa_r+0x8ce>
 80081f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80081fa:	2a01      	cmp	r2, #1
 80081fc:	f300 80bf 	bgt.w	800837e <_dtoa_r+0x89e>
 8008200:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008202:	2a00      	cmp	r2, #0
 8008204:	f000 80b7 	beq.w	8008376 <_dtoa_r+0x896>
 8008208:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800820c:	4646      	mov	r6, r8
 800820e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008210:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008212:	2101      	movs	r1, #1
 8008214:	441a      	add	r2, r3
 8008216:	4658      	mov	r0, fp
 8008218:	4498      	add	r8, r3
 800821a:	9209      	str	r2, [sp, #36]	@ 0x24
 800821c:	f000 fc1a 	bl	8008a54 <__i2b>
 8008220:	4605      	mov	r5, r0
 8008222:	b15e      	cbz	r6, 800823c <_dtoa_r+0x75c>
 8008224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008226:	2b00      	cmp	r3, #0
 8008228:	dd08      	ble.n	800823c <_dtoa_r+0x75c>
 800822a:	42b3      	cmp	r3, r6
 800822c:	bfa8      	it	ge
 800822e:	4633      	movge	r3, r6
 8008230:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008232:	eba8 0803 	sub.w	r8, r8, r3
 8008236:	1af6      	subs	r6, r6, r3
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	9309      	str	r3, [sp, #36]	@ 0x24
 800823c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800823e:	b1f3      	cbz	r3, 800827e <_dtoa_r+0x79e>
 8008240:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 80b7 	beq.w	80083b6 <_dtoa_r+0x8d6>
 8008248:	b18c      	cbz	r4, 800826e <_dtoa_r+0x78e>
 800824a:	4629      	mov	r1, r5
 800824c:	4622      	mov	r2, r4
 800824e:	4658      	mov	r0, fp
 8008250:	f000 fcbe 	bl	8008bd0 <__pow5mult>
 8008254:	464a      	mov	r2, r9
 8008256:	4601      	mov	r1, r0
 8008258:	4605      	mov	r5, r0
 800825a:	4658      	mov	r0, fp
 800825c:	f000 fc10 	bl	8008a80 <__multiply>
 8008260:	4649      	mov	r1, r9
 8008262:	9004      	str	r0, [sp, #16]
 8008264:	4658      	mov	r0, fp
 8008266:	f000 fb41 	bl	80088ec <_Bfree>
 800826a:	9b04      	ldr	r3, [sp, #16]
 800826c:	4699      	mov	r9, r3
 800826e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008270:	1b1a      	subs	r2, r3, r4
 8008272:	d004      	beq.n	800827e <_dtoa_r+0x79e>
 8008274:	4649      	mov	r1, r9
 8008276:	4658      	mov	r0, fp
 8008278:	f000 fcaa 	bl	8008bd0 <__pow5mult>
 800827c:	4681      	mov	r9, r0
 800827e:	2101      	movs	r1, #1
 8008280:	4658      	mov	r0, fp
 8008282:	f000 fbe7 	bl	8008a54 <__i2b>
 8008286:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008288:	4604      	mov	r4, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 81c9 	beq.w	8008622 <_dtoa_r+0xb42>
 8008290:	461a      	mov	r2, r3
 8008292:	4601      	mov	r1, r0
 8008294:	4658      	mov	r0, fp
 8008296:	f000 fc9b 	bl	8008bd0 <__pow5mult>
 800829a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800829c:	4604      	mov	r4, r0
 800829e:	2b01      	cmp	r3, #1
 80082a0:	f300 808f 	bgt.w	80083c2 <_dtoa_r+0x8e2>
 80082a4:	9b02      	ldr	r3, [sp, #8]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f040 8087 	bne.w	80083ba <_dtoa_r+0x8da>
 80082ac:	9b03      	ldr	r3, [sp, #12]
 80082ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f040 8083 	bne.w	80083be <_dtoa_r+0x8de>
 80082b8:	9b03      	ldr	r3, [sp, #12]
 80082ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082be:	0d1b      	lsrs	r3, r3, #20
 80082c0:	051b      	lsls	r3, r3, #20
 80082c2:	b12b      	cbz	r3, 80082d0 <_dtoa_r+0x7f0>
 80082c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c6:	f108 0801 	add.w	r8, r8, #1
 80082ca:	3301      	adds	r3, #1
 80082cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80082ce:	2301      	movs	r3, #1
 80082d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80082d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f000 81aa 	beq.w	800862e <_dtoa_r+0xb4e>
 80082da:	6923      	ldr	r3, [r4, #16]
 80082dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082e0:	6918      	ldr	r0, [r3, #16]
 80082e2:	f000 fb6b 	bl	80089bc <__hi0bits>
 80082e6:	f1c0 0020 	rsb	r0, r0, #32
 80082ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ec:	4418      	add	r0, r3
 80082ee:	f010 001f 	ands.w	r0, r0, #31
 80082f2:	d071      	beq.n	80083d8 <_dtoa_r+0x8f8>
 80082f4:	f1c0 0320 	rsb	r3, r0, #32
 80082f8:	2b04      	cmp	r3, #4
 80082fa:	dd65      	ble.n	80083c8 <_dtoa_r+0x8e8>
 80082fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082fe:	f1c0 001c 	rsb	r0, r0, #28
 8008302:	4403      	add	r3, r0
 8008304:	4480      	add	r8, r0
 8008306:	4406      	add	r6, r0
 8008308:	9309      	str	r3, [sp, #36]	@ 0x24
 800830a:	f1b8 0f00 	cmp.w	r8, #0
 800830e:	dd05      	ble.n	800831c <_dtoa_r+0x83c>
 8008310:	4649      	mov	r1, r9
 8008312:	4642      	mov	r2, r8
 8008314:	4658      	mov	r0, fp
 8008316:	f000 fcb5 	bl	8008c84 <__lshift>
 800831a:	4681      	mov	r9, r0
 800831c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800831e:	2b00      	cmp	r3, #0
 8008320:	dd05      	ble.n	800832e <_dtoa_r+0x84e>
 8008322:	4621      	mov	r1, r4
 8008324:	461a      	mov	r2, r3
 8008326:	4658      	mov	r0, fp
 8008328:	f000 fcac 	bl	8008c84 <__lshift>
 800832c:	4604      	mov	r4, r0
 800832e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008330:	2b00      	cmp	r3, #0
 8008332:	d053      	beq.n	80083dc <_dtoa_r+0x8fc>
 8008334:	4621      	mov	r1, r4
 8008336:	4648      	mov	r0, r9
 8008338:	f000 fd10 	bl	8008d5c <__mcmp>
 800833c:	2800      	cmp	r0, #0
 800833e:	da4d      	bge.n	80083dc <_dtoa_r+0x8fc>
 8008340:	1e7b      	subs	r3, r7, #1
 8008342:	4649      	mov	r1, r9
 8008344:	9304      	str	r3, [sp, #16]
 8008346:	220a      	movs	r2, #10
 8008348:	2300      	movs	r3, #0
 800834a:	4658      	mov	r0, fp
 800834c:	f000 faf0 	bl	8008930 <__multadd>
 8008350:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008352:	4681      	mov	r9, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 816c 	beq.w	8008632 <_dtoa_r+0xb52>
 800835a:	2300      	movs	r3, #0
 800835c:	4629      	mov	r1, r5
 800835e:	220a      	movs	r2, #10
 8008360:	4658      	mov	r0, fp
 8008362:	f000 fae5 	bl	8008930 <__multadd>
 8008366:	9b08      	ldr	r3, [sp, #32]
 8008368:	4605      	mov	r5, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	dc61      	bgt.n	8008432 <_dtoa_r+0x952>
 800836e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008370:	2b02      	cmp	r3, #2
 8008372:	dc3b      	bgt.n	80083ec <_dtoa_r+0x90c>
 8008374:	e05d      	b.n	8008432 <_dtoa_r+0x952>
 8008376:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008378:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800837c:	e746      	b.n	800820c <_dtoa_r+0x72c>
 800837e:	9b07      	ldr	r3, [sp, #28]
 8008380:	1e5c      	subs	r4, r3, #1
 8008382:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008384:	42a3      	cmp	r3, r4
 8008386:	bfbf      	itttt	lt
 8008388:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800838a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800838c:	1ae3      	sublt	r3, r4, r3
 800838e:	18d2      	addlt	r2, r2, r3
 8008390:	bfa8      	it	ge
 8008392:	1b1c      	subge	r4, r3, r4
 8008394:	9b07      	ldr	r3, [sp, #28]
 8008396:	bfbe      	ittt	lt
 8008398:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800839a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800839c:	2400      	movlt	r4, #0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	bfb5      	itete	lt
 80083a2:	eba8 0603 	sublt.w	r6, r8, r3
 80083a6:	4646      	movge	r6, r8
 80083a8:	2300      	movlt	r3, #0
 80083aa:	9b07      	ldrge	r3, [sp, #28]
 80083ac:	e730      	b.n	8008210 <_dtoa_r+0x730>
 80083ae:	4646      	mov	r6, r8
 80083b0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80083b2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80083b4:	e735      	b.n	8008222 <_dtoa_r+0x742>
 80083b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083b8:	e75c      	b.n	8008274 <_dtoa_r+0x794>
 80083ba:	2300      	movs	r3, #0
 80083bc:	e788      	b.n	80082d0 <_dtoa_r+0x7f0>
 80083be:	9b02      	ldr	r3, [sp, #8]
 80083c0:	e786      	b.n	80082d0 <_dtoa_r+0x7f0>
 80083c2:	2300      	movs	r3, #0
 80083c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80083c6:	e788      	b.n	80082da <_dtoa_r+0x7fa>
 80083c8:	d09f      	beq.n	800830a <_dtoa_r+0x82a>
 80083ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083cc:	331c      	adds	r3, #28
 80083ce:	441a      	add	r2, r3
 80083d0:	4498      	add	r8, r3
 80083d2:	441e      	add	r6, r3
 80083d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80083d6:	e798      	b.n	800830a <_dtoa_r+0x82a>
 80083d8:	4603      	mov	r3, r0
 80083da:	e7f6      	b.n	80083ca <_dtoa_r+0x8ea>
 80083dc:	9b07      	ldr	r3, [sp, #28]
 80083de:	9704      	str	r7, [sp, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	dc20      	bgt.n	8008426 <_dtoa_r+0x946>
 80083e4:	9308      	str	r3, [sp, #32]
 80083e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	dd1e      	ble.n	800842a <_dtoa_r+0x94a>
 80083ec:	9b08      	ldr	r3, [sp, #32]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f47f aebc 	bne.w	800816c <_dtoa_r+0x68c>
 80083f4:	4621      	mov	r1, r4
 80083f6:	2205      	movs	r2, #5
 80083f8:	4658      	mov	r0, fp
 80083fa:	f000 fa99 	bl	8008930 <__multadd>
 80083fe:	4601      	mov	r1, r0
 8008400:	4604      	mov	r4, r0
 8008402:	4648      	mov	r0, r9
 8008404:	f000 fcaa 	bl	8008d5c <__mcmp>
 8008408:	2800      	cmp	r0, #0
 800840a:	f77f aeaf 	ble.w	800816c <_dtoa_r+0x68c>
 800840e:	2331      	movs	r3, #49	@ 0x31
 8008410:	4656      	mov	r6, sl
 8008412:	f806 3b01 	strb.w	r3, [r6], #1
 8008416:	9b04      	ldr	r3, [sp, #16]
 8008418:	3301      	adds	r3, #1
 800841a:	9304      	str	r3, [sp, #16]
 800841c:	e6aa      	b.n	8008174 <_dtoa_r+0x694>
 800841e:	9c07      	ldr	r4, [sp, #28]
 8008420:	9704      	str	r7, [sp, #16]
 8008422:	4625      	mov	r5, r4
 8008424:	e7f3      	b.n	800840e <_dtoa_r+0x92e>
 8008426:	9b07      	ldr	r3, [sp, #28]
 8008428:	9308      	str	r3, [sp, #32]
 800842a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 8104 	beq.w	800863a <_dtoa_r+0xb5a>
 8008432:	2e00      	cmp	r6, #0
 8008434:	dd05      	ble.n	8008442 <_dtoa_r+0x962>
 8008436:	4629      	mov	r1, r5
 8008438:	4632      	mov	r2, r6
 800843a:	4658      	mov	r0, fp
 800843c:	f000 fc22 	bl	8008c84 <__lshift>
 8008440:	4605      	mov	r5, r0
 8008442:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008444:	2b00      	cmp	r3, #0
 8008446:	d05a      	beq.n	80084fe <_dtoa_r+0xa1e>
 8008448:	4658      	mov	r0, fp
 800844a:	6869      	ldr	r1, [r5, #4]
 800844c:	f000 fa0e 	bl	800886c <_Balloc>
 8008450:	4606      	mov	r6, r0
 8008452:	b928      	cbnz	r0, 8008460 <_dtoa_r+0x980>
 8008454:	4602      	mov	r2, r0
 8008456:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800845a:	4b83      	ldr	r3, [pc, #524]	@ (8008668 <_dtoa_r+0xb88>)
 800845c:	f7ff bb54 	b.w	8007b08 <_dtoa_r+0x28>
 8008460:	692a      	ldr	r2, [r5, #16]
 8008462:	f105 010c 	add.w	r1, r5, #12
 8008466:	3202      	adds	r2, #2
 8008468:	0092      	lsls	r2, r2, #2
 800846a:	300c      	adds	r0, #12
 800846c:	f000 fe36 	bl	80090dc <memcpy>
 8008470:	2201      	movs	r2, #1
 8008472:	4631      	mov	r1, r6
 8008474:	4658      	mov	r0, fp
 8008476:	f000 fc05 	bl	8008c84 <__lshift>
 800847a:	462f      	mov	r7, r5
 800847c:	4605      	mov	r5, r0
 800847e:	f10a 0301 	add.w	r3, sl, #1
 8008482:	9307      	str	r3, [sp, #28]
 8008484:	9b08      	ldr	r3, [sp, #32]
 8008486:	4453      	add	r3, sl
 8008488:	930b      	str	r3, [sp, #44]	@ 0x2c
 800848a:	9b02      	ldr	r3, [sp, #8]
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	930a      	str	r3, [sp, #40]	@ 0x28
 8008492:	9b07      	ldr	r3, [sp, #28]
 8008494:	4621      	mov	r1, r4
 8008496:	3b01      	subs	r3, #1
 8008498:	4648      	mov	r0, r9
 800849a:	9302      	str	r3, [sp, #8]
 800849c:	f7ff fa95 	bl	80079ca <quorem>
 80084a0:	4639      	mov	r1, r7
 80084a2:	9008      	str	r0, [sp, #32]
 80084a4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80084a8:	4648      	mov	r0, r9
 80084aa:	f000 fc57 	bl	8008d5c <__mcmp>
 80084ae:	462a      	mov	r2, r5
 80084b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80084b2:	4621      	mov	r1, r4
 80084b4:	4658      	mov	r0, fp
 80084b6:	f000 fc6d 	bl	8008d94 <__mdiff>
 80084ba:	68c2      	ldr	r2, [r0, #12]
 80084bc:	4606      	mov	r6, r0
 80084be:	bb02      	cbnz	r2, 8008502 <_dtoa_r+0xa22>
 80084c0:	4601      	mov	r1, r0
 80084c2:	4648      	mov	r0, r9
 80084c4:	f000 fc4a 	bl	8008d5c <__mcmp>
 80084c8:	4602      	mov	r2, r0
 80084ca:	4631      	mov	r1, r6
 80084cc:	4658      	mov	r0, fp
 80084ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80084d0:	f000 fa0c 	bl	80088ec <_Bfree>
 80084d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80084d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80084d8:	9e07      	ldr	r6, [sp, #28]
 80084da:	ea43 0102 	orr.w	r1, r3, r2
 80084de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084e0:	4319      	orrs	r1, r3
 80084e2:	d110      	bne.n	8008506 <_dtoa_r+0xa26>
 80084e4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084e8:	d029      	beq.n	800853e <_dtoa_r+0xa5e>
 80084ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	dd02      	ble.n	80084f6 <_dtoa_r+0xa16>
 80084f0:	9b08      	ldr	r3, [sp, #32]
 80084f2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80084f6:	9b02      	ldr	r3, [sp, #8]
 80084f8:	f883 8000 	strb.w	r8, [r3]
 80084fc:	e63b      	b.n	8008176 <_dtoa_r+0x696>
 80084fe:	4628      	mov	r0, r5
 8008500:	e7bb      	b.n	800847a <_dtoa_r+0x99a>
 8008502:	2201      	movs	r2, #1
 8008504:	e7e1      	b.n	80084ca <_dtoa_r+0x9ea>
 8008506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008508:	2b00      	cmp	r3, #0
 800850a:	db04      	blt.n	8008516 <_dtoa_r+0xa36>
 800850c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800850e:	430b      	orrs	r3, r1
 8008510:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008512:	430b      	orrs	r3, r1
 8008514:	d120      	bne.n	8008558 <_dtoa_r+0xa78>
 8008516:	2a00      	cmp	r2, #0
 8008518:	dded      	ble.n	80084f6 <_dtoa_r+0xa16>
 800851a:	4649      	mov	r1, r9
 800851c:	2201      	movs	r2, #1
 800851e:	4658      	mov	r0, fp
 8008520:	f000 fbb0 	bl	8008c84 <__lshift>
 8008524:	4621      	mov	r1, r4
 8008526:	4681      	mov	r9, r0
 8008528:	f000 fc18 	bl	8008d5c <__mcmp>
 800852c:	2800      	cmp	r0, #0
 800852e:	dc03      	bgt.n	8008538 <_dtoa_r+0xa58>
 8008530:	d1e1      	bne.n	80084f6 <_dtoa_r+0xa16>
 8008532:	f018 0f01 	tst.w	r8, #1
 8008536:	d0de      	beq.n	80084f6 <_dtoa_r+0xa16>
 8008538:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800853c:	d1d8      	bne.n	80084f0 <_dtoa_r+0xa10>
 800853e:	2339      	movs	r3, #57	@ 0x39
 8008540:	9a02      	ldr	r2, [sp, #8]
 8008542:	7013      	strb	r3, [r2, #0]
 8008544:	4633      	mov	r3, r6
 8008546:	461e      	mov	r6, r3
 8008548:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800854c:	3b01      	subs	r3, #1
 800854e:	2a39      	cmp	r2, #57	@ 0x39
 8008550:	d052      	beq.n	80085f8 <_dtoa_r+0xb18>
 8008552:	3201      	adds	r2, #1
 8008554:	701a      	strb	r2, [r3, #0]
 8008556:	e60e      	b.n	8008176 <_dtoa_r+0x696>
 8008558:	2a00      	cmp	r2, #0
 800855a:	dd07      	ble.n	800856c <_dtoa_r+0xa8c>
 800855c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008560:	d0ed      	beq.n	800853e <_dtoa_r+0xa5e>
 8008562:	9a02      	ldr	r2, [sp, #8]
 8008564:	f108 0301 	add.w	r3, r8, #1
 8008568:	7013      	strb	r3, [r2, #0]
 800856a:	e604      	b.n	8008176 <_dtoa_r+0x696>
 800856c:	9b07      	ldr	r3, [sp, #28]
 800856e:	9a07      	ldr	r2, [sp, #28]
 8008570:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008574:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008576:	4293      	cmp	r3, r2
 8008578:	d028      	beq.n	80085cc <_dtoa_r+0xaec>
 800857a:	4649      	mov	r1, r9
 800857c:	2300      	movs	r3, #0
 800857e:	220a      	movs	r2, #10
 8008580:	4658      	mov	r0, fp
 8008582:	f000 f9d5 	bl	8008930 <__multadd>
 8008586:	42af      	cmp	r7, r5
 8008588:	4681      	mov	r9, r0
 800858a:	f04f 0300 	mov.w	r3, #0
 800858e:	f04f 020a 	mov.w	r2, #10
 8008592:	4639      	mov	r1, r7
 8008594:	4658      	mov	r0, fp
 8008596:	d107      	bne.n	80085a8 <_dtoa_r+0xac8>
 8008598:	f000 f9ca 	bl	8008930 <__multadd>
 800859c:	4607      	mov	r7, r0
 800859e:	4605      	mov	r5, r0
 80085a0:	9b07      	ldr	r3, [sp, #28]
 80085a2:	3301      	adds	r3, #1
 80085a4:	9307      	str	r3, [sp, #28]
 80085a6:	e774      	b.n	8008492 <_dtoa_r+0x9b2>
 80085a8:	f000 f9c2 	bl	8008930 <__multadd>
 80085ac:	4629      	mov	r1, r5
 80085ae:	4607      	mov	r7, r0
 80085b0:	2300      	movs	r3, #0
 80085b2:	220a      	movs	r2, #10
 80085b4:	4658      	mov	r0, fp
 80085b6:	f000 f9bb 	bl	8008930 <__multadd>
 80085ba:	4605      	mov	r5, r0
 80085bc:	e7f0      	b.n	80085a0 <_dtoa_r+0xac0>
 80085be:	9b08      	ldr	r3, [sp, #32]
 80085c0:	2700      	movs	r7, #0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	bfcc      	ite	gt
 80085c6:	461e      	movgt	r6, r3
 80085c8:	2601      	movle	r6, #1
 80085ca:	4456      	add	r6, sl
 80085cc:	4649      	mov	r1, r9
 80085ce:	2201      	movs	r2, #1
 80085d0:	4658      	mov	r0, fp
 80085d2:	f000 fb57 	bl	8008c84 <__lshift>
 80085d6:	4621      	mov	r1, r4
 80085d8:	4681      	mov	r9, r0
 80085da:	f000 fbbf 	bl	8008d5c <__mcmp>
 80085de:	2800      	cmp	r0, #0
 80085e0:	dcb0      	bgt.n	8008544 <_dtoa_r+0xa64>
 80085e2:	d102      	bne.n	80085ea <_dtoa_r+0xb0a>
 80085e4:	f018 0f01 	tst.w	r8, #1
 80085e8:	d1ac      	bne.n	8008544 <_dtoa_r+0xa64>
 80085ea:	4633      	mov	r3, r6
 80085ec:	461e      	mov	r6, r3
 80085ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085f2:	2a30      	cmp	r2, #48	@ 0x30
 80085f4:	d0fa      	beq.n	80085ec <_dtoa_r+0xb0c>
 80085f6:	e5be      	b.n	8008176 <_dtoa_r+0x696>
 80085f8:	459a      	cmp	sl, r3
 80085fa:	d1a4      	bne.n	8008546 <_dtoa_r+0xa66>
 80085fc:	9b04      	ldr	r3, [sp, #16]
 80085fe:	3301      	adds	r3, #1
 8008600:	9304      	str	r3, [sp, #16]
 8008602:	2331      	movs	r3, #49	@ 0x31
 8008604:	f88a 3000 	strb.w	r3, [sl]
 8008608:	e5b5      	b.n	8008176 <_dtoa_r+0x696>
 800860a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800860c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800866c <_dtoa_r+0xb8c>
 8008610:	b11b      	cbz	r3, 800861a <_dtoa_r+0xb3a>
 8008612:	f10a 0308 	add.w	r3, sl, #8
 8008616:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008618:	6013      	str	r3, [r2, #0]
 800861a:	4650      	mov	r0, sl
 800861c:	b017      	add	sp, #92	@ 0x5c
 800861e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008622:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008624:	2b01      	cmp	r3, #1
 8008626:	f77f ae3d 	ble.w	80082a4 <_dtoa_r+0x7c4>
 800862a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800862c:	930a      	str	r3, [sp, #40]	@ 0x28
 800862e:	2001      	movs	r0, #1
 8008630:	e65b      	b.n	80082ea <_dtoa_r+0x80a>
 8008632:	9b08      	ldr	r3, [sp, #32]
 8008634:	2b00      	cmp	r3, #0
 8008636:	f77f aed6 	ble.w	80083e6 <_dtoa_r+0x906>
 800863a:	4656      	mov	r6, sl
 800863c:	4621      	mov	r1, r4
 800863e:	4648      	mov	r0, r9
 8008640:	f7ff f9c3 	bl	80079ca <quorem>
 8008644:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008648:	9b08      	ldr	r3, [sp, #32]
 800864a:	f806 8b01 	strb.w	r8, [r6], #1
 800864e:	eba6 020a 	sub.w	r2, r6, sl
 8008652:	4293      	cmp	r3, r2
 8008654:	ddb3      	ble.n	80085be <_dtoa_r+0xade>
 8008656:	4649      	mov	r1, r9
 8008658:	2300      	movs	r3, #0
 800865a:	220a      	movs	r2, #10
 800865c:	4658      	mov	r0, fp
 800865e:	f000 f967 	bl	8008930 <__multadd>
 8008662:	4681      	mov	r9, r0
 8008664:	e7ea      	b.n	800863c <_dtoa_r+0xb5c>
 8008666:	bf00      	nop
 8008668:	08009812 	.word	0x08009812
 800866c:	08009796 	.word	0x08009796

08008670 <_free_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	4605      	mov	r5, r0
 8008674:	2900      	cmp	r1, #0
 8008676:	d040      	beq.n	80086fa <_free_r+0x8a>
 8008678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800867c:	1f0c      	subs	r4, r1, #4
 800867e:	2b00      	cmp	r3, #0
 8008680:	bfb8      	it	lt
 8008682:	18e4      	addlt	r4, r4, r3
 8008684:	f000 f8e6 	bl	8008854 <__malloc_lock>
 8008688:	4a1c      	ldr	r2, [pc, #112]	@ (80086fc <_free_r+0x8c>)
 800868a:	6813      	ldr	r3, [r2, #0]
 800868c:	b933      	cbnz	r3, 800869c <_free_r+0x2c>
 800868e:	6063      	str	r3, [r4, #4]
 8008690:	6014      	str	r4, [r2, #0]
 8008692:	4628      	mov	r0, r5
 8008694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008698:	f000 b8e2 	b.w	8008860 <__malloc_unlock>
 800869c:	42a3      	cmp	r3, r4
 800869e:	d908      	bls.n	80086b2 <_free_r+0x42>
 80086a0:	6820      	ldr	r0, [r4, #0]
 80086a2:	1821      	adds	r1, r4, r0
 80086a4:	428b      	cmp	r3, r1
 80086a6:	bf01      	itttt	eq
 80086a8:	6819      	ldreq	r1, [r3, #0]
 80086aa:	685b      	ldreq	r3, [r3, #4]
 80086ac:	1809      	addeq	r1, r1, r0
 80086ae:	6021      	streq	r1, [r4, #0]
 80086b0:	e7ed      	b.n	800868e <_free_r+0x1e>
 80086b2:	461a      	mov	r2, r3
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	b10b      	cbz	r3, 80086bc <_free_r+0x4c>
 80086b8:	42a3      	cmp	r3, r4
 80086ba:	d9fa      	bls.n	80086b2 <_free_r+0x42>
 80086bc:	6811      	ldr	r1, [r2, #0]
 80086be:	1850      	adds	r0, r2, r1
 80086c0:	42a0      	cmp	r0, r4
 80086c2:	d10b      	bne.n	80086dc <_free_r+0x6c>
 80086c4:	6820      	ldr	r0, [r4, #0]
 80086c6:	4401      	add	r1, r0
 80086c8:	1850      	adds	r0, r2, r1
 80086ca:	4283      	cmp	r3, r0
 80086cc:	6011      	str	r1, [r2, #0]
 80086ce:	d1e0      	bne.n	8008692 <_free_r+0x22>
 80086d0:	6818      	ldr	r0, [r3, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	4408      	add	r0, r1
 80086d6:	6010      	str	r0, [r2, #0]
 80086d8:	6053      	str	r3, [r2, #4]
 80086da:	e7da      	b.n	8008692 <_free_r+0x22>
 80086dc:	d902      	bls.n	80086e4 <_free_r+0x74>
 80086de:	230c      	movs	r3, #12
 80086e0:	602b      	str	r3, [r5, #0]
 80086e2:	e7d6      	b.n	8008692 <_free_r+0x22>
 80086e4:	6820      	ldr	r0, [r4, #0]
 80086e6:	1821      	adds	r1, r4, r0
 80086e8:	428b      	cmp	r3, r1
 80086ea:	bf01      	itttt	eq
 80086ec:	6819      	ldreq	r1, [r3, #0]
 80086ee:	685b      	ldreq	r3, [r3, #4]
 80086f0:	1809      	addeq	r1, r1, r0
 80086f2:	6021      	streq	r1, [r4, #0]
 80086f4:	6063      	str	r3, [r4, #4]
 80086f6:	6054      	str	r4, [r2, #4]
 80086f8:	e7cb      	b.n	8008692 <_free_r+0x22>
 80086fa:	bd38      	pop	{r3, r4, r5, pc}
 80086fc:	20000a04 	.word	0x20000a04

08008700 <malloc>:
 8008700:	4b02      	ldr	r3, [pc, #8]	@ (800870c <malloc+0xc>)
 8008702:	4601      	mov	r1, r0
 8008704:	6818      	ldr	r0, [r3, #0]
 8008706:	f000 b825 	b.w	8008754 <_malloc_r>
 800870a:	bf00      	nop
 800870c:	20000030 	.word	0x20000030

08008710 <sbrk_aligned>:
 8008710:	b570      	push	{r4, r5, r6, lr}
 8008712:	4e0f      	ldr	r6, [pc, #60]	@ (8008750 <sbrk_aligned+0x40>)
 8008714:	460c      	mov	r4, r1
 8008716:	6831      	ldr	r1, [r6, #0]
 8008718:	4605      	mov	r5, r0
 800871a:	b911      	cbnz	r1, 8008722 <sbrk_aligned+0x12>
 800871c:	f000 fcce 	bl	80090bc <_sbrk_r>
 8008720:	6030      	str	r0, [r6, #0]
 8008722:	4621      	mov	r1, r4
 8008724:	4628      	mov	r0, r5
 8008726:	f000 fcc9 	bl	80090bc <_sbrk_r>
 800872a:	1c43      	adds	r3, r0, #1
 800872c:	d103      	bne.n	8008736 <sbrk_aligned+0x26>
 800872e:	f04f 34ff 	mov.w	r4, #4294967295
 8008732:	4620      	mov	r0, r4
 8008734:	bd70      	pop	{r4, r5, r6, pc}
 8008736:	1cc4      	adds	r4, r0, #3
 8008738:	f024 0403 	bic.w	r4, r4, #3
 800873c:	42a0      	cmp	r0, r4
 800873e:	d0f8      	beq.n	8008732 <sbrk_aligned+0x22>
 8008740:	1a21      	subs	r1, r4, r0
 8008742:	4628      	mov	r0, r5
 8008744:	f000 fcba 	bl	80090bc <_sbrk_r>
 8008748:	3001      	adds	r0, #1
 800874a:	d1f2      	bne.n	8008732 <sbrk_aligned+0x22>
 800874c:	e7ef      	b.n	800872e <sbrk_aligned+0x1e>
 800874e:	bf00      	nop
 8008750:	20000a00 	.word	0x20000a00

08008754 <_malloc_r>:
 8008754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008758:	1ccd      	adds	r5, r1, #3
 800875a:	f025 0503 	bic.w	r5, r5, #3
 800875e:	3508      	adds	r5, #8
 8008760:	2d0c      	cmp	r5, #12
 8008762:	bf38      	it	cc
 8008764:	250c      	movcc	r5, #12
 8008766:	2d00      	cmp	r5, #0
 8008768:	4606      	mov	r6, r0
 800876a:	db01      	blt.n	8008770 <_malloc_r+0x1c>
 800876c:	42a9      	cmp	r1, r5
 800876e:	d904      	bls.n	800877a <_malloc_r+0x26>
 8008770:	230c      	movs	r3, #12
 8008772:	6033      	str	r3, [r6, #0]
 8008774:	2000      	movs	r0, #0
 8008776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800877a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008850 <_malloc_r+0xfc>
 800877e:	f000 f869 	bl	8008854 <__malloc_lock>
 8008782:	f8d8 3000 	ldr.w	r3, [r8]
 8008786:	461c      	mov	r4, r3
 8008788:	bb44      	cbnz	r4, 80087dc <_malloc_r+0x88>
 800878a:	4629      	mov	r1, r5
 800878c:	4630      	mov	r0, r6
 800878e:	f7ff ffbf 	bl	8008710 <sbrk_aligned>
 8008792:	1c43      	adds	r3, r0, #1
 8008794:	4604      	mov	r4, r0
 8008796:	d158      	bne.n	800884a <_malloc_r+0xf6>
 8008798:	f8d8 4000 	ldr.w	r4, [r8]
 800879c:	4627      	mov	r7, r4
 800879e:	2f00      	cmp	r7, #0
 80087a0:	d143      	bne.n	800882a <_malloc_r+0xd6>
 80087a2:	2c00      	cmp	r4, #0
 80087a4:	d04b      	beq.n	800883e <_malloc_r+0xea>
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	4639      	mov	r1, r7
 80087aa:	4630      	mov	r0, r6
 80087ac:	eb04 0903 	add.w	r9, r4, r3
 80087b0:	f000 fc84 	bl	80090bc <_sbrk_r>
 80087b4:	4581      	cmp	r9, r0
 80087b6:	d142      	bne.n	800883e <_malloc_r+0xea>
 80087b8:	6821      	ldr	r1, [r4, #0]
 80087ba:	4630      	mov	r0, r6
 80087bc:	1a6d      	subs	r5, r5, r1
 80087be:	4629      	mov	r1, r5
 80087c0:	f7ff ffa6 	bl	8008710 <sbrk_aligned>
 80087c4:	3001      	adds	r0, #1
 80087c6:	d03a      	beq.n	800883e <_malloc_r+0xea>
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	442b      	add	r3, r5
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	f8d8 3000 	ldr.w	r3, [r8]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	bb62      	cbnz	r2, 8008830 <_malloc_r+0xdc>
 80087d6:	f8c8 7000 	str.w	r7, [r8]
 80087da:	e00f      	b.n	80087fc <_malloc_r+0xa8>
 80087dc:	6822      	ldr	r2, [r4, #0]
 80087de:	1b52      	subs	r2, r2, r5
 80087e0:	d420      	bmi.n	8008824 <_malloc_r+0xd0>
 80087e2:	2a0b      	cmp	r2, #11
 80087e4:	d917      	bls.n	8008816 <_malloc_r+0xc2>
 80087e6:	1961      	adds	r1, r4, r5
 80087e8:	42a3      	cmp	r3, r4
 80087ea:	6025      	str	r5, [r4, #0]
 80087ec:	bf18      	it	ne
 80087ee:	6059      	strne	r1, [r3, #4]
 80087f0:	6863      	ldr	r3, [r4, #4]
 80087f2:	bf08      	it	eq
 80087f4:	f8c8 1000 	streq.w	r1, [r8]
 80087f8:	5162      	str	r2, [r4, r5]
 80087fa:	604b      	str	r3, [r1, #4]
 80087fc:	4630      	mov	r0, r6
 80087fe:	f000 f82f 	bl	8008860 <__malloc_unlock>
 8008802:	f104 000b 	add.w	r0, r4, #11
 8008806:	1d23      	adds	r3, r4, #4
 8008808:	f020 0007 	bic.w	r0, r0, #7
 800880c:	1ac2      	subs	r2, r0, r3
 800880e:	bf1c      	itt	ne
 8008810:	1a1b      	subne	r3, r3, r0
 8008812:	50a3      	strne	r3, [r4, r2]
 8008814:	e7af      	b.n	8008776 <_malloc_r+0x22>
 8008816:	6862      	ldr	r2, [r4, #4]
 8008818:	42a3      	cmp	r3, r4
 800881a:	bf0c      	ite	eq
 800881c:	f8c8 2000 	streq.w	r2, [r8]
 8008820:	605a      	strne	r2, [r3, #4]
 8008822:	e7eb      	b.n	80087fc <_malloc_r+0xa8>
 8008824:	4623      	mov	r3, r4
 8008826:	6864      	ldr	r4, [r4, #4]
 8008828:	e7ae      	b.n	8008788 <_malloc_r+0x34>
 800882a:	463c      	mov	r4, r7
 800882c:	687f      	ldr	r7, [r7, #4]
 800882e:	e7b6      	b.n	800879e <_malloc_r+0x4a>
 8008830:	461a      	mov	r2, r3
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	42a3      	cmp	r3, r4
 8008836:	d1fb      	bne.n	8008830 <_malloc_r+0xdc>
 8008838:	2300      	movs	r3, #0
 800883a:	6053      	str	r3, [r2, #4]
 800883c:	e7de      	b.n	80087fc <_malloc_r+0xa8>
 800883e:	230c      	movs	r3, #12
 8008840:	4630      	mov	r0, r6
 8008842:	6033      	str	r3, [r6, #0]
 8008844:	f000 f80c 	bl	8008860 <__malloc_unlock>
 8008848:	e794      	b.n	8008774 <_malloc_r+0x20>
 800884a:	6005      	str	r5, [r0, #0]
 800884c:	e7d6      	b.n	80087fc <_malloc_r+0xa8>
 800884e:	bf00      	nop
 8008850:	20000a04 	.word	0x20000a04

08008854 <__malloc_lock>:
 8008854:	4801      	ldr	r0, [pc, #4]	@ (800885c <__malloc_lock+0x8>)
 8008856:	f7ff b8a8 	b.w	80079aa <__retarget_lock_acquire_recursive>
 800885a:	bf00      	nop
 800885c:	200009fc 	.word	0x200009fc

08008860 <__malloc_unlock>:
 8008860:	4801      	ldr	r0, [pc, #4]	@ (8008868 <__malloc_unlock+0x8>)
 8008862:	f7ff b8a3 	b.w	80079ac <__retarget_lock_release_recursive>
 8008866:	bf00      	nop
 8008868:	200009fc 	.word	0x200009fc

0800886c <_Balloc>:
 800886c:	b570      	push	{r4, r5, r6, lr}
 800886e:	69c6      	ldr	r6, [r0, #28]
 8008870:	4604      	mov	r4, r0
 8008872:	460d      	mov	r5, r1
 8008874:	b976      	cbnz	r6, 8008894 <_Balloc+0x28>
 8008876:	2010      	movs	r0, #16
 8008878:	f7ff ff42 	bl	8008700 <malloc>
 800887c:	4602      	mov	r2, r0
 800887e:	61e0      	str	r0, [r4, #28]
 8008880:	b920      	cbnz	r0, 800888c <_Balloc+0x20>
 8008882:	216b      	movs	r1, #107	@ 0x6b
 8008884:	4b17      	ldr	r3, [pc, #92]	@ (80088e4 <_Balloc+0x78>)
 8008886:	4818      	ldr	r0, [pc, #96]	@ (80088e8 <_Balloc+0x7c>)
 8008888:	f000 fc36 	bl	80090f8 <__assert_func>
 800888c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008890:	6006      	str	r6, [r0, #0]
 8008892:	60c6      	str	r6, [r0, #12]
 8008894:	69e6      	ldr	r6, [r4, #28]
 8008896:	68f3      	ldr	r3, [r6, #12]
 8008898:	b183      	cbz	r3, 80088bc <_Balloc+0x50>
 800889a:	69e3      	ldr	r3, [r4, #28]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088a2:	b9b8      	cbnz	r0, 80088d4 <_Balloc+0x68>
 80088a4:	2101      	movs	r1, #1
 80088a6:	fa01 f605 	lsl.w	r6, r1, r5
 80088aa:	1d72      	adds	r2, r6, #5
 80088ac:	4620      	mov	r0, r4
 80088ae:	0092      	lsls	r2, r2, #2
 80088b0:	f000 fc40 	bl	8009134 <_calloc_r>
 80088b4:	b160      	cbz	r0, 80088d0 <_Balloc+0x64>
 80088b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088ba:	e00e      	b.n	80088da <_Balloc+0x6e>
 80088bc:	2221      	movs	r2, #33	@ 0x21
 80088be:	2104      	movs	r1, #4
 80088c0:	4620      	mov	r0, r4
 80088c2:	f000 fc37 	bl	8009134 <_calloc_r>
 80088c6:	69e3      	ldr	r3, [r4, #28]
 80088c8:	60f0      	str	r0, [r6, #12]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1e4      	bne.n	800889a <_Balloc+0x2e>
 80088d0:	2000      	movs	r0, #0
 80088d2:	bd70      	pop	{r4, r5, r6, pc}
 80088d4:	6802      	ldr	r2, [r0, #0]
 80088d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088da:	2300      	movs	r3, #0
 80088dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088e0:	e7f7      	b.n	80088d2 <_Balloc+0x66>
 80088e2:	bf00      	nop
 80088e4:	080097a3 	.word	0x080097a3
 80088e8:	08009823 	.word	0x08009823

080088ec <_Bfree>:
 80088ec:	b570      	push	{r4, r5, r6, lr}
 80088ee:	69c6      	ldr	r6, [r0, #28]
 80088f0:	4605      	mov	r5, r0
 80088f2:	460c      	mov	r4, r1
 80088f4:	b976      	cbnz	r6, 8008914 <_Bfree+0x28>
 80088f6:	2010      	movs	r0, #16
 80088f8:	f7ff ff02 	bl	8008700 <malloc>
 80088fc:	4602      	mov	r2, r0
 80088fe:	61e8      	str	r0, [r5, #28]
 8008900:	b920      	cbnz	r0, 800890c <_Bfree+0x20>
 8008902:	218f      	movs	r1, #143	@ 0x8f
 8008904:	4b08      	ldr	r3, [pc, #32]	@ (8008928 <_Bfree+0x3c>)
 8008906:	4809      	ldr	r0, [pc, #36]	@ (800892c <_Bfree+0x40>)
 8008908:	f000 fbf6 	bl	80090f8 <__assert_func>
 800890c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008910:	6006      	str	r6, [r0, #0]
 8008912:	60c6      	str	r6, [r0, #12]
 8008914:	b13c      	cbz	r4, 8008926 <_Bfree+0x3a>
 8008916:	69eb      	ldr	r3, [r5, #28]
 8008918:	6862      	ldr	r2, [r4, #4]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008920:	6021      	str	r1, [r4, #0]
 8008922:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008926:	bd70      	pop	{r4, r5, r6, pc}
 8008928:	080097a3 	.word	0x080097a3
 800892c:	08009823 	.word	0x08009823

08008930 <__multadd>:
 8008930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008934:	4607      	mov	r7, r0
 8008936:	460c      	mov	r4, r1
 8008938:	461e      	mov	r6, r3
 800893a:	2000      	movs	r0, #0
 800893c:	690d      	ldr	r5, [r1, #16]
 800893e:	f101 0c14 	add.w	ip, r1, #20
 8008942:	f8dc 3000 	ldr.w	r3, [ip]
 8008946:	3001      	adds	r0, #1
 8008948:	b299      	uxth	r1, r3
 800894a:	fb02 6101 	mla	r1, r2, r1, r6
 800894e:	0c1e      	lsrs	r6, r3, #16
 8008950:	0c0b      	lsrs	r3, r1, #16
 8008952:	fb02 3306 	mla	r3, r2, r6, r3
 8008956:	b289      	uxth	r1, r1
 8008958:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800895c:	4285      	cmp	r5, r0
 800895e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008962:	f84c 1b04 	str.w	r1, [ip], #4
 8008966:	dcec      	bgt.n	8008942 <__multadd+0x12>
 8008968:	b30e      	cbz	r6, 80089ae <__multadd+0x7e>
 800896a:	68a3      	ldr	r3, [r4, #8]
 800896c:	42ab      	cmp	r3, r5
 800896e:	dc19      	bgt.n	80089a4 <__multadd+0x74>
 8008970:	6861      	ldr	r1, [r4, #4]
 8008972:	4638      	mov	r0, r7
 8008974:	3101      	adds	r1, #1
 8008976:	f7ff ff79 	bl	800886c <_Balloc>
 800897a:	4680      	mov	r8, r0
 800897c:	b928      	cbnz	r0, 800898a <__multadd+0x5a>
 800897e:	4602      	mov	r2, r0
 8008980:	21ba      	movs	r1, #186	@ 0xba
 8008982:	4b0c      	ldr	r3, [pc, #48]	@ (80089b4 <__multadd+0x84>)
 8008984:	480c      	ldr	r0, [pc, #48]	@ (80089b8 <__multadd+0x88>)
 8008986:	f000 fbb7 	bl	80090f8 <__assert_func>
 800898a:	6922      	ldr	r2, [r4, #16]
 800898c:	f104 010c 	add.w	r1, r4, #12
 8008990:	3202      	adds	r2, #2
 8008992:	0092      	lsls	r2, r2, #2
 8008994:	300c      	adds	r0, #12
 8008996:	f000 fba1 	bl	80090dc <memcpy>
 800899a:	4621      	mov	r1, r4
 800899c:	4638      	mov	r0, r7
 800899e:	f7ff ffa5 	bl	80088ec <_Bfree>
 80089a2:	4644      	mov	r4, r8
 80089a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089a8:	3501      	adds	r5, #1
 80089aa:	615e      	str	r6, [r3, #20]
 80089ac:	6125      	str	r5, [r4, #16]
 80089ae:	4620      	mov	r0, r4
 80089b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089b4:	08009812 	.word	0x08009812
 80089b8:	08009823 	.word	0x08009823

080089bc <__hi0bits>:
 80089bc:	4603      	mov	r3, r0
 80089be:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80089c2:	bf3a      	itte	cc
 80089c4:	0403      	lslcc	r3, r0, #16
 80089c6:	2010      	movcc	r0, #16
 80089c8:	2000      	movcs	r0, #0
 80089ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089ce:	bf3c      	itt	cc
 80089d0:	021b      	lslcc	r3, r3, #8
 80089d2:	3008      	addcc	r0, #8
 80089d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089d8:	bf3c      	itt	cc
 80089da:	011b      	lslcc	r3, r3, #4
 80089dc:	3004      	addcc	r0, #4
 80089de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089e2:	bf3c      	itt	cc
 80089e4:	009b      	lslcc	r3, r3, #2
 80089e6:	3002      	addcc	r0, #2
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	db05      	blt.n	80089f8 <__hi0bits+0x3c>
 80089ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80089f0:	f100 0001 	add.w	r0, r0, #1
 80089f4:	bf08      	it	eq
 80089f6:	2020      	moveq	r0, #32
 80089f8:	4770      	bx	lr

080089fa <__lo0bits>:
 80089fa:	6803      	ldr	r3, [r0, #0]
 80089fc:	4602      	mov	r2, r0
 80089fe:	f013 0007 	ands.w	r0, r3, #7
 8008a02:	d00b      	beq.n	8008a1c <__lo0bits+0x22>
 8008a04:	07d9      	lsls	r1, r3, #31
 8008a06:	d421      	bmi.n	8008a4c <__lo0bits+0x52>
 8008a08:	0798      	lsls	r0, r3, #30
 8008a0a:	bf49      	itett	mi
 8008a0c:	085b      	lsrmi	r3, r3, #1
 8008a0e:	089b      	lsrpl	r3, r3, #2
 8008a10:	2001      	movmi	r0, #1
 8008a12:	6013      	strmi	r3, [r2, #0]
 8008a14:	bf5c      	itt	pl
 8008a16:	2002      	movpl	r0, #2
 8008a18:	6013      	strpl	r3, [r2, #0]
 8008a1a:	4770      	bx	lr
 8008a1c:	b299      	uxth	r1, r3
 8008a1e:	b909      	cbnz	r1, 8008a24 <__lo0bits+0x2a>
 8008a20:	2010      	movs	r0, #16
 8008a22:	0c1b      	lsrs	r3, r3, #16
 8008a24:	b2d9      	uxtb	r1, r3
 8008a26:	b909      	cbnz	r1, 8008a2c <__lo0bits+0x32>
 8008a28:	3008      	adds	r0, #8
 8008a2a:	0a1b      	lsrs	r3, r3, #8
 8008a2c:	0719      	lsls	r1, r3, #28
 8008a2e:	bf04      	itt	eq
 8008a30:	091b      	lsreq	r3, r3, #4
 8008a32:	3004      	addeq	r0, #4
 8008a34:	0799      	lsls	r1, r3, #30
 8008a36:	bf04      	itt	eq
 8008a38:	089b      	lsreq	r3, r3, #2
 8008a3a:	3002      	addeq	r0, #2
 8008a3c:	07d9      	lsls	r1, r3, #31
 8008a3e:	d403      	bmi.n	8008a48 <__lo0bits+0x4e>
 8008a40:	085b      	lsrs	r3, r3, #1
 8008a42:	f100 0001 	add.w	r0, r0, #1
 8008a46:	d003      	beq.n	8008a50 <__lo0bits+0x56>
 8008a48:	6013      	str	r3, [r2, #0]
 8008a4a:	4770      	bx	lr
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	4770      	bx	lr
 8008a50:	2020      	movs	r0, #32
 8008a52:	4770      	bx	lr

08008a54 <__i2b>:
 8008a54:	b510      	push	{r4, lr}
 8008a56:	460c      	mov	r4, r1
 8008a58:	2101      	movs	r1, #1
 8008a5a:	f7ff ff07 	bl	800886c <_Balloc>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	b928      	cbnz	r0, 8008a6e <__i2b+0x1a>
 8008a62:	f240 1145 	movw	r1, #325	@ 0x145
 8008a66:	4b04      	ldr	r3, [pc, #16]	@ (8008a78 <__i2b+0x24>)
 8008a68:	4804      	ldr	r0, [pc, #16]	@ (8008a7c <__i2b+0x28>)
 8008a6a:	f000 fb45 	bl	80090f8 <__assert_func>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	6144      	str	r4, [r0, #20]
 8008a72:	6103      	str	r3, [r0, #16]
 8008a74:	bd10      	pop	{r4, pc}
 8008a76:	bf00      	nop
 8008a78:	08009812 	.word	0x08009812
 8008a7c:	08009823 	.word	0x08009823

08008a80 <__multiply>:
 8008a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a84:	4614      	mov	r4, r2
 8008a86:	690a      	ldr	r2, [r1, #16]
 8008a88:	6923      	ldr	r3, [r4, #16]
 8008a8a:	460f      	mov	r7, r1
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	bfa2      	ittt	ge
 8008a90:	4623      	movge	r3, r4
 8008a92:	460c      	movge	r4, r1
 8008a94:	461f      	movge	r7, r3
 8008a96:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008a9a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008a9e:	68a3      	ldr	r3, [r4, #8]
 8008aa0:	6861      	ldr	r1, [r4, #4]
 8008aa2:	eb0a 0609 	add.w	r6, sl, r9
 8008aa6:	42b3      	cmp	r3, r6
 8008aa8:	b085      	sub	sp, #20
 8008aaa:	bfb8      	it	lt
 8008aac:	3101      	addlt	r1, #1
 8008aae:	f7ff fedd 	bl	800886c <_Balloc>
 8008ab2:	b930      	cbnz	r0, 8008ac2 <__multiply+0x42>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008aba:	4b43      	ldr	r3, [pc, #268]	@ (8008bc8 <__multiply+0x148>)
 8008abc:	4843      	ldr	r0, [pc, #268]	@ (8008bcc <__multiply+0x14c>)
 8008abe:	f000 fb1b 	bl	80090f8 <__assert_func>
 8008ac2:	f100 0514 	add.w	r5, r0, #20
 8008ac6:	462b      	mov	r3, r5
 8008ac8:	2200      	movs	r2, #0
 8008aca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ace:	4543      	cmp	r3, r8
 8008ad0:	d321      	bcc.n	8008b16 <__multiply+0x96>
 8008ad2:	f107 0114 	add.w	r1, r7, #20
 8008ad6:	f104 0214 	add.w	r2, r4, #20
 8008ada:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008ade:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008ae2:	9302      	str	r3, [sp, #8]
 8008ae4:	1b13      	subs	r3, r2, r4
 8008ae6:	3b15      	subs	r3, #21
 8008ae8:	f023 0303 	bic.w	r3, r3, #3
 8008aec:	3304      	adds	r3, #4
 8008aee:	f104 0715 	add.w	r7, r4, #21
 8008af2:	42ba      	cmp	r2, r7
 8008af4:	bf38      	it	cc
 8008af6:	2304      	movcc	r3, #4
 8008af8:	9301      	str	r3, [sp, #4]
 8008afa:	9b02      	ldr	r3, [sp, #8]
 8008afc:	9103      	str	r1, [sp, #12]
 8008afe:	428b      	cmp	r3, r1
 8008b00:	d80c      	bhi.n	8008b1c <__multiply+0x9c>
 8008b02:	2e00      	cmp	r6, #0
 8008b04:	dd03      	ble.n	8008b0e <__multiply+0x8e>
 8008b06:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d05a      	beq.n	8008bc4 <__multiply+0x144>
 8008b0e:	6106      	str	r6, [r0, #16]
 8008b10:	b005      	add	sp, #20
 8008b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b16:	f843 2b04 	str.w	r2, [r3], #4
 8008b1a:	e7d8      	b.n	8008ace <__multiply+0x4e>
 8008b1c:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b20:	f1ba 0f00 	cmp.w	sl, #0
 8008b24:	d023      	beq.n	8008b6e <__multiply+0xee>
 8008b26:	46a9      	mov	r9, r5
 8008b28:	f04f 0c00 	mov.w	ip, #0
 8008b2c:	f104 0e14 	add.w	lr, r4, #20
 8008b30:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b34:	f8d9 3000 	ldr.w	r3, [r9]
 8008b38:	fa1f fb87 	uxth.w	fp, r7
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b42:	4463      	add	r3, ip
 8008b44:	f8d9 c000 	ldr.w	ip, [r9]
 8008b48:	0c3f      	lsrs	r7, r7, #16
 8008b4a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008b4e:	fb0a c707 	mla	r7, sl, r7, ip
 8008b52:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b5c:	4572      	cmp	r2, lr
 8008b5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b62:	f849 3b04 	str.w	r3, [r9], #4
 8008b66:	d8e3      	bhi.n	8008b30 <__multiply+0xb0>
 8008b68:	9b01      	ldr	r3, [sp, #4]
 8008b6a:	f845 c003 	str.w	ip, [r5, r3]
 8008b6e:	9b03      	ldr	r3, [sp, #12]
 8008b70:	3104      	adds	r1, #4
 8008b72:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b76:	f1b9 0f00 	cmp.w	r9, #0
 8008b7a:	d021      	beq.n	8008bc0 <__multiply+0x140>
 8008b7c:	46ae      	mov	lr, r5
 8008b7e:	f04f 0a00 	mov.w	sl, #0
 8008b82:	682b      	ldr	r3, [r5, #0]
 8008b84:	f104 0c14 	add.w	ip, r4, #20
 8008b88:	f8bc b000 	ldrh.w	fp, [ip]
 8008b8c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	fb09 770b 	mla	r7, r9, fp, r7
 8008b96:	4457      	add	r7, sl
 8008b98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b9c:	f84e 3b04 	str.w	r3, [lr], #4
 8008ba0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ba4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ba8:	f8be 3000 	ldrh.w	r3, [lr]
 8008bac:	4562      	cmp	r2, ip
 8008bae:	fb09 330a 	mla	r3, r9, sl, r3
 8008bb2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008bb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bba:	d8e5      	bhi.n	8008b88 <__multiply+0x108>
 8008bbc:	9f01      	ldr	r7, [sp, #4]
 8008bbe:	51eb      	str	r3, [r5, r7]
 8008bc0:	3504      	adds	r5, #4
 8008bc2:	e79a      	b.n	8008afa <__multiply+0x7a>
 8008bc4:	3e01      	subs	r6, #1
 8008bc6:	e79c      	b.n	8008b02 <__multiply+0x82>
 8008bc8:	08009812 	.word	0x08009812
 8008bcc:	08009823 	.word	0x08009823

08008bd0 <__pow5mult>:
 8008bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bd4:	4615      	mov	r5, r2
 8008bd6:	f012 0203 	ands.w	r2, r2, #3
 8008bda:	4607      	mov	r7, r0
 8008bdc:	460e      	mov	r6, r1
 8008bde:	d007      	beq.n	8008bf0 <__pow5mult+0x20>
 8008be0:	4c25      	ldr	r4, [pc, #148]	@ (8008c78 <__pow5mult+0xa8>)
 8008be2:	3a01      	subs	r2, #1
 8008be4:	2300      	movs	r3, #0
 8008be6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bea:	f7ff fea1 	bl	8008930 <__multadd>
 8008bee:	4606      	mov	r6, r0
 8008bf0:	10ad      	asrs	r5, r5, #2
 8008bf2:	d03d      	beq.n	8008c70 <__pow5mult+0xa0>
 8008bf4:	69fc      	ldr	r4, [r7, #28]
 8008bf6:	b97c      	cbnz	r4, 8008c18 <__pow5mult+0x48>
 8008bf8:	2010      	movs	r0, #16
 8008bfa:	f7ff fd81 	bl	8008700 <malloc>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	61f8      	str	r0, [r7, #28]
 8008c02:	b928      	cbnz	r0, 8008c10 <__pow5mult+0x40>
 8008c04:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c08:	4b1c      	ldr	r3, [pc, #112]	@ (8008c7c <__pow5mult+0xac>)
 8008c0a:	481d      	ldr	r0, [pc, #116]	@ (8008c80 <__pow5mult+0xb0>)
 8008c0c:	f000 fa74 	bl	80090f8 <__assert_func>
 8008c10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c14:	6004      	str	r4, [r0, #0]
 8008c16:	60c4      	str	r4, [r0, #12]
 8008c18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c20:	b94c      	cbnz	r4, 8008c36 <__pow5mult+0x66>
 8008c22:	f240 2171 	movw	r1, #625	@ 0x271
 8008c26:	4638      	mov	r0, r7
 8008c28:	f7ff ff14 	bl	8008a54 <__i2b>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c34:	6003      	str	r3, [r0, #0]
 8008c36:	f04f 0900 	mov.w	r9, #0
 8008c3a:	07eb      	lsls	r3, r5, #31
 8008c3c:	d50a      	bpl.n	8008c54 <__pow5mult+0x84>
 8008c3e:	4631      	mov	r1, r6
 8008c40:	4622      	mov	r2, r4
 8008c42:	4638      	mov	r0, r7
 8008c44:	f7ff ff1c 	bl	8008a80 <__multiply>
 8008c48:	4680      	mov	r8, r0
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	f7ff fe4d 	bl	80088ec <_Bfree>
 8008c52:	4646      	mov	r6, r8
 8008c54:	106d      	asrs	r5, r5, #1
 8008c56:	d00b      	beq.n	8008c70 <__pow5mult+0xa0>
 8008c58:	6820      	ldr	r0, [r4, #0]
 8008c5a:	b938      	cbnz	r0, 8008c6c <__pow5mult+0x9c>
 8008c5c:	4622      	mov	r2, r4
 8008c5e:	4621      	mov	r1, r4
 8008c60:	4638      	mov	r0, r7
 8008c62:	f7ff ff0d 	bl	8008a80 <__multiply>
 8008c66:	6020      	str	r0, [r4, #0]
 8008c68:	f8c0 9000 	str.w	r9, [r0]
 8008c6c:	4604      	mov	r4, r0
 8008c6e:	e7e4      	b.n	8008c3a <__pow5mult+0x6a>
 8008c70:	4630      	mov	r0, r6
 8008c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c76:	bf00      	nop
 8008c78:	0800987c 	.word	0x0800987c
 8008c7c:	080097a3 	.word	0x080097a3
 8008c80:	08009823 	.word	0x08009823

08008c84 <__lshift>:
 8008c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c88:	460c      	mov	r4, r1
 8008c8a:	4607      	mov	r7, r0
 8008c8c:	4691      	mov	r9, r2
 8008c8e:	6923      	ldr	r3, [r4, #16]
 8008c90:	6849      	ldr	r1, [r1, #4]
 8008c92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c96:	68a3      	ldr	r3, [r4, #8]
 8008c98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c9c:	f108 0601 	add.w	r6, r8, #1
 8008ca0:	42b3      	cmp	r3, r6
 8008ca2:	db0b      	blt.n	8008cbc <__lshift+0x38>
 8008ca4:	4638      	mov	r0, r7
 8008ca6:	f7ff fde1 	bl	800886c <_Balloc>
 8008caa:	4605      	mov	r5, r0
 8008cac:	b948      	cbnz	r0, 8008cc2 <__lshift+0x3e>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008cb4:	4b27      	ldr	r3, [pc, #156]	@ (8008d54 <__lshift+0xd0>)
 8008cb6:	4828      	ldr	r0, [pc, #160]	@ (8008d58 <__lshift+0xd4>)
 8008cb8:	f000 fa1e 	bl	80090f8 <__assert_func>
 8008cbc:	3101      	adds	r1, #1
 8008cbe:	005b      	lsls	r3, r3, #1
 8008cc0:	e7ee      	b.n	8008ca0 <__lshift+0x1c>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f100 0114 	add.w	r1, r0, #20
 8008cc8:	f100 0210 	add.w	r2, r0, #16
 8008ccc:	4618      	mov	r0, r3
 8008cce:	4553      	cmp	r3, sl
 8008cd0:	db33      	blt.n	8008d3a <__lshift+0xb6>
 8008cd2:	6920      	ldr	r0, [r4, #16]
 8008cd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cd8:	f104 0314 	add.w	r3, r4, #20
 8008cdc:	f019 091f 	ands.w	r9, r9, #31
 8008ce0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ce4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ce8:	d02b      	beq.n	8008d42 <__lshift+0xbe>
 8008cea:	468a      	mov	sl, r1
 8008cec:	2200      	movs	r2, #0
 8008cee:	f1c9 0e20 	rsb	lr, r9, #32
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	fa00 f009 	lsl.w	r0, r0, r9
 8008cf8:	4310      	orrs	r0, r2
 8008cfa:	f84a 0b04 	str.w	r0, [sl], #4
 8008cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d02:	459c      	cmp	ip, r3
 8008d04:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d08:	d8f3      	bhi.n	8008cf2 <__lshift+0x6e>
 8008d0a:	ebac 0304 	sub.w	r3, ip, r4
 8008d0e:	3b15      	subs	r3, #21
 8008d10:	f023 0303 	bic.w	r3, r3, #3
 8008d14:	3304      	adds	r3, #4
 8008d16:	f104 0015 	add.w	r0, r4, #21
 8008d1a:	4584      	cmp	ip, r0
 8008d1c:	bf38      	it	cc
 8008d1e:	2304      	movcc	r3, #4
 8008d20:	50ca      	str	r2, [r1, r3]
 8008d22:	b10a      	cbz	r2, 8008d28 <__lshift+0xa4>
 8008d24:	f108 0602 	add.w	r6, r8, #2
 8008d28:	3e01      	subs	r6, #1
 8008d2a:	4638      	mov	r0, r7
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	612e      	str	r6, [r5, #16]
 8008d30:	f7ff fddc 	bl	80088ec <_Bfree>
 8008d34:	4628      	mov	r0, r5
 8008d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d3e:	3301      	adds	r3, #1
 8008d40:	e7c5      	b.n	8008cce <__lshift+0x4a>
 8008d42:	3904      	subs	r1, #4
 8008d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d48:	459c      	cmp	ip, r3
 8008d4a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d4e:	d8f9      	bhi.n	8008d44 <__lshift+0xc0>
 8008d50:	e7ea      	b.n	8008d28 <__lshift+0xa4>
 8008d52:	bf00      	nop
 8008d54:	08009812 	.word	0x08009812
 8008d58:	08009823 	.word	0x08009823

08008d5c <__mcmp>:
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	690a      	ldr	r2, [r1, #16]
 8008d60:	6900      	ldr	r0, [r0, #16]
 8008d62:	b530      	push	{r4, r5, lr}
 8008d64:	1a80      	subs	r0, r0, r2
 8008d66:	d10e      	bne.n	8008d86 <__mcmp+0x2a>
 8008d68:	3314      	adds	r3, #20
 8008d6a:	3114      	adds	r1, #20
 8008d6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d7c:	4295      	cmp	r5, r2
 8008d7e:	d003      	beq.n	8008d88 <__mcmp+0x2c>
 8008d80:	d205      	bcs.n	8008d8e <__mcmp+0x32>
 8008d82:	f04f 30ff 	mov.w	r0, #4294967295
 8008d86:	bd30      	pop	{r4, r5, pc}
 8008d88:	42a3      	cmp	r3, r4
 8008d8a:	d3f3      	bcc.n	8008d74 <__mcmp+0x18>
 8008d8c:	e7fb      	b.n	8008d86 <__mcmp+0x2a>
 8008d8e:	2001      	movs	r0, #1
 8008d90:	e7f9      	b.n	8008d86 <__mcmp+0x2a>
	...

08008d94 <__mdiff>:
 8008d94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d98:	4689      	mov	r9, r1
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	4648      	mov	r0, r9
 8008da0:	4614      	mov	r4, r2
 8008da2:	f7ff ffdb 	bl	8008d5c <__mcmp>
 8008da6:	1e05      	subs	r5, r0, #0
 8008da8:	d112      	bne.n	8008dd0 <__mdiff+0x3c>
 8008daa:	4629      	mov	r1, r5
 8008dac:	4630      	mov	r0, r6
 8008dae:	f7ff fd5d 	bl	800886c <_Balloc>
 8008db2:	4602      	mov	r2, r0
 8008db4:	b928      	cbnz	r0, 8008dc2 <__mdiff+0x2e>
 8008db6:	f240 2137 	movw	r1, #567	@ 0x237
 8008dba:	4b3e      	ldr	r3, [pc, #248]	@ (8008eb4 <__mdiff+0x120>)
 8008dbc:	483e      	ldr	r0, [pc, #248]	@ (8008eb8 <__mdiff+0x124>)
 8008dbe:	f000 f99b 	bl	80090f8 <__assert_func>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008dc8:	4610      	mov	r0, r2
 8008dca:	b003      	add	sp, #12
 8008dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd0:	bfbc      	itt	lt
 8008dd2:	464b      	movlt	r3, r9
 8008dd4:	46a1      	movlt	r9, r4
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ddc:	bfba      	itte	lt
 8008dde:	461c      	movlt	r4, r3
 8008de0:	2501      	movlt	r5, #1
 8008de2:	2500      	movge	r5, #0
 8008de4:	f7ff fd42 	bl	800886c <_Balloc>
 8008de8:	4602      	mov	r2, r0
 8008dea:	b918      	cbnz	r0, 8008df4 <__mdiff+0x60>
 8008dec:	f240 2145 	movw	r1, #581	@ 0x245
 8008df0:	4b30      	ldr	r3, [pc, #192]	@ (8008eb4 <__mdiff+0x120>)
 8008df2:	e7e3      	b.n	8008dbc <__mdiff+0x28>
 8008df4:	f100 0b14 	add.w	fp, r0, #20
 8008df8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008dfc:	f109 0310 	add.w	r3, r9, #16
 8008e00:	60c5      	str	r5, [r0, #12]
 8008e02:	f04f 0c00 	mov.w	ip, #0
 8008e06:	f109 0514 	add.w	r5, r9, #20
 8008e0a:	46d9      	mov	r9, fp
 8008e0c:	6926      	ldr	r6, [r4, #16]
 8008e0e:	f104 0e14 	add.w	lr, r4, #20
 8008e12:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e16:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e1a:	9301      	str	r3, [sp, #4]
 8008e1c:	9b01      	ldr	r3, [sp, #4]
 8008e1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e22:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e26:	b281      	uxth	r1, r0
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	fa1f f38a 	uxth.w	r3, sl
 8008e2e:	1a5b      	subs	r3, r3, r1
 8008e30:	0c00      	lsrs	r0, r0, #16
 8008e32:	4463      	add	r3, ip
 8008e34:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e38:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e42:	4576      	cmp	r6, lr
 8008e44:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e48:	f849 3b04 	str.w	r3, [r9], #4
 8008e4c:	d8e6      	bhi.n	8008e1c <__mdiff+0x88>
 8008e4e:	1b33      	subs	r3, r6, r4
 8008e50:	3b15      	subs	r3, #21
 8008e52:	f023 0303 	bic.w	r3, r3, #3
 8008e56:	3415      	adds	r4, #21
 8008e58:	3304      	adds	r3, #4
 8008e5a:	42a6      	cmp	r6, r4
 8008e5c:	bf38      	it	cc
 8008e5e:	2304      	movcc	r3, #4
 8008e60:	441d      	add	r5, r3
 8008e62:	445b      	add	r3, fp
 8008e64:	461e      	mov	r6, r3
 8008e66:	462c      	mov	r4, r5
 8008e68:	4544      	cmp	r4, r8
 8008e6a:	d30e      	bcc.n	8008e8a <__mdiff+0xf6>
 8008e6c:	f108 0103 	add.w	r1, r8, #3
 8008e70:	1b49      	subs	r1, r1, r5
 8008e72:	f021 0103 	bic.w	r1, r1, #3
 8008e76:	3d03      	subs	r5, #3
 8008e78:	45a8      	cmp	r8, r5
 8008e7a:	bf38      	it	cc
 8008e7c:	2100      	movcc	r1, #0
 8008e7e:	440b      	add	r3, r1
 8008e80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e84:	b199      	cbz	r1, 8008eae <__mdiff+0x11a>
 8008e86:	6117      	str	r7, [r2, #16]
 8008e88:	e79e      	b.n	8008dc8 <__mdiff+0x34>
 8008e8a:	46e6      	mov	lr, ip
 8008e8c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e90:	fa1f fc81 	uxth.w	ip, r1
 8008e94:	44f4      	add	ip, lr
 8008e96:	0c08      	lsrs	r0, r1, #16
 8008e98:	4471      	add	r1, lr
 8008e9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e9e:	b289      	uxth	r1, r1
 8008ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ea4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ea8:	f846 1b04 	str.w	r1, [r6], #4
 8008eac:	e7dc      	b.n	8008e68 <__mdiff+0xd4>
 8008eae:	3f01      	subs	r7, #1
 8008eb0:	e7e6      	b.n	8008e80 <__mdiff+0xec>
 8008eb2:	bf00      	nop
 8008eb4:	08009812 	.word	0x08009812
 8008eb8:	08009823 	.word	0x08009823

08008ebc <__d2b>:
 8008ebc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	4690      	mov	r8, r2
 8008ec4:	4699      	mov	r9, r3
 8008ec6:	9e08      	ldr	r6, [sp, #32]
 8008ec8:	f7ff fcd0 	bl	800886c <_Balloc>
 8008ecc:	4604      	mov	r4, r0
 8008ece:	b930      	cbnz	r0, 8008ede <__d2b+0x22>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	f240 310f 	movw	r1, #783	@ 0x30f
 8008ed6:	4b23      	ldr	r3, [pc, #140]	@ (8008f64 <__d2b+0xa8>)
 8008ed8:	4823      	ldr	r0, [pc, #140]	@ (8008f68 <__d2b+0xac>)
 8008eda:	f000 f90d 	bl	80090f8 <__assert_func>
 8008ede:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ee2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ee6:	b10d      	cbz	r5, 8008eec <__d2b+0x30>
 8008ee8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008eec:	9301      	str	r3, [sp, #4]
 8008eee:	f1b8 0300 	subs.w	r3, r8, #0
 8008ef2:	d024      	beq.n	8008f3e <__d2b+0x82>
 8008ef4:	4668      	mov	r0, sp
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	f7ff fd7f 	bl	80089fa <__lo0bits>
 8008efc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f00:	b1d8      	cbz	r0, 8008f3a <__d2b+0x7e>
 8008f02:	f1c0 0320 	rsb	r3, r0, #32
 8008f06:	fa02 f303 	lsl.w	r3, r2, r3
 8008f0a:	430b      	orrs	r3, r1
 8008f0c:	40c2      	lsrs	r2, r0
 8008f0e:	6163      	str	r3, [r4, #20]
 8008f10:	9201      	str	r2, [sp, #4]
 8008f12:	9b01      	ldr	r3, [sp, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	bf0c      	ite	eq
 8008f18:	2201      	moveq	r2, #1
 8008f1a:	2202      	movne	r2, #2
 8008f1c:	61a3      	str	r3, [r4, #24]
 8008f1e:	6122      	str	r2, [r4, #16]
 8008f20:	b1ad      	cbz	r5, 8008f4e <__d2b+0x92>
 8008f22:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008f26:	4405      	add	r5, r0
 8008f28:	6035      	str	r5, [r6, #0]
 8008f2a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f30:	6018      	str	r0, [r3, #0]
 8008f32:	4620      	mov	r0, r4
 8008f34:	b002      	add	sp, #8
 8008f36:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008f3a:	6161      	str	r1, [r4, #20]
 8008f3c:	e7e9      	b.n	8008f12 <__d2b+0x56>
 8008f3e:	a801      	add	r0, sp, #4
 8008f40:	f7ff fd5b 	bl	80089fa <__lo0bits>
 8008f44:	9b01      	ldr	r3, [sp, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	6163      	str	r3, [r4, #20]
 8008f4a:	3020      	adds	r0, #32
 8008f4c:	e7e7      	b.n	8008f1e <__d2b+0x62>
 8008f4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008f52:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f56:	6030      	str	r0, [r6, #0]
 8008f58:	6918      	ldr	r0, [r3, #16]
 8008f5a:	f7ff fd2f 	bl	80089bc <__hi0bits>
 8008f5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f62:	e7e4      	b.n	8008f2e <__d2b+0x72>
 8008f64:	08009812 	.word	0x08009812
 8008f68:	08009823 	.word	0x08009823

08008f6c <__sflush_r>:
 8008f6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f72:	0716      	lsls	r6, r2, #28
 8008f74:	4605      	mov	r5, r0
 8008f76:	460c      	mov	r4, r1
 8008f78:	d454      	bmi.n	8009024 <__sflush_r+0xb8>
 8008f7a:	684b      	ldr	r3, [r1, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	dc02      	bgt.n	8008f86 <__sflush_r+0x1a>
 8008f80:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	dd48      	ble.n	8009018 <__sflush_r+0xac>
 8008f86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f88:	2e00      	cmp	r6, #0
 8008f8a:	d045      	beq.n	8009018 <__sflush_r+0xac>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f92:	682f      	ldr	r7, [r5, #0]
 8008f94:	6a21      	ldr	r1, [r4, #32]
 8008f96:	602b      	str	r3, [r5, #0]
 8008f98:	d030      	beq.n	8008ffc <__sflush_r+0x90>
 8008f9a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f9c:	89a3      	ldrh	r3, [r4, #12]
 8008f9e:	0759      	lsls	r1, r3, #29
 8008fa0:	d505      	bpl.n	8008fae <__sflush_r+0x42>
 8008fa2:	6863      	ldr	r3, [r4, #4]
 8008fa4:	1ad2      	subs	r2, r2, r3
 8008fa6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008fa8:	b10b      	cbz	r3, 8008fae <__sflush_r+0x42>
 8008faa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008fac:	1ad2      	subs	r2, r2, r3
 8008fae:	2300      	movs	r3, #0
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fb4:	6a21      	ldr	r1, [r4, #32]
 8008fb6:	47b0      	blx	r6
 8008fb8:	1c43      	adds	r3, r0, #1
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	d106      	bne.n	8008fcc <__sflush_r+0x60>
 8008fbe:	6829      	ldr	r1, [r5, #0]
 8008fc0:	291d      	cmp	r1, #29
 8008fc2:	d82b      	bhi.n	800901c <__sflush_r+0xb0>
 8008fc4:	4a28      	ldr	r2, [pc, #160]	@ (8009068 <__sflush_r+0xfc>)
 8008fc6:	410a      	asrs	r2, r1
 8008fc8:	07d6      	lsls	r6, r2, #31
 8008fca:	d427      	bmi.n	800901c <__sflush_r+0xb0>
 8008fcc:	2200      	movs	r2, #0
 8008fce:	6062      	str	r2, [r4, #4]
 8008fd0:	6922      	ldr	r2, [r4, #16]
 8008fd2:	04d9      	lsls	r1, r3, #19
 8008fd4:	6022      	str	r2, [r4, #0]
 8008fd6:	d504      	bpl.n	8008fe2 <__sflush_r+0x76>
 8008fd8:	1c42      	adds	r2, r0, #1
 8008fda:	d101      	bne.n	8008fe0 <__sflush_r+0x74>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	b903      	cbnz	r3, 8008fe2 <__sflush_r+0x76>
 8008fe0:	6560      	str	r0, [r4, #84]	@ 0x54
 8008fe2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fe4:	602f      	str	r7, [r5, #0]
 8008fe6:	b1b9      	cbz	r1, 8009018 <__sflush_r+0xac>
 8008fe8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fec:	4299      	cmp	r1, r3
 8008fee:	d002      	beq.n	8008ff6 <__sflush_r+0x8a>
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f7ff fb3d 	bl	8008670 <_free_r>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ffa:	e00d      	b.n	8009018 <__sflush_r+0xac>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	4628      	mov	r0, r5
 8009000:	47b0      	blx	r6
 8009002:	4602      	mov	r2, r0
 8009004:	1c50      	adds	r0, r2, #1
 8009006:	d1c9      	bne.n	8008f9c <__sflush_r+0x30>
 8009008:	682b      	ldr	r3, [r5, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0c6      	beq.n	8008f9c <__sflush_r+0x30>
 800900e:	2b1d      	cmp	r3, #29
 8009010:	d001      	beq.n	8009016 <__sflush_r+0xaa>
 8009012:	2b16      	cmp	r3, #22
 8009014:	d11d      	bne.n	8009052 <__sflush_r+0xe6>
 8009016:	602f      	str	r7, [r5, #0]
 8009018:	2000      	movs	r0, #0
 800901a:	e021      	b.n	8009060 <__sflush_r+0xf4>
 800901c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009020:	b21b      	sxth	r3, r3
 8009022:	e01a      	b.n	800905a <__sflush_r+0xee>
 8009024:	690f      	ldr	r7, [r1, #16]
 8009026:	2f00      	cmp	r7, #0
 8009028:	d0f6      	beq.n	8009018 <__sflush_r+0xac>
 800902a:	0793      	lsls	r3, r2, #30
 800902c:	bf18      	it	ne
 800902e:	2300      	movne	r3, #0
 8009030:	680e      	ldr	r6, [r1, #0]
 8009032:	bf08      	it	eq
 8009034:	694b      	ldreq	r3, [r1, #20]
 8009036:	1bf6      	subs	r6, r6, r7
 8009038:	600f      	str	r7, [r1, #0]
 800903a:	608b      	str	r3, [r1, #8]
 800903c:	2e00      	cmp	r6, #0
 800903e:	ddeb      	ble.n	8009018 <__sflush_r+0xac>
 8009040:	4633      	mov	r3, r6
 8009042:	463a      	mov	r2, r7
 8009044:	4628      	mov	r0, r5
 8009046:	6a21      	ldr	r1, [r4, #32]
 8009048:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800904c:	47e0      	blx	ip
 800904e:	2800      	cmp	r0, #0
 8009050:	dc07      	bgt.n	8009062 <__sflush_r+0xf6>
 8009052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800905a:	f04f 30ff 	mov.w	r0, #4294967295
 800905e:	81a3      	strh	r3, [r4, #12]
 8009060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009062:	4407      	add	r7, r0
 8009064:	1a36      	subs	r6, r6, r0
 8009066:	e7e9      	b.n	800903c <__sflush_r+0xd0>
 8009068:	dfbffffe 	.word	0xdfbffffe

0800906c <_fflush_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	690b      	ldr	r3, [r1, #16]
 8009070:	4605      	mov	r5, r0
 8009072:	460c      	mov	r4, r1
 8009074:	b913      	cbnz	r3, 800907c <_fflush_r+0x10>
 8009076:	2500      	movs	r5, #0
 8009078:	4628      	mov	r0, r5
 800907a:	bd38      	pop	{r3, r4, r5, pc}
 800907c:	b118      	cbz	r0, 8009086 <_fflush_r+0x1a>
 800907e:	6a03      	ldr	r3, [r0, #32]
 8009080:	b90b      	cbnz	r3, 8009086 <_fflush_r+0x1a>
 8009082:	f7fe fb9b 	bl	80077bc <__sinit>
 8009086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d0f3      	beq.n	8009076 <_fflush_r+0xa>
 800908e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009090:	07d0      	lsls	r0, r2, #31
 8009092:	d404      	bmi.n	800909e <_fflush_r+0x32>
 8009094:	0599      	lsls	r1, r3, #22
 8009096:	d402      	bmi.n	800909e <_fflush_r+0x32>
 8009098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800909a:	f7fe fc86 	bl	80079aa <__retarget_lock_acquire_recursive>
 800909e:	4628      	mov	r0, r5
 80090a0:	4621      	mov	r1, r4
 80090a2:	f7ff ff63 	bl	8008f6c <__sflush_r>
 80090a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090a8:	4605      	mov	r5, r0
 80090aa:	07da      	lsls	r2, r3, #31
 80090ac:	d4e4      	bmi.n	8009078 <_fflush_r+0xc>
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	059b      	lsls	r3, r3, #22
 80090b2:	d4e1      	bmi.n	8009078 <_fflush_r+0xc>
 80090b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090b6:	f7fe fc79 	bl	80079ac <__retarget_lock_release_recursive>
 80090ba:	e7dd      	b.n	8009078 <_fflush_r+0xc>

080090bc <_sbrk_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	2300      	movs	r3, #0
 80090c0:	4d05      	ldr	r5, [pc, #20]	@ (80090d8 <_sbrk_r+0x1c>)
 80090c2:	4604      	mov	r4, r0
 80090c4:	4608      	mov	r0, r1
 80090c6:	602b      	str	r3, [r5, #0]
 80090c8:	f7f9 fbbc 	bl	8002844 <_sbrk>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_sbrk_r+0x1a>
 80090d0:	682b      	ldr	r3, [r5, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_sbrk_r+0x1a>
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	200009f8 	.word	0x200009f8

080090dc <memcpy>:
 80090dc:	440a      	add	r2, r1
 80090de:	4291      	cmp	r1, r2
 80090e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80090e4:	d100      	bne.n	80090e8 <memcpy+0xc>
 80090e6:	4770      	bx	lr
 80090e8:	b510      	push	{r4, lr}
 80090ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ee:	4291      	cmp	r1, r2
 80090f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090f4:	d1f9      	bne.n	80090ea <memcpy+0xe>
 80090f6:	bd10      	pop	{r4, pc}

080090f8 <__assert_func>:
 80090f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090fa:	4614      	mov	r4, r2
 80090fc:	461a      	mov	r2, r3
 80090fe:	4b09      	ldr	r3, [pc, #36]	@ (8009124 <__assert_func+0x2c>)
 8009100:	4605      	mov	r5, r0
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68d8      	ldr	r0, [r3, #12]
 8009106:	b954      	cbnz	r4, 800911e <__assert_func+0x26>
 8009108:	4b07      	ldr	r3, [pc, #28]	@ (8009128 <__assert_func+0x30>)
 800910a:	461c      	mov	r4, r3
 800910c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009110:	9100      	str	r1, [sp, #0]
 8009112:	462b      	mov	r3, r5
 8009114:	4905      	ldr	r1, [pc, #20]	@ (800912c <__assert_func+0x34>)
 8009116:	f000 f841 	bl	800919c <fiprintf>
 800911a:	f000 f851 	bl	80091c0 <abort>
 800911e:	4b04      	ldr	r3, [pc, #16]	@ (8009130 <__assert_func+0x38>)
 8009120:	e7f4      	b.n	800910c <__assert_func+0x14>
 8009122:	bf00      	nop
 8009124:	20000030 	.word	0x20000030
 8009128:	080099bd 	.word	0x080099bd
 800912c:	0800998f 	.word	0x0800998f
 8009130:	08009982 	.word	0x08009982

08009134 <_calloc_r>:
 8009134:	b570      	push	{r4, r5, r6, lr}
 8009136:	fba1 5402 	umull	r5, r4, r1, r2
 800913a:	b93c      	cbnz	r4, 800914c <_calloc_r+0x18>
 800913c:	4629      	mov	r1, r5
 800913e:	f7ff fb09 	bl	8008754 <_malloc_r>
 8009142:	4606      	mov	r6, r0
 8009144:	b928      	cbnz	r0, 8009152 <_calloc_r+0x1e>
 8009146:	2600      	movs	r6, #0
 8009148:	4630      	mov	r0, r6
 800914a:	bd70      	pop	{r4, r5, r6, pc}
 800914c:	220c      	movs	r2, #12
 800914e:	6002      	str	r2, [r0, #0]
 8009150:	e7f9      	b.n	8009146 <_calloc_r+0x12>
 8009152:	462a      	mov	r2, r5
 8009154:	4621      	mov	r1, r4
 8009156:	f7fe fbaa 	bl	80078ae <memset>
 800915a:	e7f5      	b.n	8009148 <_calloc_r+0x14>

0800915c <__ascii_mbtowc>:
 800915c:	b082      	sub	sp, #8
 800915e:	b901      	cbnz	r1, 8009162 <__ascii_mbtowc+0x6>
 8009160:	a901      	add	r1, sp, #4
 8009162:	b142      	cbz	r2, 8009176 <__ascii_mbtowc+0x1a>
 8009164:	b14b      	cbz	r3, 800917a <__ascii_mbtowc+0x1e>
 8009166:	7813      	ldrb	r3, [r2, #0]
 8009168:	600b      	str	r3, [r1, #0]
 800916a:	7812      	ldrb	r2, [r2, #0]
 800916c:	1e10      	subs	r0, r2, #0
 800916e:	bf18      	it	ne
 8009170:	2001      	movne	r0, #1
 8009172:	b002      	add	sp, #8
 8009174:	4770      	bx	lr
 8009176:	4610      	mov	r0, r2
 8009178:	e7fb      	b.n	8009172 <__ascii_mbtowc+0x16>
 800917a:	f06f 0001 	mvn.w	r0, #1
 800917e:	e7f8      	b.n	8009172 <__ascii_mbtowc+0x16>

08009180 <__ascii_wctomb>:
 8009180:	4603      	mov	r3, r0
 8009182:	4608      	mov	r0, r1
 8009184:	b141      	cbz	r1, 8009198 <__ascii_wctomb+0x18>
 8009186:	2aff      	cmp	r2, #255	@ 0xff
 8009188:	d904      	bls.n	8009194 <__ascii_wctomb+0x14>
 800918a:	228a      	movs	r2, #138	@ 0x8a
 800918c:	f04f 30ff 	mov.w	r0, #4294967295
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	4770      	bx	lr
 8009194:	2001      	movs	r0, #1
 8009196:	700a      	strb	r2, [r1, #0]
 8009198:	4770      	bx	lr
	...

0800919c <fiprintf>:
 800919c:	b40e      	push	{r1, r2, r3}
 800919e:	b503      	push	{r0, r1, lr}
 80091a0:	4601      	mov	r1, r0
 80091a2:	ab03      	add	r3, sp, #12
 80091a4:	4805      	ldr	r0, [pc, #20]	@ (80091bc <fiprintf+0x20>)
 80091a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80091aa:	6800      	ldr	r0, [r0, #0]
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	f000 f835 	bl	800921c <_vfiprintf_r>
 80091b2:	b002      	add	sp, #8
 80091b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091b8:	b003      	add	sp, #12
 80091ba:	4770      	bx	lr
 80091bc:	20000030 	.word	0x20000030

080091c0 <abort>:
 80091c0:	2006      	movs	r0, #6
 80091c2:	b508      	push	{r3, lr}
 80091c4:	f000 f9fe 	bl	80095c4 <raise>
 80091c8:	2001      	movs	r0, #1
 80091ca:	f7f9 fac6 	bl	800275a <_exit>

080091ce <__sfputc_r>:
 80091ce:	6893      	ldr	r3, [r2, #8]
 80091d0:	b410      	push	{r4}
 80091d2:	3b01      	subs	r3, #1
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	6093      	str	r3, [r2, #8]
 80091d8:	da07      	bge.n	80091ea <__sfputc_r+0x1c>
 80091da:	6994      	ldr	r4, [r2, #24]
 80091dc:	42a3      	cmp	r3, r4
 80091de:	db01      	blt.n	80091e4 <__sfputc_r+0x16>
 80091e0:	290a      	cmp	r1, #10
 80091e2:	d102      	bne.n	80091ea <__sfputc_r+0x1c>
 80091e4:	bc10      	pop	{r4}
 80091e6:	f000 b931 	b.w	800944c <__swbuf_r>
 80091ea:	6813      	ldr	r3, [r2, #0]
 80091ec:	1c58      	adds	r0, r3, #1
 80091ee:	6010      	str	r0, [r2, #0]
 80091f0:	7019      	strb	r1, [r3, #0]
 80091f2:	4608      	mov	r0, r1
 80091f4:	bc10      	pop	{r4}
 80091f6:	4770      	bx	lr

080091f8 <__sfputs_r>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	4606      	mov	r6, r0
 80091fc:	460f      	mov	r7, r1
 80091fe:	4614      	mov	r4, r2
 8009200:	18d5      	adds	r5, r2, r3
 8009202:	42ac      	cmp	r4, r5
 8009204:	d101      	bne.n	800920a <__sfputs_r+0x12>
 8009206:	2000      	movs	r0, #0
 8009208:	e007      	b.n	800921a <__sfputs_r+0x22>
 800920a:	463a      	mov	r2, r7
 800920c:	4630      	mov	r0, r6
 800920e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009212:	f7ff ffdc 	bl	80091ce <__sfputc_r>
 8009216:	1c43      	adds	r3, r0, #1
 8009218:	d1f3      	bne.n	8009202 <__sfputs_r+0xa>
 800921a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800921c <_vfiprintf_r>:
 800921c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009220:	460d      	mov	r5, r1
 8009222:	4614      	mov	r4, r2
 8009224:	4698      	mov	r8, r3
 8009226:	4606      	mov	r6, r0
 8009228:	b09d      	sub	sp, #116	@ 0x74
 800922a:	b118      	cbz	r0, 8009234 <_vfiprintf_r+0x18>
 800922c:	6a03      	ldr	r3, [r0, #32]
 800922e:	b90b      	cbnz	r3, 8009234 <_vfiprintf_r+0x18>
 8009230:	f7fe fac4 	bl	80077bc <__sinit>
 8009234:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009236:	07d9      	lsls	r1, r3, #31
 8009238:	d405      	bmi.n	8009246 <_vfiprintf_r+0x2a>
 800923a:	89ab      	ldrh	r3, [r5, #12]
 800923c:	059a      	lsls	r2, r3, #22
 800923e:	d402      	bmi.n	8009246 <_vfiprintf_r+0x2a>
 8009240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009242:	f7fe fbb2 	bl	80079aa <__retarget_lock_acquire_recursive>
 8009246:	89ab      	ldrh	r3, [r5, #12]
 8009248:	071b      	lsls	r3, r3, #28
 800924a:	d501      	bpl.n	8009250 <_vfiprintf_r+0x34>
 800924c:	692b      	ldr	r3, [r5, #16]
 800924e:	b99b      	cbnz	r3, 8009278 <_vfiprintf_r+0x5c>
 8009250:	4629      	mov	r1, r5
 8009252:	4630      	mov	r0, r6
 8009254:	f000 f938 	bl	80094c8 <__swsetup_r>
 8009258:	b170      	cbz	r0, 8009278 <_vfiprintf_r+0x5c>
 800925a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800925c:	07dc      	lsls	r4, r3, #31
 800925e:	d504      	bpl.n	800926a <_vfiprintf_r+0x4e>
 8009260:	f04f 30ff 	mov.w	r0, #4294967295
 8009264:	b01d      	add	sp, #116	@ 0x74
 8009266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926a:	89ab      	ldrh	r3, [r5, #12]
 800926c:	0598      	lsls	r0, r3, #22
 800926e:	d4f7      	bmi.n	8009260 <_vfiprintf_r+0x44>
 8009270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009272:	f7fe fb9b 	bl	80079ac <__retarget_lock_release_recursive>
 8009276:	e7f3      	b.n	8009260 <_vfiprintf_r+0x44>
 8009278:	2300      	movs	r3, #0
 800927a:	9309      	str	r3, [sp, #36]	@ 0x24
 800927c:	2320      	movs	r3, #32
 800927e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009282:	2330      	movs	r3, #48	@ 0x30
 8009284:	f04f 0901 	mov.w	r9, #1
 8009288:	f8cd 800c 	str.w	r8, [sp, #12]
 800928c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009438 <_vfiprintf_r+0x21c>
 8009290:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009294:	4623      	mov	r3, r4
 8009296:	469a      	mov	sl, r3
 8009298:	f813 2b01 	ldrb.w	r2, [r3], #1
 800929c:	b10a      	cbz	r2, 80092a2 <_vfiprintf_r+0x86>
 800929e:	2a25      	cmp	r2, #37	@ 0x25
 80092a0:	d1f9      	bne.n	8009296 <_vfiprintf_r+0x7a>
 80092a2:	ebba 0b04 	subs.w	fp, sl, r4
 80092a6:	d00b      	beq.n	80092c0 <_vfiprintf_r+0xa4>
 80092a8:	465b      	mov	r3, fp
 80092aa:	4622      	mov	r2, r4
 80092ac:	4629      	mov	r1, r5
 80092ae:	4630      	mov	r0, r6
 80092b0:	f7ff ffa2 	bl	80091f8 <__sfputs_r>
 80092b4:	3001      	adds	r0, #1
 80092b6:	f000 80a7 	beq.w	8009408 <_vfiprintf_r+0x1ec>
 80092ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092bc:	445a      	add	r2, fp
 80092be:	9209      	str	r2, [sp, #36]	@ 0x24
 80092c0:	f89a 3000 	ldrb.w	r3, [sl]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f000 809f 	beq.w	8009408 <_vfiprintf_r+0x1ec>
 80092ca:	2300      	movs	r3, #0
 80092cc:	f04f 32ff 	mov.w	r2, #4294967295
 80092d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092d4:	f10a 0a01 	add.w	sl, sl, #1
 80092d8:	9304      	str	r3, [sp, #16]
 80092da:	9307      	str	r3, [sp, #28]
 80092dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80092e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80092e2:	4654      	mov	r4, sl
 80092e4:	2205      	movs	r2, #5
 80092e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ea:	4853      	ldr	r0, [pc, #332]	@ (8009438 <_vfiprintf_r+0x21c>)
 80092ec:	f7fe fb5f 	bl	80079ae <memchr>
 80092f0:	9a04      	ldr	r2, [sp, #16]
 80092f2:	b9d8      	cbnz	r0, 800932c <_vfiprintf_r+0x110>
 80092f4:	06d1      	lsls	r1, r2, #27
 80092f6:	bf44      	itt	mi
 80092f8:	2320      	movmi	r3, #32
 80092fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092fe:	0713      	lsls	r3, r2, #28
 8009300:	bf44      	itt	mi
 8009302:	232b      	movmi	r3, #43	@ 0x2b
 8009304:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009308:	f89a 3000 	ldrb.w	r3, [sl]
 800930c:	2b2a      	cmp	r3, #42	@ 0x2a
 800930e:	d015      	beq.n	800933c <_vfiprintf_r+0x120>
 8009310:	4654      	mov	r4, sl
 8009312:	2000      	movs	r0, #0
 8009314:	f04f 0c0a 	mov.w	ip, #10
 8009318:	9a07      	ldr	r2, [sp, #28]
 800931a:	4621      	mov	r1, r4
 800931c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009320:	3b30      	subs	r3, #48	@ 0x30
 8009322:	2b09      	cmp	r3, #9
 8009324:	d94b      	bls.n	80093be <_vfiprintf_r+0x1a2>
 8009326:	b1b0      	cbz	r0, 8009356 <_vfiprintf_r+0x13a>
 8009328:	9207      	str	r2, [sp, #28]
 800932a:	e014      	b.n	8009356 <_vfiprintf_r+0x13a>
 800932c:	eba0 0308 	sub.w	r3, r0, r8
 8009330:	fa09 f303 	lsl.w	r3, r9, r3
 8009334:	4313      	orrs	r3, r2
 8009336:	46a2      	mov	sl, r4
 8009338:	9304      	str	r3, [sp, #16]
 800933a:	e7d2      	b.n	80092e2 <_vfiprintf_r+0xc6>
 800933c:	9b03      	ldr	r3, [sp, #12]
 800933e:	1d19      	adds	r1, r3, #4
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	9103      	str	r1, [sp, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	bfbb      	ittet	lt
 8009348:	425b      	neglt	r3, r3
 800934a:	f042 0202 	orrlt.w	r2, r2, #2
 800934e:	9307      	strge	r3, [sp, #28]
 8009350:	9307      	strlt	r3, [sp, #28]
 8009352:	bfb8      	it	lt
 8009354:	9204      	strlt	r2, [sp, #16]
 8009356:	7823      	ldrb	r3, [r4, #0]
 8009358:	2b2e      	cmp	r3, #46	@ 0x2e
 800935a:	d10a      	bne.n	8009372 <_vfiprintf_r+0x156>
 800935c:	7863      	ldrb	r3, [r4, #1]
 800935e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009360:	d132      	bne.n	80093c8 <_vfiprintf_r+0x1ac>
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	3402      	adds	r4, #2
 8009366:	1d1a      	adds	r2, r3, #4
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	9203      	str	r2, [sp, #12]
 800936c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009370:	9305      	str	r3, [sp, #20]
 8009372:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800943c <_vfiprintf_r+0x220>
 8009376:	2203      	movs	r2, #3
 8009378:	4650      	mov	r0, sl
 800937a:	7821      	ldrb	r1, [r4, #0]
 800937c:	f7fe fb17 	bl	80079ae <memchr>
 8009380:	b138      	cbz	r0, 8009392 <_vfiprintf_r+0x176>
 8009382:	2240      	movs	r2, #64	@ 0x40
 8009384:	9b04      	ldr	r3, [sp, #16]
 8009386:	eba0 000a 	sub.w	r0, r0, sl
 800938a:	4082      	lsls	r2, r0
 800938c:	4313      	orrs	r3, r2
 800938e:	3401      	adds	r4, #1
 8009390:	9304      	str	r3, [sp, #16]
 8009392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009396:	2206      	movs	r2, #6
 8009398:	4829      	ldr	r0, [pc, #164]	@ (8009440 <_vfiprintf_r+0x224>)
 800939a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800939e:	f7fe fb06 	bl	80079ae <memchr>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d03f      	beq.n	8009426 <_vfiprintf_r+0x20a>
 80093a6:	4b27      	ldr	r3, [pc, #156]	@ (8009444 <_vfiprintf_r+0x228>)
 80093a8:	bb1b      	cbnz	r3, 80093f2 <_vfiprintf_r+0x1d6>
 80093aa:	9b03      	ldr	r3, [sp, #12]
 80093ac:	3307      	adds	r3, #7
 80093ae:	f023 0307 	bic.w	r3, r3, #7
 80093b2:	3308      	adds	r3, #8
 80093b4:	9303      	str	r3, [sp, #12]
 80093b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b8:	443b      	add	r3, r7
 80093ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80093bc:	e76a      	b.n	8009294 <_vfiprintf_r+0x78>
 80093be:	460c      	mov	r4, r1
 80093c0:	2001      	movs	r0, #1
 80093c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80093c6:	e7a8      	b.n	800931a <_vfiprintf_r+0xfe>
 80093c8:	2300      	movs	r3, #0
 80093ca:	f04f 0c0a 	mov.w	ip, #10
 80093ce:	4619      	mov	r1, r3
 80093d0:	3401      	adds	r4, #1
 80093d2:	9305      	str	r3, [sp, #20]
 80093d4:	4620      	mov	r0, r4
 80093d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093da:	3a30      	subs	r2, #48	@ 0x30
 80093dc:	2a09      	cmp	r2, #9
 80093de:	d903      	bls.n	80093e8 <_vfiprintf_r+0x1cc>
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d0c6      	beq.n	8009372 <_vfiprintf_r+0x156>
 80093e4:	9105      	str	r1, [sp, #20]
 80093e6:	e7c4      	b.n	8009372 <_vfiprintf_r+0x156>
 80093e8:	4604      	mov	r4, r0
 80093ea:	2301      	movs	r3, #1
 80093ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80093f0:	e7f0      	b.n	80093d4 <_vfiprintf_r+0x1b8>
 80093f2:	ab03      	add	r3, sp, #12
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	462a      	mov	r2, r5
 80093f8:	4630      	mov	r0, r6
 80093fa:	4b13      	ldr	r3, [pc, #76]	@ (8009448 <_vfiprintf_r+0x22c>)
 80093fc:	a904      	add	r1, sp, #16
 80093fe:	f7fd fd93 	bl	8006f28 <_printf_float>
 8009402:	4607      	mov	r7, r0
 8009404:	1c78      	adds	r0, r7, #1
 8009406:	d1d6      	bne.n	80093b6 <_vfiprintf_r+0x19a>
 8009408:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800940a:	07d9      	lsls	r1, r3, #31
 800940c:	d405      	bmi.n	800941a <_vfiprintf_r+0x1fe>
 800940e:	89ab      	ldrh	r3, [r5, #12]
 8009410:	059a      	lsls	r2, r3, #22
 8009412:	d402      	bmi.n	800941a <_vfiprintf_r+0x1fe>
 8009414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009416:	f7fe fac9 	bl	80079ac <__retarget_lock_release_recursive>
 800941a:	89ab      	ldrh	r3, [r5, #12]
 800941c:	065b      	lsls	r3, r3, #25
 800941e:	f53f af1f 	bmi.w	8009260 <_vfiprintf_r+0x44>
 8009422:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009424:	e71e      	b.n	8009264 <_vfiprintf_r+0x48>
 8009426:	ab03      	add	r3, sp, #12
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	462a      	mov	r2, r5
 800942c:	4630      	mov	r0, r6
 800942e:	4b06      	ldr	r3, [pc, #24]	@ (8009448 <_vfiprintf_r+0x22c>)
 8009430:	a904      	add	r1, sp, #16
 8009432:	f7fe f817 	bl	8007464 <_printf_i>
 8009436:	e7e4      	b.n	8009402 <_vfiprintf_r+0x1e6>
 8009438:	08009abf 	.word	0x08009abf
 800943c:	08009ac5 	.word	0x08009ac5
 8009440:	08009ac9 	.word	0x08009ac9
 8009444:	08006f29 	.word	0x08006f29
 8009448:	080091f9 	.word	0x080091f9

0800944c <__swbuf_r>:
 800944c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944e:	460e      	mov	r6, r1
 8009450:	4614      	mov	r4, r2
 8009452:	4605      	mov	r5, r0
 8009454:	b118      	cbz	r0, 800945e <__swbuf_r+0x12>
 8009456:	6a03      	ldr	r3, [r0, #32]
 8009458:	b90b      	cbnz	r3, 800945e <__swbuf_r+0x12>
 800945a:	f7fe f9af 	bl	80077bc <__sinit>
 800945e:	69a3      	ldr	r3, [r4, #24]
 8009460:	60a3      	str	r3, [r4, #8]
 8009462:	89a3      	ldrh	r3, [r4, #12]
 8009464:	071a      	lsls	r2, r3, #28
 8009466:	d501      	bpl.n	800946c <__swbuf_r+0x20>
 8009468:	6923      	ldr	r3, [r4, #16]
 800946a:	b943      	cbnz	r3, 800947e <__swbuf_r+0x32>
 800946c:	4621      	mov	r1, r4
 800946e:	4628      	mov	r0, r5
 8009470:	f000 f82a 	bl	80094c8 <__swsetup_r>
 8009474:	b118      	cbz	r0, 800947e <__swbuf_r+0x32>
 8009476:	f04f 37ff 	mov.w	r7, #4294967295
 800947a:	4638      	mov	r0, r7
 800947c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	6922      	ldr	r2, [r4, #16]
 8009482:	b2f6      	uxtb	r6, r6
 8009484:	1a98      	subs	r0, r3, r2
 8009486:	6963      	ldr	r3, [r4, #20]
 8009488:	4637      	mov	r7, r6
 800948a:	4283      	cmp	r3, r0
 800948c:	dc05      	bgt.n	800949a <__swbuf_r+0x4e>
 800948e:	4621      	mov	r1, r4
 8009490:	4628      	mov	r0, r5
 8009492:	f7ff fdeb 	bl	800906c <_fflush_r>
 8009496:	2800      	cmp	r0, #0
 8009498:	d1ed      	bne.n	8009476 <__swbuf_r+0x2a>
 800949a:	68a3      	ldr	r3, [r4, #8]
 800949c:	3b01      	subs	r3, #1
 800949e:	60a3      	str	r3, [r4, #8]
 80094a0:	6823      	ldr	r3, [r4, #0]
 80094a2:	1c5a      	adds	r2, r3, #1
 80094a4:	6022      	str	r2, [r4, #0]
 80094a6:	701e      	strb	r6, [r3, #0]
 80094a8:	6962      	ldr	r2, [r4, #20]
 80094aa:	1c43      	adds	r3, r0, #1
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d004      	beq.n	80094ba <__swbuf_r+0x6e>
 80094b0:	89a3      	ldrh	r3, [r4, #12]
 80094b2:	07db      	lsls	r3, r3, #31
 80094b4:	d5e1      	bpl.n	800947a <__swbuf_r+0x2e>
 80094b6:	2e0a      	cmp	r6, #10
 80094b8:	d1df      	bne.n	800947a <__swbuf_r+0x2e>
 80094ba:	4621      	mov	r1, r4
 80094bc:	4628      	mov	r0, r5
 80094be:	f7ff fdd5 	bl	800906c <_fflush_r>
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d0d9      	beq.n	800947a <__swbuf_r+0x2e>
 80094c6:	e7d6      	b.n	8009476 <__swbuf_r+0x2a>

080094c8 <__swsetup_r>:
 80094c8:	b538      	push	{r3, r4, r5, lr}
 80094ca:	4b29      	ldr	r3, [pc, #164]	@ (8009570 <__swsetup_r+0xa8>)
 80094cc:	4605      	mov	r5, r0
 80094ce:	6818      	ldr	r0, [r3, #0]
 80094d0:	460c      	mov	r4, r1
 80094d2:	b118      	cbz	r0, 80094dc <__swsetup_r+0x14>
 80094d4:	6a03      	ldr	r3, [r0, #32]
 80094d6:	b90b      	cbnz	r3, 80094dc <__swsetup_r+0x14>
 80094d8:	f7fe f970 	bl	80077bc <__sinit>
 80094dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094e0:	0719      	lsls	r1, r3, #28
 80094e2:	d422      	bmi.n	800952a <__swsetup_r+0x62>
 80094e4:	06da      	lsls	r2, r3, #27
 80094e6:	d407      	bmi.n	80094f8 <__swsetup_r+0x30>
 80094e8:	2209      	movs	r2, #9
 80094ea:	602a      	str	r2, [r5, #0]
 80094ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094f0:	f04f 30ff 	mov.w	r0, #4294967295
 80094f4:	81a3      	strh	r3, [r4, #12]
 80094f6:	e033      	b.n	8009560 <__swsetup_r+0x98>
 80094f8:	0758      	lsls	r0, r3, #29
 80094fa:	d512      	bpl.n	8009522 <__swsetup_r+0x5a>
 80094fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094fe:	b141      	cbz	r1, 8009512 <__swsetup_r+0x4a>
 8009500:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009504:	4299      	cmp	r1, r3
 8009506:	d002      	beq.n	800950e <__swsetup_r+0x46>
 8009508:	4628      	mov	r0, r5
 800950a:	f7ff f8b1 	bl	8008670 <_free_r>
 800950e:	2300      	movs	r3, #0
 8009510:	6363      	str	r3, [r4, #52]	@ 0x34
 8009512:	89a3      	ldrh	r3, [r4, #12]
 8009514:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009518:	81a3      	strh	r3, [r4, #12]
 800951a:	2300      	movs	r3, #0
 800951c:	6063      	str	r3, [r4, #4]
 800951e:	6923      	ldr	r3, [r4, #16]
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	89a3      	ldrh	r3, [r4, #12]
 8009524:	f043 0308 	orr.w	r3, r3, #8
 8009528:	81a3      	strh	r3, [r4, #12]
 800952a:	6923      	ldr	r3, [r4, #16]
 800952c:	b94b      	cbnz	r3, 8009542 <__swsetup_r+0x7a>
 800952e:	89a3      	ldrh	r3, [r4, #12]
 8009530:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009538:	d003      	beq.n	8009542 <__swsetup_r+0x7a>
 800953a:	4621      	mov	r1, r4
 800953c:	4628      	mov	r0, r5
 800953e:	f000 f882 	bl	8009646 <__smakebuf_r>
 8009542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009546:	f013 0201 	ands.w	r2, r3, #1
 800954a:	d00a      	beq.n	8009562 <__swsetup_r+0x9a>
 800954c:	2200      	movs	r2, #0
 800954e:	60a2      	str	r2, [r4, #8]
 8009550:	6962      	ldr	r2, [r4, #20]
 8009552:	4252      	negs	r2, r2
 8009554:	61a2      	str	r2, [r4, #24]
 8009556:	6922      	ldr	r2, [r4, #16]
 8009558:	b942      	cbnz	r2, 800956c <__swsetup_r+0xa4>
 800955a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800955e:	d1c5      	bne.n	80094ec <__swsetup_r+0x24>
 8009560:	bd38      	pop	{r3, r4, r5, pc}
 8009562:	0799      	lsls	r1, r3, #30
 8009564:	bf58      	it	pl
 8009566:	6962      	ldrpl	r2, [r4, #20]
 8009568:	60a2      	str	r2, [r4, #8]
 800956a:	e7f4      	b.n	8009556 <__swsetup_r+0x8e>
 800956c:	2000      	movs	r0, #0
 800956e:	e7f7      	b.n	8009560 <__swsetup_r+0x98>
 8009570:	20000030 	.word	0x20000030

08009574 <_raise_r>:
 8009574:	291f      	cmp	r1, #31
 8009576:	b538      	push	{r3, r4, r5, lr}
 8009578:	4605      	mov	r5, r0
 800957a:	460c      	mov	r4, r1
 800957c:	d904      	bls.n	8009588 <_raise_r+0x14>
 800957e:	2316      	movs	r3, #22
 8009580:	6003      	str	r3, [r0, #0]
 8009582:	f04f 30ff 	mov.w	r0, #4294967295
 8009586:	bd38      	pop	{r3, r4, r5, pc}
 8009588:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800958a:	b112      	cbz	r2, 8009592 <_raise_r+0x1e>
 800958c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009590:	b94b      	cbnz	r3, 80095a6 <_raise_r+0x32>
 8009592:	4628      	mov	r0, r5
 8009594:	f000 f830 	bl	80095f8 <_getpid_r>
 8009598:	4622      	mov	r2, r4
 800959a:	4601      	mov	r1, r0
 800959c:	4628      	mov	r0, r5
 800959e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095a2:	f000 b817 	b.w	80095d4 <_kill_r>
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d00a      	beq.n	80095c0 <_raise_r+0x4c>
 80095aa:	1c59      	adds	r1, r3, #1
 80095ac:	d103      	bne.n	80095b6 <_raise_r+0x42>
 80095ae:	2316      	movs	r3, #22
 80095b0:	6003      	str	r3, [r0, #0]
 80095b2:	2001      	movs	r0, #1
 80095b4:	e7e7      	b.n	8009586 <_raise_r+0x12>
 80095b6:	2100      	movs	r1, #0
 80095b8:	4620      	mov	r0, r4
 80095ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80095be:	4798      	blx	r3
 80095c0:	2000      	movs	r0, #0
 80095c2:	e7e0      	b.n	8009586 <_raise_r+0x12>

080095c4 <raise>:
 80095c4:	4b02      	ldr	r3, [pc, #8]	@ (80095d0 <raise+0xc>)
 80095c6:	4601      	mov	r1, r0
 80095c8:	6818      	ldr	r0, [r3, #0]
 80095ca:	f7ff bfd3 	b.w	8009574 <_raise_r>
 80095ce:	bf00      	nop
 80095d0:	20000030 	.word	0x20000030

080095d4 <_kill_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	2300      	movs	r3, #0
 80095d8:	4d06      	ldr	r5, [pc, #24]	@ (80095f4 <_kill_r+0x20>)
 80095da:	4604      	mov	r4, r0
 80095dc:	4608      	mov	r0, r1
 80095de:	4611      	mov	r1, r2
 80095e0:	602b      	str	r3, [r5, #0]
 80095e2:	f7f9 f8aa 	bl	800273a <_kill>
 80095e6:	1c43      	adds	r3, r0, #1
 80095e8:	d102      	bne.n	80095f0 <_kill_r+0x1c>
 80095ea:	682b      	ldr	r3, [r5, #0]
 80095ec:	b103      	cbz	r3, 80095f0 <_kill_r+0x1c>
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	bd38      	pop	{r3, r4, r5, pc}
 80095f2:	bf00      	nop
 80095f4:	200009f8 	.word	0x200009f8

080095f8 <_getpid_r>:
 80095f8:	f7f9 b898 	b.w	800272c <_getpid>

080095fc <__swhatbuf_r>:
 80095fc:	b570      	push	{r4, r5, r6, lr}
 80095fe:	460c      	mov	r4, r1
 8009600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009604:	4615      	mov	r5, r2
 8009606:	2900      	cmp	r1, #0
 8009608:	461e      	mov	r6, r3
 800960a:	b096      	sub	sp, #88	@ 0x58
 800960c:	da0c      	bge.n	8009628 <__swhatbuf_r+0x2c>
 800960e:	89a3      	ldrh	r3, [r4, #12]
 8009610:	2100      	movs	r1, #0
 8009612:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009616:	bf14      	ite	ne
 8009618:	2340      	movne	r3, #64	@ 0x40
 800961a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800961e:	2000      	movs	r0, #0
 8009620:	6031      	str	r1, [r6, #0]
 8009622:	602b      	str	r3, [r5, #0]
 8009624:	b016      	add	sp, #88	@ 0x58
 8009626:	bd70      	pop	{r4, r5, r6, pc}
 8009628:	466a      	mov	r2, sp
 800962a:	f000 f849 	bl	80096c0 <_fstat_r>
 800962e:	2800      	cmp	r0, #0
 8009630:	dbed      	blt.n	800960e <__swhatbuf_r+0x12>
 8009632:	9901      	ldr	r1, [sp, #4]
 8009634:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009638:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800963c:	4259      	negs	r1, r3
 800963e:	4159      	adcs	r1, r3
 8009640:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009644:	e7eb      	b.n	800961e <__swhatbuf_r+0x22>

08009646 <__smakebuf_r>:
 8009646:	898b      	ldrh	r3, [r1, #12]
 8009648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800964a:	079d      	lsls	r5, r3, #30
 800964c:	4606      	mov	r6, r0
 800964e:	460c      	mov	r4, r1
 8009650:	d507      	bpl.n	8009662 <__smakebuf_r+0x1c>
 8009652:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009656:	6023      	str	r3, [r4, #0]
 8009658:	6123      	str	r3, [r4, #16]
 800965a:	2301      	movs	r3, #1
 800965c:	6163      	str	r3, [r4, #20]
 800965e:	b003      	add	sp, #12
 8009660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009662:	466a      	mov	r2, sp
 8009664:	ab01      	add	r3, sp, #4
 8009666:	f7ff ffc9 	bl	80095fc <__swhatbuf_r>
 800966a:	9f00      	ldr	r7, [sp, #0]
 800966c:	4605      	mov	r5, r0
 800966e:	4639      	mov	r1, r7
 8009670:	4630      	mov	r0, r6
 8009672:	f7ff f86f 	bl	8008754 <_malloc_r>
 8009676:	b948      	cbnz	r0, 800968c <__smakebuf_r+0x46>
 8009678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800967c:	059a      	lsls	r2, r3, #22
 800967e:	d4ee      	bmi.n	800965e <__smakebuf_r+0x18>
 8009680:	f023 0303 	bic.w	r3, r3, #3
 8009684:	f043 0302 	orr.w	r3, r3, #2
 8009688:	81a3      	strh	r3, [r4, #12]
 800968a:	e7e2      	b.n	8009652 <__smakebuf_r+0xc>
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009696:	81a3      	strh	r3, [r4, #12]
 8009698:	9b01      	ldr	r3, [sp, #4]
 800969a:	6020      	str	r0, [r4, #0]
 800969c:	b15b      	cbz	r3, 80096b6 <__smakebuf_r+0x70>
 800969e:	4630      	mov	r0, r6
 80096a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096a4:	f000 f81e 	bl	80096e4 <_isatty_r>
 80096a8:	b128      	cbz	r0, 80096b6 <__smakebuf_r+0x70>
 80096aa:	89a3      	ldrh	r3, [r4, #12]
 80096ac:	f023 0303 	bic.w	r3, r3, #3
 80096b0:	f043 0301 	orr.w	r3, r3, #1
 80096b4:	81a3      	strh	r3, [r4, #12]
 80096b6:	89a3      	ldrh	r3, [r4, #12]
 80096b8:	431d      	orrs	r5, r3
 80096ba:	81a5      	strh	r5, [r4, #12]
 80096bc:	e7cf      	b.n	800965e <__smakebuf_r+0x18>
	...

080096c0 <_fstat_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	2300      	movs	r3, #0
 80096c4:	4d06      	ldr	r5, [pc, #24]	@ (80096e0 <_fstat_r+0x20>)
 80096c6:	4604      	mov	r4, r0
 80096c8:	4608      	mov	r0, r1
 80096ca:	4611      	mov	r1, r2
 80096cc:	602b      	str	r3, [r5, #0]
 80096ce:	f7f9 f893 	bl	80027f8 <_fstat>
 80096d2:	1c43      	adds	r3, r0, #1
 80096d4:	d102      	bne.n	80096dc <_fstat_r+0x1c>
 80096d6:	682b      	ldr	r3, [r5, #0]
 80096d8:	b103      	cbz	r3, 80096dc <_fstat_r+0x1c>
 80096da:	6023      	str	r3, [r4, #0]
 80096dc:	bd38      	pop	{r3, r4, r5, pc}
 80096de:	bf00      	nop
 80096e0:	200009f8 	.word	0x200009f8

080096e4 <_isatty_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	2300      	movs	r3, #0
 80096e8:	4d05      	ldr	r5, [pc, #20]	@ (8009700 <_isatty_r+0x1c>)
 80096ea:	4604      	mov	r4, r0
 80096ec:	4608      	mov	r0, r1
 80096ee:	602b      	str	r3, [r5, #0]
 80096f0:	f7f9 f891 	bl	8002816 <_isatty>
 80096f4:	1c43      	adds	r3, r0, #1
 80096f6:	d102      	bne.n	80096fe <_isatty_r+0x1a>
 80096f8:	682b      	ldr	r3, [r5, #0]
 80096fa:	b103      	cbz	r3, 80096fe <_isatty_r+0x1a>
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	bd38      	pop	{r3, r4, r5, pc}
 8009700:	200009f8 	.word	0x200009f8

08009704 <_init>:
 8009704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009706:	bf00      	nop
 8009708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970a:	bc08      	pop	{r3}
 800970c:	469e      	mov	lr, r3
 800970e:	4770      	bx	lr

08009710 <_fini>:
 8009710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009712:	bf00      	nop
 8009714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009716:	bc08      	pop	{r3}
 8009718:	469e      	mov	lr, r3
 800971a:	4770      	bx	lr
