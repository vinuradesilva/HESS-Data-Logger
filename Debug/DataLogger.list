
DataLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0bc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e0  0800d1d0  0800d1d0  0000e1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbb0  0800dbb0  0000f1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbb0  0800dbb0  0000ebb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbb8  0800dbb8  0000f1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbb8  0800dbb8  0000ebb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dbbc  0800dbbc  0000ebbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800dbc0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026f8  200001ec  0800ddac  0000f1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200028e4  0800ddac  0000f8e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147fc  00000000  00000000  0000f215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000361c  00000000  00000000  00023a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  00027030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001094  00000000  00000000  00028578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a82a  00000000  00000000  0002960c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001baf5  00000000  00000000  00043e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094cff  00000000  00000000  0005f92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f462a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ac0  00000000  00000000  000f4670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000fb130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d1b4 	.word	0x0800d1b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800d1b4 	.word	0x0800d1b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <bcd2bin>:
extern I2C_HandleTypeDef hi2c1;

extern int h;


uint8_t bcd2bin(uint8_t data){
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
 return ((data>>4)*10)+(data&0x0F);
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	0092      	lsls	r2, r2, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 030f 	and.w	r3, r3, #15
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b2db      	uxtb	r3, r3
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <rtc_write>:
	
	return data;
}

void rtc_write(uint8_t address,uint8_t data)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af04      	add	r7, sp, #16
 8000cda:	4603      	mov	r3, r0
 8000cdc:	460a      	mov	r2, r1
 8000cde:	71fb      	strb	r3, [r7, #7]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	71bb      	strb	r3, [r7, #6]
	if(HAL_I2C_Mem_Write(&hi2c1,addr_ds1307,address,I2C_MEMADD_SIZE_8BIT,&data,1,100)!=HAL_OK){
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	2364      	movs	r3, #100	@ 0x64
 8000cea:	9302      	str	r3, [sp, #8]
 8000cec:	2301      	movs	r3, #1
 8000cee:	9301      	str	r3, [sp, #4]
 8000cf0:	1dbb      	adds	r3, r7, #6
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	f64f 71d0 	movw	r1, #65488	@ 0xffd0
 8000cfa:	4809      	ldr	r0, [pc, #36]	@ (8000d20 <rtc_write+0x4c>)
 8000cfc:	f003 f88a 	bl	8003e14 <HAL_I2C_Mem_Write>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d008      	beq.n	8000d18 <rtc_write+0x44>
		h++;
 8000d06:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <rtc_write+0x50>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	4a05      	ldr	r2, [pc, #20]	@ (8000d24 <rtc_write+0x50>)
 8000d0e:	6013      	str	r3, [r2, #0]
		Error_Handler(__FILE__,__LINE__);
 8000d10:	211f      	movs	r1, #31
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <rtc_write+0x54>)
 8000d14:	f001 fa82 	bl	800221c <Error_Handler>
	}
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20002360 	.word	0x20002360
 8000d24:	20002554 	.word	0x20002554
 8000d28:	0800d1d0 	.word	0x0800d1d0

08000d2c <rtc_init>:

void rtc_init(uint8_t rs,uint8_t sqwe,uint8_t out)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
 8000d36:	460b      	mov	r3, r1
 8000d38:	71bb      	strb	r3, [r7, #6]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	717b      	strb	r3, [r7, #5]
	rs&=3;
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	f003 0303 	and.w	r3, r3, #3
 8000d44:	71fb      	strb	r3, [r7, #7]
	if (sqwe) rs|=0x10;
 8000d46:	79bb      	ldrb	r3, [r7, #6]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <rtc_init+0x28>
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	f043 0310 	orr.w	r3, r3, #16
 8000d52:	71fb      	strb	r3, [r7, #7]
	if (out) rs|=0x80;
 8000d54:	797b      	ldrb	r3, [r7, #5]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <rtc_init+0x36>
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d60:	71fb      	strb	r3, [r7, #7]
	
	rtc_write(0x07,rs);
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	4619      	mov	r1, r3
 8000d66:	2007      	movs	r0, #7
 8000d68:	f7ff ffb4 	bl	8000cd4 <rtc_write>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <rtc_get_time>:

void rtc_get_time(uint8_t *hour,uint8_t *min,uint8_t *sec)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	@ 0x28
 8000d78:	af04      	add	r7, sp, #16
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	uint8_t data[3];
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x00,I2C_MEMADD_SIZE_8BIT,data,3,1000)!=HAL_OK){
 8000d80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d84:	9302      	str	r3, [sp, #8]
 8000d86:	2303      	movs	r3, #3
 8000d88:	9301      	str	r3, [sp, #4]
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2301      	movs	r3, #1
 8000d92:	2200      	movs	r2, #0
 8000d94:	f64f 71d0 	movw	r1, #65488	@ 0xffd0
 8000d98:	4812      	ldr	r0, [pc, #72]	@ (8000de4 <rtc_get_time+0x70>)
 8000d9a:	f003 f935 	bl	8004008 <HAL_I2C_Mem_Read>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <rtc_get_time+0x38>
		Error_Handler(__FILE__,__LINE__);
 8000da4:	2130      	movs	r1, #48	@ 0x30
 8000da6:	4810      	ldr	r0, [pc, #64]	@ (8000de8 <rtc_get_time+0x74>)
 8000da8:	f001 fa38 	bl	800221c <Error_Handler>
	}	

	*sec=bcd2bin(data[0]);
 8000dac:	7d3b      	ldrb	r3, [r7, #20]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff78 	bl	8000ca4 <bcd2bin>
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	701a      	strb	r2, [r3, #0]
	*min=bcd2bin(data[1]);
 8000dbc:	7d7b      	ldrb	r3, [r7, #21]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff70 	bl	8000ca4 <bcd2bin>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	701a      	strb	r2, [r3, #0]
	*hour=bcd2bin(data[2]);
 8000dcc:	7dbb      	ldrb	r3, [r7, #22]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff68 	bl	8000ca4 <bcd2bin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	701a      	strb	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20002360 	.word	0x20002360
 8000de8:	0800d1d0 	.word	0x0800d1d0

08000dec <rtc_get_date>:
		Error_Handler(__FILE__,__LINE__);
	}
}

void rtc_get_date(uint8_t *week_day,uint8_t *day,uint8_t *month,uint8_t *year)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	@ 0x28
 8000df0:	af04      	add	r7, sp, #16
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
	uint8_t data[4]={0,0,0,0};
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
	if(HAL_I2C_Mem_Read(&hi2c1,addr_ds1307,0x03,I2C_MEMADD_SIZE_8BIT,data,4,1000)!=HAL_OK){
 8000dfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e02:	9302      	str	r3, [sp, #8]
 8000e04:	2304      	movs	r3, #4
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	f64f 71d0 	movw	r1, #65488	@ 0xffd0
 8000e16:	4814      	ldr	r0, [pc, #80]	@ (8000e68 <rtc_get_date+0x7c>)
 8000e18:	f003 f8f6 	bl	8004008 <HAL_I2C_Mem_Read>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <rtc_get_date+0x3e>
		Error_Handler(__FILE__,__LINE__);
 8000e22:	2144      	movs	r1, #68	@ 0x44
 8000e24:	4811      	ldr	r0, [pc, #68]	@ (8000e6c <rtc_get_date+0x80>)
 8000e26:	f001 f9f9 	bl	800221c <Error_Handler>
	}
	
	*week_day=data[0];
 8000e2a:	7d3a      	ldrb	r2, [r7, #20]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	701a      	strb	r2, [r3, #0]
	*day=bcd2bin(data[1]);
 8000e30:	7d7b      	ldrb	r3, [r7, #21]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff36 	bl	8000ca4 <bcd2bin>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	701a      	strb	r2, [r3, #0]
	*month=bcd2bin(data[2]);
 8000e40:	7dbb      	ldrb	r3, [r7, #22]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff2e 	bl	8000ca4 <bcd2bin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	701a      	strb	r2, [r3, #0]
	*year=bcd2bin(data[3]);
 8000e50:	7dfb      	ldrb	r3, [r7, #23]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff26 	bl	8000ca4 <bcd2bin>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	701a      	strb	r2, [r3, #0]
}
 8000e60:	bf00      	nop
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20002360 	.word	0x20002360
 8000e6c:	0800d1d0 	.word	0x0800d1d0

08000e70 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e7a:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <SELECT+0x1c>)
 8000e7c:	f002 fe54 	bl	8003b28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e80:	2001      	movs	r0, #1
 8000e82:	f001 fd1b 	bl	80028bc <HAL_Delay>
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40010800 	.word	0x40010800

08000e90 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e9a:	4804      	ldr	r0, [pc, #16]	@ (8000eac <DESELECT+0x1c>)
 8000e9c:	f002 fe44 	bl	8003b28 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f001 fd0b 	bl	80028bc <HAL_Delay>
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40010800 	.word	0x40010800

08000eb0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000eba:	bf00      	nop
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <SPI_TxByte+0x30>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d1f8      	bne.n	8000ebc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000eca:	1df9      	adds	r1, r7, #7
 8000ecc:	2364      	movs	r3, #100	@ 0x64
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4803      	ldr	r0, [pc, #12]	@ (8000ee0 <SPI_TxByte+0x30>)
 8000ed2:	f004 fbf7 	bl	80056c4 <HAL_SPI_Transmit>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200023b4 	.word	0x200023b4

08000ee4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ef0:	bf00      	nop
 8000ef2:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <SPI_TxBuffer+0x30>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d1f8      	bne.n	8000ef2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000f00:	887a      	ldrh	r2, [r7, #2]
 8000f02:	2364      	movs	r3, #100	@ 0x64
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	4803      	ldr	r0, [pc, #12]	@ (8000f14 <SPI_TxBuffer+0x30>)
 8000f08:	f004 fbdc 	bl	80056c4 <HAL_SPI_Transmit>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200023b4 	.word	0x200023b4

08000f18 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000f1e:	23ff      	movs	r3, #255	@ 0xff
 8000f20:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f22:	bf00      	nop
 8000f24:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <SPI_RxByte+0x34>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d1f8      	bne.n	8000f24 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000f32:	1dba      	adds	r2, r7, #6
 8000f34:	1df9      	adds	r1, r7, #7
 8000f36:	2364      	movs	r3, #100	@ 0x64
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <SPI_RxByte+0x34>)
 8000f3e:	f004 fd05 	bl	800594c <HAL_SPI_TransmitReceive>

	return data;
 8000f42:	79bb      	ldrb	r3, [r7, #6]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200023b4 	.word	0x200023b4

08000f50 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000f58:	f7ff ffde 	bl	8000f18 <SPI_RxByte>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	461a      	mov	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	701a      	strb	r2, [r3, #0]
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000f72:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <SD_ReadyWait+0x30>)
 8000f74:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f78:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000f7a:	f7ff ffcd 	bl	8000f18 <SPI_RxByte>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2bff      	cmp	r3, #255	@ 0xff
 8000f86:	d003      	beq.n	8000f90 <SD_ReadyWait+0x24>
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <SD_ReadyWait+0x30>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f4      	bne.n	8000f7a <SD_ReadyWait+0xe>

	return res;
 8000f90:	79fb      	ldrb	r3, [r7, #7]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000020a 	.word	0x2000020a

08000fa0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000fa6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000faa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000fac:	f7ff ff70 	bl	8000e90 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	e005      	b.n	8000fc2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000fb6:	20ff      	movs	r0, #255	@ 0xff
 8000fb8:	f7ff ff7a 	bl	8000eb0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	2b09      	cmp	r3, #9
 8000fc6:	ddf6      	ble.n	8000fb6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000fc8:	f7ff ff52 	bl	8000e70 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000fcc:	2340      	movs	r3, #64	@ 0x40
 8000fce:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000fe0:	2395      	movs	r3, #149	@ 0x95
 8000fe2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2106      	movs	r1, #6
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff7b 	bl	8000ee4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000fee:	e002      	b.n	8000ff6 <SD_PowerOn+0x56>
	{
		cnt--;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000ff6:	f7ff ff8f 	bl	8000f18 <SPI_RxByte>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d002      	beq.n	8001006 <SD_PowerOn+0x66>
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f4      	bne.n	8000ff0 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001006:	f7ff ff43 	bl	8000e90 <DESELECT>
	SPI_TxByte(0XFF);
 800100a:	20ff      	movs	r0, #255	@ 0xff
 800100c:	f7ff ff50 	bl	8000eb0 <SPI_TxByte>

	PowerFlag = 1;
 8001010:	4b03      	ldr	r3, [pc, #12]	@ (8001020 <SD_PowerOn+0x80>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000020d 	.word	0x2000020d

08001024 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001028:	4b03      	ldr	r3, [pc, #12]	@ (8001038 <SD_PowerOff+0x14>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	2000020d 	.word	0x2000020d

0800103c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001040:	4b02      	ldr	r3, [pc, #8]	@ (800104c <SD_CheckPower+0x10>)
 8001042:	781b      	ldrb	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	2000020d 	.word	0x2000020d

08001050 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <SD_RxDataBlock+0x58>)
 800105c:	22c8      	movs	r2, #200	@ 0xc8
 800105e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001060:	f7ff ff5a 	bl	8000f18 <SPI_RxByte>
 8001064:	4603      	mov	r3, r0
 8001066:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	2bff      	cmp	r3, #255	@ 0xff
 800106c:	d103      	bne.n	8001076 <SD_RxDataBlock+0x26>
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <SD_RxDataBlock+0x58>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f4      	bne.n	8001060 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	2bfe      	cmp	r3, #254	@ 0xfe
 800107a:	d001      	beq.n	8001080 <SD_RxDataBlock+0x30>
 800107c:	2300      	movs	r3, #0
 800107e:	e00f      	b.n	80010a0 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff62 	bl	8000f50 <SPI_RxBytePtr>
	} while(len--);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	1e5a      	subs	r2, r3, #1
 8001090:	603a      	str	r2, [r7, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f4      	bne.n	8001080 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001096:	f7ff ff3f 	bl	8000f18 <SPI_RxByte>
	SPI_RxByte();
 800109a:	f7ff ff3d 	bl	8000f18 <SPI_RxByte>

	return TRUE;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000208 	.word	0x20000208

080010ac <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80010bc:	f7ff ff56 	bl	8000f6c <SD_ReadyWait>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2bff      	cmp	r3, #255	@ 0xff
 80010c4:	d001      	beq.n	80010ca <SD_TxDataBlock+0x1e>
 80010c6:	2300      	movs	r3, #0
 80010c8:	e02f      	b.n	800112a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80010ca:	78fb      	ldrb	r3, [r7, #3]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff feef 	bl	8000eb0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	2bfd      	cmp	r3, #253	@ 0xfd
 80010d6:	d020      	beq.n	800111a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80010d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff01 	bl	8000ee4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80010e2:	f7ff ff19 	bl	8000f18 <SPI_RxByte>
		SPI_RxByte();
 80010e6:	f7ff ff17 	bl	8000f18 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80010ea:	e00b      	b.n	8001104 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80010ec:	f7ff ff14 	bl	8000f18 <SPI_RxByte>
 80010f0:	4603      	mov	r3, r0
 80010f2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	f003 031f 	and.w	r3, r3, #31
 80010fa:	2b05      	cmp	r3, #5
 80010fc:	d006      	beq.n	800110c <SD_TxDataBlock+0x60>
			i++;
 80010fe:	7bbb      	ldrb	r3, [r7, #14]
 8001100:	3301      	adds	r3, #1
 8001102:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001104:	7bbb      	ldrb	r3, [r7, #14]
 8001106:	2b40      	cmp	r3, #64	@ 0x40
 8001108:	d9f0      	bls.n	80010ec <SD_TxDataBlock+0x40>
 800110a:	e000      	b.n	800110e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800110c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800110e:	bf00      	nop
 8001110:	f7ff ff02 	bl	8000f18 <SPI_RxByte>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0fa      	beq.n	8001110 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	f003 031f 	and.w	r3, r3, #31
 8001120:	2b05      	cmp	r3, #5
 8001122:	d101      	bne.n	8001128 <SD_TxDataBlock+0x7c>
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	6039      	str	r1, [r7, #0]
 800113c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800113e:	f7ff ff15 	bl	8000f6c <SD_ReadyWait>
 8001142:	4603      	mov	r3, r0
 8001144:	2bff      	cmp	r3, #255	@ 0xff
 8001146:	d001      	beq.n	800114c <SD_SendCmd+0x1a>
 8001148:	23ff      	movs	r3, #255	@ 0xff
 800114a:	e042      	b.n	80011d2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff feae 	bl	8000eb0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	0e1b      	lsrs	r3, r3, #24
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fea8 	bl	8000eb0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	0c1b      	lsrs	r3, r3, #16
 8001164:	b2db      	uxtb	r3, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fea2 	bl	8000eb0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	0a1b      	lsrs	r3, r3, #8
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fe9c 	bl	8000eb0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fe97 	bl	8000eb0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	2b40      	cmp	r3, #64	@ 0x40
 8001186:	d102      	bne.n	800118e <SD_SendCmd+0x5c>
 8001188:	2395      	movs	r3, #149	@ 0x95
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e007      	b.n	800119e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2b48      	cmp	r3, #72	@ 0x48
 8001192:	d102      	bne.n	800119a <SD_SendCmd+0x68>
 8001194:	2387      	movs	r3, #135	@ 0x87
 8001196:	73fb      	strb	r3, [r7, #15]
 8001198:	e001      	b.n	800119e <SD_SendCmd+0x6c>
	else crc = 1;
 800119a:	2301      	movs	r3, #1
 800119c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fe85 	bl	8000eb0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b4c      	cmp	r3, #76	@ 0x4c
 80011aa:	d101      	bne.n	80011b0 <SD_SendCmd+0x7e>
 80011ac:	f7ff feb4 	bl	8000f18 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80011b0:	230a      	movs	r3, #10
 80011b2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80011b4:	f7ff feb0 	bl	8000f18 <SPI_RxByte>
 80011b8:	4603      	mov	r3, r0
 80011ba:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80011bc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	da05      	bge.n	80011d0 <SD_SendCmd+0x9e>
 80011c4:	7bbb      	ldrb	r3, [r7, #14]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	73bb      	strb	r3, [r7, #14]
 80011ca:	7bbb      	ldrb	r3, [r7, #14]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1f1      	bne.n	80011b4 <SD_SendCmd+0x82>

	return res;
 80011d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SD_disk_initialize+0x14>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0d1      	b.n	8001394 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80011f0:	4b6a      	ldr	r3, [pc, #424]	@ (800139c <SD_disk_initialize+0x1c0>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <SD_disk_initialize+0x2a>
 80011fe:	4b67      	ldr	r3, [pc, #412]	@ (800139c <SD_disk_initialize+0x1c0>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	e0c6      	b.n	8001394 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001206:	f7ff fecb 	bl	8000fa0 <SD_PowerOn>

	/* slave select */
	SELECT();
 800120a:	f7ff fe31 	bl	8000e70 <SELECT>

	/* check disk type */
	type = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001212:	2100      	movs	r1, #0
 8001214:	2040      	movs	r0, #64	@ 0x40
 8001216:	f7ff ff8c 	bl	8001132 <SD_SendCmd>
 800121a:	4603      	mov	r3, r0
 800121c:	2b01      	cmp	r3, #1
 800121e:	f040 80a1 	bne.w	8001364 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001222:	4b5f      	ldr	r3, [pc, #380]	@ (80013a0 <SD_disk_initialize+0x1c4>)
 8001224:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001228:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800122a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800122e:	2048      	movs	r0, #72	@ 0x48
 8001230:	f7ff ff7f 	bl	8001132 <SD_SendCmd>
 8001234:	4603      	mov	r3, r0
 8001236:	2b01      	cmp	r3, #1
 8001238:	d155      	bne.n	80012e6 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800123a:	2300      	movs	r3, #0
 800123c:	73fb      	strb	r3, [r7, #15]
 800123e:	e00c      	b.n	800125a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001240:	7bfc      	ldrb	r4, [r7, #15]
 8001242:	f7ff fe69 	bl	8000f18 <SPI_RxByte>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	f104 0310 	add.w	r3, r4, #16
 800124e:	443b      	add	r3, r7
 8001250:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	3301      	adds	r3, #1
 8001258:	73fb      	strb	r3, [r7, #15]
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	2b03      	cmp	r3, #3
 800125e:	d9ef      	bls.n	8001240 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001260:	7abb      	ldrb	r3, [r7, #10]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d17e      	bne.n	8001364 <SD_disk_initialize+0x188>
 8001266:	7afb      	ldrb	r3, [r7, #11]
 8001268:	2baa      	cmp	r3, #170	@ 0xaa
 800126a:	d17b      	bne.n	8001364 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800126c:	2100      	movs	r1, #0
 800126e:	2077      	movs	r0, #119	@ 0x77
 8001270:	f7ff ff5f 	bl	8001132 <SD_SendCmd>
 8001274:	4603      	mov	r3, r0
 8001276:	2b01      	cmp	r3, #1
 8001278:	d807      	bhi.n	800128a <SD_disk_initialize+0xae>
 800127a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800127e:	2069      	movs	r0, #105	@ 0x69
 8001280:	f7ff ff57 	bl	8001132 <SD_SendCmd>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d004      	beq.n	8001294 <SD_disk_initialize+0xb8>
				} while (Timer1);
 800128a:	4b45      	ldr	r3, [pc, #276]	@ (80013a0 <SD_disk_initialize+0x1c4>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1ec      	bne.n	800126c <SD_disk_initialize+0x90>
 8001292:	e000      	b.n	8001296 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001294:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001296:	4b42      	ldr	r3, [pc, #264]	@ (80013a0 <SD_disk_initialize+0x1c4>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d062      	beq.n	8001364 <SD_disk_initialize+0x188>
 800129e:	2100      	movs	r1, #0
 80012a0:	207a      	movs	r0, #122	@ 0x7a
 80012a2:	f7ff ff46 	bl	8001132 <SD_SendCmd>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d15b      	bne.n	8001364 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e00c      	b.n	80012cc <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80012b2:	7bfc      	ldrb	r4, [r7, #15]
 80012b4:	f7ff fe30 	bl	8000f18 <SPI_RxByte>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	f104 0310 	add.w	r3, r4, #16
 80012c0:	443b      	add	r3, r7
 80012c2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	3301      	adds	r3, #1
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d9ef      	bls.n	80012b2 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80012d2:	7a3b      	ldrb	r3, [r7, #8]
 80012d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SD_disk_initialize+0x104>
 80012dc:	230c      	movs	r3, #12
 80012de:	e000      	b.n	80012e2 <SD_disk_initialize+0x106>
 80012e0:	2304      	movs	r3, #4
 80012e2:	73bb      	strb	r3, [r7, #14]
 80012e4:	e03e      	b.n	8001364 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80012e6:	2100      	movs	r1, #0
 80012e8:	2077      	movs	r0, #119	@ 0x77
 80012ea:	f7ff ff22 	bl	8001132 <SD_SendCmd>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d808      	bhi.n	8001306 <SD_disk_initialize+0x12a>
 80012f4:	2100      	movs	r1, #0
 80012f6:	2069      	movs	r0, #105	@ 0x69
 80012f8:	f7ff ff1b 	bl	8001132 <SD_SendCmd>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d801      	bhi.n	8001306 <SD_disk_initialize+0x12a>
 8001302:	2302      	movs	r3, #2
 8001304:	e000      	b.n	8001308 <SD_disk_initialize+0x12c>
 8001306:	2301      	movs	r3, #1
 8001308:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800130a:	7bbb      	ldrb	r3, [r7, #14]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d10e      	bne.n	800132e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001310:	2100      	movs	r1, #0
 8001312:	2077      	movs	r0, #119	@ 0x77
 8001314:	f7ff ff0d 	bl	8001132 <SD_SendCmd>
 8001318:	4603      	mov	r3, r0
 800131a:	2b01      	cmp	r3, #1
 800131c:	d80e      	bhi.n	800133c <SD_disk_initialize+0x160>
 800131e:	2100      	movs	r1, #0
 8001320:	2069      	movs	r0, #105	@ 0x69
 8001322:	f7ff ff06 	bl	8001132 <SD_SendCmd>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d107      	bne.n	800133c <SD_disk_initialize+0x160>
 800132c:	e00c      	b.n	8001348 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800132e:	2100      	movs	r1, #0
 8001330:	2041      	movs	r0, #65	@ 0x41
 8001332:	f7ff fefe 	bl	8001132 <SD_SendCmd>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d004      	beq.n	8001346 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800133c:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <SD_disk_initialize+0x1c4>)
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1e2      	bne.n	800130a <SD_disk_initialize+0x12e>
 8001344:	e000      	b.n	8001348 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001346:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <SD_disk_initialize+0x1c4>)
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d007      	beq.n	8001360 <SD_disk_initialize+0x184>
 8001350:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001354:	2050      	movs	r0, #80	@ 0x50
 8001356:	f7ff feec 	bl	8001132 <SD_SendCmd>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SD_disk_initialize+0x188>
 8001360:	2300      	movs	r3, #0
 8001362:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001364:	4a0f      	ldr	r2, [pc, #60]	@ (80013a4 <SD_disk_initialize+0x1c8>)
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800136a:	f7ff fd91 	bl	8000e90 <DESELECT>
	SPI_RxByte();
 800136e:	f7ff fdd3 	bl	8000f18 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001372:	7bbb      	ldrb	r3, [r7, #14]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d008      	beq.n	800138a <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001378:	4b08      	ldr	r3, [pc, #32]	@ (800139c <SD_disk_initialize+0x1c0>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f023 0301 	bic.w	r3, r3, #1
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <SD_disk_initialize+0x1c0>)
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	e001      	b.n	800138e <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800138a:	f7ff fe4b 	bl	8001024 <SD_PowerOff>
	}

	return Stat;
 800138e:	4b03      	ldr	r3, [pc, #12]	@ (800139c <SD_disk_initialize+0x1c0>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b2db      	uxtb	r3, r3
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bd90      	pop	{r4, r7, pc}
 800139c:	20000000 	.word	0x20000000
 80013a0:	20000208 	.word	0x20000208
 80013a4:	2000020c 	.word	0x2000020c

080013a8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SD_disk_status+0x14>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e002      	b.n	80013c2 <SD_disk_status+0x1a>
	return Stat;
 80013bc:	4b03      	ldr	r3, [pc, #12]	@ (80013cc <SD_disk_status+0x24>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b2db      	uxtb	r3, r3
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	20000000 	.word	0x20000000

080013d0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	4603      	mov	r3, r0
 80013de:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d102      	bne.n	80013ec <SD_disk_read+0x1c>
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <SD_disk_read+0x20>
 80013ec:	2304      	movs	r3, #4
 80013ee:	e051      	b.n	8001494 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80013f0:	4b2a      	ldr	r3, [pc, #168]	@ (800149c <SD_disk_read+0xcc>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SD_disk_read+0x32>
 80013fe:	2303      	movs	r3, #3
 8001400:	e048      	b.n	8001494 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001402:	4b27      	ldr	r3, [pc, #156]	@ (80014a0 <SD_disk_read+0xd0>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	2b00      	cmp	r3, #0
 800140c:	d102      	bne.n	8001414 <SD_disk_read+0x44>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	025b      	lsls	r3, r3, #9
 8001412:	607b      	str	r3, [r7, #4]

	SELECT();
 8001414:	f7ff fd2c 	bl	8000e70 <SELECT>

	if (count == 1)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d111      	bne.n	8001442 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	2051      	movs	r0, #81	@ 0x51
 8001422:	f7ff fe86 	bl	8001132 <SD_SendCmd>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d129      	bne.n	8001480 <SD_disk_read+0xb0>
 800142c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001430:	68b8      	ldr	r0, [r7, #8]
 8001432:	f7ff fe0d 	bl	8001050 <SD_RxDataBlock>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d021      	beq.n	8001480 <SD_disk_read+0xb0>
 800143c:	2300      	movs	r3, #0
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	e01e      	b.n	8001480 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	2052      	movs	r0, #82	@ 0x52
 8001446:	f7ff fe74 	bl	8001132 <SD_SendCmd>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d117      	bne.n	8001480 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001450:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001454:	68b8      	ldr	r0, [r7, #8]
 8001456:	f7ff fdfb 	bl	8001050 <SD_RxDataBlock>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00a      	beq.n	8001476 <SD_disk_read+0xa6>
				buff += 512;
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001466:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	3b01      	subs	r3, #1
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1ed      	bne.n	8001450 <SD_disk_read+0x80>
 8001474:	e000      	b.n	8001478 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001476:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001478:	2100      	movs	r1, #0
 800147a:	204c      	movs	r0, #76	@ 0x4c
 800147c:	f7ff fe59 	bl	8001132 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001480:	f7ff fd06 	bl	8000e90 <DESELECT>
	SPI_RxByte();
 8001484:	f7ff fd48 	bl	8000f18 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	bf14      	ite	ne
 800148e:	2301      	movne	r3, #1
 8001490:	2300      	moveq	r3, #0
 8001492:	b2db      	uxtb	r3, r3
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000000 	.word	0x20000000
 80014a0:	2000020c 	.word	0x2000020c

080014a4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	4603      	mov	r3, r0
 80014b2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <SD_disk_write+0x1c>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <SD_disk_write+0x20>
 80014c0:	2304      	movs	r3, #4
 80014c2:	e06b      	b.n	800159c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014c4:	4b37      	ldr	r3, [pc, #220]	@ (80015a4 <SD_disk_write+0x100>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SD_disk_write+0x32>
 80014d2:	2303      	movs	r3, #3
 80014d4:	e062      	b.n	800159c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80014d6:	4b33      	ldr	r3, [pc, #204]	@ (80015a4 <SD_disk_write+0x100>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SD_disk_write+0x44>
 80014e4:	2302      	movs	r3, #2
 80014e6:	e059      	b.n	800159c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80014e8:	4b2f      	ldr	r3, [pc, #188]	@ (80015a8 <SD_disk_write+0x104>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <SD_disk_write+0x56>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	025b      	lsls	r3, r3, #9
 80014f8:	607b      	str	r3, [r7, #4]

	SELECT();
 80014fa:	f7ff fcb9 	bl	8000e70 <SELECT>

	if (count == 1)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d110      	bne.n	8001526 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	2058      	movs	r0, #88	@ 0x58
 8001508:	f7ff fe13 	bl	8001132 <SD_SendCmd>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d13a      	bne.n	8001588 <SD_disk_write+0xe4>
 8001512:	21fe      	movs	r1, #254	@ 0xfe
 8001514:	68b8      	ldr	r0, [r7, #8]
 8001516:	f7ff fdc9 	bl	80010ac <SD_TxDataBlock>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d033      	beq.n	8001588 <SD_disk_write+0xe4>
			count = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	e030      	b.n	8001588 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001526:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <SD_disk_write+0x104>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d007      	beq.n	8001542 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001532:	2100      	movs	r1, #0
 8001534:	2077      	movs	r0, #119	@ 0x77
 8001536:	f7ff fdfc 	bl	8001132 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800153a:	6839      	ldr	r1, [r7, #0]
 800153c:	2057      	movs	r0, #87	@ 0x57
 800153e:	f7ff fdf8 	bl	8001132 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	2059      	movs	r0, #89	@ 0x59
 8001546:	f7ff fdf4 	bl	8001132 <SD_SendCmd>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d11b      	bne.n	8001588 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001550:	21fc      	movs	r1, #252	@ 0xfc
 8001552:	68b8      	ldr	r0, [r7, #8]
 8001554:	f7ff fdaa 	bl	80010ac <SD_TxDataBlock>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00a      	beq.n	8001574 <SD_disk_write+0xd0>
				buff += 512;
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001564:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	3b01      	subs	r3, #1
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1ee      	bne.n	8001550 <SD_disk_write+0xac>
 8001572:	e000      	b.n	8001576 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001574:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001576:	21fd      	movs	r1, #253	@ 0xfd
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff fd97 	bl	80010ac <SD_TxDataBlock>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <SD_disk_write+0xe4>
			{
				count = 1;
 8001584:	2301      	movs	r3, #1
 8001586:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001588:	f7ff fc82 	bl	8000e90 <DESELECT>
	SPI_RxByte();
 800158c:	f7ff fcc4 	bl	8000f18 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	bf14      	ite	ne
 8001596:	2301      	movne	r3, #1
 8001598:	2300      	moveq	r3, #0
 800159a:	b2db      	uxtb	r3, r3
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000000 	.word	0x20000000
 80015a8:	2000020c 	.word	0x2000020c

080015ac <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b08b      	sub	sp, #44	@ 0x2c
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	603a      	str	r2, [r7, #0]
 80015b6:	71fb      	strb	r3, [r7, #7]
 80015b8:	460b      	mov	r3, r1
 80015ba:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SD_disk_ioctl+0x1e>
 80015c6:	2304      	movs	r3, #4
 80015c8:	e113      	b.n	80017f2 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80015d0:	79bb      	ldrb	r3, [r7, #6]
 80015d2:	2b05      	cmp	r3, #5
 80015d4:	d124      	bne.n	8001620 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d012      	beq.n	8001604 <SD_disk_ioctl+0x58>
 80015de:	2b02      	cmp	r3, #2
 80015e0:	dc1a      	bgt.n	8001618 <SD_disk_ioctl+0x6c>
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <SD_disk_ioctl+0x40>
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d006      	beq.n	80015f8 <SD_disk_ioctl+0x4c>
 80015ea:	e015      	b.n	8001618 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80015ec:	f7ff fd1a 	bl	8001024 <SD_PowerOff>
			res = RES_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80015f6:	e0fa      	b.n	80017ee <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80015f8:	f7ff fcd2 	bl	8000fa0 <SD_PowerOn>
			res = RES_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001602:	e0f4      	b.n	80017ee <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	1c5c      	adds	r4, r3, #1
 8001608:	f7ff fd18 	bl	800103c <SD_CheckPower>
 800160c:	4603      	mov	r3, r0
 800160e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001610:	2300      	movs	r3, #0
 8001612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001616:	e0ea      	b.n	80017ee <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001618:	2304      	movs	r3, #4
 800161a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800161e:	e0e6      	b.n	80017ee <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001620:	4b76      	ldr	r3, [pc, #472]	@ (80017fc <SD_disk_ioctl+0x250>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <SD_disk_ioctl+0x86>
 800162e:	2303      	movs	r3, #3
 8001630:	e0df      	b.n	80017f2 <SD_disk_ioctl+0x246>

		SELECT();
 8001632:	f7ff fc1d 	bl	8000e70 <SELECT>

		switch (ctrl)
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	2b0d      	cmp	r3, #13
 800163a:	f200 80c9 	bhi.w	80017d0 <SD_disk_ioctl+0x224>
 800163e:	a201      	add	r2, pc, #4	@ (adr r2, 8001644 <SD_disk_ioctl+0x98>)
 8001640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001644:	0800173b 	.word	0x0800173b
 8001648:	0800167d 	.word	0x0800167d
 800164c:	0800172b 	.word	0x0800172b
 8001650:	080017d1 	.word	0x080017d1
 8001654:	080017d1 	.word	0x080017d1
 8001658:	080017d1 	.word	0x080017d1
 800165c:	080017d1 	.word	0x080017d1
 8001660:	080017d1 	.word	0x080017d1
 8001664:	080017d1 	.word	0x080017d1
 8001668:	080017d1 	.word	0x080017d1
 800166c:	080017d1 	.word	0x080017d1
 8001670:	0800174d 	.word	0x0800174d
 8001674:	08001771 	.word	0x08001771
 8001678:	08001795 	.word	0x08001795
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800167c:	2100      	movs	r1, #0
 800167e:	2049      	movs	r0, #73	@ 0x49
 8001680:	f7ff fd57 	bl	8001132 <SD_SendCmd>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	f040 80a6 	bne.w	80017d8 <SD_disk_ioctl+0x22c>
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2110      	movs	r1, #16
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fcdc 	bl	8001050 <SD_RxDataBlock>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 809c 	beq.w	80017d8 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80016a0:	7b3b      	ldrb	r3, [r7, #12]
 80016a2:	099b      	lsrs	r3, r3, #6
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d10d      	bne.n	80016c6 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80016aa:	7d7b      	ldrb	r3, [r7, #21]
 80016ac:	461a      	mov	r2, r3
 80016ae:	7d3b      	ldrb	r3, [r7, #20]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	4413      	add	r3, r2
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	3301      	adds	r3, #1
 80016ba:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80016bc:	8bfb      	ldrh	r3, [r7, #30]
 80016be:	029a      	lsls	r2, r3, #10
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	e02d      	b.n	8001722 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80016c6:	7c7b      	ldrb	r3, [r7, #17]
 80016c8:	f003 030f 	and.w	r3, r3, #15
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	7dbb      	ldrb	r3, [r7, #22]
 80016d0:	09db      	lsrs	r3, r3, #7
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	7d7b      	ldrb	r3, [r7, #21]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	f003 0306 	and.w	r3, r3, #6
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	3302      	adds	r3, #2
 80016ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80016ee:	7d3b      	ldrb	r3, [r7, #20]
 80016f0:	099b      	lsrs	r3, r3, #6
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	461a      	mov	r2, r3
 80016f6:	7cfb      	ldrb	r3, [r7, #19]
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	b29a      	uxth	r2, r3
 8001700:	7cbb      	ldrb	r3, [r7, #18]
 8001702:	029b      	lsls	r3, r3, #10
 8001704:	b29b      	uxth	r3, r3
 8001706:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800170a:	b29b      	uxth	r3, r3
 800170c:	4413      	add	r3, r2
 800170e:	b29b      	uxth	r3, r3
 8001710:	3301      	adds	r3, #1
 8001712:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001714:	8bfa      	ldrh	r2, [r7, #30]
 8001716:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800171a:	3b09      	subs	r3, #9
 800171c:	409a      	lsls	r2, r3
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001728:	e056      	b.n	80017d8 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001730:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001738:	e055      	b.n	80017e6 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800173a:	f7ff fc17 	bl	8000f6c <SD_ReadyWait>
 800173e:	4603      	mov	r3, r0
 8001740:	2bff      	cmp	r3, #255	@ 0xff
 8001742:	d14b      	bne.n	80017dc <SD_disk_ioctl+0x230>
 8001744:	2300      	movs	r3, #0
 8001746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800174a:	e047      	b.n	80017dc <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800174c:	2100      	movs	r1, #0
 800174e:	2049      	movs	r0, #73	@ 0x49
 8001750:	f7ff fcef 	bl	8001132 <SD_SendCmd>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d142      	bne.n	80017e0 <SD_disk_ioctl+0x234>
 800175a:	2110      	movs	r1, #16
 800175c:	6a38      	ldr	r0, [r7, #32]
 800175e:	f7ff fc77 	bl	8001050 <SD_RxDataBlock>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d03b      	beq.n	80017e0 <SD_disk_ioctl+0x234>
 8001768:	2300      	movs	r3, #0
 800176a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800176e:	e037      	b.n	80017e0 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001770:	2100      	movs	r1, #0
 8001772:	204a      	movs	r0, #74	@ 0x4a
 8001774:	f7ff fcdd 	bl	8001132 <SD_SendCmd>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d132      	bne.n	80017e4 <SD_disk_ioctl+0x238>
 800177e:	2110      	movs	r1, #16
 8001780:	6a38      	ldr	r0, [r7, #32]
 8001782:	f7ff fc65 	bl	8001050 <SD_RxDataBlock>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d02b      	beq.n	80017e4 <SD_disk_ioctl+0x238>
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001792:	e027      	b.n	80017e4 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001794:	2100      	movs	r1, #0
 8001796:	207a      	movs	r0, #122	@ 0x7a
 8001798:	f7ff fccb 	bl	8001132 <SD_SendCmd>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d116      	bne.n	80017d0 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80017a8:	e00b      	b.n	80017c2 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 80017aa:	6a3c      	ldr	r4, [r7, #32]
 80017ac:	1c63      	adds	r3, r4, #1
 80017ae:	623b      	str	r3, [r7, #32]
 80017b0:	f7ff fbb2 	bl	8000f18 <SPI_RxByte>
 80017b4:	4603      	mov	r3, r0
 80017b6:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80017b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017bc:	3301      	adds	r3, #1
 80017be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80017c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d9ef      	bls.n	80017aa <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 80017d0:	2304      	movs	r3, #4
 80017d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80017d6:	e006      	b.n	80017e6 <SD_disk_ioctl+0x23a>
			break;
 80017d8:	bf00      	nop
 80017da:	e004      	b.n	80017e6 <SD_disk_ioctl+0x23a>
			break;
 80017dc:	bf00      	nop
 80017de:	e002      	b.n	80017e6 <SD_disk_ioctl+0x23a>
			break;
 80017e0:	bf00      	nop
 80017e2:	e000      	b.n	80017e6 <SD_disk_ioctl+0x23a>
			break;
 80017e4:	bf00      	nop
		}

		DESELECT();
 80017e6:	f7ff fb53 	bl	8000e90 <DESELECT>
		SPI_RxByte();
 80017ea:	f7ff fb95 	bl	8000f18 <SPI_RxByte>
	}

	return res;
 80017ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	372c      	adds	r7, #44	@ 0x2c
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000000 	.word	0x20000000

08001800 <get_time>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void get_time(){
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	rtc_get_time(&hour, &min, &sec);
 8001804:	4a06      	ldr	r2, [pc, #24]	@ (8001820 <get_time+0x20>)
 8001806:	4907      	ldr	r1, [pc, #28]	@ (8001824 <get_time+0x24>)
 8001808:	4807      	ldr	r0, [pc, #28]	@ (8001828 <get_time+0x28>)
 800180a:	f7ff fab3 	bl	8000d74 <rtc_get_time>
	rtc_get_date(&week_day, &day, &month, &year);
 800180e:	4b07      	ldr	r3, [pc, #28]	@ (800182c <get_time+0x2c>)
 8001810:	4a07      	ldr	r2, [pc, #28]	@ (8001830 <get_time+0x30>)
 8001812:	4908      	ldr	r1, [pc, #32]	@ (8001834 <get_time+0x34>)
 8001814:	4808      	ldr	r0, [pc, #32]	@ (8001838 <get_time+0x38>)
 8001816:	f7ff fae9 	bl	8000dec <rtc_get_date>
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000253c 	.word	0x2000253c
 8001824:	2000253d 	.word	0x2000253d
 8001828:	2000253e 	.word	0x2000253e
 800182c:	20002542 	.word	0x20002542
 8001830:	20002541 	.word	0x20002541
 8001834:	20002540 	.word	0x20002540
 8001838:	2000253f 	.word	0x2000253f

0800183c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	d++;
 8001844:	4b0d      	ldr	r3, [pc, #52]	@ (800187c <HAL_ADC_ConvCpltCallback+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	3301      	adds	r3, #1
 800184a:	4a0c      	ldr	r2, [pc, #48]	@ (800187c <HAL_ADC_ConvCpltCallback+0x40>)
 800184c:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 10; i++) {
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	e00a      	b.n	800186a <HAL_ADC_ConvCpltCallback+0x2e>
		adc[i] = buf[i];
 8001854:	4a0a      	ldr	r2, [pc, #40]	@ (8001880 <HAL_ADC_ConvCpltCallback+0x44>)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800185c:	4909      	ldr	r1, [pc, #36]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x48>)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 10; i++) {
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3301      	adds	r3, #1
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b09      	cmp	r3, #9
 800186e:	ddf1      	ble.n	8001854 <HAL_ADC_ConvCpltCallback+0x18>
	}
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	20002544 	.word	0x20002544
 8001880:	2000249c 	.word	0x2000249c
 8001884:	200024c4 	.word	0x200024c4

08001888 <save_data_to_csv>:

void save_data_to_csv()
{
 8001888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800188c:	b0d3      	sub	sp, #332	@ 0x14c
 800188e:	af2c      	add	r7, sp, #176	@ 0xb0
	get_time();
 8001890:	f7ff ffb6 	bl	8001800 <get_time>

    // Mount the filesystem
    f_mount(&fs, "", 0);
 8001894:	2200      	movs	r2, #0
 8001896:	4992      	ldr	r1, [pc, #584]	@ (8001ae0 <save_data_to_csv+0x258>)
 8001898:	4892      	ldr	r0, [pc, #584]	@ (8001ae4 <save_data_to_csv+0x25c>)
 800189a:	f007 fb7f 	bl	8008f9c <f_mount>

    // Open the CSV file
    if (f_open(&fil, "data.csv", FA_OPEN_ALWAYS | FA_WRITE | FA_READ) == FR_OK)
 800189e:	2213      	movs	r2, #19
 80018a0:	4991      	ldr	r1, [pc, #580]	@ (8001ae8 <save_data_to_csv+0x260>)
 80018a2:	4892      	ldr	r0, [pc, #584]	@ (8001aec <save_data_to_csv+0x264>)
 80018a4:	f007 fbc4 	bl	8009030 <f_open>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f040 810e 	bne.w	8001acc <save_data_to_csv+0x244>
    {
        // Move the file pointer to the end
        f_lseek(&fil, fil.fsize);
 80018b0:	4b8e      	ldr	r3, [pc, #568]	@ (8001aec <save_data_to_csv+0x264>)
 80018b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4619      	mov	r1, r3
 80018ba:	488c      	ldr	r0, [pc, #560]	@ (8001aec <save_data_to_csv+0x264>)
 80018bc:	f008 f9fe 	bl	8009cbc <f_lseek>

        // Format the battery values into a CSV format with 2 decimal places
        sprintf(buffer, "%02d-%02d-%02d %02d:%02d:%02d,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f\n", year + 2000, month, day, hour, min, sec, bat1, bat2, bat3, bat4, bat5, bat6, bat7, bat8, bat9, bat10, bat11, bat12, bat13, bat14, bat15, bat16, bat17, bat18, bat19, bat20);
 80018c0:	4b8b      	ldr	r3, [pc, #556]	@ (8001af0 <save_data_to_csv+0x268>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	f503 66fa 	add.w	r6, r3, #2000	@ 0x7d0
 80018c8:	4b8a      	ldr	r3, [pc, #552]	@ (8001af4 <save_data_to_csv+0x26c>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80018d0:	4b89      	ldr	r3, [pc, #548]	@ (8001af8 <save_data_to_csv+0x270>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80018d8:	4b88      	ldr	r3, [pc, #544]	@ (8001afc <save_data_to_csv+0x274>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80018e0:	4b87      	ldr	r3, [pc, #540]	@ (8001b00 <save_data_to_csv+0x278>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018e8:	4b86      	ldr	r3, [pc, #536]	@ (8001b04 <save_data_to_csv+0x27c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80018f0:	4b85      	ldr	r3, [pc, #532]	@ (8001b08 <save_data_to_csv+0x280>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fd97 	bl	8000428 <__aeabi_f2d>
 80018fa:	e9c7 011e 	strd	r0, r1, [r7, #120]	@ 0x78
 80018fe:	4b83      	ldr	r3, [pc, #524]	@ (8001b0c <save_data_to_csv+0x284>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fd90 	bl	8000428 <__aeabi_f2d>
 8001908:	e9c7 011c 	strd	r0, r1, [r7, #112]	@ 0x70
 800190c:	4b80      	ldr	r3, [pc, #512]	@ (8001b10 <save_data_to_csv+0x288>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fd89 	bl	8000428 <__aeabi_f2d>
 8001916:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68
 800191a:	4b7e      	ldr	r3, [pc, #504]	@ (8001b14 <save_data_to_csv+0x28c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fd82 	bl	8000428 <__aeabi_f2d>
 8001924:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
 8001928:	4b7b      	ldr	r3, [pc, #492]	@ (8001b18 <save_data_to_csv+0x290>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fd7b 	bl	8000428 <__aeabi_f2d>
 8001932:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
 8001936:	4b79      	ldr	r3, [pc, #484]	@ (8001b1c <save_data_to_csv+0x294>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fd74 	bl	8000428 <__aeabi_f2d>
 8001940:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 8001944:	4b76      	ldr	r3, [pc, #472]	@ (8001b20 <save_data_to_csv+0x298>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fd6d 	bl	8000428 <__aeabi_f2d>
 800194e:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 8001952:	4b74      	ldr	r3, [pc, #464]	@ (8001b24 <save_data_to_csv+0x29c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fd66 	bl	8000428 <__aeabi_f2d>
 800195c:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8001960:	4b71      	ldr	r3, [pc, #452]	@ (8001b28 <save_data_to_csv+0x2a0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fd5f 	bl	8000428 <__aeabi_f2d>
 800196a:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 800196e:	4b6f      	ldr	r3, [pc, #444]	@ (8001b2c <save_data_to_csv+0x2a4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fd58 	bl	8000428 <__aeabi_f2d>
 8001978:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 800197c:	4b6c      	ldr	r3, [pc, #432]	@ (8001b30 <save_data_to_csv+0x2a8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fd51 	bl	8000428 <__aeabi_f2d>
 8001986:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 800198a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b34 <save_data_to_csv+0x2ac>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fd4a 	bl	8000428 <__aeabi_f2d>
 8001994:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001998:	4b67      	ldr	r3, [pc, #412]	@ (8001b38 <save_data_to_csv+0x2b0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fd43 	bl	8000428 <__aeabi_f2d>
 80019a2:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80019a6:	4b65      	ldr	r3, [pc, #404]	@ (8001b3c <save_data_to_csv+0x2b4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fd3c 	bl	8000428 <__aeabi_f2d>
 80019b0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80019b4:	4b62      	ldr	r3, [pc, #392]	@ (8001b40 <save_data_to_csv+0x2b8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fd35 	bl	8000428 <__aeabi_f2d>
 80019be:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80019c2:	4b60      	ldr	r3, [pc, #384]	@ (8001b44 <save_data_to_csv+0x2bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fd2e 	bl	8000428 <__aeabi_f2d>
 80019cc:	e9c7 0100 	strd	r0, r1, [r7]
 80019d0:	4b5d      	ldr	r3, [pc, #372]	@ (8001b48 <save_data_to_csv+0x2c0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fd27 	bl	8000428 <__aeabi_f2d>
 80019da:	4682      	mov	sl, r0
 80019dc:	468b      	mov	fp, r1
 80019de:	4b5b      	ldr	r3, [pc, #364]	@ (8001b4c <save_data_to_csv+0x2c4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fd20 	bl	8000428 <__aeabi_f2d>
 80019e8:	4680      	mov	r8, r0
 80019ea:	4689      	mov	r9, r1
 80019ec:	4b58      	ldr	r3, [pc, #352]	@ (8001b50 <save_data_to_csv+0x2c8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fd19 	bl	8000428 <__aeabi_f2d>
 80019f6:	4604      	mov	r4, r0
 80019f8:	460d      	mov	r5, r1
 80019fa:	4b56      	ldr	r3, [pc, #344]	@ (8001b54 <save_data_to_csv+0x2cc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fd12 	bl	8000428 <__aeabi_f2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	e9cd 232a 	strd	r2, r3, [sp, #168]	@ 0xa8
 8001a0c:	e9cd 4528 	strd	r4, r5, [sp, #160]	@ 0xa0
 8001a10:	e9cd 8926 	strd	r8, r9, [sp, #152]	@ 0x98
 8001a14:	e9cd ab24 	strd	sl, fp, [sp, #144]	@ 0x90
 8001a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a1c:	e9cd 2322 	strd	r2, r3, [sp, #136]	@ 0x88
 8001a20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a24:	e9cd 2320 	strd	r2, r3, [sp, #128]	@ 0x80
 8001a28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a2c:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8001a30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a34:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8001a38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a3c:	e9cd 231a 	strd	r2, r3, [sp, #104]	@ 0x68
 8001a40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a44:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
 8001a48:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a4c:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8001a50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a54:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8001a58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001a5c:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8001a60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001a64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8001a68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001a6c:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8001a70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a74:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8001a78:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001a7c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001a80:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001a84:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001a88:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001a8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001a90:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001a94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001a98:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001a9c:	9203      	str	r2, [sp, #12]
 8001a9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001aa2:	9202      	str	r2, [sp, #8]
 8001aa4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001aa8:	9201      	str	r2, [sp, #4]
 8001aaa:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001aae:	9200      	str	r2, [sp, #0]
 8001ab0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ab4:	4632      	mov	r2, r6
 8001ab6:	4928      	ldr	r1, [pc, #160]	@ (8001b58 <save_data_to_csv+0x2d0>)
 8001ab8:	4828      	ldr	r0, [pc, #160]	@ (8001b5c <save_data_to_csv+0x2d4>)
 8001aba:	f009 fa47 	bl	800af4c <siprintf>


        // Write the formatted string to the file
        f_puts(buffer, &fil);
 8001abe:	490b      	ldr	r1, [pc, #44]	@ (8001aec <save_data_to_csv+0x264>)
 8001ac0:	4826      	ldr	r0, [pc, #152]	@ (8001b5c <save_data_to_csv+0x2d4>)
 8001ac2:	f008 fc29 	bl	800a318 <f_puts>

        // Close the file
        f_close(&fil);
 8001ac6:	4809      	ldr	r0, [pc, #36]	@ (8001aec <save_data_to_csv+0x264>)
 8001ac8:	f008 f8cd 	bl	8009c66 <f_close>
    else{
//    	Error_Handler();
    }

    // Unmount the filesystem
    f_mount(NULL, "", 1);
 8001acc:	2201      	movs	r2, #1
 8001ace:	4904      	ldr	r1, [pc, #16]	@ (8001ae0 <save_data_to_csv+0x258>)
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f007 fa63 	bl	8008f9c <f_mount>
}
 8001ad6:	bf00      	nop
 8001ad8:	379c      	adds	r7, #156	@ 0x9c
 8001ada:	46bd      	mov	sp, r7
 8001adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ae0:	0800d1e8 	.word	0x0800d1e8
 8001ae4:	20000210 	.word	0x20000210
 8001ae8:	0800d1ec 	.word	0x0800d1ec
 8001aec:	20001240 	.word	0x20001240
 8001af0:	20002542 	.word	0x20002542
 8001af4:	20002541 	.word	0x20002541
 8001af8:	20002540 	.word	0x20002540
 8001afc:	2000253e 	.word	0x2000253e
 8001b00:	2000253d 	.word	0x2000253d
 8001b04:	2000253c 	.word	0x2000253c
 8001b08:	200024ec 	.word	0x200024ec
 8001b0c:	200024f0 	.word	0x200024f0
 8001b10:	200024f4 	.word	0x200024f4
 8001b14:	200024f8 	.word	0x200024f8
 8001b18:	200024fc 	.word	0x200024fc
 8001b1c:	20002500 	.word	0x20002500
 8001b20:	20002504 	.word	0x20002504
 8001b24:	20002508 	.word	0x20002508
 8001b28:	2000250c 	.word	0x2000250c
 8001b2c:	20002510 	.word	0x20002510
 8001b30:	20002514 	.word	0x20002514
 8001b34:	20002518 	.word	0x20002518
 8001b38:	2000251c 	.word	0x2000251c
 8001b3c:	20002520 	.word	0x20002520
 8001b40:	20002524 	.word	0x20002524
 8001b44:	20002528 	.word	0x20002528
 8001b48:	2000252c 	.word	0x2000252c
 8001b4c:	20002530 	.word	0x20002530
 8001b50:	20002534 	.word	0x20002534
 8001b54:	20002538 	.word	0x20002538
 8001b58:	0800d1f8 	.word	0x0800d1f8
 8001b5c:	2000226c 	.word	0x2000226c

08001b60 <HAL_TIM_PeriodElapsedCallback>:
//	if(RxData[5] == 2){
////		dataReceived == 2;
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	if(initdone == 1){
 8001b68:	4b30      	ldr	r3, [pc, #192]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d159      	bne.n	8001c24 <HAL_TIM_PeriodElapsedCallback+0xc4>
		if(htim->Instance == TIM3){
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a2e      	ldr	r2, [pc, #184]	@ (8001c30 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d154      	bne.n	8001c24 <HAL_TIM_PeriodElapsedCallback+0xc4>
				HAL_ADC_Start_DMA(&hadc1, buf, 10);
 8001b7a:	220a      	movs	r2, #10
 8001b7c:	492d      	ldr	r1, [pc, #180]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001b7e:	482e      	ldr	r0, [pc, #184]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001b80:	f000 ff98 	bl	8002ab4 <HAL_ADC_Start_DMA>

				bat1 = adc[0];		//A5
 8001b84:	4b2d      	ldr	r3, [pc, #180]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff f833 	bl	8000bf4 <__aeabi_ui2f>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4a2b      	ldr	r2, [pc, #172]	@ (8001c40 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001b92:	6013      	str	r3, [r2, #0]
				bat2 = adc[1];		//A6
 8001b94:	4b29      	ldr	r3, [pc, #164]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff f82b 	bl	8000bf4 <__aeabi_ui2f>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4a28      	ldr	r2, [pc, #160]	@ (8001c44 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001ba2:	6013      	str	r3, [r2, #0]
				bat3 = adc[2];		//A7
 8001ba4:	4b25      	ldr	r3, [pc, #148]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f823 	bl	8000bf4 <__aeabi_ui2f>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a25      	ldr	r2, [pc, #148]	@ (8001c48 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001bb2:	6013      	str	r3, [r2, #0]
				bat4 = adc[3];		//B0
 8001bb4:	4b21      	ldr	r3, [pc, #132]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff f81b 	bl	8000bf4 <__aeabi_ui2f>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4a22      	ldr	r2, [pc, #136]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001bc2:	6013      	str	r3, [r2, #0]
				bat5 = adc[4];		//B1
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f813 	bl	8000bf4 <__aeabi_ui2f>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8001c50 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001bd2:	6013      	str	r3, [r2, #0]
				bat6 = adc[5];		//A0
 8001bd4:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff f80b 	bl	8000bf4 <__aeabi_ui2f>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001be2:	6013      	str	r3, [r2, #0]
				bat7 = adc[6];		//A1
 8001be4:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff f803 	bl	8000bf4 <__aeabi_ui2f>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4a19      	ldr	r2, [pc, #100]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001bf2:	6013      	str	r3, [r2, #0]
				bat8 = adc[7];		//A2
 8001bf4:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fffb 	bl	8000bf4 <__aeabi_ui2f>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4a16      	ldr	r2, [pc, #88]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001c02:	6013      	str	r3, [r2, #0]
				bat9 = adc[8];		//A3
 8001c04:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fff3 	bl	8000bf4 <__aeabi_ui2f>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4a13      	ldr	r2, [pc, #76]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001c12:	6013      	str	r3, [r2, #0]
				bat10 = adc[9];		//A4
 8001c14:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe ffeb 	bl	8000bf4 <__aeabi_ui2f>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4a10      	ldr	r2, [pc, #64]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001c22:	6013      	str	r3, [r2, #0]
//		sprintf(buffer, "%02d : %02d", hour, min);
//		SSD1306_Puts(buffer, &Font_11x18, 1);
//
//		SSD1306_UpdateScreen();
//	}
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20002558 	.word	0x20002558
 8001c30:	40000400 	.word	0x40000400
 8001c34:	2000249c 	.word	0x2000249c
 8001c38:	200022ec 	.word	0x200022ec
 8001c3c:	200024c4 	.word	0x200024c4
 8001c40:	200024ec 	.word	0x200024ec
 8001c44:	200024f0 	.word	0x200024f0
 8001c48:	200024f4 	.word	0x200024f4
 8001c4c:	200024f8 	.word	0x200024f8
 8001c50:	200024fc 	.word	0x200024fc
 8001c54:	20002500 	.word	0x20002500
 8001c58:	20002504 	.word	0x20002504
 8001c5c:	20002508 	.word	0x20002508
 8001c60:	2000250c 	.word	0x2000250c
 8001c64:	20002510 	.word	0x20002510

08001c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c6c:	f000 fdc4 	bl	80027f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c70:	f000 f846 	bl	8001d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c74:	f000 fa70 	bl	8002158 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c78:	f000 fa50 	bl	800211c <MX_DMA_Init>
  MX_TIM3_Init();
 8001c7c:	f000 fa00 	bl	8002080 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001c80:	f000 f88e 	bl	8001da0 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001c84:	f000 f978 	bl	8001f78 <MX_SPI2_Init>
  MX_FATFS_Init();
 8001c88:	f004 fcb4 	bl	80065f4 <MX_FATFS_Init>
  MX_TIM2_Init();
 8001c8c:	f000 f9aa 	bl	8001fe4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001c90:	f000 f944 	bl	8001f1c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001c94:	4812      	ldr	r0, [pc, #72]	@ (8001ce0 <main+0x78>)
 8001c96:	f004 f90b 	bl	8005eb0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001c9a:	4812      	ldr	r0, [pc, #72]	@ (8001ce4 <main+0x7c>)
 8001c9c:	f004 f908 	bl	8005eb0 <HAL_TIM_Base_Start_IT>
  e++;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <main+0x80>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	4a10      	ldr	r2, [pc, #64]	@ (8001ce8 <main+0x80>)
 8001ca8:	6013      	str	r3, [r2, #0]

  rtc_init(3, 1, 1);
 8001caa:	2201      	movs	r2, #1
 8001cac:	2101      	movs	r1, #1
 8001cae:	2003      	movs	r0, #3
 8001cb0:	f7ff f83c 	bl	8000d2c <rtc_init>
  f++;
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001cec <main+0x84>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	4a0c      	ldr	r2, [pc, #48]	@ (8001cec <main+0x84>)
 8001cbc:	6013      	str	r3, [r2, #0]
//  TxHeader.StdId = 0x446;
//  TxHeader.TransmitGlobalTime = DISABLE;
//  rtc_set_time(19, 25, 30);
//  rtc_set_date(01, 14, 10, 24);

  f_mount(&fs, "", 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	490b      	ldr	r1, [pc, #44]	@ (8001cf0 <main+0x88>)
 8001cc2:	480c      	ldr	r0, [pc, #48]	@ (8001cf4 <main+0x8c>)
 8001cc4:	f007 f96a 	bl	8008f9c <f_mount>
  g++;
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf8 <main+0x90>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf8 <main+0x90>)
 8001cd0:	6013      	str	r3, [r2, #0]
  initdone = 1;
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cfc <main+0x94>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  save_data_to_csv();
 8001cd8:	f7ff fdd6 	bl	8001888 <save_data_to_csv>
 8001cdc:	e7fc      	b.n	8001cd8 <main+0x70>
 8001cde:	bf00      	nop
 8001ce0:	20002454 	.word	0x20002454
 8001ce4:	2000240c 	.word	0x2000240c
 8001ce8:	20002548 	.word	0x20002548
 8001cec:	2000254c 	.word	0x2000254c
 8001cf0:	0800d1e8 	.word	0x0800d1e8
 8001cf4:	20000210 	.word	0x20000210
 8001cf8:	20002550 	.word	0x20002550
 8001cfc:	20002558 	.word	0x20002558

08001d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b094      	sub	sp, #80	@ 0x50
 8001d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d0a:	2228      	movs	r2, #40	@ 0x28
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f009 f97f 	bl	800b012 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d30:	2302      	movs	r3, #2
 8001d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d34:	2301      	movs	r3, #1
 8001d36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d38:	2310      	movs	r3, #16
 8001d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d40:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 ff87 	bl	8004c58 <HAL_RCC_OscConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001d50:	f000 fa64 	bl	800221c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d54:	230f      	movs	r3, #15
 8001d56:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d60:	2300      	movs	r3, #0
 8001d62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 f9f4 	bl	800515c <HAL_RCC_ClockConfig>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001d7a:	f000 fa4f 	bl	800221c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f003 fb61 	bl	8005450 <HAL_RCCEx_PeriphCLKConfig>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d94:	f000 fa42 	bl	800221c <Error_Handler>
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3750      	adds	r7, #80	@ 0x50
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001db0:	4b58      	ldr	r3, [pc, #352]	@ (8001f14 <MX_ADC1_Init+0x174>)
 8001db2:	4a59      	ldr	r2, [pc, #356]	@ (8001f18 <MX_ADC1_Init+0x178>)
 8001db4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001db6:	4b57      	ldr	r3, [pc, #348]	@ (8001f14 <MX_ADC1_Init+0x174>)
 8001db8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001dbe:	4b55      	ldr	r3, [pc, #340]	@ (8001f14 <MX_ADC1_Init+0x174>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dc4:	4b53      	ldr	r3, [pc, #332]	@ (8001f14 <MX_ADC1_Init+0x174>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dca:	4b52      	ldr	r3, [pc, #328]	@ (8001f14 <MX_ADC1_Init+0x174>)
 8001dcc:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001dd0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dd2:	4b50      	ldr	r3, [pc, #320]	@ (8001f14 <MX_ADC1_Init+0x174>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 10;
 8001dd8:	4b4e      	ldr	r3, [pc, #312]	@ (8001f14 <MX_ADC1_Init+0x174>)
 8001dda:	220a      	movs	r2, #10
 8001ddc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dde:	484d      	ldr	r0, [pc, #308]	@ (8001f14 <MX_ADC1_Init+0x174>)
 8001de0:	f000 fd90 	bl	8002904 <HAL_ADC_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001dea:	f000 fa17 	bl	800221c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001df2:	2301      	movs	r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4845      	ldr	r0, [pc, #276]	@ (8001f14 <MX_ADC1_Init+0x174>)
 8001e00:	f001 f810 	bl	8002e24 <HAL_ADC_ConfigChannel>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001e0a:	f000 fa07 	bl	800221c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e12:	2302      	movs	r3, #2
 8001e14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	4619      	mov	r1, r3
 8001e1a:	483e      	ldr	r0, [pc, #248]	@ (8001f14 <MX_ADC1_Init+0x174>)
 8001e1c:	f001 f802 	bl	8002e24 <HAL_ADC_ConfigChannel>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001e26:	f000 f9f9 	bl	800221c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	4619      	mov	r1, r3
 8001e36:	4837      	ldr	r0, [pc, #220]	@ (8001f14 <MX_ADC1_Init+0x174>)
 8001e38:	f000 fff4 	bl	8002e24 <HAL_ADC_ConfigChannel>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001e42:	f000 f9eb 	bl	800221c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001e46:	2303      	movs	r3, #3
 8001e48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	4619      	mov	r1, r3
 8001e52:	4830      	ldr	r0, [pc, #192]	@ (8001f14 <MX_ADC1_Init+0x174>)
 8001e54:	f000 ffe6 	bl	8002e24 <HAL_ADC_ConfigChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001e5e:	f000 f9dd 	bl	800221c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001e62:	2304      	movs	r3, #4
 8001e64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001e66:	2305      	movs	r3, #5
 8001e68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4829      	ldr	r0, [pc, #164]	@ (8001f14 <MX_ADC1_Init+0x174>)
 8001e70:	f000 ffd8 	bl	8002e24 <HAL_ADC_ConfigChannel>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001e7a:	f000 f9cf 	bl	800221c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001e7e:	2305      	movs	r3, #5
 8001e80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001e82:	2306      	movs	r3, #6
 8001e84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4822      	ldr	r0, [pc, #136]	@ (8001f14 <MX_ADC1_Init+0x174>)
 8001e8c:	f000 ffca 	bl	8002e24 <HAL_ADC_ConfigChannel>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001e96:	f000 f9c1 	bl	800221c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001e9a:	2306      	movs	r3, #6
 8001e9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001e9e:	2307      	movs	r3, #7
 8001ea0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	481b      	ldr	r0, [pc, #108]	@ (8001f14 <MX_ADC1_Init+0x174>)
 8001ea8:	f000 ffbc 	bl	8002e24 <HAL_ADC_ConfigChannel>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001eb2:	f000 f9b3 	bl	800221c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001eba:	2308      	movs	r3, #8
 8001ebc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4814      	ldr	r0, [pc, #80]	@ (8001f14 <MX_ADC1_Init+0x174>)
 8001ec4:	f000 ffae 	bl	8002e24 <HAL_ADC_ConfigChannel>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001ece:	f000 f9a5 	bl	800221c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001ed2:	2308      	movs	r3, #8
 8001ed4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001ed6:	2309      	movs	r3, #9
 8001ed8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	480d      	ldr	r0, [pc, #52]	@ (8001f14 <MX_ADC1_Init+0x174>)
 8001ee0:	f000 ffa0 	bl	8002e24 <HAL_ADC_ConfigChannel>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8001eea:	f000 f997 	bl	800221c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001eee:	2309      	movs	r3, #9
 8001ef0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001ef2:	230a      	movs	r3, #10
 8001ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4806      	ldr	r0, [pc, #24]	@ (8001f14 <MX_ADC1_Init+0x174>)
 8001efc:	f000 ff92 	bl	8002e24 <HAL_ADC_ConfigChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 8001f06:	f000 f989 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200022ec 	.word	0x200022ec
 8001f18:	40012400 	.word	0x40012400

08001f1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f20:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f22:	4a13      	ldr	r2, [pc, #76]	@ (8001f70 <MX_I2C1_Init+0x54>)
 8001f24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f28:	4a12      	ldr	r2, [pc, #72]	@ (8001f74 <MX_I2C1_Init+0x58>)
 8001f2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f40:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f46:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f52:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f58:	4804      	ldr	r0, [pc, #16]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f5a:	f001 fe17 	bl	8003b8c <HAL_I2C_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f64:	f000 f95a 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20002360 	.word	0x20002360
 8001f70:	40005400 	.word	0x40005400
 8001f74:	000186a0 	.word	0x000186a0

08001f78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f7c:	4b17      	ldr	r3, [pc, #92]	@ (8001fdc <MX_SPI2_Init+0x64>)
 8001f7e:	4a18      	ldr	r2, [pc, #96]	@ (8001fe0 <MX_SPI2_Init+0x68>)
 8001f80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f82:	4b16      	ldr	r3, [pc, #88]	@ (8001fdc <MX_SPI2_Init+0x64>)
 8001f84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f8a:	4b14      	ldr	r3, [pc, #80]	@ (8001fdc <MX_SPI2_Init+0x64>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f90:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <MX_SPI2_Init+0x64>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <MX_SPI2_Init+0x64>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <MX_SPI2_Init+0x64>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <MX_SPI2_Init+0x64>)
 8001fa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fa8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001faa:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <MX_SPI2_Init+0x64>)
 8001fac:	2210      	movs	r2, #16
 8001fae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fdc <MX_SPI2_Init+0x64>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fb6:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <MX_SPI2_Init+0x64>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fbc:	4b07      	ldr	r3, [pc, #28]	@ (8001fdc <MX_SPI2_Init+0x64>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001fc2:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <MX_SPI2_Init+0x64>)
 8001fc4:	220a      	movs	r2, #10
 8001fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fc8:	4804      	ldr	r0, [pc, #16]	@ (8001fdc <MX_SPI2_Init+0x64>)
 8001fca:	f003 faf7 	bl	80055bc <HAL_SPI_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001fd4:	f000 f922 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	200023b4 	.word	0x200023b4
 8001fe0:	40003800 	.word	0x40003800

08001fe4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fea:	f107 0308 	add.w	r3, r7, #8
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff8:	463b      	mov	r3, r7
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002000:	4b1e      	ldr	r3, [pc, #120]	@ (800207c <MX_TIM2_Init+0x98>)
 8002002:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002006:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8002008:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <MX_TIM2_Init+0x98>)
 800200a:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800200e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002010:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <MX_TIM2_Init+0x98>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002016:	4b19      	ldr	r3, [pc, #100]	@ (800207c <MX_TIM2_Init+0x98>)
 8002018:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800201c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201e:	4b17      	ldr	r3, [pc, #92]	@ (800207c <MX_TIM2_Init+0x98>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002024:	4b15      	ldr	r3, [pc, #84]	@ (800207c <MX_TIM2_Init+0x98>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800202a:	4814      	ldr	r0, [pc, #80]	@ (800207c <MX_TIM2_Init+0x98>)
 800202c:	f003 fef1 	bl	8005e12 <HAL_TIM_Base_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002036:	f000 f8f1 	bl	800221c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800203a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800203e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002040:	f107 0308 	add.w	r3, r7, #8
 8002044:	4619      	mov	r1, r3
 8002046:	480d      	ldr	r0, [pc, #52]	@ (800207c <MX_TIM2_Init+0x98>)
 8002048:	f004 f874 	bl	8006134 <HAL_TIM_ConfigClockSource>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002052:	f000 f8e3 	bl	800221c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002056:	2300      	movs	r3, #0
 8002058:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800205e:	463b      	mov	r3, r7
 8002060:	4619      	mov	r1, r3
 8002062:	4806      	ldr	r0, [pc, #24]	@ (800207c <MX_TIM2_Init+0x98>)
 8002064:	f004 fa56 	bl	8006514 <HAL_TIMEx_MasterConfigSynchronization>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800206e:	f000 f8d5 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	2000240c 	.word	0x2000240c

08002080 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002086:	f107 0308 	add.w	r3, r7, #8
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002094:	463b      	mov	r3, r7
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800209c:	4b1d      	ldr	r3, [pc, #116]	@ (8002114 <MX_TIM3_Init+0x94>)
 800209e:	4a1e      	ldr	r2, [pc, #120]	@ (8002118 <MX_TIM3_Init+0x98>)
 80020a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 80020a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002114 <MX_TIM3_Init+0x94>)
 80020a4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80020a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <MX_TIM3_Init+0x94>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80020b0:	4b18      	ldr	r3, [pc, #96]	@ (8002114 <MX_TIM3_Init+0x94>)
 80020b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b8:	4b16      	ldr	r3, [pc, #88]	@ (8002114 <MX_TIM3_Init+0x94>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020be:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <MX_TIM3_Init+0x94>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020c4:	4813      	ldr	r0, [pc, #76]	@ (8002114 <MX_TIM3_Init+0x94>)
 80020c6:	f003 fea4 	bl	8005e12 <HAL_TIM_Base_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80020d0:	f000 f8a4 	bl	800221c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020da:	f107 0308 	add.w	r3, r7, #8
 80020de:	4619      	mov	r1, r3
 80020e0:	480c      	ldr	r0, [pc, #48]	@ (8002114 <MX_TIM3_Init+0x94>)
 80020e2:	f004 f827 	bl	8006134 <HAL_TIM_ConfigClockSource>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80020ec:	f000 f896 	bl	800221c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f0:	2300      	movs	r3, #0
 80020f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020f8:	463b      	mov	r3, r7
 80020fa:	4619      	mov	r1, r3
 80020fc:	4805      	ldr	r0, [pc, #20]	@ (8002114 <MX_TIM3_Init+0x94>)
 80020fe:	f004 fa09 	bl	8006514 <HAL_TIMEx_MasterConfigSynchronization>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002108:	f000 f888 	bl	800221c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800210c:	bf00      	nop
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20002454 	.word	0x20002454
 8002118:	40000400 	.word	0x40000400

0800211c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002122:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <MX_DMA_Init+0x38>)
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	4a0b      	ldr	r2, [pc, #44]	@ (8002154 <MX_DMA_Init+0x38>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6153      	str	r3, [r2, #20]
 800212e:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <MX_DMA_Init+0x38>)
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	200b      	movs	r0, #11
 8002140:	f001 f949 	bl	80033d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002144:	200b      	movs	r0, #11
 8002146:	f001 f962 	bl	800340e <HAL_NVIC_EnableIRQ>

}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000

08002158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215e:	f107 0310 	add.w	r3, r7, #16
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800216c:	4b28      	ldr	r3, [pc, #160]	@ (8002210 <MX_GPIO_Init+0xb8>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	4a27      	ldr	r2, [pc, #156]	@ (8002210 <MX_GPIO_Init+0xb8>)
 8002172:	f043 0310 	orr.w	r3, r3, #16
 8002176:	6193      	str	r3, [r2, #24]
 8002178:	4b25      	ldr	r3, [pc, #148]	@ (8002210 <MX_GPIO_Init+0xb8>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002184:	4b22      	ldr	r3, [pc, #136]	@ (8002210 <MX_GPIO_Init+0xb8>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a21      	ldr	r2, [pc, #132]	@ (8002210 <MX_GPIO_Init+0xb8>)
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b1f      	ldr	r3, [pc, #124]	@ (8002210 <MX_GPIO_Init+0xb8>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800219c:	4b1c      	ldr	r3, [pc, #112]	@ (8002210 <MX_GPIO_Init+0xb8>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002210 <MX_GPIO_Init+0xb8>)
 80021a2:	f043 0308 	orr.w	r3, r3, #8
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b19      	ldr	r3, [pc, #100]	@ (8002210 <MX_GPIO_Init+0xb8>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80021b4:	2200      	movs	r2, #0
 80021b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021ba:	4816      	ldr	r0, [pc, #88]	@ (8002214 <MX_GPIO_Init+0xbc>)
 80021bc:	f001 fcb4 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80021c0:	2200      	movs	r2, #0
 80021c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021c6:	4814      	ldr	r0, [pc, #80]	@ (8002218 <MX_GPIO_Init+0xc0>)
 80021c8:	f001 fcae 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80021cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d2:	2301      	movs	r3, #1
 80021d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	2302      	movs	r3, #2
 80021dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021de:	f107 0310 	add.w	r3, r7, #16
 80021e2:	4619      	mov	r1, r3
 80021e4:	480b      	ldr	r0, [pc, #44]	@ (8002214 <MX_GPIO_Init+0xbc>)
 80021e6:	f001 fb1b 	bl	8003820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f0:	2301      	movs	r3, #1
 80021f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f8:	2302      	movs	r3, #2
 80021fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	f107 0310 	add.w	r3, r7, #16
 8002200:	4619      	mov	r1, r3
 8002202:	4805      	ldr	r0, [pc, #20]	@ (8002218 <MX_GPIO_Init+0xc0>)
 8002204:	f001 fb0c 	bl	8003820 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002208:	bf00      	nop
 800220a:	3720      	adds	r7, #32
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000
 8002214:	40011000 	.word	0x40011000
 8002218:	40010800 	.word	0x40010800

0800221c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002220:	b672      	cpsid	i
}
 8002222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002224:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002228:	4803      	ldr	r0, [pc, #12]	@ (8002238 <Error_Handler+0x1c>)
 800222a:	f001 fc95 	bl	8003b58 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800222e:	2064      	movs	r0, #100	@ 0x64
 8002230:	f000 fb44 	bl	80028bc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002234:	bf00      	nop
 8002236:	e7f5      	b.n	8002224 <Error_Handler+0x8>
 8002238:	40011000 	.word	0x40011000

0800223c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002242:	4b15      	ldr	r3, [pc, #84]	@ (8002298 <HAL_MspInit+0x5c>)
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	4a14      	ldr	r2, [pc, #80]	@ (8002298 <HAL_MspInit+0x5c>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6193      	str	r3, [r2, #24]
 800224e:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <HAL_MspInit+0x5c>)
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <HAL_MspInit+0x5c>)
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	4a0e      	ldr	r2, [pc, #56]	@ (8002298 <HAL_MspInit+0x5c>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002264:	61d3      	str	r3, [r2, #28]
 8002266:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <HAL_MspInit+0x5c>)
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002272:	4b0a      	ldr	r3, [pc, #40]	@ (800229c <HAL_MspInit+0x60>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	4a04      	ldr	r2, [pc, #16]	@ (800229c <HAL_MspInit+0x60>)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr
 8002298:	40021000 	.word	0x40021000
 800229c:	40010000 	.word	0x40010000

080022a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	@ 0x28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 0318 	add.w	r3, r7, #24
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a37      	ldr	r2, [pc, #220]	@ (8002398 <HAL_ADC_MspInit+0xf8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d167      	bne.n	8002390 <HAL_ADC_MspInit+0xf0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022c0:	4b36      	ldr	r3, [pc, #216]	@ (800239c <HAL_ADC_MspInit+0xfc>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	4a35      	ldr	r2, [pc, #212]	@ (800239c <HAL_ADC_MspInit+0xfc>)
 80022c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022ca:	6193      	str	r3, [r2, #24]
 80022cc:	4b33      	ldr	r3, [pc, #204]	@ (800239c <HAL_ADC_MspInit+0xfc>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d8:	4b30      	ldr	r3, [pc, #192]	@ (800239c <HAL_ADC_MspInit+0xfc>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	4a2f      	ldr	r2, [pc, #188]	@ (800239c <HAL_ADC_MspInit+0xfc>)
 80022de:	f043 0304 	orr.w	r3, r3, #4
 80022e2:	6193      	str	r3, [r2, #24]
 80022e4:	4b2d      	ldr	r3, [pc, #180]	@ (800239c <HAL_ADC_MspInit+0xfc>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f0:	4b2a      	ldr	r3, [pc, #168]	@ (800239c <HAL_ADC_MspInit+0xfc>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4a29      	ldr	r2, [pc, #164]	@ (800239c <HAL_ADC_MspInit+0xfc>)
 80022f6:	f043 0308 	orr.w	r3, r3, #8
 80022fa:	6193      	str	r3, [r2, #24]
 80022fc:	4b27      	ldr	r3, [pc, #156]	@ (800239c <HAL_ADC_MspInit+0xfc>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002308:	23ff      	movs	r3, #255	@ 0xff
 800230a:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800230c:	2303      	movs	r3, #3
 800230e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002310:	f107 0318 	add.w	r3, r7, #24
 8002314:	4619      	mov	r1, r3
 8002316:	4822      	ldr	r0, [pc, #136]	@ (80023a0 <HAL_ADC_MspInit+0x100>)
 8002318:	f001 fa82 	bl	8003820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800231c:	2303      	movs	r3, #3
 800231e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002320:	2303      	movs	r3, #3
 8002322:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002324:	f107 0318 	add.w	r3, r7, #24
 8002328:	4619      	mov	r1, r3
 800232a:	481e      	ldr	r0, [pc, #120]	@ (80023a4 <HAL_ADC_MspInit+0x104>)
 800232c:	f001 fa78 	bl	8003820 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002330:	4b1d      	ldr	r3, [pc, #116]	@ (80023a8 <HAL_ADC_MspInit+0x108>)
 8002332:	4a1e      	ldr	r2, [pc, #120]	@ (80023ac <HAL_ADC_MspInit+0x10c>)
 8002334:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002336:	4b1c      	ldr	r3, [pc, #112]	@ (80023a8 <HAL_ADC_MspInit+0x108>)
 8002338:	2200      	movs	r2, #0
 800233a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800233c:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <HAL_ADC_MspInit+0x108>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002342:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_ADC_MspInit+0x108>)
 8002344:	2280      	movs	r2, #128	@ 0x80
 8002346:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002348:	4b17      	ldr	r3, [pc, #92]	@ (80023a8 <HAL_ADC_MspInit+0x108>)
 800234a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800234e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002350:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <HAL_ADC_MspInit+0x108>)
 8002352:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002356:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002358:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <HAL_ADC_MspInit+0x108>)
 800235a:	2200      	movs	r2, #0
 800235c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800235e:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <HAL_ADC_MspInit+0x108>)
 8002360:	2200      	movs	r2, #0
 8002362:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002364:	4810      	ldr	r0, [pc, #64]	@ (80023a8 <HAL_ADC_MspInit+0x108>)
 8002366:	f001 f86d 	bl	8003444 <HAL_DMA_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8002370:	f7ff ff54 	bl	800221c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a0c      	ldr	r2, [pc, #48]	@ (80023a8 <HAL_ADC_MspInit+0x108>)
 8002378:	621a      	str	r2, [r3, #32]
 800237a:	4a0b      	ldr	r2, [pc, #44]	@ (80023a8 <HAL_ADC_MspInit+0x108>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002380:	2200      	movs	r2, #0
 8002382:	2100      	movs	r1, #0
 8002384:	2012      	movs	r0, #18
 8002386:	f001 f826 	bl	80033d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800238a:	2012      	movs	r0, #18
 800238c:	f001 f83f 	bl	800340e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002390:	bf00      	nop
 8002392:	3728      	adds	r7, #40	@ 0x28
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40012400 	.word	0x40012400
 800239c:	40021000 	.word	0x40021000
 80023a0:	40010800 	.word	0x40010800
 80023a4:	40010c00 	.word	0x40010c00
 80023a8:	2000231c 	.word	0x2000231c
 80023ac:	40020008 	.word	0x40020008

080023b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 0310 	add.w	r3, r7, #16
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a15      	ldr	r2, [pc, #84]	@ (8002420 <HAL_I2C_MspInit+0x70>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d123      	bne.n	8002418 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d0:	4b14      	ldr	r3, [pc, #80]	@ (8002424 <HAL_I2C_MspInit+0x74>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	4a13      	ldr	r2, [pc, #76]	@ (8002424 <HAL_I2C_MspInit+0x74>)
 80023d6:	f043 0308 	orr.w	r3, r3, #8
 80023da:	6193      	str	r3, [r2, #24]
 80023dc:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <HAL_I2C_MspInit+0x74>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023e8:	23c0      	movs	r3, #192	@ 0xc0
 80023ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ec:	2312      	movs	r3, #18
 80023ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023f0:	2303      	movs	r3, #3
 80023f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f4:	f107 0310 	add.w	r3, r7, #16
 80023f8:	4619      	mov	r1, r3
 80023fa:	480b      	ldr	r0, [pc, #44]	@ (8002428 <HAL_I2C_MspInit+0x78>)
 80023fc:	f001 fa10 	bl	8003820 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002400:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <HAL_I2C_MspInit+0x74>)
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	4a07      	ldr	r2, [pc, #28]	@ (8002424 <HAL_I2C_MspInit+0x74>)
 8002406:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800240a:	61d3      	str	r3, [r2, #28]
 800240c:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <HAL_I2C_MspInit+0x74>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002418:	bf00      	nop
 800241a:	3720      	adds	r7, #32
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40005400 	.word	0x40005400
 8002424:	40021000 	.word	0x40021000
 8002428:	40010c00 	.word	0x40010c00

0800242c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 0310 	add.w	r3, r7, #16
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1c      	ldr	r2, [pc, #112]	@ (80024b8 <HAL_SPI_MspInit+0x8c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d131      	bne.n	80024b0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800244c:	4b1b      	ldr	r3, [pc, #108]	@ (80024bc <HAL_SPI_MspInit+0x90>)
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	4a1a      	ldr	r2, [pc, #104]	@ (80024bc <HAL_SPI_MspInit+0x90>)
 8002452:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002456:	61d3      	str	r3, [r2, #28]
 8002458:	4b18      	ldr	r3, [pc, #96]	@ (80024bc <HAL_SPI_MspInit+0x90>)
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002464:	4b15      	ldr	r3, [pc, #84]	@ (80024bc <HAL_SPI_MspInit+0x90>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	4a14      	ldr	r2, [pc, #80]	@ (80024bc <HAL_SPI_MspInit+0x90>)
 800246a:	f043 0308 	orr.w	r3, r3, #8
 800246e:	6193      	str	r3, [r2, #24]
 8002470:	4b12      	ldr	r3, [pc, #72]	@ (80024bc <HAL_SPI_MspInit+0x90>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800247c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002480:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002486:	2303      	movs	r3, #3
 8002488:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248a:	f107 0310 	add.w	r3, r7, #16
 800248e:	4619      	mov	r1, r3
 8002490:	480b      	ldr	r0, [pc, #44]	@ (80024c0 <HAL_SPI_MspInit+0x94>)
 8002492:	f001 f9c5 	bl	8003820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002496:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800249a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	4619      	mov	r1, r3
 80024aa:	4805      	ldr	r0, [pc, #20]	@ (80024c0 <HAL_SPI_MspInit+0x94>)
 80024ac:	f001 f9b8 	bl	8003820 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80024b0:	bf00      	nop
 80024b2:	3720      	adds	r7, #32
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40003800 	.word	0x40003800
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40010c00 	.word	0x40010c00

080024c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024d4:	d114      	bne.n	8002500 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024d6:	4b19      	ldr	r3, [pc, #100]	@ (800253c <HAL_TIM_Base_MspInit+0x78>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4a18      	ldr	r2, [pc, #96]	@ (800253c <HAL_TIM_Base_MspInit+0x78>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	61d3      	str	r3, [r2, #28]
 80024e2:	4b16      	ldr	r3, [pc, #88]	@ (800253c <HAL_TIM_Base_MspInit+0x78>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	201c      	movs	r0, #28
 80024f4:	f000 ff6f 	bl	80033d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024f8:	201c      	movs	r0, #28
 80024fa:	f000 ff88 	bl	800340e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024fe:	e018      	b.n	8002532 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0e      	ldr	r2, [pc, #56]	@ (8002540 <HAL_TIM_Base_MspInit+0x7c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d113      	bne.n	8002532 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800250a:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <HAL_TIM_Base_MspInit+0x78>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	4a0b      	ldr	r2, [pc, #44]	@ (800253c <HAL_TIM_Base_MspInit+0x78>)
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	61d3      	str	r3, [r2, #28]
 8002516:	4b09      	ldr	r3, [pc, #36]	@ (800253c <HAL_TIM_Base_MspInit+0x78>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	201d      	movs	r0, #29
 8002528:	f000 ff55 	bl	80033d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800252c:	201d      	movs	r0, #29
 800252e:	f000 ff6e 	bl	800340e <HAL_NVIC_EnableIRQ>
}
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	40000400 	.word	0x40000400

08002544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <NMI_Handler+0x4>

0800254c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <HardFault_Handler+0x4>

08002554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <MemManage_Handler+0x4>

0800255c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <BusFault_Handler+0x4>

08002564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <UsageFault_Handler+0x4>

0800256c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	if(Timer1 > 0)
 8002594:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <SysTick_Handler+0x34>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <SysTick_Handler+0x18>
		Timer1--;
 800259c:	4b09      	ldr	r3, [pc, #36]	@ (80025c4 <SysTick_Handler+0x34>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	4b07      	ldr	r3, [pc, #28]	@ (80025c4 <SysTick_Handler+0x34>)
 80025a6:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80025a8:	4b07      	ldr	r3, [pc, #28]	@ (80025c8 <SysTick_Handler+0x38>)
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <SysTick_Handler+0x2c>
		Timer2--;
 80025b0:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <SysTick_Handler+0x38>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <SysTick_Handler+0x38>)
 80025ba:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025bc:	f000 f962 	bl	8002884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000208 	.word	0x20000208
 80025c8:	2000020a 	.word	0x2000020a

080025cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025d0:	4802      	ldr	r0, [pc, #8]	@ (80025dc <DMA1_Channel1_IRQHandler+0x10>)
 80025d2:	f000 fff1 	bl	80035b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2000231c 	.word	0x2000231c

080025e0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025e4:	4802      	ldr	r0, [pc, #8]	@ (80025f0 <ADC1_2_IRQHandler+0x10>)
 80025e6:	f000 fb43 	bl	8002c70 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200022ec 	.word	0x200022ec

080025f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025f8:	4802      	ldr	r0, [pc, #8]	@ (8002604 <TIM2_IRQHandler+0x10>)
 80025fa:	f003 fcab 	bl	8005f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000240c 	.word	0x2000240c

08002608 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800260c:	4802      	ldr	r0, [pc, #8]	@ (8002618 <TIM3_IRQHandler+0x10>)
 800260e:	f003 fca1 	bl	8005f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20002454 	.word	0x20002454

0800261c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return 1;
 8002620:	2301      	movs	r3, #1
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <_kill>:

int _kill(int pid, int sig)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002634:	f008 fd40 	bl	800b0b8 <__errno>
 8002638:	4603      	mov	r3, r0
 800263a:	2216      	movs	r2, #22
 800263c:	601a      	str	r2, [r3, #0]
  return -1;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <_exit>:

void _exit (int status)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002652:	f04f 31ff 	mov.w	r1, #4294967295
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ffe7 	bl	800262a <_kill>
  while (1) {}    /* Make sure we hang here */
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <_exit+0x12>

08002660 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	e00a      	b.n	8002688 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002672:	f3af 8000 	nop.w
 8002676:	4601      	mov	r1, r0
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	60ba      	str	r2, [r7, #8]
 800267e:	b2ca      	uxtb	r2, r1
 8002680:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3301      	adds	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	429a      	cmp	r2, r3
 800268e:	dbf0      	blt.n	8002672 <_read+0x12>
  }

  return len;
 8002690:	687b      	ldr	r3, [r7, #4]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	e009      	b.n	80026c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	60ba      	str	r2, [r7, #8]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	3301      	adds	r3, #1
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	dbf1      	blt.n	80026ac <_write+0x12>
  }
  return len;
 80026c8:	687b      	ldr	r3, [r7, #4]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <_close>:

int _close(int file)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026f8:	605a      	str	r2, [r3, #4]
  return 0;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <_isatty>:

int _isatty(int file)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800270e:	2301      	movs	r3, #1
}
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800271a:	b480      	push	{r7}
 800271c:	b085      	sub	sp, #20
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
	...

08002734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800273c:	4a14      	ldr	r2, [pc, #80]	@ (8002790 <_sbrk+0x5c>)
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <_sbrk+0x60>)
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002748:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <_sbrk+0x64>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002750:	4b11      	ldr	r3, [pc, #68]	@ (8002798 <_sbrk+0x64>)
 8002752:	4a12      	ldr	r2, [pc, #72]	@ (800279c <_sbrk+0x68>)
 8002754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002756:	4b10      	ldr	r3, [pc, #64]	@ (8002798 <_sbrk+0x64>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	429a      	cmp	r2, r3
 8002762:	d207      	bcs.n	8002774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002764:	f008 fca8 	bl	800b0b8 <__errno>
 8002768:	4603      	mov	r3, r0
 800276a:	220c      	movs	r2, #12
 800276c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800276e:	f04f 33ff 	mov.w	r3, #4294967295
 8002772:	e009      	b.n	8002788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002774:	4b08      	ldr	r3, [pc, #32]	@ (8002798 <_sbrk+0x64>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800277a:	4b07      	ldr	r3, [pc, #28]	@ (8002798 <_sbrk+0x64>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	4a05      	ldr	r2, [pc, #20]	@ (8002798 <_sbrk+0x64>)
 8002784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002786:	68fb      	ldr	r3, [r7, #12]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20005000 	.word	0x20005000
 8002794:	00000400 	.word	0x00000400
 8002798:	2000255c 	.word	0x2000255c
 800279c:	200028e8 	.word	0x200028e8

080027a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027ac:	f7ff fff8 	bl	80027a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b0:	480b      	ldr	r0, [pc, #44]	@ (80027e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027b2:	490c      	ldr	r1, [pc, #48]	@ (80027e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027b4:	4a0c      	ldr	r2, [pc, #48]	@ (80027e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b8:	e002      	b.n	80027c0 <LoopCopyDataInit>

080027ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027be:	3304      	adds	r3, #4

080027c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c4:	d3f9      	bcc.n	80027ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c6:	4a09      	ldr	r2, [pc, #36]	@ (80027ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027c8:	4c09      	ldr	r4, [pc, #36]	@ (80027f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027cc:	e001      	b.n	80027d2 <LoopFillZerobss>

080027ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d0:	3204      	adds	r2, #4

080027d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d4:	d3fb      	bcc.n	80027ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027d6:	f008 fc75 	bl	800b0c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027da:	f7ff fa45 	bl	8001c68 <main>
  bx lr
 80027de:	4770      	bx	lr
  ldr r0, =_sdata
 80027e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80027e8:	0800dbc0 	.word	0x0800dbc0
  ldr r2, =_sbss
 80027ec:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80027f0:	200028e4 	.word	0x200028e4

080027f4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027f4:	e7fe      	b.n	80027f4 <CAN1_RX1_IRQHandler>
	...

080027f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027fc:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <HAL_Init+0x28>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a07      	ldr	r2, [pc, #28]	@ (8002820 <HAL_Init+0x28>)
 8002802:	f043 0310 	orr.w	r3, r3, #16
 8002806:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002808:	2003      	movs	r0, #3
 800280a:	f000 fdd9 	bl	80033c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280e:	200f      	movs	r0, #15
 8002810:	f000 f808 	bl	8002824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002814:	f7ff fd12 	bl	800223c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40022000 	.word	0x40022000

08002824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800282c:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <HAL_InitTick+0x54>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b12      	ldr	r3, [pc, #72]	@ (800287c <HAL_InitTick+0x58>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800283a:	fbb3 f3f1 	udiv	r3, r3, r1
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fdf1 	bl	800342a <HAL_SYSTICK_Config>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e00e      	b.n	8002870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b0f      	cmp	r3, #15
 8002856:	d80a      	bhi.n	800286e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002858:	2200      	movs	r2, #0
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f000 fdb9 	bl	80033d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002864:	4a06      	ldr	r2, [pc, #24]	@ (8002880 <HAL_InitTick+0x5c>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000004 	.word	0x20000004
 800287c:	2000000c 	.word	0x2000000c
 8002880:	20000008 	.word	0x20000008

08002884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002888:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <HAL_IncTick+0x1c>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4b05      	ldr	r3, [pc, #20]	@ (80028a4 <HAL_IncTick+0x20>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4413      	add	r3, r2
 8002894:	4a03      	ldr	r2, [pc, #12]	@ (80028a4 <HAL_IncTick+0x20>)
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	2000000c 	.word	0x2000000c
 80028a4:	20002560 	.word	0x20002560

080028a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return uwTick;
 80028ac:	4b02      	ldr	r3, [pc, #8]	@ (80028b8 <HAL_GetTick+0x10>)
 80028ae:	681b      	ldr	r3, [r3, #0]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	20002560 	.word	0x20002560

080028bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c4:	f7ff fff0 	bl	80028a8 <HAL_GetTick>
 80028c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d005      	beq.n	80028e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002900 <HAL_Delay+0x44>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028e2:	bf00      	nop
 80028e4:	f7ff ffe0 	bl	80028a8 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d8f7      	bhi.n	80028e4 <HAL_Delay+0x28>
  {
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	2000000c 	.word	0x2000000c

08002904 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e0be      	b.n	8002aa4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002930:	2b00      	cmp	r3, #0
 8002932:	d109      	bne.n	8002948 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff fcac 	bl	80022a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 fbbd 	bl	80030c8 <ADC_ConversionStop_Disable>
 800294e:	4603      	mov	r3, r0
 8002950:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	f040 8099 	bne.w	8002a92 <HAL_ADC_Init+0x18e>
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 8095 	bne.w	8002a92 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002970:	f023 0302 	bic.w	r3, r3, #2
 8002974:	f043 0202 	orr.w	r2, r3, #2
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002984:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	7b1b      	ldrb	r3, [r3, #12]
 800298a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800298c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	4313      	orrs	r3, r2
 8002992:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800299c:	d003      	beq.n	80029a6 <HAL_ADC_Init+0xa2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d102      	bne.n	80029ac <HAL_ADC_Init+0xa8>
 80029a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029aa:	e000      	b.n	80029ae <HAL_ADC_Init+0xaa>
 80029ac:	2300      	movs	r3, #0
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7d1b      	ldrb	r3, [r3, #20]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d119      	bne.n	80029f0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	7b1b      	ldrb	r3, [r3, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d109      	bne.n	80029d8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	035a      	lsls	r2, r3, #13
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	e00b      	b.n	80029f0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029dc:	f043 0220 	orr.w	r2, r3, #32
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e8:	f043 0201 	orr.w	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	4b28      	ldr	r3, [pc, #160]	@ (8002aac <HAL_ADC_Init+0x1a8>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	430b      	orrs	r3, r1
 8002a16:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a20:	d003      	beq.n	8002a2a <HAL_ADC_Init+0x126>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d104      	bne.n	8002a34 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	051b      	lsls	r3, r3, #20
 8002a32:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	4b18      	ldr	r3, [pc, #96]	@ (8002ab0 <HAL_ADC_Init+0x1ac>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d10b      	bne.n	8002a70 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a62:	f023 0303 	bic.w	r3, r3, #3
 8002a66:	f043 0201 	orr.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a6e:	e018      	b.n	8002aa2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a74:	f023 0312 	bic.w	r3, r3, #18
 8002a78:	f043 0210 	orr.w	r2, r3, #16
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a84:	f043 0201 	orr.w	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a90:	e007      	b.n	8002aa2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a96:	f043 0210 	orr.w	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	ffe1f7fd 	.word	0xffe1f7fd
 8002ab0:	ff1f0efe 	.word	0xff1f0efe

08002ab4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a64      	ldr	r2, [pc, #400]	@ (8002c5c <HAL_ADC_Start_DMA+0x1a8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d004      	beq.n	8002ad8 <HAL_ADC_Start_DMA+0x24>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a63      	ldr	r2, [pc, #396]	@ (8002c60 <HAL_ADC_Start_DMA+0x1ac>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d106      	bne.n	8002ae6 <HAL_ADC_Start_DMA+0x32>
 8002ad8:	4b60      	ldr	r3, [pc, #384]	@ (8002c5c <HAL_ADC_Start_DMA+0x1a8>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f040 80b3 	bne.w	8002c4c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_ADC_Start_DMA+0x40>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e0ae      	b.n	8002c52 <HAL_ADC_Start_DMA+0x19e>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 fa89 	bl	8003014 <ADC_Enable>
 8002b02:	4603      	mov	r3, r0
 8002b04:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f040 809a 	bne.w	8002c42 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b12:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a4e      	ldr	r2, [pc, #312]	@ (8002c60 <HAL_ADC_Start_DMA+0x1ac>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d105      	bne.n	8002b38 <HAL_ADC_Start_DMA+0x84>
 8002b2c:	4b4b      	ldr	r3, [pc, #300]	@ (8002c5c <HAL_ADC_Start_DMA+0x1a8>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d115      	bne.n	8002b64 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d026      	beq.n	8002ba0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b56:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b5a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b62:	e01d      	b.n	8002ba0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b68:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a39      	ldr	r2, [pc, #228]	@ (8002c5c <HAL_ADC_Start_DMA+0x1a8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d004      	beq.n	8002b84 <HAL_ADC_Start_DMA+0xd0>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a38      	ldr	r2, [pc, #224]	@ (8002c60 <HAL_ADC_Start_DMA+0x1ac>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d10d      	bne.n	8002ba0 <HAL_ADC_Start_DMA+0xec>
 8002b84:	4b35      	ldr	r3, [pc, #212]	@ (8002c5c <HAL_ADC_Start_DMA+0x1a8>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b98:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d006      	beq.n	8002bba <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb0:	f023 0206 	bic.w	r2, r3, #6
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002bb8:	e002      	b.n	8002bc0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	4a25      	ldr	r2, [pc, #148]	@ (8002c64 <HAL_ADC_Start_DMA+0x1b0>)
 8002bce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4a24      	ldr	r2, [pc, #144]	@ (8002c68 <HAL_ADC_Start_DMA+0x1b4>)
 8002bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4a23      	ldr	r2, [pc, #140]	@ (8002c6c <HAL_ADC_Start_DMA+0x1b8>)
 8002bde:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0202 	mvn.w	r2, #2
 8002be8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bf8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a18      	ldr	r0, [r3, #32]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	334c      	adds	r3, #76	@ 0x4c
 8002c04:	4619      	mov	r1, r3
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f000 fc75 	bl	80034f8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002c18:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002c1c:	d108      	bne.n	8002c30 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002c2c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002c2e:	e00f      	b.n	8002c50 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002c3e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002c40:	e006      	b.n	8002c50 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002c4a:	e001      	b.n	8002c50 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40012400 	.word	0x40012400
 8002c60:	40012800 	.word	0x40012800
 8002c64:	0800314b 	.word	0x0800314b
 8002c68:	080031c7 	.word	0x080031c7
 8002c6c:	080031e3 	.word	0x080031e3

08002c70 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d03e      	beq.n	8002d10 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d039      	beq.n	8002d10 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d105      	bne.n	8002cb4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002cbe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002cc2:	d11d      	bne.n	8002d00 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d119      	bne.n	8002d00 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0220 	bic.w	r2, r2, #32
 8002cda:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d105      	bne.n	8002d00 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf8:	f043 0201 	orr.w	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7fe fd9b 	bl	800183c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f06f 0212 	mvn.w	r2, #18
 8002d0e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d04d      	beq.n	8002db6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d048      	beq.n	8002db6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d105      	bne.n	8002d3c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d34:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002d46:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002d4a:	d012      	beq.n	8002d72 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d125      	bne.n	8002da6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002d64:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002d68:	d11d      	bne.n	8002da6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d119      	bne.n	8002da6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d80:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d105      	bne.n	8002da6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9e:	f043 0201 	orr.w	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fa35 	bl	8003216 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 020c 	mvn.w	r2, #12
 8002db4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d012      	beq.n	8002de6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00d      	beq.n	8002de6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f812 	bl	8002e00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0201 	mvn.w	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr

08002e12 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x20>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e0dc      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x1da>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b06      	cmp	r3, #6
 8002e52:	d81c      	bhi.n	8002e8e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	3b05      	subs	r3, #5
 8002e66:	221f      	movs	r2, #31
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	4019      	ands	r1, r3
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3b05      	subs	r3, #5
 8002e80:	fa00 f203 	lsl.w	r2, r0, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e8c:	e03c      	b.n	8002f08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d81c      	bhi.n	8002ed0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3b23      	subs	r3, #35	@ 0x23
 8002ea8:	221f      	movs	r2, #31
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	4019      	ands	r1, r3
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6818      	ldr	r0, [r3, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3b23      	subs	r3, #35	@ 0x23
 8002ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ece:	e01b      	b.n	8002f08 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	3b41      	subs	r3, #65	@ 0x41
 8002ee2:	221f      	movs	r2, #31
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	4019      	ands	r1, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	3b41      	subs	r3, #65	@ 0x41
 8002efc:	fa00 f203 	lsl.w	r2, r0, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b09      	cmp	r3, #9
 8002f0e:	d91c      	bls.n	8002f4a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68d9      	ldr	r1, [r3, #12]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4413      	add	r3, r2
 8002f20:	3b1e      	subs	r3, #30
 8002f22:	2207      	movs	r2, #7
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	4019      	ands	r1, r3
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	6898      	ldr	r0, [r3, #8]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4613      	mov	r3, r2
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4413      	add	r3, r2
 8002f3a:	3b1e      	subs	r3, #30
 8002f3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	60da      	str	r2, [r3, #12]
 8002f48:	e019      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6919      	ldr	r1, [r3, #16]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	2207      	movs	r2, #7
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	4019      	ands	r1, r3
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	6898      	ldr	r0, [r3, #8]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	fa00 f203 	lsl.w	r2, r0, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d003      	beq.n	8002f8e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f8a:	2b11      	cmp	r3, #17
 8002f8c:	d132      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1d      	ldr	r2, [pc, #116]	@ (8003008 <HAL_ADC_ConfigChannel+0x1e4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d125      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d126      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002fb4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b10      	cmp	r3, #16
 8002fbc:	d11a      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fbe:	4b13      	ldr	r3, [pc, #76]	@ (800300c <HAL_ADC_ConfigChannel+0x1e8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a13      	ldr	r2, [pc, #76]	@ (8003010 <HAL_ADC_ConfigChannel+0x1ec>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	0c9a      	lsrs	r2, r3, #18
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fd4:	e002      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f9      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x1b2>
 8002fe2:	e007      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe8:	f043 0220 	orr.w	r2, r3, #32
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr
 8003008:	40012400 	.word	0x40012400
 800300c:	20000004 	.word	0x20000004
 8003010:	431bde83 	.word	0x431bde83

08003014 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b01      	cmp	r3, #1
 8003030:	d040      	beq.n	80030b4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f042 0201 	orr.w	r2, r2, #1
 8003040:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003042:	4b1f      	ldr	r3, [pc, #124]	@ (80030c0 <ADC_Enable+0xac>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1f      	ldr	r2, [pc, #124]	@ (80030c4 <ADC_Enable+0xb0>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	0c9b      	lsrs	r3, r3, #18
 800304e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003050:	e002      	b.n	8003058 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	3b01      	subs	r3, #1
 8003056:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f9      	bne.n	8003052 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800305e:	f7ff fc23 	bl	80028a8 <HAL_GetTick>
 8003062:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003064:	e01f      	b.n	80030a6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003066:	f7ff fc1f 	bl	80028a8 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d918      	bls.n	80030a6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b01      	cmp	r3, #1
 8003080:	d011      	beq.n	80030a6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003086:	f043 0210 	orr.w	r2, r3, #16
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003092:	f043 0201 	orr.w	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e007      	b.n	80030b6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d1d8      	bne.n	8003066 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20000004 	.word	0x20000004
 80030c4:	431bde83 	.word	0x431bde83

080030c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d12e      	bne.n	8003140 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030f2:	f7ff fbd9 	bl	80028a8 <HAL_GetTick>
 80030f6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030f8:	e01b      	b.n	8003132 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80030fa:	f7ff fbd5 	bl	80028a8 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d914      	bls.n	8003132 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b01      	cmp	r3, #1
 8003114:	d10d      	bne.n	8003132 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311a:	f043 0210 	orr.w	r2, r3, #16
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003126:	f043 0201 	orr.w	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e007      	b.n	8003142 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b01      	cmp	r3, #1
 800313e:	d0dc      	beq.n	80030fa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003156:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003160:	2b00      	cmp	r3, #0
 8003162:	d127      	bne.n	80031b4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003168:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800317a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800317e:	d115      	bne.n	80031ac <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003184:	2b00      	cmp	r3, #0
 8003186:	d111      	bne.n	80031ac <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003198:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d105      	bne.n	80031ac <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a4:	f043 0201 	orr.w	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7fe fb45 	bl	800183c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80031b2:	e004      	b.n	80031be <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	4798      	blx	r3
}
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f7ff fe0a 	bl	8002dee <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031da:	bf00      	nop
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003200:	f043 0204 	orr.w	r2, r3, #4
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f7ff fe02 	bl	8002e12 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003238:	4b0c      	ldr	r3, [pc, #48]	@ (800326c <__NVIC_SetPriorityGrouping+0x44>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003244:	4013      	ands	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003250:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800325a:	4a04      	ldr	r2, [pc, #16]	@ (800326c <__NVIC_SetPriorityGrouping+0x44>)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	60d3      	str	r3, [r2, #12]
}
 8003260:	bf00      	nop
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	e000ed00 	.word	0xe000ed00

08003270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003274:	4b04      	ldr	r3, [pc, #16]	@ (8003288 <__NVIC_GetPriorityGrouping+0x18>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	0a1b      	lsrs	r3, r3, #8
 800327a:	f003 0307 	and.w	r3, r3, #7
}
 800327e:	4618      	mov	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	2b00      	cmp	r3, #0
 800329c:	db0b      	blt.n	80032b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	f003 021f 	and.w	r2, r3, #31
 80032a4:	4906      	ldr	r1, [pc, #24]	@ (80032c0 <__NVIC_EnableIRQ+0x34>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	2001      	movs	r0, #1
 80032ae:	fa00 f202 	lsl.w	r2, r0, r2
 80032b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	e000e100 	.word	0xe000e100

080032c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	6039      	str	r1, [r7, #0]
 80032ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	db0a      	blt.n	80032ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	490c      	ldr	r1, [pc, #48]	@ (8003310 <__NVIC_SetPriority+0x4c>)
 80032de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e2:	0112      	lsls	r2, r2, #4
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	440b      	add	r3, r1
 80032e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032ec:	e00a      	b.n	8003304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	4908      	ldr	r1, [pc, #32]	@ (8003314 <__NVIC_SetPriority+0x50>)
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	3b04      	subs	r3, #4
 80032fc:	0112      	lsls	r2, r2, #4
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	440b      	add	r3, r1
 8003302:	761a      	strb	r2, [r3, #24]
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	e000e100 	.word	0xe000e100
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003318:	b480      	push	{r7}
 800331a:	b089      	sub	sp, #36	@ 0x24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f1c3 0307 	rsb	r3, r3, #7
 8003332:	2b04      	cmp	r3, #4
 8003334:	bf28      	it	cs
 8003336:	2304      	movcs	r3, #4
 8003338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	3304      	adds	r3, #4
 800333e:	2b06      	cmp	r3, #6
 8003340:	d902      	bls.n	8003348 <NVIC_EncodePriority+0x30>
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3b03      	subs	r3, #3
 8003346:	e000      	b.n	800334a <NVIC_EncodePriority+0x32>
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800334c:	f04f 32ff 	mov.w	r2, #4294967295
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43da      	mvns	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	401a      	ands	r2, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003360:	f04f 31ff 	mov.w	r1, #4294967295
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	fa01 f303 	lsl.w	r3, r1, r3
 800336a:	43d9      	mvns	r1, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003370:	4313      	orrs	r3, r2
         );
}
 8003372:	4618      	mov	r0, r3
 8003374:	3724      	adds	r7, #36	@ 0x24
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr

0800337c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3b01      	subs	r3, #1
 8003388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800338c:	d301      	bcc.n	8003392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800338e:	2301      	movs	r3, #1
 8003390:	e00f      	b.n	80033b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003392:	4a0a      	ldr	r2, [pc, #40]	@ (80033bc <SysTick_Config+0x40>)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3b01      	subs	r3, #1
 8003398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800339a:	210f      	movs	r1, #15
 800339c:	f04f 30ff 	mov.w	r0, #4294967295
 80033a0:	f7ff ff90 	bl	80032c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033a4:	4b05      	ldr	r3, [pc, #20]	@ (80033bc <SysTick_Config+0x40>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033aa:	4b04      	ldr	r3, [pc, #16]	@ (80033bc <SysTick_Config+0x40>)
 80033ac:	2207      	movs	r2, #7
 80033ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	e000e010 	.word	0xe000e010

080033c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff ff2d 	bl	8003228 <__NVIC_SetPriorityGrouping>
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b086      	sub	sp, #24
 80033da:	af00      	add	r7, sp, #0
 80033dc:	4603      	mov	r3, r0
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	607a      	str	r2, [r7, #4]
 80033e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033e8:	f7ff ff42 	bl	8003270 <__NVIC_GetPriorityGrouping>
 80033ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	6978      	ldr	r0, [r7, #20]
 80033f4:	f7ff ff90 	bl	8003318 <NVIC_EncodePriority>
 80033f8:	4602      	mov	r2, r0
 80033fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033fe:	4611      	mov	r1, r2
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff5f 	bl	80032c4 <__NVIC_SetPriority>
}
 8003406:	bf00      	nop
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	4603      	mov	r3, r0
 8003416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff ff35 	bl	800328c <__NVIC_EnableIRQ>
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff ffa2 	bl	800337c <SysTick_Config>
 8003438:	4603      	mov	r3, r0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e043      	b.n	80034e2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	4b22      	ldr	r3, [pc, #136]	@ (80034ec <HAL_DMA_Init+0xa8>)
 8003462:	4413      	add	r3, r2
 8003464:	4a22      	ldr	r2, [pc, #136]	@ (80034f0 <HAL_DMA_Init+0xac>)
 8003466:	fba2 2303 	umull	r2, r3, r2, r3
 800346a:	091b      	lsrs	r3, r3, #4
 800346c:	009a      	lsls	r2, r3, #2
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a1f      	ldr	r2, [pc, #124]	@ (80034f4 <HAL_DMA_Init+0xb0>)
 8003476:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800348e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003492:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800349c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr
 80034ec:	bffdfff8 	.word	0xbffdfff8
 80034f0:	cccccccd 	.word	0xcccccccd
 80034f4:	40020000 	.word	0x40020000

080034f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_DMA_Start_IT+0x20>
 8003514:	2302      	movs	r3, #2
 8003516:	e04b      	b.n	80035b0 <HAL_DMA_Start_IT+0xb8>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d13a      	bne.n	80035a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0201 	bic.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	68b9      	ldr	r1, [r7, #8]
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f937 	bl	80037c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 020e 	orr.w	r2, r2, #14
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	e00f      	b.n	8003590 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0204 	bic.w	r2, r2, #4
 800357e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 020a 	orr.w	r2, r2, #10
 800358e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	e005      	b.n	80035ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80035aa:	2302      	movs	r3, #2
 80035ac:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80035ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	2204      	movs	r2, #4
 80035d6:	409a      	lsls	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d04f      	beq.n	8003680 <HAL_DMA_IRQHandler+0xc8>
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d04a      	beq.n	8003680 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0320 	and.w	r3, r3, #32
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d107      	bne.n	8003608 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0204 	bic.w	r2, r2, #4
 8003606:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a66      	ldr	r2, [pc, #408]	@ (80037a8 <HAL_DMA_IRQHandler+0x1f0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d029      	beq.n	8003666 <HAL_DMA_IRQHandler+0xae>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a65      	ldr	r2, [pc, #404]	@ (80037ac <HAL_DMA_IRQHandler+0x1f4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d022      	beq.n	8003662 <HAL_DMA_IRQHandler+0xaa>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a63      	ldr	r2, [pc, #396]	@ (80037b0 <HAL_DMA_IRQHandler+0x1f8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d01a      	beq.n	800365c <HAL_DMA_IRQHandler+0xa4>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a62      	ldr	r2, [pc, #392]	@ (80037b4 <HAL_DMA_IRQHandler+0x1fc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d012      	beq.n	8003656 <HAL_DMA_IRQHandler+0x9e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a60      	ldr	r2, [pc, #384]	@ (80037b8 <HAL_DMA_IRQHandler+0x200>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00a      	beq.n	8003650 <HAL_DMA_IRQHandler+0x98>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a5f      	ldr	r2, [pc, #380]	@ (80037bc <HAL_DMA_IRQHandler+0x204>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d102      	bne.n	800364a <HAL_DMA_IRQHandler+0x92>
 8003644:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003648:	e00e      	b.n	8003668 <HAL_DMA_IRQHandler+0xb0>
 800364a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800364e:	e00b      	b.n	8003668 <HAL_DMA_IRQHandler+0xb0>
 8003650:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003654:	e008      	b.n	8003668 <HAL_DMA_IRQHandler+0xb0>
 8003656:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800365a:	e005      	b.n	8003668 <HAL_DMA_IRQHandler+0xb0>
 800365c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003660:	e002      	b.n	8003668 <HAL_DMA_IRQHandler+0xb0>
 8003662:	2340      	movs	r3, #64	@ 0x40
 8003664:	e000      	b.n	8003668 <HAL_DMA_IRQHandler+0xb0>
 8003666:	2304      	movs	r3, #4
 8003668:	4a55      	ldr	r2, [pc, #340]	@ (80037c0 <HAL_DMA_IRQHandler+0x208>)
 800366a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8094 	beq.w	800379e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800367e:	e08e      	b.n	800379e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	2202      	movs	r2, #2
 8003686:	409a      	lsls	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d056      	beq.n	800373e <HAL_DMA_IRQHandler+0x186>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d051      	beq.n	800373e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0320 	and.w	r3, r3, #32
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10b      	bne.n	80036c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 020a 	bic.w	r2, r2, #10
 80036b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a38      	ldr	r2, [pc, #224]	@ (80037a8 <HAL_DMA_IRQHandler+0x1f0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d029      	beq.n	800371e <HAL_DMA_IRQHandler+0x166>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a37      	ldr	r2, [pc, #220]	@ (80037ac <HAL_DMA_IRQHandler+0x1f4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d022      	beq.n	800371a <HAL_DMA_IRQHandler+0x162>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a35      	ldr	r2, [pc, #212]	@ (80037b0 <HAL_DMA_IRQHandler+0x1f8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d01a      	beq.n	8003714 <HAL_DMA_IRQHandler+0x15c>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a34      	ldr	r2, [pc, #208]	@ (80037b4 <HAL_DMA_IRQHandler+0x1fc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d012      	beq.n	800370e <HAL_DMA_IRQHandler+0x156>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a32      	ldr	r2, [pc, #200]	@ (80037b8 <HAL_DMA_IRQHandler+0x200>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00a      	beq.n	8003708 <HAL_DMA_IRQHandler+0x150>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a31      	ldr	r2, [pc, #196]	@ (80037bc <HAL_DMA_IRQHandler+0x204>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d102      	bne.n	8003702 <HAL_DMA_IRQHandler+0x14a>
 80036fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003700:	e00e      	b.n	8003720 <HAL_DMA_IRQHandler+0x168>
 8003702:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003706:	e00b      	b.n	8003720 <HAL_DMA_IRQHandler+0x168>
 8003708:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800370c:	e008      	b.n	8003720 <HAL_DMA_IRQHandler+0x168>
 800370e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003712:	e005      	b.n	8003720 <HAL_DMA_IRQHandler+0x168>
 8003714:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003718:	e002      	b.n	8003720 <HAL_DMA_IRQHandler+0x168>
 800371a:	2320      	movs	r3, #32
 800371c:	e000      	b.n	8003720 <HAL_DMA_IRQHandler+0x168>
 800371e:	2302      	movs	r3, #2
 8003720:	4a27      	ldr	r2, [pc, #156]	@ (80037c0 <HAL_DMA_IRQHandler+0x208>)
 8003722:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003730:	2b00      	cmp	r3, #0
 8003732:	d034      	beq.n	800379e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800373c:	e02f      	b.n	800379e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	2208      	movs	r2, #8
 8003744:	409a      	lsls	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4013      	ands	r3, r2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d028      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x1e8>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d023      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 020e 	bic.w	r2, r2, #14
 8003766:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003770:	2101      	movs	r1, #1
 8003772:	fa01 f202 	lsl.w	r2, r1, r2
 8003776:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	4798      	blx	r3
    }
  }
  return;
 800379e:	bf00      	nop
 80037a0:	bf00      	nop
}
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40020008 	.word	0x40020008
 80037ac:	4002001c 	.word	0x4002001c
 80037b0:	40020030 	.word	0x40020030
 80037b4:	40020044 	.word	0x40020044
 80037b8:	40020058 	.word	0x40020058
 80037bc:	4002006c 	.word	0x4002006c
 80037c0:	40020000 	.word	0x40020000

080037c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037da:	2101      	movs	r1, #1
 80037dc:	fa01 f202 	lsl.w	r2, r1, r2
 80037e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b10      	cmp	r3, #16
 80037f0:	d108      	bne.n	8003804 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003802:	e007      	b.n	8003814 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	60da      	str	r2, [r3, #12]
}
 8003814:	bf00      	nop
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr
	...

08003820 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003820:	b480      	push	{r7}
 8003822:	b08b      	sub	sp, #44	@ 0x2c
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800382a:	2300      	movs	r3, #0
 800382c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800382e:	2300      	movs	r3, #0
 8003830:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003832:	e169      	b.n	8003b08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003834:	2201      	movs	r2, #1
 8003836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	429a      	cmp	r2, r3
 800384e:	f040 8158 	bne.w	8003b02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	4a9a      	ldr	r2, [pc, #616]	@ (8003ac0 <HAL_GPIO_Init+0x2a0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d05e      	beq.n	800391a <HAL_GPIO_Init+0xfa>
 800385c:	4a98      	ldr	r2, [pc, #608]	@ (8003ac0 <HAL_GPIO_Init+0x2a0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d875      	bhi.n	800394e <HAL_GPIO_Init+0x12e>
 8003862:	4a98      	ldr	r2, [pc, #608]	@ (8003ac4 <HAL_GPIO_Init+0x2a4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d058      	beq.n	800391a <HAL_GPIO_Init+0xfa>
 8003868:	4a96      	ldr	r2, [pc, #600]	@ (8003ac4 <HAL_GPIO_Init+0x2a4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d86f      	bhi.n	800394e <HAL_GPIO_Init+0x12e>
 800386e:	4a96      	ldr	r2, [pc, #600]	@ (8003ac8 <HAL_GPIO_Init+0x2a8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d052      	beq.n	800391a <HAL_GPIO_Init+0xfa>
 8003874:	4a94      	ldr	r2, [pc, #592]	@ (8003ac8 <HAL_GPIO_Init+0x2a8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d869      	bhi.n	800394e <HAL_GPIO_Init+0x12e>
 800387a:	4a94      	ldr	r2, [pc, #592]	@ (8003acc <HAL_GPIO_Init+0x2ac>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d04c      	beq.n	800391a <HAL_GPIO_Init+0xfa>
 8003880:	4a92      	ldr	r2, [pc, #584]	@ (8003acc <HAL_GPIO_Init+0x2ac>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d863      	bhi.n	800394e <HAL_GPIO_Init+0x12e>
 8003886:	4a92      	ldr	r2, [pc, #584]	@ (8003ad0 <HAL_GPIO_Init+0x2b0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d046      	beq.n	800391a <HAL_GPIO_Init+0xfa>
 800388c:	4a90      	ldr	r2, [pc, #576]	@ (8003ad0 <HAL_GPIO_Init+0x2b0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d85d      	bhi.n	800394e <HAL_GPIO_Init+0x12e>
 8003892:	2b12      	cmp	r3, #18
 8003894:	d82a      	bhi.n	80038ec <HAL_GPIO_Init+0xcc>
 8003896:	2b12      	cmp	r3, #18
 8003898:	d859      	bhi.n	800394e <HAL_GPIO_Init+0x12e>
 800389a:	a201      	add	r2, pc, #4	@ (adr r2, 80038a0 <HAL_GPIO_Init+0x80>)
 800389c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a0:	0800391b 	.word	0x0800391b
 80038a4:	080038f5 	.word	0x080038f5
 80038a8:	08003907 	.word	0x08003907
 80038ac:	08003949 	.word	0x08003949
 80038b0:	0800394f 	.word	0x0800394f
 80038b4:	0800394f 	.word	0x0800394f
 80038b8:	0800394f 	.word	0x0800394f
 80038bc:	0800394f 	.word	0x0800394f
 80038c0:	0800394f 	.word	0x0800394f
 80038c4:	0800394f 	.word	0x0800394f
 80038c8:	0800394f 	.word	0x0800394f
 80038cc:	0800394f 	.word	0x0800394f
 80038d0:	0800394f 	.word	0x0800394f
 80038d4:	0800394f 	.word	0x0800394f
 80038d8:	0800394f 	.word	0x0800394f
 80038dc:	0800394f 	.word	0x0800394f
 80038e0:	0800394f 	.word	0x0800394f
 80038e4:	080038fd 	.word	0x080038fd
 80038e8:	08003911 	.word	0x08003911
 80038ec:	4a79      	ldr	r2, [pc, #484]	@ (8003ad4 <HAL_GPIO_Init+0x2b4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80038f2:	e02c      	b.n	800394e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	623b      	str	r3, [r7, #32]
          break;
 80038fa:	e029      	b.n	8003950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	3304      	adds	r3, #4
 8003902:	623b      	str	r3, [r7, #32]
          break;
 8003904:	e024      	b.n	8003950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	3308      	adds	r3, #8
 800390c:	623b      	str	r3, [r7, #32]
          break;
 800390e:	e01f      	b.n	8003950 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	330c      	adds	r3, #12
 8003916:	623b      	str	r3, [r7, #32]
          break;
 8003918:	e01a      	b.n	8003950 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003922:	2304      	movs	r3, #4
 8003924:	623b      	str	r3, [r7, #32]
          break;
 8003926:	e013      	b.n	8003950 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d105      	bne.n	800393c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003930:	2308      	movs	r3, #8
 8003932:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69fa      	ldr	r2, [r7, #28]
 8003938:	611a      	str	r2, [r3, #16]
          break;
 800393a:	e009      	b.n	8003950 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800393c:	2308      	movs	r3, #8
 800393e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	615a      	str	r2, [r3, #20]
          break;
 8003946:	e003      	b.n	8003950 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003948:	2300      	movs	r3, #0
 800394a:	623b      	str	r3, [r7, #32]
          break;
 800394c:	e000      	b.n	8003950 <HAL_GPIO_Init+0x130>
          break;
 800394e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	2bff      	cmp	r3, #255	@ 0xff
 8003954:	d801      	bhi.n	800395a <HAL_GPIO_Init+0x13a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	e001      	b.n	800395e <HAL_GPIO_Init+0x13e>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3304      	adds	r3, #4
 800395e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2bff      	cmp	r3, #255	@ 0xff
 8003964:	d802      	bhi.n	800396c <HAL_GPIO_Init+0x14c>
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	e002      	b.n	8003972 <HAL_GPIO_Init+0x152>
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396e:	3b08      	subs	r3, #8
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	210f      	movs	r1, #15
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	fa01 f303 	lsl.w	r3, r1, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	401a      	ands	r2, r3
 8003984:	6a39      	ldr	r1, [r7, #32]
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	fa01 f303 	lsl.w	r3, r1, r3
 800398c:	431a      	orrs	r2, r3
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 80b1 	beq.w	8003b02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039a0:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad8 <HAL_GPIO_Init+0x2b8>)
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	4a4c      	ldr	r2, [pc, #304]	@ (8003ad8 <HAL_GPIO_Init+0x2b8>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	6193      	str	r3, [r2, #24]
 80039ac:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad8 <HAL_GPIO_Init+0x2b8>)
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80039b8:	4a48      	ldr	r2, [pc, #288]	@ (8003adc <HAL_GPIO_Init+0x2bc>)
 80039ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039bc:	089b      	lsrs	r3, r3, #2
 80039be:	3302      	adds	r3, #2
 80039c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	f003 0303 	and.w	r3, r3, #3
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	220f      	movs	r2, #15
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4013      	ands	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a40      	ldr	r2, [pc, #256]	@ (8003ae0 <HAL_GPIO_Init+0x2c0>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d013      	beq.n	8003a0c <HAL_GPIO_Init+0x1ec>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ae4 <HAL_GPIO_Init+0x2c4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d00d      	beq.n	8003a08 <HAL_GPIO_Init+0x1e8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a3e      	ldr	r2, [pc, #248]	@ (8003ae8 <HAL_GPIO_Init+0x2c8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d007      	beq.n	8003a04 <HAL_GPIO_Init+0x1e4>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a3d      	ldr	r2, [pc, #244]	@ (8003aec <HAL_GPIO_Init+0x2cc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d101      	bne.n	8003a00 <HAL_GPIO_Init+0x1e0>
 80039fc:	2303      	movs	r3, #3
 80039fe:	e006      	b.n	8003a0e <HAL_GPIO_Init+0x1ee>
 8003a00:	2304      	movs	r3, #4
 8003a02:	e004      	b.n	8003a0e <HAL_GPIO_Init+0x1ee>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e002      	b.n	8003a0e <HAL_GPIO_Init+0x1ee>
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <HAL_GPIO_Init+0x1ee>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a10:	f002 0203 	and.w	r2, r2, #3
 8003a14:	0092      	lsls	r2, r2, #2
 8003a16:	4093      	lsls	r3, r2
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a1e:	492f      	ldr	r1, [pc, #188]	@ (8003adc <HAL_GPIO_Init+0x2bc>)
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	3302      	adds	r3, #2
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d006      	beq.n	8003a46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a38:	4b2d      	ldr	r3, [pc, #180]	@ (8003af0 <HAL_GPIO_Init+0x2d0>)
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	492c      	ldr	r1, [pc, #176]	@ (8003af0 <HAL_GPIO_Init+0x2d0>)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	608b      	str	r3, [r1, #8]
 8003a44:	e006      	b.n	8003a54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a46:	4b2a      	ldr	r3, [pc, #168]	@ (8003af0 <HAL_GPIO_Init+0x2d0>)
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	4928      	ldr	r1, [pc, #160]	@ (8003af0 <HAL_GPIO_Init+0x2d0>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d006      	beq.n	8003a6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a60:	4b23      	ldr	r3, [pc, #140]	@ (8003af0 <HAL_GPIO_Init+0x2d0>)
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	4922      	ldr	r1, [pc, #136]	@ (8003af0 <HAL_GPIO_Init+0x2d0>)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60cb      	str	r3, [r1, #12]
 8003a6c:	e006      	b.n	8003a7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a6e:	4b20      	ldr	r3, [pc, #128]	@ (8003af0 <HAL_GPIO_Init+0x2d0>)
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	491e      	ldr	r1, [pc, #120]	@ (8003af0 <HAL_GPIO_Init+0x2d0>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d006      	beq.n	8003a96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a88:	4b19      	ldr	r3, [pc, #100]	@ (8003af0 <HAL_GPIO_Init+0x2d0>)
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	4918      	ldr	r1, [pc, #96]	@ (8003af0 <HAL_GPIO_Init+0x2d0>)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	604b      	str	r3, [r1, #4]
 8003a94:	e006      	b.n	8003aa4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a96:	4b16      	ldr	r3, [pc, #88]	@ (8003af0 <HAL_GPIO_Init+0x2d0>)
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	4914      	ldr	r1, [pc, #80]	@ (8003af0 <HAL_GPIO_Init+0x2d0>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d021      	beq.n	8003af4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8003af0 <HAL_GPIO_Init+0x2d0>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	490e      	ldr	r1, [pc, #56]	@ (8003af0 <HAL_GPIO_Init+0x2d0>)
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]
 8003abc:	e021      	b.n	8003b02 <HAL_GPIO_Init+0x2e2>
 8003abe:	bf00      	nop
 8003ac0:	10320000 	.word	0x10320000
 8003ac4:	10310000 	.word	0x10310000
 8003ac8:	10220000 	.word	0x10220000
 8003acc:	10210000 	.word	0x10210000
 8003ad0:	10120000 	.word	0x10120000
 8003ad4:	10110000 	.word	0x10110000
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	40010000 	.word	0x40010000
 8003ae0:	40010800 	.word	0x40010800
 8003ae4:	40010c00 	.word	0x40010c00
 8003ae8:	40011000 	.word	0x40011000
 8003aec:	40011400 	.word	0x40011400
 8003af0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003af4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <HAL_GPIO_Init+0x304>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	43db      	mvns	r3, r3
 8003afc:	4909      	ldr	r1, [pc, #36]	@ (8003b24 <HAL_GPIO_Init+0x304>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b04:	3301      	adds	r3, #1
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f47f ae8e 	bne.w	8003834 <HAL_GPIO_Init+0x14>
  }
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	372c      	adds	r7, #44	@ 0x2c
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr
 8003b24:	40010400 	.word	0x40010400

08003b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	807b      	strh	r3, [r7, #2]
 8003b34:	4613      	mov	r3, r2
 8003b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b38:	787b      	ldrb	r3, [r7, #1]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b3e:	887a      	ldrh	r2, [r7, #2]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b44:	e003      	b.n	8003b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	041a      	lsls	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	611a      	str	r2, [r3, #16]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b6a:	887a      	ldrh	r2, [r7, #2]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	041a      	lsls	r2, r3, #16
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	43d9      	mvns	r1, r3
 8003b76:	887b      	ldrh	r3, [r7, #2]
 8003b78:	400b      	ands	r3, r1
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	611a      	str	r2, [r3, #16]
}
 8003b80:	bf00      	nop
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bc80      	pop	{r7}
 8003b88:	4770      	bx	lr
	...

08003b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e12b      	b.n	8003df6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fe fbfc 	bl	80023b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2224      	movs	r2, #36	@ 0x24
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bf0:	f001 fbfc 	bl	80053ec <HAL_RCC_GetPCLK1Freq>
 8003bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	4a81      	ldr	r2, [pc, #516]	@ (8003e00 <HAL_I2C_Init+0x274>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d807      	bhi.n	8003c10 <HAL_I2C_Init+0x84>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4a80      	ldr	r2, [pc, #512]	@ (8003e04 <HAL_I2C_Init+0x278>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	bf94      	ite	ls
 8003c08:	2301      	movls	r3, #1
 8003c0a:	2300      	movhi	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	e006      	b.n	8003c1e <HAL_I2C_Init+0x92>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4a7d      	ldr	r2, [pc, #500]	@ (8003e08 <HAL_I2C_Init+0x27c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	bf94      	ite	ls
 8003c18:	2301      	movls	r3, #1
 8003c1a:	2300      	movhi	r3, #0
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e0e7      	b.n	8003df6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4a78      	ldr	r2, [pc, #480]	@ (8003e0c <HAL_I2C_Init+0x280>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	0c9b      	lsrs	r3, r3, #18
 8003c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	4a6a      	ldr	r2, [pc, #424]	@ (8003e00 <HAL_I2C_Init+0x274>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d802      	bhi.n	8003c60 <HAL_I2C_Init+0xd4>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	e009      	b.n	8003c74 <HAL_I2C_Init+0xe8>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c66:	fb02 f303 	mul.w	r3, r2, r3
 8003c6a:	4a69      	ldr	r2, [pc, #420]	@ (8003e10 <HAL_I2C_Init+0x284>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	099b      	lsrs	r3, r3, #6
 8003c72:	3301      	adds	r3, #1
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	495c      	ldr	r1, [pc, #368]	@ (8003e00 <HAL_I2C_Init+0x274>)
 8003c90:	428b      	cmp	r3, r1
 8003c92:	d819      	bhi.n	8003cc8 <HAL_I2C_Init+0x13c>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1e59      	subs	r1, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ca2:	1c59      	adds	r1, r3, #1
 8003ca4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ca8:	400b      	ands	r3, r1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_I2C_Init+0x138>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1e59      	subs	r1, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc2:	e051      	b.n	8003d68 <HAL_I2C_Init+0x1dc>
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	e04f      	b.n	8003d68 <HAL_I2C_Init+0x1dc>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d111      	bne.n	8003cf4 <HAL_I2C_Init+0x168>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1e58      	subs	r0, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6859      	ldr	r1, [r3, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	440b      	add	r3, r1
 8003cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf0c      	ite	eq
 8003cec:	2301      	moveq	r3, #1
 8003cee:	2300      	movne	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	e012      	b.n	8003d1a <HAL_I2C_Init+0x18e>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	1e58      	subs	r0, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6859      	ldr	r1, [r3, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	0099      	lsls	r1, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf0c      	ite	eq
 8003d14:	2301      	moveq	r3, #1
 8003d16:	2300      	movne	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_I2C_Init+0x196>
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e022      	b.n	8003d68 <HAL_I2C_Init+0x1dc>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10e      	bne.n	8003d48 <HAL_I2C_Init+0x1bc>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1e58      	subs	r0, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6859      	ldr	r1, [r3, #4]
 8003d32:	460b      	mov	r3, r1
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	440b      	add	r3, r1
 8003d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d46:	e00f      	b.n	8003d68 <HAL_I2C_Init+0x1dc>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1e58      	subs	r0, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6859      	ldr	r1, [r3, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	0099      	lsls	r1, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	6809      	ldr	r1, [r1, #0]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69da      	ldr	r2, [r3, #28]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6911      	ldr	r1, [r2, #16]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68d2      	ldr	r2, [r2, #12]
 8003da2:	4311      	orrs	r1, r2
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	430b      	orrs	r3, r1
 8003daa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695a      	ldr	r2, [r3, #20]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	000186a0 	.word	0x000186a0
 8003e04:	001e847f 	.word	0x001e847f
 8003e08:	003d08ff 	.word	0x003d08ff
 8003e0c:	431bde83 	.word	0x431bde83
 8003e10:	10624dd3 	.word	0x10624dd3

08003e14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	4608      	mov	r0, r1
 8003e1e:	4611      	mov	r1, r2
 8003e20:	461a      	mov	r2, r3
 8003e22:	4603      	mov	r3, r0
 8003e24:	817b      	strh	r3, [r7, #10]
 8003e26:	460b      	mov	r3, r1
 8003e28:	813b      	strh	r3, [r7, #8]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e2e:	f7fe fd3b 	bl	80028a8 <HAL_GetTick>
 8003e32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	f040 80d9 	bne.w	8003ff4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	2319      	movs	r3, #25
 8003e48:	2201      	movs	r2, #1
 8003e4a:	496d      	ldr	r1, [pc, #436]	@ (8004000 <HAL_I2C_Mem_Write+0x1ec>)
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fccd 	bl	80047ec <I2C_WaitOnFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e0cc      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_I2C_Mem_Write+0x56>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e0c5      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1e2>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d007      	beq.n	8003e90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2221      	movs	r2, #33	@ 0x21
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2240      	movs	r2, #64	@ 0x40
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a3a      	ldr	r2, [r7, #32]
 8003eba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4a4d      	ldr	r2, [pc, #308]	@ (8004004 <HAL_I2C_Mem_Write+0x1f0>)
 8003ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ed2:	88f8      	ldrh	r0, [r7, #6]
 8003ed4:	893a      	ldrh	r2, [r7, #8]
 8003ed6:	8979      	ldrh	r1, [r7, #10]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fb04 	bl	80044f0 <I2C_RequestMemoryWrite>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d052      	beq.n	8003f94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e081      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 fd92 	bl	8004a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00d      	beq.n	8003f1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d107      	bne.n	8003f1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e06b      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	781a      	ldrb	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d11b      	bne.n	8003f94 <HAL_I2C_Mem_Write+0x180>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d017      	beq.n	8003f94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1aa      	bne.n	8003ef2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 fd85 	bl	8004ab0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00d      	beq.n	8003fc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d107      	bne.n	8003fc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e016      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	00100002 	.word	0x00100002
 8004004:	ffff0000 	.word	0xffff0000

08004008 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08c      	sub	sp, #48	@ 0x30
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	4608      	mov	r0, r1
 8004012:	4611      	mov	r1, r2
 8004014:	461a      	mov	r2, r3
 8004016:	4603      	mov	r3, r0
 8004018:	817b      	strh	r3, [r7, #10]
 800401a:	460b      	mov	r3, r1
 800401c:	813b      	strh	r3, [r7, #8]
 800401e:	4613      	mov	r3, r2
 8004020:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004026:	f7fe fc3f 	bl	80028a8 <HAL_GetTick>
 800402a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b20      	cmp	r3, #32
 8004036:	f040 8250 	bne.w	80044da <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800403a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	2319      	movs	r3, #25
 8004040:	2201      	movs	r2, #1
 8004042:	4982      	ldr	r1, [pc, #520]	@ (800424c <HAL_I2C_Mem_Read+0x244>)
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 fbd1 	bl	80047ec <I2C_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004050:	2302      	movs	r3, #2
 8004052:	e243      	b.n	80044dc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_I2C_Mem_Read+0x5a>
 800405e:	2302      	movs	r3, #2
 8004060:	e23c      	b.n	80044dc <HAL_I2C_Mem_Read+0x4d4>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b01      	cmp	r3, #1
 8004076:	d007      	beq.n	8004088 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004096:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2222      	movs	r2, #34	@ 0x22
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2240      	movs	r2, #64	@ 0x40
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80040b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4a62      	ldr	r2, [pc, #392]	@ (8004250 <HAL_I2C_Mem_Read+0x248>)
 80040c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040ca:	88f8      	ldrh	r0, [r7, #6]
 80040cc:	893a      	ldrh	r2, [r7, #8]
 80040ce:	8979      	ldrh	r1, [r7, #10]
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	9301      	str	r3, [sp, #4]
 80040d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	4603      	mov	r3, r0
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 fa9e 	bl	800461c <I2C_RequestMemoryRead>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e1f8      	b.n	80044dc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d113      	bne.n	800411a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	61fb      	str	r3, [r7, #28]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e1cc      	b.n	80044b4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411e:	2b01      	cmp	r3, #1
 8004120:	d11e      	bne.n	8004160 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004130:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004132:	b672      	cpsid	i
}
 8004134:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004136:	2300      	movs	r3, #0
 8004138:	61bb      	str	r3, [r7, #24]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	61bb      	str	r3, [r7, #24]
 800414a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800415a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800415c:	b662      	cpsie	i
}
 800415e:	e035      	b.n	80041cc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004164:	2b02      	cmp	r3, #2
 8004166:	d11e      	bne.n	80041a6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004176:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004178:	b672      	cpsid	i
}
 800417a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	617b      	str	r3, [r7, #20]
 8004190:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80041a2:	b662      	cpsie	i
}
 80041a4:	e012      	b.n	80041cc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041b4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b6:	2300      	movs	r3, #0
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80041cc:	e172      	b.n	80044b4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	f200 811f 	bhi.w	8004416 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d123      	bne.n	8004228 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 fcab 	bl	8004b40 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e173      	b.n	80044dc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004226:	e145      	b.n	80044b4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422c:	2b02      	cmp	r3, #2
 800422e:	d152      	bne.n	80042d6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004236:	2200      	movs	r2, #0
 8004238:	4906      	ldr	r1, [pc, #24]	@ (8004254 <HAL_I2C_Mem_Read+0x24c>)
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 fad6 	bl	80047ec <I2C_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e148      	b.n	80044dc <HAL_I2C_Mem_Read+0x4d4>
 800424a:	bf00      	nop
 800424c:	00100002 	.word	0x00100002
 8004250:	ffff0000 	.word	0xffff0000
 8004254:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004258:	b672      	cpsid	i
}
 800425a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800426a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800429e:	b662      	cpsie	i
}
 80042a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042d4:	e0ee      	b.n	80044b4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042dc:	2200      	movs	r2, #0
 80042de:	4981      	ldr	r1, [pc, #516]	@ (80044e4 <HAL_I2C_Mem_Read+0x4dc>)
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 fa83 	bl	80047ec <I2C_WaitOnFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0f5      	b.n	80044dc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004300:	b672      	cpsid	i
}
 8004302:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691a      	ldr	r2, [r3, #16]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004336:	4b6c      	ldr	r3, [pc, #432]	@ (80044e8 <HAL_I2C_Mem_Read+0x4e0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	08db      	lsrs	r3, r3, #3
 800433c:	4a6b      	ldr	r2, [pc, #428]	@ (80044ec <HAL_I2C_Mem_Read+0x4e4>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	0a1a      	lsrs	r2, r3, #8
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	00da      	lsls	r2, r3, #3
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	3b01      	subs	r3, #1
 8004354:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d118      	bne.n	800438e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	f043 0220 	orr.w	r2, r3, #32
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800437e:	b662      	cpsie	i
}
 8004380:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e0a6      	b.n	80044dc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b04      	cmp	r3, #4
 800439a:	d1d9      	bne.n	8004350 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80043de:	b662      	cpsie	i
}
 80043e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004414:	e04e      	b.n	80044b4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004418:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 fb90 	bl	8004b40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e058      	b.n	80044dc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b04      	cmp	r3, #4
 8004468:	d124      	bne.n	80044b4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446e:	2b03      	cmp	r3, #3
 8004470:	d107      	bne.n	8004482 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004480:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f47f ae88 	bne.w	80041ce <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	e000      	b.n	80044dc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80044da:	2302      	movs	r3, #2
  }
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3728      	adds	r7, #40	@ 0x28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	00010004 	.word	0x00010004
 80044e8:	20000004 	.word	0x20000004
 80044ec:	14f8b589 	.word	0x14f8b589

080044f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	4608      	mov	r0, r1
 80044fa:	4611      	mov	r1, r2
 80044fc:	461a      	mov	r2, r3
 80044fe:	4603      	mov	r3, r0
 8004500:	817b      	strh	r3, [r7, #10]
 8004502:	460b      	mov	r3, r1
 8004504:	813b      	strh	r3, [r7, #8]
 8004506:	4613      	mov	r3, r2
 8004508:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004518:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	2200      	movs	r2, #0
 8004522:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f960 	bl	80047ec <I2C_WaitOnFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00d      	beq.n	800454e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004540:	d103      	bne.n	800454a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004548:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e05f      	b.n	800460e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800454e:	897b      	ldrh	r3, [r7, #10]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	461a      	mov	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800455c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800455e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004560:	6a3a      	ldr	r2, [r7, #32]
 8004562:	492d      	ldr	r1, [pc, #180]	@ (8004618 <I2C_RequestMemoryWrite+0x128>)
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f9bb 	bl	80048e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e04c      	b.n	800460e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800458a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800458c:	6a39      	ldr	r1, [r7, #32]
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 fa46 	bl	8004a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00d      	beq.n	80045b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d107      	bne.n	80045b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e02b      	b.n	800460e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d105      	bne.n	80045c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045bc:	893b      	ldrh	r3, [r7, #8]
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	611a      	str	r2, [r3, #16]
 80045c6:	e021      	b.n	800460c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80045c8:	893b      	ldrh	r3, [r7, #8]
 80045ca:	0a1b      	lsrs	r3, r3, #8
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d8:	6a39      	ldr	r1, [r7, #32]
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fa20 	bl	8004a20 <I2C_WaitOnTXEFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00d      	beq.n	8004602 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d107      	bne.n	80045fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e005      	b.n	800460e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004602:	893b      	ldrh	r3, [r7, #8]
 8004604:	b2da      	uxtb	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	00010002 	.word	0x00010002

0800461c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af02      	add	r7, sp, #8
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	4608      	mov	r0, r1
 8004626:	4611      	mov	r1, r2
 8004628:	461a      	mov	r2, r3
 800462a:	4603      	mov	r3, r0
 800462c:	817b      	strh	r3, [r7, #10]
 800462e:	460b      	mov	r3, r1
 8004630:	813b      	strh	r3, [r7, #8]
 8004632:	4613      	mov	r3, r2
 8004634:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004644:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004654:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	2200      	movs	r2, #0
 800465e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 f8c2 	bl	80047ec <I2C_WaitOnFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00d      	beq.n	800468a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004678:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800467c:	d103      	bne.n	8004686 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004684:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e0aa      	b.n	80047e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800468a:	897b      	ldrh	r3, [r7, #10]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	461a      	mov	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004698:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	6a3a      	ldr	r2, [r7, #32]
 800469e:	4952      	ldr	r1, [pc, #328]	@ (80047e8 <I2C_RequestMemoryRead+0x1cc>)
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 f91d 	bl	80048e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e097      	b.n	80047e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046c8:	6a39      	ldr	r1, [r7, #32]
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f9a8 	bl	8004a20 <I2C_WaitOnTXEFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00d      	beq.n	80046f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d107      	bne.n	80046ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e076      	b.n	80047e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d105      	bne.n	8004704 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046f8:	893b      	ldrh	r3, [r7, #8]
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	611a      	str	r2, [r3, #16]
 8004702:	e021      	b.n	8004748 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004704:	893b      	ldrh	r3, [r7, #8]
 8004706:	0a1b      	lsrs	r3, r3, #8
 8004708:	b29b      	uxth	r3, r3
 800470a:	b2da      	uxtb	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004714:	6a39      	ldr	r1, [r7, #32]
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f982 	bl	8004a20 <I2C_WaitOnTXEFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00d      	beq.n	800473e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	2b04      	cmp	r3, #4
 8004728:	d107      	bne.n	800473a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004738:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e050      	b.n	80047e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800473e:	893b      	ldrh	r3, [r7, #8]
 8004740:	b2da      	uxtb	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800474a:	6a39      	ldr	r1, [r7, #32]
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f967 	bl	8004a20 <I2C_WaitOnTXEFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00d      	beq.n	8004774 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475c:	2b04      	cmp	r3, #4
 800475e:	d107      	bne.n	8004770 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800476e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e035      	b.n	80047e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004782:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	2200      	movs	r2, #0
 800478c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 f82b 	bl	80047ec <I2C_WaitOnFlagUntilTimeout>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00d      	beq.n	80047b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047aa:	d103      	bne.n	80047b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e013      	b.n	80047e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047b8:	897b      	ldrh	r3, [r7, #10]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ca:	6a3a      	ldr	r2, [r7, #32]
 80047cc:	4906      	ldr	r1, [pc, #24]	@ (80047e8 <I2C_RequestMemoryRead+0x1cc>)
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f886 	bl	80048e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	00010002 	.word	0x00010002

080047ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	603b      	str	r3, [r7, #0]
 80047f8:	4613      	mov	r3, r2
 80047fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047fc:	e048      	b.n	8004890 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004804:	d044      	beq.n	8004890 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004806:	f7fe f84f 	bl	80028a8 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	429a      	cmp	r2, r3
 8004814:	d302      	bcc.n	800481c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d139      	bne.n	8004890 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	0c1b      	lsrs	r3, r3, #16
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b01      	cmp	r3, #1
 8004824:	d10d      	bne.n	8004842 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	43da      	mvns	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	4013      	ands	r3, r2
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	bf0c      	ite	eq
 8004838:	2301      	moveq	r3, #1
 800483a:	2300      	movne	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	e00c      	b.n	800485c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	43da      	mvns	r2, r3
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	4013      	ands	r3, r2
 800484e:	b29b      	uxth	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	bf0c      	ite	eq
 8004854:	2301      	moveq	r3, #1
 8004856:	2300      	movne	r3, #0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	461a      	mov	r2, r3
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	429a      	cmp	r2, r3
 8004860:	d116      	bne.n	8004890 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487c:	f043 0220 	orr.w	r2, r3, #32
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e023      	b.n	80048d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	0c1b      	lsrs	r3, r3, #16
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b01      	cmp	r3, #1
 8004898:	d10d      	bne.n	80048b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	43da      	mvns	r2, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4013      	ands	r3, r2
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	bf0c      	ite	eq
 80048ac:	2301      	moveq	r3, #1
 80048ae:	2300      	movne	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	e00c      	b.n	80048d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	43da      	mvns	r2, r3
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4013      	ands	r3, r2
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	bf0c      	ite	eq
 80048c8:	2301      	moveq	r3, #1
 80048ca:	2300      	movne	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	461a      	mov	r2, r3
 80048d0:	79fb      	ldrb	r3, [r7, #7]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d093      	beq.n	80047fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048ee:	e071      	b.n	80049d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048fe:	d123      	bne.n	8004948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800490e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004918:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004934:	f043 0204 	orr.w	r2, r3, #4
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e067      	b.n	8004a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494e:	d041      	beq.n	80049d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004950:	f7fd ffaa 	bl	80028a8 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	429a      	cmp	r2, r3
 800495e:	d302      	bcc.n	8004966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d136      	bne.n	80049d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	0c1b      	lsrs	r3, r3, #16
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	d10c      	bne.n	800498a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	43da      	mvns	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4013      	ands	r3, r2
 800497c:	b29b      	uxth	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	bf14      	ite	ne
 8004982:	2301      	movne	r3, #1
 8004984:	2300      	moveq	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	e00b      	b.n	80049a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	43da      	mvns	r2, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	4013      	ands	r3, r2
 8004996:	b29b      	uxth	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	bf14      	ite	ne
 800499c:	2301      	movne	r3, #1
 800499e:	2300      	moveq	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d016      	beq.n	80049d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c0:	f043 0220 	orr.w	r2, r3, #32
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e021      	b.n	8004a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	0c1b      	lsrs	r3, r3, #16
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d10c      	bne.n	80049f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	43da      	mvns	r2, r3
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4013      	ands	r3, r2
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	bf14      	ite	ne
 80049f0:	2301      	movne	r3, #1
 80049f2:	2300      	moveq	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	e00b      	b.n	8004a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	43da      	mvns	r2, r3
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	4013      	ands	r3, r2
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	bf14      	ite	ne
 8004a0a:	2301      	movne	r3, #1
 8004a0c:	2300      	moveq	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f47f af6d 	bne.w	80048f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a2c:	e034      	b.n	8004a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 f8e3 	bl	8004bfa <I2C_IsAcknowledgeFailed>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e034      	b.n	8004aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d028      	beq.n	8004a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a46:	f7fd ff2f 	bl	80028a8 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d302      	bcc.n	8004a5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d11d      	bne.n	8004a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a66:	2b80      	cmp	r3, #128	@ 0x80
 8004a68:	d016      	beq.n	8004a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a84:	f043 0220 	orr.w	r2, r3, #32
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e007      	b.n	8004aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa2:	2b80      	cmp	r3, #128	@ 0x80
 8004aa4:	d1c3      	bne.n	8004a2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004abc:	e034      	b.n	8004b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f89b 	bl	8004bfa <I2C_IsAcknowledgeFailed>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e034      	b.n	8004b38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d028      	beq.n	8004b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad6:	f7fd fee7 	bl	80028a8 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d302      	bcc.n	8004aec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d11d      	bne.n	8004b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d016      	beq.n	8004b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b14:	f043 0220 	orr.w	r2, r3, #32
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e007      	b.n	8004b38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d1c3      	bne.n	8004abe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b4c:	e049      	b.n	8004be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	f003 0310 	and.w	r3, r3, #16
 8004b58:	2b10      	cmp	r3, #16
 8004b5a:	d119      	bne.n	8004b90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0210 	mvn.w	r2, #16
 8004b64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e030      	b.n	8004bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b90:	f7fd fe8a 	bl	80028a8 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d302      	bcc.n	8004ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d11d      	bne.n	8004be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb0:	2b40      	cmp	r3, #64	@ 0x40
 8004bb2:	d016      	beq.n	8004be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	f043 0220 	orr.w	r2, r3, #32
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e007      	b.n	8004bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bec:	2b40      	cmp	r3, #64	@ 0x40
 8004bee:	d1ae      	bne.n	8004b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c10:	d11b      	bne.n	8004c4a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c1a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	f043 0204 	orr.w	r2, r3, #4
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr
	...

08004c58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e272      	b.n	8005150 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 8087 	beq.w	8004d86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c78:	4b92      	ldr	r3, [pc, #584]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f003 030c 	and.w	r3, r3, #12
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d00c      	beq.n	8004c9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c84:	4b8f      	ldr	r3, [pc, #572]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d112      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x5e>
 8004c90:	4b8c      	ldr	r3, [pc, #560]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c9c:	d10b      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9e:	4b89      	ldr	r3, [pc, #548]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d06c      	beq.n	8004d84 <HAL_RCC_OscConfig+0x12c>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d168      	bne.n	8004d84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e24c      	b.n	8005150 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cbe:	d106      	bne.n	8004cce <HAL_RCC_OscConfig+0x76>
 8004cc0:	4b80      	ldr	r3, [pc, #512]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a7f      	ldr	r2, [pc, #508]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	e02e      	b.n	8004d2c <HAL_RCC_OscConfig+0xd4>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x98>
 8004cd6:	4b7b      	ldr	r3, [pc, #492]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a7a      	ldr	r2, [pc, #488]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	4b78      	ldr	r3, [pc, #480]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a77      	ldr	r2, [pc, #476]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004ce8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e01d      	b.n	8004d2c <HAL_RCC_OscConfig+0xd4>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cf8:	d10c      	bne.n	8004d14 <HAL_RCC_OscConfig+0xbc>
 8004cfa:	4b72      	ldr	r3, [pc, #456]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a71      	ldr	r2, [pc, #452]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004d00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	4b6f      	ldr	r3, [pc, #444]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a6e      	ldr	r2, [pc, #440]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	e00b      	b.n	8004d2c <HAL_RCC_OscConfig+0xd4>
 8004d14:	4b6b      	ldr	r3, [pc, #428]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a6a      	ldr	r2, [pc, #424]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	4b68      	ldr	r3, [pc, #416]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a67      	ldr	r2, [pc, #412]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d013      	beq.n	8004d5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d34:	f7fd fdb8 	bl	80028a8 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d3c:	f7fd fdb4 	bl	80028a8 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b64      	cmp	r3, #100	@ 0x64
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e200      	b.n	8005150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0f0      	beq.n	8004d3c <HAL_RCC_OscConfig+0xe4>
 8004d5a:	e014      	b.n	8004d86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7fd fda4 	bl	80028a8 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d64:	f7fd fda0 	bl	80028a8 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b64      	cmp	r3, #100	@ 0x64
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e1ec      	b.n	8005150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d76:	4b53      	ldr	r3, [pc, #332]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f0      	bne.n	8004d64 <HAL_RCC_OscConfig+0x10c>
 8004d82:	e000      	b.n	8004d86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d063      	beq.n	8004e5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d92:	4b4c      	ldr	r3, [pc, #304]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f003 030c 	and.w	r3, r3, #12
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00b      	beq.n	8004db6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d9e:	4b49      	ldr	r3, [pc, #292]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d11c      	bne.n	8004de4 <HAL_RCC_OscConfig+0x18c>
 8004daa:	4b46      	ldr	r3, [pc, #280]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d116      	bne.n	8004de4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004db6:	4b43      	ldr	r3, [pc, #268]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_RCC_OscConfig+0x176>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d001      	beq.n	8004dce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e1c0      	b.n	8005150 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dce:	4b3d      	ldr	r3, [pc, #244]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	4939      	ldr	r1, [pc, #228]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de2:	e03a      	b.n	8004e5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d020      	beq.n	8004e2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dec:	4b36      	ldr	r3, [pc, #216]	@ (8004ec8 <HAL_RCC_OscConfig+0x270>)
 8004dee:	2201      	movs	r2, #1
 8004df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df2:	f7fd fd59 	bl	80028a8 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dfa:	f7fd fd55 	bl	80028a8 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e1a1      	b.n	8005150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e18:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	4927      	ldr	r1, [pc, #156]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	600b      	str	r3, [r1, #0]
 8004e2c:	e015      	b.n	8004e5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e2e:	4b26      	ldr	r3, [pc, #152]	@ (8004ec8 <HAL_RCC_OscConfig+0x270>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e34:	f7fd fd38 	bl	80028a8 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e3c:	f7fd fd34 	bl	80028a8 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e180      	b.n	8005150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1f0      	bne.n	8004e3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d03a      	beq.n	8004edc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d019      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e6e:	4b17      	ldr	r3, [pc, #92]	@ (8004ecc <HAL_RCC_OscConfig+0x274>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e74:	f7fd fd18 	bl	80028a8 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e7c:	f7fd fd14 	bl	80028a8 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e160      	b.n	8005150 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <HAL_RCC_OscConfig+0x26c>)
 8004e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f0      	beq.n	8004e7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e9a:	2001      	movs	r0, #1
 8004e9c:	f000 faba 	bl	8005414 <RCC_Delay>
 8004ea0:	e01c      	b.n	8004edc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ecc <HAL_RCC_OscConfig+0x274>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea8:	f7fd fcfe 	bl	80028a8 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eae:	e00f      	b.n	8004ed0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eb0:	f7fd fcfa 	bl	80028a8 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d908      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e146      	b.n	8005150 <HAL_RCC_OscConfig+0x4f8>
 8004ec2:	bf00      	nop
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	42420000 	.word	0x42420000
 8004ecc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed0:	4b92      	ldr	r3, [pc, #584]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1e9      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0304 	and.w	r3, r3, #4
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 80a6 	beq.w	8005036 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eea:	2300      	movs	r3, #0
 8004eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eee:	4b8b      	ldr	r3, [pc, #556]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10d      	bne.n	8004f16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004efa:	4b88      	ldr	r3, [pc, #544]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	4a87      	ldr	r2, [pc, #540]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f04:	61d3      	str	r3, [r2, #28]
 8004f06:	4b85      	ldr	r3, [pc, #532]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f0e:	60bb      	str	r3, [r7, #8]
 8004f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f12:	2301      	movs	r3, #1
 8004f14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f16:	4b82      	ldr	r3, [pc, #520]	@ (8005120 <HAL_RCC_OscConfig+0x4c8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d118      	bne.n	8004f54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f22:	4b7f      	ldr	r3, [pc, #508]	@ (8005120 <HAL_RCC_OscConfig+0x4c8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a7e      	ldr	r2, [pc, #504]	@ (8005120 <HAL_RCC_OscConfig+0x4c8>)
 8004f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f2e:	f7fd fcbb 	bl	80028a8 <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f36:	f7fd fcb7 	bl	80028a8 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b64      	cmp	r3, #100	@ 0x64
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e103      	b.n	8005150 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f48:	4b75      	ldr	r3, [pc, #468]	@ (8005120 <HAL_RCC_OscConfig+0x4c8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0f0      	beq.n	8004f36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d106      	bne.n	8004f6a <HAL_RCC_OscConfig+0x312>
 8004f5c:	4b6f      	ldr	r3, [pc, #444]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	4a6e      	ldr	r2, [pc, #440]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004f62:	f043 0301 	orr.w	r3, r3, #1
 8004f66:	6213      	str	r3, [r2, #32]
 8004f68:	e02d      	b.n	8004fc6 <HAL_RCC_OscConfig+0x36e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10c      	bne.n	8004f8c <HAL_RCC_OscConfig+0x334>
 8004f72:	4b6a      	ldr	r3, [pc, #424]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	4a69      	ldr	r2, [pc, #420]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004f78:	f023 0301 	bic.w	r3, r3, #1
 8004f7c:	6213      	str	r3, [r2, #32]
 8004f7e:	4b67      	ldr	r3, [pc, #412]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	4a66      	ldr	r2, [pc, #408]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004f84:	f023 0304 	bic.w	r3, r3, #4
 8004f88:	6213      	str	r3, [r2, #32]
 8004f8a:	e01c      	b.n	8004fc6 <HAL_RCC_OscConfig+0x36e>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	2b05      	cmp	r3, #5
 8004f92:	d10c      	bne.n	8004fae <HAL_RCC_OscConfig+0x356>
 8004f94:	4b61      	ldr	r3, [pc, #388]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	4a60      	ldr	r2, [pc, #384]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004f9a:	f043 0304 	orr.w	r3, r3, #4
 8004f9e:	6213      	str	r3, [r2, #32]
 8004fa0:	4b5e      	ldr	r3, [pc, #376]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	4a5d      	ldr	r2, [pc, #372]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004fa6:	f043 0301 	orr.w	r3, r3, #1
 8004faa:	6213      	str	r3, [r2, #32]
 8004fac:	e00b      	b.n	8004fc6 <HAL_RCC_OscConfig+0x36e>
 8004fae:	4b5b      	ldr	r3, [pc, #364]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	4a5a      	ldr	r2, [pc, #360]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004fb4:	f023 0301 	bic.w	r3, r3, #1
 8004fb8:	6213      	str	r3, [r2, #32]
 8004fba:	4b58      	ldr	r3, [pc, #352]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	4a57      	ldr	r2, [pc, #348]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004fc0:	f023 0304 	bic.w	r3, r3, #4
 8004fc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d015      	beq.n	8004ffa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fce:	f7fd fc6b 	bl	80028a8 <HAL_GetTick>
 8004fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd4:	e00a      	b.n	8004fec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd6:	f7fd fc67 	bl	80028a8 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e0b1      	b.n	8005150 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fec:	4b4b      	ldr	r3, [pc, #300]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0ee      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x37e>
 8004ff8:	e014      	b.n	8005024 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ffa:	f7fd fc55 	bl	80028a8 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005000:	e00a      	b.n	8005018 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005002:	f7fd fc51 	bl	80028a8 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005010:	4293      	cmp	r3, r2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e09b      	b.n	8005150 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005018:	4b40      	ldr	r3, [pc, #256]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1ee      	bne.n	8005002 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005024:	7dfb      	ldrb	r3, [r7, #23]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d105      	bne.n	8005036 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800502a:	4b3c      	ldr	r3, [pc, #240]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	4a3b      	ldr	r2, [pc, #236]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8005030:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005034:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 8087 	beq.w	800514e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005040:	4b36      	ldr	r3, [pc, #216]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f003 030c 	and.w	r3, r3, #12
 8005048:	2b08      	cmp	r3, #8
 800504a:	d061      	beq.n	8005110 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d146      	bne.n	80050e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005054:	4b33      	ldr	r3, [pc, #204]	@ (8005124 <HAL_RCC_OscConfig+0x4cc>)
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505a:	f7fd fc25 	bl	80028a8 <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005060:	e008      	b.n	8005074 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005062:	f7fd fc21 	bl	80028a8 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e06d      	b.n	8005150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005074:	4b29      	ldr	r3, [pc, #164]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1f0      	bne.n	8005062 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005088:	d108      	bne.n	800509c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800508a:	4b24      	ldr	r3, [pc, #144]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	4921      	ldr	r1, [pc, #132]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8005098:	4313      	orrs	r3, r2
 800509a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800509c:	4b1f      	ldr	r3, [pc, #124]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a19      	ldr	r1, [r3, #32]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ac:	430b      	orrs	r3, r1
 80050ae:	491b      	ldr	r1, [pc, #108]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005124 <HAL_RCC_OscConfig+0x4cc>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ba:	f7fd fbf5 	bl	80028a8 <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c2:	f7fd fbf1 	bl	80028a8 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e03d      	b.n	8005150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050d4:	4b11      	ldr	r3, [pc, #68]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0f0      	beq.n	80050c2 <HAL_RCC_OscConfig+0x46a>
 80050e0:	e035      	b.n	800514e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e2:	4b10      	ldr	r3, [pc, #64]	@ (8005124 <HAL_RCC_OscConfig+0x4cc>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e8:	f7fd fbde 	bl	80028a8 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f0:	f7fd fbda 	bl	80028a8 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e026      	b.n	8005150 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005102:	4b06      	ldr	r3, [pc, #24]	@ (800511c <HAL_RCC_OscConfig+0x4c4>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f0      	bne.n	80050f0 <HAL_RCC_OscConfig+0x498>
 800510e:	e01e      	b.n	800514e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d107      	bne.n	8005128 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e019      	b.n	8005150 <HAL_RCC_OscConfig+0x4f8>
 800511c:	40021000 	.word	0x40021000
 8005120:	40007000 	.word	0x40007000
 8005124:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005128:	4b0b      	ldr	r3, [pc, #44]	@ (8005158 <HAL_RCC_OscConfig+0x500>)
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	429a      	cmp	r2, r3
 800513a:	d106      	bne.n	800514a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005146:	429a      	cmp	r2, r3
 8005148:	d001      	beq.n	800514e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40021000 	.word	0x40021000

0800515c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0d0      	b.n	8005312 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005170:	4b6a      	ldr	r3, [pc, #424]	@ (800531c <HAL_RCC_ClockConfig+0x1c0>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d910      	bls.n	80051a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517e:	4b67      	ldr	r3, [pc, #412]	@ (800531c <HAL_RCC_ClockConfig+0x1c0>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f023 0207 	bic.w	r2, r3, #7
 8005186:	4965      	ldr	r1, [pc, #404]	@ (800531c <HAL_RCC_ClockConfig+0x1c0>)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	4313      	orrs	r3, r2
 800518c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800518e:	4b63      	ldr	r3, [pc, #396]	@ (800531c <HAL_RCC_ClockConfig+0x1c0>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d001      	beq.n	80051a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0b8      	b.n	8005312 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d020      	beq.n	80051ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0304 	and.w	r3, r3, #4
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051b8:	4b59      	ldr	r3, [pc, #356]	@ (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	4a58      	ldr	r2, [pc, #352]	@ (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 80051be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80051c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051d0:	4b53      	ldr	r3, [pc, #332]	@ (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	4a52      	ldr	r2, [pc, #328]	@ (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 80051d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80051da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051dc:	4b50      	ldr	r3, [pc, #320]	@ (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	494d      	ldr	r1, [pc, #308]	@ (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d040      	beq.n	800527c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d107      	bne.n	8005212 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005202:	4b47      	ldr	r3, [pc, #284]	@ (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d115      	bne.n	800523a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e07f      	b.n	8005312 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800521a:	4b41      	ldr	r3, [pc, #260]	@ (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e073      	b.n	8005312 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522a:	4b3d      	ldr	r3, [pc, #244]	@ (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e06b      	b.n	8005312 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800523a:	4b39      	ldr	r3, [pc, #228]	@ (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f023 0203 	bic.w	r2, r3, #3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	4936      	ldr	r1, [pc, #216]	@ (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 8005248:	4313      	orrs	r3, r2
 800524a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800524c:	f7fd fb2c 	bl	80028a8 <HAL_GetTick>
 8005250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005252:	e00a      	b.n	800526a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005254:	f7fd fb28 	bl	80028a8 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005262:	4293      	cmp	r3, r2
 8005264:	d901      	bls.n	800526a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e053      	b.n	8005312 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800526a:	4b2d      	ldr	r3, [pc, #180]	@ (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f003 020c 	and.w	r2, r3, #12
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	429a      	cmp	r2, r3
 800527a:	d1eb      	bne.n	8005254 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800527c:	4b27      	ldr	r3, [pc, #156]	@ (800531c <HAL_RCC_ClockConfig+0x1c0>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d210      	bcs.n	80052ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528a:	4b24      	ldr	r3, [pc, #144]	@ (800531c <HAL_RCC_ClockConfig+0x1c0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f023 0207 	bic.w	r2, r3, #7
 8005292:	4922      	ldr	r1, [pc, #136]	@ (800531c <HAL_RCC_ClockConfig+0x1c0>)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	4313      	orrs	r3, r2
 8005298:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800529a:	4b20      	ldr	r3, [pc, #128]	@ (800531c <HAL_RCC_ClockConfig+0x1c0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	683a      	ldr	r2, [r7, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d001      	beq.n	80052ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e032      	b.n	8005312 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d008      	beq.n	80052ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052b8:	4b19      	ldr	r3, [pc, #100]	@ (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	4916      	ldr	r1, [pc, #88]	@ (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052d6:	4b12      	ldr	r3, [pc, #72]	@ (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	490e      	ldr	r1, [pc, #56]	@ (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052ea:	f000 f821 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 80052ee:	4602      	mov	r2, r0
 80052f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005320 <HAL_RCC_ClockConfig+0x1c4>)
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	091b      	lsrs	r3, r3, #4
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	490a      	ldr	r1, [pc, #40]	@ (8005324 <HAL_RCC_ClockConfig+0x1c8>)
 80052fc:	5ccb      	ldrb	r3, [r1, r3]
 80052fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005302:	4a09      	ldr	r2, [pc, #36]	@ (8005328 <HAL_RCC_ClockConfig+0x1cc>)
 8005304:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005306:	4b09      	ldr	r3, [pc, #36]	@ (800532c <HAL_RCC_ClockConfig+0x1d0>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f7fd fa8a 	bl	8002824 <HAL_InitTick>

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	40022000 	.word	0x40022000
 8005320:	40021000 	.word	0x40021000
 8005324:	0800d2c4 	.word	0x0800d2c4
 8005328:	20000004 	.word	0x20000004
 800532c:	20000008 	.word	0x20000008

08005330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
 800533a:	2300      	movs	r3, #0
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	2300      	movs	r3, #0
 8005344:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800534a:	4b1e      	ldr	r3, [pc, #120]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f003 030c 	and.w	r3, r3, #12
 8005356:	2b04      	cmp	r3, #4
 8005358:	d002      	beq.n	8005360 <HAL_RCC_GetSysClockFreq+0x30>
 800535a:	2b08      	cmp	r3, #8
 800535c:	d003      	beq.n	8005366 <HAL_RCC_GetSysClockFreq+0x36>
 800535e:	e027      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005360:	4b19      	ldr	r3, [pc, #100]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005362:	613b      	str	r3, [r7, #16]
      break;
 8005364:	e027      	b.n	80053b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	0c9b      	lsrs	r3, r3, #18
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	4a17      	ldr	r2, [pc, #92]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005370:	5cd3      	ldrb	r3, [r2, r3]
 8005372:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d010      	beq.n	80053a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800537e:	4b11      	ldr	r3, [pc, #68]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	0c5b      	lsrs	r3, r3, #17
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	4a11      	ldr	r2, [pc, #68]	@ (80053d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800538a:	5cd3      	ldrb	r3, [r2, r3]
 800538c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a0d      	ldr	r2, [pc, #52]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005392:	fb03 f202 	mul.w	r2, r3, r2
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	fbb2 f3f3 	udiv	r3, r2, r3
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	e004      	b.n	80053aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a0c      	ldr	r2, [pc, #48]	@ (80053d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80053a4:	fb02 f303 	mul.w	r3, r2, r3
 80053a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	613b      	str	r3, [r7, #16]
      break;
 80053ae:	e002      	b.n	80053b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053b0:	4b05      	ldr	r3, [pc, #20]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80053b2:	613b      	str	r3, [r7, #16]
      break;
 80053b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053b6:	693b      	ldr	r3, [r7, #16]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	371c      	adds	r7, #28
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40021000 	.word	0x40021000
 80053c8:	007a1200 	.word	0x007a1200
 80053cc:	0800d2dc 	.word	0x0800d2dc
 80053d0:	0800d2ec 	.word	0x0800d2ec
 80053d4:	003d0900 	.word	0x003d0900

080053d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053dc:	4b02      	ldr	r3, [pc, #8]	@ (80053e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80053de:	681b      	ldr	r3, [r3, #0]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr
 80053e8:	20000004 	.word	0x20000004

080053ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053f0:	f7ff fff2 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 80053f4:	4602      	mov	r2, r0
 80053f6:	4b05      	ldr	r3, [pc, #20]	@ (800540c <HAL_RCC_GetPCLK1Freq+0x20>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	0a1b      	lsrs	r3, r3, #8
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	4903      	ldr	r1, [pc, #12]	@ (8005410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005402:	5ccb      	ldrb	r3, [r1, r3]
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005408:	4618      	mov	r0, r3
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40021000 	.word	0x40021000
 8005410:	0800d2d4 	.word	0x0800d2d4

08005414 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800541c:	4b0a      	ldr	r3, [pc, #40]	@ (8005448 <RCC_Delay+0x34>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a0a      	ldr	r2, [pc, #40]	@ (800544c <RCC_Delay+0x38>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	0a5b      	lsrs	r3, r3, #9
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	fb02 f303 	mul.w	r3, r2, r3
 800542e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005430:	bf00      	nop
  }
  while (Delay --);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1e5a      	subs	r2, r3, #1
 8005436:	60fa      	str	r2, [r7, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1f9      	bne.n	8005430 <RCC_Delay+0x1c>
}
 800543c:	bf00      	nop
 800543e:	bf00      	nop
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr
 8005448:	20000004 	.word	0x20000004
 800544c:	10624dd3 	.word	0x10624dd3

08005450 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	2300      	movs	r3, #0
 800545e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d07d      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800546c:	2300      	movs	r3, #0
 800546e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005470:	4b4f      	ldr	r3, [pc, #316]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10d      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800547c:	4b4c      	ldr	r3, [pc, #304]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	4a4b      	ldr	r2, [pc, #300]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005486:	61d3      	str	r3, [r2, #28]
 8005488:	4b49      	ldr	r3, [pc, #292]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005494:	2301      	movs	r3, #1
 8005496:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005498:	4b46      	ldr	r3, [pc, #280]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d118      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054a4:	4b43      	ldr	r3, [pc, #268]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a42      	ldr	r2, [pc, #264]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054b0:	f7fd f9fa 	bl	80028a8 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b6:	e008      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b8:	f7fd f9f6 	bl	80028a8 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b64      	cmp	r3, #100	@ 0x64
 80054c4:	d901      	bls.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e06d      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ca:	4b3a      	ldr	r3, [pc, #232]	@ (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0f0      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054d6:	4b36      	ldr	r3, [pc, #216]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d02e      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d027      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054f4:	4b2e      	ldr	r3, [pc, #184]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054fe:	4b2e      	ldr	r3, [pc, #184]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005500:	2201      	movs	r2, #1
 8005502:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005504:	4b2c      	ldr	r3, [pc, #176]	@ (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800550a:	4a29      	ldr	r2, [pc, #164]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d014      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551a:	f7fd f9c5 	bl	80028a8 <HAL_GetTick>
 800551e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005520:	e00a      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005522:	f7fd f9c1 	bl	80028a8 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005530:	4293      	cmp	r3, r2
 8005532:	d901      	bls.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e036      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005538:	4b1d      	ldr	r3, [pc, #116]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0ee      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005544:	4b1a      	ldr	r3, [pc, #104]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	4917      	ldr	r1, [pc, #92]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005552:	4313      	orrs	r3, r2
 8005554:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005556:	7dfb      	ldrb	r3, [r7, #23]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d105      	bne.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800555c:	4b14      	ldr	r3, [pc, #80]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	4a13      	ldr	r2, [pc, #76]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005562:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005566:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d008      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005574:	4b0e      	ldr	r3, [pc, #56]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	490b      	ldr	r1, [pc, #44]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005582:	4313      	orrs	r3, r2
 8005584:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0310 	and.w	r3, r3, #16
 800558e:	2b00      	cmp	r3, #0
 8005590:	d008      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005592:	4b07      	ldr	r3, [pc, #28]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	4904      	ldr	r1, [pc, #16]	@ (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	40021000 	.word	0x40021000
 80055b4:	40007000 	.word	0x40007000
 80055b8:	42420440 	.word	0x42420440

080055bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e076      	b.n	80056bc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d108      	bne.n	80055e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055de:	d009      	beq.n	80055f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	61da      	str	r2, [r3, #28]
 80055e6:	e005      	b.n	80055f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d106      	bne.n	8005614 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fc ff0c 	bl	800242c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800562a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f003 0302 	and.w	r3, r3, #2
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005678:	ea42 0103 	orr.w	r1, r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005680:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	0c1a      	lsrs	r2, r3, #16
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f002 0204 	and.w	r2, r2, #4
 800569a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69da      	ldr	r2, [r3, #28]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	4613      	mov	r3, r2
 80056d2:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056d4:	f7fd f8e8 	bl	80028a8 <HAL_GetTick>
 80056d8:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80056da:	88fb      	ldrh	r3, [r7, #6]
 80056dc:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d001      	beq.n	80056ee <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80056ea:	2302      	movs	r3, #2
 80056ec:	e12a      	b.n	8005944 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_SPI_Transmit+0x36>
 80056f4:	88fb      	ldrh	r3, [r7, #6]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e122      	b.n	8005944 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_SPI_Transmit+0x48>
 8005708:	2302      	movs	r3, #2
 800570a:	e11b      	b.n	8005944 <HAL_SPI_Transmit+0x280>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2203      	movs	r2, #3
 8005718:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	88fa      	ldrh	r2, [r7, #6]
 800572c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	88fa      	ldrh	r2, [r7, #6]
 8005732:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800575a:	d10f      	bne.n	800577c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800576a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800577a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005786:	2b40      	cmp	r3, #64	@ 0x40
 8005788:	d007      	beq.n	800579a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005798:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057a2:	d152      	bne.n	800584a <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_SPI_Transmit+0xee>
 80057ac:	8b7b      	ldrh	r3, [r7, #26]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d145      	bne.n	800583e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b6:	881a      	ldrh	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c2:	1c9a      	adds	r2, r3, #2
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057d6:	e032      	b.n	800583e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d112      	bne.n	800580c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ea:	881a      	ldrh	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f6:	1c9a      	adds	r2, r3, #2
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	86da      	strh	r2, [r3, #54]	@ 0x36
 800580a:	e018      	b.n	800583e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800580c:	f7fd f84c 	bl	80028a8 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d803      	bhi.n	8005824 <HAL_SPI_Transmit+0x160>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d102      	bne.n	800582a <HAL_SPI_Transmit+0x166>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e082      	b.n	8005944 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005842:	b29b      	uxth	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1c7      	bne.n	80057d8 <HAL_SPI_Transmit+0x114>
 8005848:	e053      	b.n	80058f2 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <HAL_SPI_Transmit+0x194>
 8005852:	8b7b      	ldrh	r3, [r7, #26]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d147      	bne.n	80058e8 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	330c      	adds	r3, #12
 8005862:	7812      	ldrb	r2, [r2, #0]
 8005864:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800587e:	e033      	b.n	80058e8 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b02      	cmp	r3, #2
 800588c:	d113      	bne.n	80058b6 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	330c      	adds	r3, #12
 8005898:	7812      	ldrb	r2, [r2, #0]
 800589a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80058b4:	e018      	b.n	80058e8 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058b6:	f7fc fff7 	bl	80028a8 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d803      	bhi.n	80058ce <HAL_SPI_Transmit+0x20a>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d102      	bne.n	80058d4 <HAL_SPI_Transmit+0x210>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d109      	bne.n	80058e8 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e02d      	b.n	8005944 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1c6      	bne.n	8005880 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058f2:	69fa      	ldr	r2, [r7, #28]
 80058f4:	6839      	ldr	r1, [r7, #0]
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 fa5a 	bl	8005db0 <SPI_EndRxTxTransaction>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2220      	movs	r2, #32
 8005906:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10a      	bne.n	8005926 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005910:	2300      	movs	r3, #0
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005942:	2300      	movs	r3, #0
  }
}
 8005944:	4618      	mov	r0, r3
 8005946:	3720      	adds	r7, #32
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08a      	sub	sp, #40	@ 0x28
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
 8005958:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800595a:	2301      	movs	r3, #1
 800595c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800595e:	f7fc ffa3 	bl	80028a8 <HAL_GetTick>
 8005962:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800596a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005972:	887b      	ldrh	r3, [r7, #2]
 8005974:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005976:	7ffb      	ldrb	r3, [r7, #31]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d00c      	beq.n	8005996 <HAL_SPI_TransmitReceive+0x4a>
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005982:	d106      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d102      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x46>
 800598c:	7ffb      	ldrb	r3, [r7, #31]
 800598e:	2b04      	cmp	r3, #4
 8005990:	d001      	beq.n	8005996 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005992:	2302      	movs	r3, #2
 8005994:	e17f      	b.n	8005c96 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <HAL_SPI_TransmitReceive+0x5c>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_SPI_TransmitReceive+0x5c>
 80059a2:	887b      	ldrh	r3, [r7, #2]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e174      	b.n	8005c96 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d101      	bne.n	80059ba <HAL_SPI_TransmitReceive+0x6e>
 80059b6:	2302      	movs	r3, #2
 80059b8:	e16d      	b.n	8005c96 <HAL_SPI_TransmitReceive+0x34a>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d003      	beq.n	80059d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2205      	movs	r2, #5
 80059d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	887a      	ldrh	r2, [r7, #2]
 80059e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	887a      	ldrh	r2, [r7, #2]
 80059ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	887a      	ldrh	r2, [r7, #2]
 80059f8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	887a      	ldrh	r2, [r7, #2]
 80059fe:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a16:	2b40      	cmp	r3, #64	@ 0x40
 8005a18:	d007      	beq.n	8005a2a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a32:	d17e      	bne.n	8005b32 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <HAL_SPI_TransmitReceive+0xf6>
 8005a3c:	8afb      	ldrh	r3, [r7, #22]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d16c      	bne.n	8005b1c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a46:	881a      	ldrh	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a52:	1c9a      	adds	r2, r3, #2
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a66:	e059      	b.n	8005b1c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d11b      	bne.n	8005aae <HAL_SPI_TransmitReceive+0x162>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d016      	beq.n	8005aae <HAL_SPI_TransmitReceive+0x162>
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d113      	bne.n	8005aae <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8a:	881a      	ldrh	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a96:	1c9a      	adds	r2, r3, #2
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d119      	bne.n	8005af0 <HAL_SPI_TransmitReceive+0x1a4>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d014      	beq.n	8005af0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad0:	b292      	uxth	r2, r2
 8005ad2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad8:	1c9a      	adds	r2, r3, #2
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005aec:	2301      	movs	r3, #1
 8005aee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005af0:	f7fc feda 	bl	80028a8 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d80d      	bhi.n	8005b1c <HAL_SPI_TransmitReceive+0x1d0>
 8005b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b06:	d009      	beq.n	8005b1c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e0bc      	b.n	8005c96 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1a0      	bne.n	8005a68 <HAL_SPI_TransmitReceive+0x11c>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d19b      	bne.n	8005a68 <HAL_SPI_TransmitReceive+0x11c>
 8005b30:	e082      	b.n	8005c38 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d002      	beq.n	8005b40 <HAL_SPI_TransmitReceive+0x1f4>
 8005b3a:	8afb      	ldrh	r3, [r7, #22]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d171      	bne.n	8005c24 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	330c      	adds	r3, #12
 8005b4a:	7812      	ldrb	r2, [r2, #0]
 8005b4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b66:	e05d      	b.n	8005c24 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d11c      	bne.n	8005bb0 <HAL_SPI_TransmitReceive+0x264>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d017      	beq.n	8005bb0 <HAL_SPI_TransmitReceive+0x264>
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d114      	bne.n	8005bb0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	330c      	adds	r3, #12
 8005b90:	7812      	ldrb	r2, [r2, #0]
 8005b92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d119      	bne.n	8005bf2 <HAL_SPI_TransmitReceive+0x2a6>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d014      	beq.n	8005bf2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bf2:	f7fc fe59 	bl	80028a8 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d803      	bhi.n	8005c0a <HAL_SPI_TransmitReceive+0x2be>
 8005c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c08:	d102      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x2c4>
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d109      	bne.n	8005c24 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e038      	b.n	8005c96 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d19c      	bne.n	8005b68 <HAL_SPI_TransmitReceive+0x21c>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d197      	bne.n	8005b68 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c38:	6a3a      	ldr	r2, [r7, #32]
 8005c3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f8b7 	bl	8005db0 <SPI_EndRxTxTransaction>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d008      	beq.n	8005c5a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e01d      	b.n	8005c96 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10a      	bne.n	8005c78 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c62:	2300      	movs	r3, #0
 8005c64:	613b      	str	r3, [r7, #16]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	613b      	str	r3, [r7, #16]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	613b      	str	r3, [r7, #16]
 8005c76:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e000      	b.n	8005c96 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005c94:	2300      	movs	r3, #0
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3728      	adds	r7, #40	@ 0x28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	4613      	mov	r3, r2
 8005cae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cb0:	f7fc fdfa 	bl	80028a8 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb8:	1a9b      	subs	r3, r3, r2
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005cc0:	f7fc fdf2 	bl	80028a8 <HAL_GetTick>
 8005cc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cc6:	4b39      	ldr	r3, [pc, #228]	@ (8005dac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	015b      	lsls	r3, r3, #5
 8005ccc:	0d1b      	lsrs	r3, r3, #20
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	fb02 f303 	mul.w	r3, r2, r3
 8005cd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cd6:	e054      	b.n	8005d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cde:	d050      	beq.n	8005d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ce0:	f7fc fde2 	bl	80028a8 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d902      	bls.n	8005cf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d13d      	bne.n	8005d72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d0e:	d111      	bne.n	8005d34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d18:	d004      	beq.n	8005d24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d22:	d107      	bne.n	8005d34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d3c:	d10f      	bne.n	8005d5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e017      	b.n	8005da2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	bf0c      	ite	eq
 8005d92:	2301      	moveq	r3, #1
 8005d94:	2300      	movne	r3, #0
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	461a      	mov	r2, r3
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d19b      	bne.n	8005cd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3720      	adds	r7, #32
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000004 	.word	0x20000004

08005db0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af02      	add	r7, sp, #8
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	2102      	movs	r1, #2
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f7ff ff6a 	bl	8005ca0 <SPI_WaitFlagStateUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d007      	beq.n	8005de2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd6:	f043 0220 	orr.w	r2, r3, #32
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e013      	b.n	8005e0a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2200      	movs	r2, #0
 8005dea:	2180      	movs	r1, #128	@ 0x80
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f7ff ff57 	bl	8005ca0 <SPI_WaitFlagStateUntilTimeout>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfc:	f043 0220 	orr.w	r2, r3, #32
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e000      	b.n	8005e0a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e041      	b.n	8005ea8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d106      	bne.n	8005e3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7fc fb43 	bl	80024c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4610      	mov	r0, r2
 8005e52:	f000 fa5b 	bl	800630c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d001      	beq.n	8005ec8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e03a      	b.n	8005f3e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a18      	ldr	r2, [pc, #96]	@ (8005f48 <HAL_TIM_Base_Start_IT+0x98>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d00e      	beq.n	8005f08 <HAL_TIM_Base_Start_IT+0x58>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef2:	d009      	beq.n	8005f08 <HAL_TIM_Base_Start_IT+0x58>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a14      	ldr	r2, [pc, #80]	@ (8005f4c <HAL_TIM_Base_Start_IT+0x9c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d004      	beq.n	8005f08 <HAL_TIM_Base_Start_IT+0x58>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a13      	ldr	r2, [pc, #76]	@ (8005f50 <HAL_TIM_Base_Start_IT+0xa0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d111      	bne.n	8005f2c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b06      	cmp	r3, #6
 8005f18:	d010      	beq.n	8005f3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0201 	orr.w	r2, r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2a:	e007      	b.n	8005f3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0201 	orr.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bc80      	pop	{r7}
 8005f46:	4770      	bx	lr
 8005f48:	40012c00 	.word	0x40012c00
 8005f4c:	40000400 	.word	0x40000400
 8005f50:	40000800 	.word	0x40000800

08005f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d020      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01b      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f06f 0202 	mvn.w	r2, #2
 8005f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f998 	bl	80062d4 <HAL_TIM_IC_CaptureCallback>
 8005fa4:	e005      	b.n	8005fb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f98b 	bl	80062c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f99a 	bl	80062e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d020      	beq.n	8006004 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01b      	beq.n	8006004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0204 	mvn.w	r2, #4
 8005fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f972 	bl	80062d4 <HAL_TIM_IC_CaptureCallback>
 8005ff0:	e005      	b.n	8005ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f965 	bl	80062c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f974 	bl	80062e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b00      	cmp	r3, #0
 800600c:	d020      	beq.n	8006050 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f003 0308 	and.w	r3, r3, #8
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01b      	beq.n	8006050 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0208 	mvn.w	r2, #8
 8006020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2204      	movs	r2, #4
 8006026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f94c 	bl	80062d4 <HAL_TIM_IC_CaptureCallback>
 800603c:	e005      	b.n	800604a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f93f 	bl	80062c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f94e 	bl	80062e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	2b00      	cmp	r3, #0
 8006058:	d020      	beq.n	800609c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f003 0310 	and.w	r3, r3, #16
 8006060:	2b00      	cmp	r3, #0
 8006062:	d01b      	beq.n	800609c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0210 	mvn.w	r2, #16
 800606c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2208      	movs	r2, #8
 8006072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f926 	bl	80062d4 <HAL_TIM_IC_CaptureCallback>
 8006088:	e005      	b.n	8006096 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f919 	bl	80062c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f928 	bl	80062e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00c      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d007      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0201 	mvn.w	r2, #1
 80060b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fb fd50 	bl	8001b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00c      	beq.n	80060e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d007      	beq.n	80060e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80060dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fa7f 	bl	80065e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00c      	beq.n	8006108 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d007      	beq.n	8006108 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f8f8 	bl	80062f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00c      	beq.n	800612c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f003 0320 	and.w	r3, r3, #32
 8006118:	2b00      	cmp	r3, #0
 800611a:	d007      	beq.n	800612c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0220 	mvn.w	r2, #32
 8006124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fa52 	bl	80065d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800612c:	bf00      	nop
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_TIM_ConfigClockSource+0x1c>
 800614c:	2302      	movs	r3, #2
 800614e:	e0b4      	b.n	80062ba <HAL_TIM_ConfigClockSource+0x186>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2202      	movs	r2, #2
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800616e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006176:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006188:	d03e      	beq.n	8006208 <HAL_TIM_ConfigClockSource+0xd4>
 800618a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800618e:	f200 8087 	bhi.w	80062a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006196:	f000 8086 	beq.w	80062a6 <HAL_TIM_ConfigClockSource+0x172>
 800619a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800619e:	d87f      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x16c>
 80061a0:	2b70      	cmp	r3, #112	@ 0x70
 80061a2:	d01a      	beq.n	80061da <HAL_TIM_ConfigClockSource+0xa6>
 80061a4:	2b70      	cmp	r3, #112	@ 0x70
 80061a6:	d87b      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x16c>
 80061a8:	2b60      	cmp	r3, #96	@ 0x60
 80061aa:	d050      	beq.n	800624e <HAL_TIM_ConfigClockSource+0x11a>
 80061ac:	2b60      	cmp	r3, #96	@ 0x60
 80061ae:	d877      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x16c>
 80061b0:	2b50      	cmp	r3, #80	@ 0x50
 80061b2:	d03c      	beq.n	800622e <HAL_TIM_ConfigClockSource+0xfa>
 80061b4:	2b50      	cmp	r3, #80	@ 0x50
 80061b6:	d873      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x16c>
 80061b8:	2b40      	cmp	r3, #64	@ 0x40
 80061ba:	d058      	beq.n	800626e <HAL_TIM_ConfigClockSource+0x13a>
 80061bc:	2b40      	cmp	r3, #64	@ 0x40
 80061be:	d86f      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x16c>
 80061c0:	2b30      	cmp	r3, #48	@ 0x30
 80061c2:	d064      	beq.n	800628e <HAL_TIM_ConfigClockSource+0x15a>
 80061c4:	2b30      	cmp	r3, #48	@ 0x30
 80061c6:	d86b      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x16c>
 80061c8:	2b20      	cmp	r3, #32
 80061ca:	d060      	beq.n	800628e <HAL_TIM_ConfigClockSource+0x15a>
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	d867      	bhi.n	80062a0 <HAL_TIM_ConfigClockSource+0x16c>
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d05c      	beq.n	800628e <HAL_TIM_ConfigClockSource+0x15a>
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d05a      	beq.n	800628e <HAL_TIM_ConfigClockSource+0x15a>
 80061d8:	e062      	b.n	80062a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061ea:	f000 f974 	bl	80064d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	609a      	str	r2, [r3, #8]
      break;
 8006206:	e04f      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006218:	f000 f95d 	bl	80064d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800622a:	609a      	str	r2, [r3, #8]
      break;
 800622c:	e03c      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800623a:	461a      	mov	r2, r3
 800623c:	f000 f8d4 	bl	80063e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2150      	movs	r1, #80	@ 0x50
 8006246:	4618      	mov	r0, r3
 8006248:	f000 f92b 	bl	80064a2 <TIM_ITRx_SetConfig>
      break;
 800624c:	e02c      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800625a:	461a      	mov	r2, r3
 800625c:	f000 f8f2 	bl	8006444 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2160      	movs	r1, #96	@ 0x60
 8006266:	4618      	mov	r0, r3
 8006268:	f000 f91b 	bl	80064a2 <TIM_ITRx_SetConfig>
      break;
 800626c:	e01c      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800627a:	461a      	mov	r2, r3
 800627c:	f000 f8b4 	bl	80063e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2140      	movs	r1, #64	@ 0x40
 8006286:	4618      	mov	r0, r3
 8006288:	f000 f90b 	bl	80064a2 <TIM_ITRx_SetConfig>
      break;
 800628c:	e00c      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4619      	mov	r1, r3
 8006298:	4610      	mov	r0, r2
 800629a:	f000 f902 	bl	80064a2 <TIM_ITRx_SetConfig>
      break;
 800629e:	e003      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	73fb      	strb	r3, [r7, #15]
      break;
 80062a4:	e000      	b.n	80062a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80062a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bc80      	pop	{r7}
 80062d2:	4770      	bx	lr

080062d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr

080062e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr

080062f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	bc80      	pop	{r7}
 8006308:	4770      	bx	lr
	...

0800630c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a2f      	ldr	r2, [pc, #188]	@ (80063dc <TIM_Base_SetConfig+0xd0>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00b      	beq.n	800633c <TIM_Base_SetConfig+0x30>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800632a:	d007      	beq.n	800633c <TIM_Base_SetConfig+0x30>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a2c      	ldr	r2, [pc, #176]	@ (80063e0 <TIM_Base_SetConfig+0xd4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d003      	beq.n	800633c <TIM_Base_SetConfig+0x30>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a2b      	ldr	r2, [pc, #172]	@ (80063e4 <TIM_Base_SetConfig+0xd8>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d108      	bne.n	800634e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a22      	ldr	r2, [pc, #136]	@ (80063dc <TIM_Base_SetConfig+0xd0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d00b      	beq.n	800636e <TIM_Base_SetConfig+0x62>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800635c:	d007      	beq.n	800636e <TIM_Base_SetConfig+0x62>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a1f      	ldr	r2, [pc, #124]	@ (80063e0 <TIM_Base_SetConfig+0xd4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d003      	beq.n	800636e <TIM_Base_SetConfig+0x62>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a1e      	ldr	r2, [pc, #120]	@ (80063e4 <TIM_Base_SetConfig+0xd8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d108      	bne.n	8006380 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4313      	orrs	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a0d      	ldr	r2, [pc, #52]	@ (80063dc <TIM_Base_SetConfig+0xd0>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d103      	bne.n	80063b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	691a      	ldr	r2, [r3, #16]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d005      	beq.n	80063d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f023 0201 	bic.w	r2, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	611a      	str	r2, [r3, #16]
  }
}
 80063d2:	bf00      	nop
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bc80      	pop	{r7}
 80063da:	4770      	bx	lr
 80063dc:	40012c00 	.word	0x40012c00
 80063e0:	40000400 	.word	0x40000400
 80063e4:	40000800 	.word	0x40000800

080063e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	f023 0201 	bic.w	r2, r3, #1
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f023 030a 	bic.w	r3, r3, #10
 8006424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	621a      	str	r2, [r3, #32]
}
 800643a:	bf00      	nop
 800643c:	371c      	adds	r7, #28
 800643e:	46bd      	mov	sp, r7
 8006440:	bc80      	pop	{r7}
 8006442:	4770      	bx	lr

08006444 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	f023 0210 	bic.w	r2, r3, #16
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800646e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	031b      	lsls	r3, r3, #12
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	4313      	orrs	r3, r2
 8006478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006480:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	621a      	str	r2, [r3, #32]
}
 8006498:	bf00      	nop
 800649a:	371c      	adds	r7, #28
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr

080064a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b085      	sub	sp, #20
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4313      	orrs	r3, r2
 80064c0:	f043 0307 	orr.w	r3, r3, #7
 80064c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	609a      	str	r2, [r3, #8]
}
 80064cc:	bf00      	nop
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bc80      	pop	{r7}
 80064d4:	4770      	bx	lr

080064d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b087      	sub	sp, #28
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
 80064e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	021a      	lsls	r2, r3, #8
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	431a      	orrs	r2, r3
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	609a      	str	r2, [r3, #8]
}
 800650a:	bf00      	nop
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr

08006514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006524:	2b01      	cmp	r3, #1
 8006526:	d101      	bne.n	800652c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006528:	2302      	movs	r3, #2
 800652a:	e046      	b.n	80065ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a16      	ldr	r2, [pc, #88]	@ (80065c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00e      	beq.n	800658e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006578:	d009      	beq.n	800658e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a12      	ldr	r2, [pc, #72]	@ (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d004      	beq.n	800658e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a10      	ldr	r2, [pc, #64]	@ (80065cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d10c      	bne.n	80065a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	4313      	orrs	r3, r2
 800659e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	bc80      	pop	{r7}
 80065c2:	4770      	bx	lr
 80065c4:	40012c00 	.word	0x40012c00
 80065c8:	40000400 	.word	0x40000400
 80065cc:	40000800 	.word	0x40000800

080065d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	bc80      	pop	{r7}
 80065e0:	4770      	bx	lr

080065e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bc80      	pop	{r7}
 80065f2:	4770      	bx	lr

080065f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80065f8:	4904      	ldr	r1, [pc, #16]	@ (800660c <MX_FATFS_Init+0x18>)
 80065fa:	4805      	ldr	r0, [pc, #20]	@ (8006610 <MX_FATFS_Init+0x1c>)
 80065fc:	f003 ff10 	bl	800a420 <FATFS_LinkDriver>
 8006600:	4603      	mov	r3, r0
 8006602:	461a      	mov	r2, r3
 8006604:	4b03      	ldr	r3, [pc, #12]	@ (8006614 <MX_FATFS_Init+0x20>)
 8006606:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006608:	bf00      	nop
 800660a:	bd80      	pop	{r7, pc}
 800660c:	20002568 	.word	0x20002568
 8006610:	20000010 	.word	0x20000010
 8006614:	20002564 	.word	0x20002564

08006618 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006618:	b480      	push	{r7}
 800661a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800661c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800661e:	4618      	mov	r0, r3
 8006620:	46bd      	mov	sp, r7
 8006622:	bc80      	pop	{r7}
 8006624:	4770      	bx	lr

08006626 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b082      	sub	sp, #8
 800662a:	af00      	add	r7, sp, #0
 800662c:	4603      	mov	r3, r0
 800662e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 8006630:	79fb      	ldrb	r3, [r7, #7]
 8006632:	4618      	mov	r0, r3
 8006634:	f7fa fdd2 	bl	80011dc <SD_disk_initialize>
 8006638:	4603      	mov	r3, r0
 800663a:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	4603      	mov	r3, r0
 800664c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	4618      	mov	r0, r3
 8006652:	f7fa fea9 	bl	80013a8 <SD_disk_status>
 8006656:	4603      	mov	r3, r0
 8006658:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
 800666c:	603b      	str	r3, [r7, #0]
 800666e:	4603      	mov	r3, r0
 8006670:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8006672:	7bf8      	ldrb	r0, [r7, #15]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	68b9      	ldr	r1, [r7, #8]
 800667a:	f7fa fea9 	bl	80013d0 <SD_disk_read>
 800667e:	4603      	mov	r3, r0
 8006680:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b084      	sub	sp, #16
 800668e:	af00      	add	r7, sp, #0
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	603b      	str	r3, [r7, #0]
 8006696:	4603      	mov	r3, r0
 8006698:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 800669a:	7bf8      	ldrb	r0, [r7, #15]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	68b9      	ldr	r1, [r7, #8]
 80066a2:	f7fa feff 	bl	80014a4 <SD_disk_write>
 80066a6:	4603      	mov	r3, r0
 80066a8:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b082      	sub	sp, #8
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	4603      	mov	r3, r0
 80066ba:	603a      	str	r2, [r7, #0]
 80066bc:	71fb      	strb	r3, [r7, #7]
 80066be:	460b      	mov	r3, r1
 80066c0:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 80066c2:	79fb      	ldrb	r3, [r7, #7]
 80066c4:	79b9      	ldrb	r1, [r7, #6]
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fa ff6f 	bl	80015ac <SD_disk_ioctl>
 80066ce:	4603      	mov	r3, r0
 80066d0:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	4603      	mov	r3, r0
 80066e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80066e6:	79fb      	ldrb	r3, [r7, #7]
 80066e8:	4a08      	ldr	r2, [pc, #32]	@ (800670c <disk_status+0x30>)
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	79fa      	ldrb	r2, [r7, #7]
 80066f4:	4905      	ldr	r1, [pc, #20]	@ (800670c <disk_status+0x30>)
 80066f6:	440a      	add	r2, r1
 80066f8:	7a12      	ldrb	r2, [r2, #8]
 80066fa:	4610      	mov	r0, r2
 80066fc:	4798      	blx	r3
 80066fe:	4603      	mov	r3, r0
 8006700:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006702:	7bfb      	ldrb	r3, [r7, #15]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	2000278c 	.word	0x2000278c

08006710 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	4603      	mov	r3, r0
 8006718:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	4a0d      	ldr	r2, [pc, #52]	@ (8006758 <disk_initialize+0x48>)
 8006722:	5cd3      	ldrb	r3, [r2, r3]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d111      	bne.n	800674c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8006728:	79fb      	ldrb	r3, [r7, #7]
 800672a:	4a0b      	ldr	r2, [pc, #44]	@ (8006758 <disk_initialize+0x48>)
 800672c:	2101      	movs	r1, #1
 800672e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	4a09      	ldr	r2, [pc, #36]	@ (8006758 <disk_initialize+0x48>)
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	79fa      	ldrb	r2, [r7, #7]
 800673e:	4906      	ldr	r1, [pc, #24]	@ (8006758 <disk_initialize+0x48>)
 8006740:	440a      	add	r2, r1
 8006742:	7a12      	ldrb	r2, [r2, #8]
 8006744:	4610      	mov	r0, r2
 8006746:	4798      	blx	r3
 8006748:	4603      	mov	r3, r0
 800674a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	2000278c 	.word	0x2000278c

0800675c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800675c:	b590      	push	{r4, r7, lr}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	607a      	str	r2, [r7, #4]
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	4603      	mov	r3, r0
 800676a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800676c:	7bfb      	ldrb	r3, [r7, #15]
 800676e:	4a0a      	ldr	r2, [pc, #40]	@ (8006798 <disk_read+0x3c>)
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	689c      	ldr	r4, [r3, #8]
 8006778:	7bfb      	ldrb	r3, [r7, #15]
 800677a:	4a07      	ldr	r2, [pc, #28]	@ (8006798 <disk_read+0x3c>)
 800677c:	4413      	add	r3, r2
 800677e:	7a18      	ldrb	r0, [r3, #8]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	47a0      	blx	r4
 8006788:	4603      	mov	r3, r0
 800678a:	75fb      	strb	r3, [r7, #23]
  return res;
 800678c:	7dfb      	ldrb	r3, [r7, #23]
}
 800678e:	4618      	mov	r0, r3
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	bd90      	pop	{r4, r7, pc}
 8006796:	bf00      	nop
 8006798:	2000278c 	.word	0x2000278c

0800679c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800679c:	b590      	push	{r4, r7, lr}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	607a      	str	r2, [r7, #4]
 80067a6:	603b      	str	r3, [r7, #0]
 80067a8:	4603      	mov	r3, r0
 80067aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	4a0a      	ldr	r2, [pc, #40]	@ (80067d8 <disk_write+0x3c>)
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	68dc      	ldr	r4, [r3, #12]
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
 80067ba:	4a07      	ldr	r2, [pc, #28]	@ (80067d8 <disk_write+0x3c>)
 80067bc:	4413      	add	r3, r2
 80067be:	7a18      	ldrb	r0, [r3, #8]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	68b9      	ldr	r1, [r7, #8]
 80067c6:	47a0      	blx	r4
 80067c8:	4603      	mov	r3, r0
 80067ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd90      	pop	{r4, r7, pc}
 80067d6:	bf00      	nop
 80067d8:	2000278c 	.word	0x2000278c

080067dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	4603      	mov	r3, r0
 80067e4:	603a      	str	r2, [r7, #0]
 80067e6:	71fb      	strb	r3, [r7, #7]
 80067e8:	460b      	mov	r3, r1
 80067ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80067ec:	79fb      	ldrb	r3, [r7, #7]
 80067ee:	4a09      	ldr	r2, [pc, #36]	@ (8006814 <disk_ioctl+0x38>)
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	79fa      	ldrb	r2, [r7, #7]
 80067fa:	4906      	ldr	r1, [pc, #24]	@ (8006814 <disk_ioctl+0x38>)
 80067fc:	440a      	add	r2, r1
 80067fe:	7a10      	ldrb	r0, [r2, #8]
 8006800:	79b9      	ldrb	r1, [r7, #6]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	4798      	blx	r3
 8006806:	4603      	mov	r3, r0
 8006808:	73fb      	strb	r3, [r7, #15]
  return res;
 800680a:	7bfb      	ldrb	r3, [r7, #15]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	2000278c 	.word	0x2000278c

08006818 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800682c:	e007      	b.n	800683e <mem_cpy+0x26>
		*d++ = *s++;
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	1c53      	adds	r3, r2, #1
 8006832:	613b      	str	r3, [r7, #16]
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	1c59      	adds	r1, r3, #1
 8006838:	6179      	str	r1, [r7, #20]
 800683a:	7812      	ldrb	r2, [r2, #0]
 800683c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	1e5a      	subs	r2, r3, #1
 8006842:	607a      	str	r2, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1f2      	bne.n	800682e <mem_cpy+0x16>
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	371c      	adds	r7, #28
 800684e:	46bd      	mov	sp, r7
 8006850:	bc80      	pop	{r7}
 8006852:	4770      	bx	lr

08006854 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006864:	e005      	b.n	8006872 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	617a      	str	r2, [r7, #20]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	1e5a      	subs	r2, r3, #1
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1f4      	bne.n	8006866 <mem_set+0x12>
}
 800687c:	bf00      	nop
 800687e:	bf00      	nop
 8006880:	371c      	adds	r7, #28
 8006882:	46bd      	mov	sp, r7
 8006884:	bc80      	pop	{r7}
 8006886:	4770      	bx	lr

08006888 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006888:	b480      	push	{r7}
 800688a:	b089      	sub	sp, #36	@ 0x24
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	61fb      	str	r3, [r7, #28]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80068a0:	bf00      	nop
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	1e5a      	subs	r2, r3, #1
 80068a6:	607a      	str	r2, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00d      	beq.n	80068c8 <mem_cmp+0x40>
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	61fa      	str	r2, [r7, #28]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	4619      	mov	r1, r3
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	61ba      	str	r2, [r7, #24]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	1acb      	subs	r3, r1, r3
 80068c0:	617b      	str	r3, [r7, #20]
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0ec      	beq.n	80068a2 <mem_cmp+0x1a>
	return r;
 80068c8:	697b      	ldr	r3, [r7, #20]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3724      	adds	r7, #36	@ 0x24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bc80      	pop	{r7}
 80068d2:	4770      	bx	lr

080068d4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80068de:	e002      	b.n	80068e6 <chk_chr+0x12>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3301      	adds	r3, #1
 80068e4:	607b      	str	r3, [r7, #4]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d005      	beq.n	80068fa <chk_chr+0x26>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d1f2      	bne.n	80068e0 <chk_chr+0xc>
	return *str;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	781b      	ldrb	r3, [r3, #0]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	bc80      	pop	{r7}
 8006906:	4770      	bx	lr

08006908 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006912:	2300      	movs	r3, #0
 8006914:	60bb      	str	r3, [r7, #8]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	e03b      	b.n	8006994 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 800691c:	4931      	ldr	r1, [pc, #196]	@ (80069e4 <chk_lock+0xdc>)
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	4613      	mov	r3, r2
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	4413      	add	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	440b      	add	r3, r1
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d02c      	beq.n	800698a <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006930:	492c      	ldr	r1, [pc, #176]	@ (80069e4 <chk_lock+0xdc>)
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4613      	mov	r3, r2
 8006936:	005b      	lsls	r3, r3, #1
 8006938:	4413      	add	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	440b      	add	r3, r1
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	429a      	cmp	r2, r3
 800694a:	d120      	bne.n	800698e <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 800694c:	4925      	ldr	r1, [pc, #148]	@ (80069e4 <chk_lock+0xdc>)
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4613      	mov	r3, r2
 8006952:	005b      	lsls	r3, r3, #1
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	440b      	add	r3, r1
 800695a:	3304      	adds	r3, #4
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006964:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006966:	429a      	cmp	r2, r3
 8006968:	d111      	bne.n	800698e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 800696a:	491e      	ldr	r1, [pc, #120]	@ (80069e4 <chk_lock+0xdc>)
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4613      	mov	r3, r2
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	4413      	add	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	440b      	add	r3, r1
 8006978:	3308      	adds	r3, #8
 800697a:	881a      	ldrh	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006982:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8006984:	429a      	cmp	r2, r3
 8006986:	d102      	bne.n	800698e <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8006988:	e007      	b.n	800699a <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 800698a:	2301      	movs	r3, #1
 800698c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	3301      	adds	r3, #1
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d9c0      	bls.n	800691c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b02      	cmp	r3, #2
 800699e:	d109      	bne.n	80069b4 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d102      	bne.n	80069ac <chk_lock+0xa4>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d101      	bne.n	80069b0 <chk_lock+0xa8>
 80069ac:	2300      	movs	r3, #0
 80069ae:	e013      	b.n	80069d8 <chk_lock+0xd0>
 80069b0:	2312      	movs	r3, #18
 80069b2:	e011      	b.n	80069d8 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10b      	bne.n	80069d2 <chk_lock+0xca>
 80069ba:	490a      	ldr	r1, [pc, #40]	@ (80069e4 <chk_lock+0xdc>)
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	4613      	mov	r3, r2
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	440b      	add	r3, r1
 80069c8:	330a      	adds	r3, #10
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069d0:	d101      	bne.n	80069d6 <chk_lock+0xce>
 80069d2:	2310      	movs	r3, #16
 80069d4:	e000      	b.n	80069d8 <chk_lock+0xd0>
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	bc80      	pop	{r7}
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	20002574 	.word	0x20002574

080069e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80069ee:	2300      	movs	r3, #0
 80069f0:	607b      	str	r3, [r7, #4]
 80069f2:	e002      	b.n	80069fa <enq_lock+0x12>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3301      	adds	r3, #1
 80069f8:	607b      	str	r3, [r7, #4]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d809      	bhi.n	8006a14 <enq_lock+0x2c>
 8006a00:	490a      	ldr	r1, [pc, #40]	@ (8006a2c <enq_lock+0x44>)
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	4613      	mov	r3, r2
 8006a06:	005b      	lsls	r3, r3, #1
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1ef      	bne.n	80069f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	bf14      	ite	ne
 8006a1a:	2301      	movne	r3, #1
 8006a1c:	2300      	moveq	r3, #0
 8006a1e:	b2db      	uxtb	r3, r3
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bc80      	pop	{r7}
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	20002574 	.word	0x20002574

08006a30 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	e02e      	b.n	8006a9e <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8006a40:	4958      	ldr	r1, [pc, #352]	@ (8006ba4 <inc_lock+0x174>)
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4613      	mov	r3, r2
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	4413      	add	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	440b      	add	r3, r1
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d11d      	bne.n	8006a98 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8006a5c:	4951      	ldr	r1, [pc, #324]	@ (8006ba4 <inc_lock+0x174>)
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	4613      	mov	r3, r2
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	4413      	add	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	440b      	add	r3, r1
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a74:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d10e      	bne.n	8006a98 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8006a7a:	494a      	ldr	r1, [pc, #296]	@ (8006ba4 <inc_lock+0x174>)
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	440b      	add	r3, r1
 8006a88:	3308      	adds	r3, #8
 8006a8a:	881a      	ldrh	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a92:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d006      	beq.n	8006aa6 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d9cd      	bls.n	8006a40 <inc_lock+0x10>
 8006aa4:	e000      	b.n	8006aa8 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8006aa6:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d148      	bne.n	8006b40 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	e002      	b.n	8006aba <inc_lock+0x8a>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d809      	bhi.n	8006ad4 <inc_lock+0xa4>
 8006ac0:	4938      	ldr	r1, [pc, #224]	@ (8006ba4 <inc_lock+0x174>)
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1ef      	bne.n	8006ab4 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d101      	bne.n	8006ade <inc_lock+0xae>
 8006ada:	2300      	movs	r3, #0
 8006adc:	e05d      	b.n	8006b9a <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ae4:	6819      	ldr	r1, [r3, #0]
 8006ae6:	482f      	ldr	r0, [pc, #188]	@ (8006ba4 <inc_lock+0x174>)
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	4613      	mov	r3, r2
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	4413      	add	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4403      	add	r3, r0
 8006af4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006afc:	6899      	ldr	r1, [r3, #8]
 8006afe:	4829      	ldr	r0, [pc, #164]	@ (8006ba4 <inc_lock+0x174>)
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4613      	mov	r3, r2
 8006b04:	005b      	lsls	r3, r3, #1
 8006b06:	4413      	add	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4403      	add	r3, r0
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b16:	88d8      	ldrh	r0, [r3, #6]
 8006b18:	4922      	ldr	r1, [pc, #136]	@ (8006ba4 <inc_lock+0x174>)
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	4413      	add	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	440b      	add	r3, r1
 8006b26:	3308      	adds	r3, #8
 8006b28:	4602      	mov	r2, r0
 8006b2a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8006b2c:	491d      	ldr	r1, [pc, #116]	@ (8006ba4 <inc_lock+0x174>)
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	4613      	mov	r3, r2
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	4413      	add	r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	440b      	add	r3, r1
 8006b3a:	330a      	adds	r3, #10
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00c      	beq.n	8006b60 <inc_lock+0x130>
 8006b46:	4917      	ldr	r1, [pc, #92]	@ (8006ba4 <inc_lock+0x174>)
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	005b      	lsls	r3, r3, #1
 8006b4e:	4413      	add	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	440b      	add	r3, r1
 8006b54:	330a      	adds	r3, #10
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <inc_lock+0x130>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	e01c      	b.n	8006b9a <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10b      	bne.n	8006b7e <inc_lock+0x14e>
 8006b66:	490f      	ldr	r1, [pc, #60]	@ (8006ba4 <inc_lock+0x174>)
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	440b      	add	r3, r1
 8006b74:	330a      	adds	r3, #10
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	b299      	uxth	r1, r3
 8006b7c:	e001      	b.n	8006b82 <inc_lock+0x152>
 8006b7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b82:	4808      	ldr	r0, [pc, #32]	@ (8006ba4 <inc_lock+0x174>)
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4613      	mov	r3, r2
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4403      	add	r3, r0
 8006b90:	330a      	adds	r3, #10
 8006b92:	460a      	mov	r2, r1
 8006b94:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3301      	adds	r3, #1
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bc80      	pop	{r7}
 8006ba2:	4770      	bx	lr
 8006ba4:	20002574 	.word	0x20002574

08006ba8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	607b      	str	r3, [r7, #4]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d82e      	bhi.n	8006c1a <dec_lock+0x72>
		n = Files[i].ctr;
 8006bbc:	491b      	ldr	r1, [pc, #108]	@ (8006c2c <dec_lock+0x84>)
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	4413      	add	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	440b      	add	r3, r1
 8006bca:	330a      	adds	r3, #10
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006bd0:	89fb      	ldrh	r3, [r7, #14]
 8006bd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bd6:	d101      	bne.n	8006bdc <dec_lock+0x34>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8006bdc:	89fb      	ldrh	r3, [r7, #14]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <dec_lock+0x40>
 8006be2:	89fb      	ldrh	r3, [r7, #14]
 8006be4:	3b01      	subs	r3, #1
 8006be6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006be8:	4910      	ldr	r1, [pc, #64]	@ (8006c2c <dec_lock+0x84>)
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	4613      	mov	r3, r2
 8006bee:	005b      	lsls	r3, r3, #1
 8006bf0:	4413      	add	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	440b      	add	r3, r1
 8006bf6:	330a      	adds	r3, #10
 8006bf8:	89fa      	ldrh	r2, [r7, #14]
 8006bfa:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006bfc:	89fb      	ldrh	r3, [r7, #14]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d108      	bne.n	8006c14 <dec_lock+0x6c>
 8006c02:	490a      	ldr	r1, [pc, #40]	@ (8006c2c <dec_lock+0x84>)
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	4613      	mov	r3, r2
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	440b      	add	r3, r1
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	737b      	strb	r3, [r7, #13]
 8006c18:	e001      	b.n	8006c1e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006c1e:	7b7b      	ldrb	r3, [r7, #13]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bc80      	pop	{r7}
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	20002574 	.word	0x20002574

08006c30 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	e016      	b.n	8006c6c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006c3e:	4910      	ldr	r1, [pc, #64]	@ (8006c80 <clear_lock+0x50>)
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	4613      	mov	r3, r2
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	440b      	add	r3, r1
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d108      	bne.n	8006c66 <clear_lock+0x36>
 8006c54:	490a      	ldr	r1, [pc, #40]	@ (8006c80 <clear_lock+0x50>)
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	440b      	add	r3, r1
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d9e5      	bls.n	8006c3e <clear_lock+0xe>
	}
}
 8006c72:	bf00      	nop
 8006c74:	bf00      	nop
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bc80      	pop	{r7}
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	20002574 	.word	0x20002574

08006c84 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c96:	791b      	ldrb	r3, [r3, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d040      	beq.n	8006d1e <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cac:	7858      	ldrb	r0, [r3, #1]
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	f7ff fd72 	bl	800679c <disk_write>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <sync_window+0x40>
			res = FR_DISK_ERR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	73fb      	strb	r3, [r7, #15]
 8006cc2:	e02c      	b.n	8006d1e <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cca:	2200      	movs	r2, #0
 8006ccc:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	1ad2      	subs	r2, r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d21b      	bcs.n	8006d1e <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cec:	78db      	ldrb	r3, [r3, #3]
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	e012      	b.n	8006d18 <sync_window+0x94>
					wsect += fs->fsize;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d06:	7858      	ldrb	r0, [r3, #1]
 8006d08:	6879      	ldr	r1, [r7, #4]
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	f7ff fd45 	bl	800679c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	3b01      	subs	r3, #1
 8006d16:	613b      	str	r3, [r7, #16]
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d8e9      	bhi.n	8006cf2 <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d01e      	beq.n	8006d82 <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7ff ff9d 	bl	8006c84 <sync_window>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d116      	bne.n	8006d82 <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d5a:	7858      	ldrb	r0, [r3, #1]
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	2301      	movs	r3, #1
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	f7ff fcfb 	bl	800675c <disk_read>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d004      	beq.n	8006d76 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d70:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	62d3      	str	r3, [r2, #44]	@ 0x2c
		}
	}
	return res;
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7ff ff75 	bl	8006c84 <sync_window>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f040 80ad 	bne.w	8006f00 <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	f040 8098 	bne.w	8006ee4 <sync_fs+0x158>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dba:	795b      	ldrb	r3, [r3, #5]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	f040 8091 	bne.w	8006ee4 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dca:	895b      	ldrh	r3, [r3, #10]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	2100      	movs	r1, #0
 8006dd0:	f7ff fd40 	bl	8006854 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2255      	movs	r2, #85	@ 0x55
 8006dd8:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	22aa      	movs	r2, #170	@ 0xaa
 8006de0:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2252      	movs	r2, #82	@ 0x52
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2252      	movs	r2, #82	@ 0x52
 8006dee:	705a      	strb	r2, [r3, #1]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2261      	movs	r2, #97	@ 0x61
 8006df4:	709a      	strb	r2, [r3, #2]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2241      	movs	r2, #65	@ 0x41
 8006dfa:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2272      	movs	r2, #114	@ 0x72
 8006e00:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2272      	movs	r2, #114	@ 0x72
 8006e08:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2241      	movs	r2, #65	@ 0x41
 8006e10:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2261      	movs	r2, #97	@ 0x61
 8006e18:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	0a1b      	lsrs	r3, r3, #8
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	0c1b      	lsrs	r3, r3, #16
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	0e1b      	lsrs	r3, r3, #24
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	0a1b      	lsrs	r3, r3, #8
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	0c1b      	lsrs	r3, r3, #16
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	0e1b      	lsrs	r3, r3, #24
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ec8:	7858      	ldrb	r0, [r3, #1]
 8006eca:	6879      	ldr	r1, [r7, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	f7ff fc61 	bl	800679c <disk_write>
			fs->fsi_flag = 0;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006eea:	785b      	ldrb	r3, [r3, #1]
 8006eec:	2200      	movs	r2, #0
 8006eee:	2100      	movs	r1, #0
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7ff fc73 	bl	80067dc <disk_ioctl>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <sync_fs+0x174>
			res = FR_DISK_ERR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	3b02      	subs	r3, #2
 8006f18:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	3b02      	subs	r3, #2
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d301      	bcc.n	8006f2e <clust2sect+0x24>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	e00c      	b.n	8006f48 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f34:	789b      	ldrb	r3, [r3, #2]
 8006f36:	461a      	mov	r2, r3
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	fb03 f202 	mul.w	r2, r3, r2
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f46:	4413      	add	r3, r2
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc80      	pop	{r7}
 8006f50:	4770      	bx	lr

08006f52 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b086      	sub	sp, #24
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d906      	bls.n	8006f70 <get_fat+0x1e>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d302      	bcc.n	8006f76 <get_fat+0x24>
		val = 1;	/* Internal error */
 8006f70:	2301      	movs	r3, #1
 8006f72:	617b      	str	r3, [r7, #20]
 8006f74:	e0e3      	b.n	800713e <get_fat+0x1ec>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006f76:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	f000 8097 	beq.w	80070b8 <get_fat+0x166>
 8006f8a:	2b03      	cmp	r3, #3
 8006f8c:	f300 80cd 	bgt.w	800712a <get_fat+0x1d8>
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d002      	beq.n	8006f9a <get_fat+0x48>
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d05e      	beq.n	8007056 <get_fat+0x104>
 8006f98:	e0c7      	b.n	800712a <get_fat+0x1d8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	085b      	lsrs	r3, r3, #1
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fae:	6a1a      	ldr	r2, [r3, #32]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fb6:	895b      	ldrh	r3, [r3, #10]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fc0:	4413      	add	r3, r2
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f7ff feaf 	bl	8006d28 <move_window>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f040 80af 	bne.w	8007130 <get_fat+0x1de>
			wc = fs->win.d8[bc++ % SS(fs)];
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	60fa      	str	r2, [r7, #12]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006fde:	8952      	ldrh	r2, [r2, #10]
 8006fe0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fe4:	fb01 f202 	mul.w	r2, r1, r2
 8006fe8:	1a9b      	subs	r3, r3, r2
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	5cd3      	ldrb	r3, [r2, r3]
 8006fee:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ff6:	6a1a      	ldr	r2, [r3, #32]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ffe:	895b      	ldrh	r3, [r3, #10]
 8007000:	4619      	mov	r1, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	fbb3 f3f1 	udiv	r3, r3, r1
 8007008:	4413      	add	r3, r2
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7ff fe8b 	bl	8006d28 <move_window>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	f040 808d 	bne.w	8007134 <get_fat+0x1e2>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007020:	895b      	ldrh	r3, [r3, #10]
 8007022:	461a      	mov	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	fbb3 f1f2 	udiv	r1, r3, r2
 800702a:	fb01 f202 	mul.w	r2, r1, r2
 800702e:	1a9b      	subs	r3, r3, r2
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	5cd3      	ldrb	r3, [r2, r3]
 8007034:	021b      	lsls	r3, r3, #8
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	4313      	orrs	r3, r2
 800703a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <get_fat+0xfa>
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	091b      	lsrs	r3, r3, #4
 800704a:	e002      	b.n	8007052 <get_fat+0x100>
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007052:	617b      	str	r3, [r7, #20]
			break;
 8007054:	e073      	b.n	800713e <get_fat+0x1ec>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800705c:	6a1a      	ldr	r2, [r3, #32]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007064:	895b      	ldrh	r3, [r3, #10]
 8007066:	085b      	lsrs	r3, r3, #1
 8007068:	b29b      	uxth	r3, r3
 800706a:	4619      	mov	r1, r3
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007072:	4413      	add	r3, r2
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7ff fe56 	bl	8006d28 <move_window>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d15a      	bne.n	8007138 <get_fat+0x1e6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800708c:	8952      	ldrh	r2, [r2, #10]
 800708e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007092:	fb01 f202 	mul.w	r2, r1, r2
 8007096:	1a9b      	subs	r3, r3, r2
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	4413      	add	r3, r2
 800709c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	3301      	adds	r3, #1
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	021b      	lsls	r3, r3, #8
 80070a6:	b21a      	sxth	r2, r3
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	b21b      	sxth	r3, r3
 80070ae:	4313      	orrs	r3, r2
 80070b0:	b21b      	sxth	r3, r3
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	617b      	str	r3, [r7, #20]
			break;
 80070b6:	e042      	b.n	800713e <get_fat+0x1ec>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070be:	6a1a      	ldr	r2, [r3, #32]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070c6:	895b      	ldrh	r3, [r3, #10]
 80070c8:	089b      	lsrs	r3, r3, #2
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	4619      	mov	r1, r3
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80070d4:	4413      	add	r3, r2
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7ff fe25 	bl	8006d28 <move_window>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d12b      	bne.n	800713c <get_fat+0x1ea>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80070ee:	8952      	ldrh	r2, [r2, #10]
 80070f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80070f4:	fb01 f202 	mul.w	r2, r1, r2
 80070f8:	1a9b      	subs	r3, r3, r2
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	4413      	add	r3, r2
 80070fe:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	3303      	adds	r3, #3
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	061a      	lsls	r2, r3, #24
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	3302      	adds	r3, #2
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	041b      	lsls	r3, r3, #16
 8007110:	431a      	orrs	r2, r3
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	3301      	adds	r3, #1
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	021b      	lsls	r3, r3, #8
 800711a:	4313      	orrs	r3, r2
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	7812      	ldrb	r2, [r2, #0]
 8007120:	4313      	orrs	r3, r2
 8007122:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007126:	617b      	str	r3, [r7, #20]
			break;
 8007128:	e009      	b.n	800713e <get_fat+0x1ec>

		default:
			val = 1;	/* Internal error */
 800712a:	2301      	movs	r3, #1
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	e006      	b.n	800713e <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007130:	bf00      	nop
 8007132:	e004      	b.n	800713e <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007134:	bf00      	nop
 8007136:	e002      	b.n	800713e <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007138:	bf00      	nop
 800713a:	e000      	b.n	800713e <get_fat+0x1ec>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800713c:	bf00      	nop
		}
	}

	return val;
 800713e:	697b      	ldr	r3, [r7, #20]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d906      	bls.n	8007168 <put_fat+0x20>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	429a      	cmp	r2, r3
 8007166:	d302      	bcc.n	800716e <put_fat+0x26>
		res = FR_INT_ERR;
 8007168:	2302      	movs	r3, #2
 800716a:	77fb      	strb	r3, [r7, #31]
 800716c:	e13a      	b.n	80073e4 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b03      	cmp	r3, #3
 8007178:	f000 80d0 	beq.w	800731c <put_fat+0x1d4>
 800717c:	2b03      	cmp	r3, #3
 800717e:	f300 8127 	bgt.w	80073d0 <put_fat+0x288>
 8007182:	2b01      	cmp	r3, #1
 8007184:	d003      	beq.n	800718e <put_fat+0x46>
 8007186:	2b02      	cmp	r3, #2
 8007188:	f000 808f 	beq.w	80072aa <put_fat+0x162>
 800718c:	e120      	b.n	80073d0 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	617b      	str	r3, [r7, #20]
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	085b      	lsrs	r3, r3, #1
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	4413      	add	r3, r2
 800719a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071a2:	6a1a      	ldr	r2, [r3, #32]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071aa:	895b      	ldrh	r3, [r3, #10]
 80071ac:	4619      	mov	r1, r3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80071b4:	4413      	add	r3, r2
 80071b6:	4619      	mov	r1, r3
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f7ff fdb5 	bl	8006d28 <move_window>
 80071be:	4603      	mov	r3, r0
 80071c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80071c2:	7ffb      	ldrb	r3, [r7, #31]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f040 8106 	bne.w	80073d6 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	617a      	str	r2, [r7, #20]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80071d6:	8952      	ldrh	r2, [r2, #10]
 80071d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80071dc:	fb01 f202 	mul.w	r2, r1, r2
 80071e0:	1a9b      	subs	r3, r3, r2
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4413      	add	r3, r2
 80071e6:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00d      	beq.n	800720e <put_fat+0xc6>
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	b25b      	sxtb	r3, r3
 80071f8:	f003 030f 	and.w	r3, r3, #15
 80071fc:	b25a      	sxtb	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	b2db      	uxtb	r3, r3
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	b25b      	sxtb	r3, r3
 8007206:	4313      	orrs	r3, r2
 8007208:	b25b      	sxtb	r3, r3
 800720a:	b2db      	uxtb	r3, r3
 800720c:	e001      	b.n	8007212 <put_fat+0xca>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	b2db      	uxtb	r3, r3
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800721c:	2201      	movs	r2, #1
 800721e:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007226:	6a1a      	ldr	r2, [r3, #32]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800722e:	895b      	ldrh	r3, [r3, #10]
 8007230:	4619      	mov	r1, r3
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	fbb3 f3f1 	udiv	r3, r3, r1
 8007238:	4413      	add	r3, r2
 800723a:	4619      	mov	r1, r3
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f7ff fd73 	bl	8006d28 <move_window>
 8007242:	4603      	mov	r3, r0
 8007244:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007246:	7ffb      	ldrb	r3, [r7, #31]
 8007248:	2b00      	cmp	r3, #0
 800724a:	f040 80c6 	bne.w	80073da <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007254:	895b      	ldrh	r3, [r3, #10]
 8007256:	461a      	mov	r2, r3
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	fbb3 f1f2 	udiv	r1, r3, r2
 800725e:	fb01 f202 	mul.w	r2, r1, r2
 8007262:	1a9b      	subs	r3, r3, r2
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	4413      	add	r3, r2
 8007268:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d003      	beq.n	800727c <put_fat+0x134>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	091b      	lsrs	r3, r3, #4
 8007278:	b2db      	uxtb	r3, r3
 800727a:	e00e      	b.n	800729a <put_fat+0x152>
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	b25b      	sxtb	r3, r3
 8007282:	f023 030f 	bic.w	r3, r3, #15
 8007286:	b25a      	sxtb	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	0a1b      	lsrs	r3, r3, #8
 800728c:	b25b      	sxtb	r3, r3
 800728e:	f003 030f 	and.w	r3, r3, #15
 8007292:	b25b      	sxtb	r3, r3
 8007294:	4313      	orrs	r3, r2
 8007296:	b25b      	sxtb	r3, r3
 8007298:	b2db      	uxtb	r3, r3
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072a4:	2201      	movs	r2, #1
 80072a6:	711a      	strb	r2, [r3, #4]
			break;
 80072a8:	e09c      	b.n	80073e4 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072b0:	6a1a      	ldr	r2, [r3, #32]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072b8:	895b      	ldrh	r3, [r3, #10]
 80072ba:	085b      	lsrs	r3, r3, #1
 80072bc:	b29b      	uxth	r3, r3
 80072be:	4619      	mov	r1, r3
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80072c6:	4413      	add	r3, r2
 80072c8:	4619      	mov	r1, r3
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f7ff fd2c 	bl	8006d28 <move_window>
 80072d0:	4603      	mov	r3, r0
 80072d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80072d4:	7ffb      	ldrb	r3, [r7, #31]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f040 8081 	bne.w	80073de <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80072e6:	8952      	ldrh	r2, [r2, #10]
 80072e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80072ec:	fb01 f202 	mul.w	r2, r1, r2
 80072f0:	1a9b      	subs	r3, r3, r2
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	701a      	strb	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	b29b      	uxth	r3, r3
 8007304:	0a1b      	lsrs	r3, r3, #8
 8007306:	b29a      	uxth	r2, r3
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	3301      	adds	r3, #1
 800730c:	b2d2      	uxtb	r2, r2
 800730e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007316:	2201      	movs	r2, #1
 8007318:	711a      	strb	r2, [r3, #4]
			break;
 800731a:	e063      	b.n	80073e4 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007322:	6a1a      	ldr	r2, [r3, #32]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800732a:	895b      	ldrh	r3, [r3, #10]
 800732c:	089b      	lsrs	r3, r3, #2
 800732e:	b29b      	uxth	r3, r3
 8007330:	4619      	mov	r1, r3
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	fbb3 f3f1 	udiv	r3, r3, r1
 8007338:	4413      	add	r3, r2
 800733a:	4619      	mov	r1, r3
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f7ff fcf3 	bl	8006d28 <move_window>
 8007342:	4603      	mov	r3, r0
 8007344:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007346:	7ffb      	ldrb	r3, [r7, #31]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d14a      	bne.n	80073e2 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007356:	8952      	ldrh	r2, [r2, #10]
 8007358:	fbb3 f1f2 	udiv	r1, r3, r2
 800735c:	fb01 f202 	mul.w	r2, r1, r2
 8007360:	1a9b      	subs	r3, r3, r2
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	4413      	add	r3, r2
 8007366:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	3303      	adds	r3, #3
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	061a      	lsls	r2, r3, #24
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	3302      	adds	r3, #2
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	041b      	lsls	r3, r3, #16
 8007378:	431a      	orrs	r2, r3
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	3301      	adds	r3, #1
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	021b      	lsls	r3, r3, #8
 8007382:	4313      	orrs	r3, r2
 8007384:	69ba      	ldr	r2, [r7, #24]
 8007386:	7812      	ldrb	r2, [r2, #0]
 8007388:	4313      	orrs	r3, r2
 800738a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	4313      	orrs	r3, r2
 8007392:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	b2da      	uxtb	r2, r3
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	701a      	strb	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	0a1b      	lsrs	r3, r3, #8
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	3301      	adds	r3, #1
 80073a8:	b2d2      	uxtb	r2, r2
 80073aa:	701a      	strb	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	0c1a      	lsrs	r2, r3, #16
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	3302      	adds	r3, #2
 80073b4:	b2d2      	uxtb	r2, r2
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	0e1a      	lsrs	r2, r3, #24
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	3303      	adds	r3, #3
 80073c0:	b2d2      	uxtb	r2, r2
 80073c2:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073ca:	2201      	movs	r2, #1
 80073cc:	711a      	strb	r2, [r3, #4]
			break;
 80073ce:	e009      	b.n	80073e4 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 80073d0:	2302      	movs	r3, #2
 80073d2:	77fb      	strb	r3, [r7, #31]
 80073d4:	e006      	b.n	80073e4 <put_fat+0x29c>
			if (res != FR_OK) break;
 80073d6:	bf00      	nop
 80073d8:	e004      	b.n	80073e4 <put_fat+0x29c>
			if (res != FR_OK) break;
 80073da:	bf00      	nop
 80073dc:	e002      	b.n	80073e4 <put_fat+0x29c>
			if (res != FR_OK) break;
 80073de:	bf00      	nop
 80073e0:	e000      	b.n	80073e4 <put_fat+0x29c>
			if (res != FR_OK) break;
 80073e2:	bf00      	nop
		}
	}

	return res;
 80073e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3720      	adds	r7, #32
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d906      	bls.n	800740c <remove_chain+0x1e>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	429a      	cmp	r2, r3
 800740a:	d302      	bcc.n	8007412 <remove_chain+0x24>
		res = FR_INT_ERR;
 800740c:	2302      	movs	r3, #2
 800740e:	73fb      	strb	r3, [r7, #15]
 8007410:	e049      	b.n	80074a6 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007416:	e03b      	b.n	8007490 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8007418:	6839      	ldr	r1, [r7, #0]
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff fd99 	bl	8006f52 <get_fat>
 8007420:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d03b      	beq.n	80074a0 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d102      	bne.n	8007434 <remove_chain+0x46>
 800742e:	2302      	movs	r3, #2
 8007430:	73fb      	strb	r3, [r7, #15]
 8007432:	e038      	b.n	80074a6 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800743a:	d102      	bne.n	8007442 <remove_chain+0x54>
 800743c:	2301      	movs	r3, #1
 800743e:	73fb      	strb	r3, [r7, #15]
 8007440:	e031      	b.n	80074a6 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007442:	2200      	movs	r2, #0
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7ff fe7e 	bl	8007148 <put_fat>
 800744c:	4603      	mov	r3, r0
 800744e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d126      	bne.n	80074a4 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007462:	d013      	beq.n	800748c <remove_chain+0x9e>
				fs->free_clust++;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	3301      	adds	r3, #1
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007474:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800747c:	795b      	ldrb	r3, [r3, #5]
 800747e:	f043 0301 	orr.w	r3, r3, #1
 8007482:	b2da      	uxtb	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800748a:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	429a      	cmp	r2, r3
 800749c:	d3bc      	bcc.n	8007418 <remove_chain+0x2a>
 800749e:	e002      	b.n	80074a6 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 80074a0:	bf00      	nop
 80074a2:	e000      	b.n	80074a6 <remove_chain+0xb8>
			if (res != FR_OK) break;
 80074a4:	bf00      	nop
		}
	}

	return res;
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d111      	bne.n	80074e4 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d006      	beq.n	80074de <create_chain+0x2e>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d31d      	bcc.n	800751a <create_chain+0x6a>
 80074de:	2301      	movs	r3, #1
 80074e0:	613b      	str	r3, [r7, #16]
 80074e2:	e01a      	b.n	800751a <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7ff fd33 	bl	8006f52 <get_fat>
 80074ec:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d801      	bhi.n	80074f8 <create_chain+0x48>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e07f      	b.n	80075f8 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fe:	d101      	bne.n	8007504 <create_chain+0x54>
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	e079      	b.n	80075f8 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	429a      	cmp	r2, r3
 8007510:	d201      	bcs.n	8007516 <create_chain+0x66>
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	e070      	b.n	80075f8 <create_chain+0x148>
		scl = clst;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	3301      	adds	r3, #1
 8007522:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	429a      	cmp	r2, r3
 8007530:	d307      	bcc.n	8007542 <create_chain+0x92>
			ncl = 2;
 8007532:	2302      	movs	r3, #2
 8007534:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	429a      	cmp	r2, r3
 800753c:	d901      	bls.n	8007542 <create_chain+0x92>
 800753e:	2300      	movs	r3, #0
 8007540:	e05a      	b.n	80075f8 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8007542:	6979      	ldr	r1, [r7, #20]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff fd04 	bl	8006f52 <get_fat>
 800754a:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00e      	beq.n	8007570 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007558:	d002      	beq.n	8007560 <create_chain+0xb0>
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d101      	bne.n	8007564 <create_chain+0xb4>
			return cs;
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	e049      	b.n	80075f8 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	429a      	cmp	r2, r3
 800756a:	d1d8      	bne.n	800751e <create_chain+0x6e>
 800756c:	2300      	movs	r3, #0
 800756e:	e043      	b.n	80075f8 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8007570:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8007572:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8007576:	6979      	ldr	r1, [r7, #20]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7ff fde5 	bl	8007148 <put_fat>
 800757e:	4603      	mov	r3, r0
 8007580:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8007582:	7bfb      	ldrb	r3, [r7, #15]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d109      	bne.n	800759c <create_chain+0xec>
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d006      	beq.n	800759c <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	6839      	ldr	r1, [r7, #0]
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7ff fdd8 	bl	8007148 <put_fat>
 8007598:	4603      	mov	r3, r0
 800759a:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d121      	bne.n	80075e6 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075a8:	461a      	mov	r2, r3
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ba:	d01c      	beq.n	80075f6 <create_chain+0x146>
			fs->free_clust--;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80075cc:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075d4:	795b      	ldrb	r3, [r3, #5]
 80075d6:	f043 0301 	orr.w	r3, r3, #1
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075e2:	715a      	strb	r2, [r3, #5]
 80075e4:	e007      	b.n	80075f6 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d102      	bne.n	80075f2 <create_chain+0x142>
 80075ec:	f04f 33ff 	mov.w	r3, #4294967295
 80075f0:	e000      	b.n	80075f4 <create_chain+0x144>
 80075f2:	2301      	movs	r3, #1
 80075f4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80075f6:	697b      	ldr	r3, [r7, #20]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3718      	adds	r7, #24
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007612:	3304      	adds	r3, #4
 8007614:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007622:	895b      	ldrh	r3, [r3, #10]
 8007624:	461a      	mov	r2, r3
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	fbb3 f3f2 	udiv	r3, r3, r2
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007632:	6812      	ldr	r2, [r2, #0]
 8007634:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007638:	7892      	ldrb	r2, [r2, #2]
 800763a:	fbb3 f3f2 	udiv	r3, r3, r2
 800763e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	1d1a      	adds	r2, r3, #4
 8007644:	613a      	str	r2, [r7, #16]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <clmt_clust+0x54>
 8007650:	2300      	movs	r3, #0
 8007652:	e010      	b.n	8007676 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	429a      	cmp	r2, r3
 800765a:	d307      	bcc.n	800766c <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	617b      	str	r3, [r7, #20]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	3304      	adds	r3, #4
 8007668:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800766a:	e7e9      	b.n	8007640 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 800766c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	4413      	add	r3, r2
}
 8007676:	4618      	mov	r0, r3
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	bc80      	pop	{r7}
 800767e:	4770      	bx	lr

08007680 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	b29a      	uxth	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007694:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d009      	beq.n	80076ba <dir_sdi+0x3a>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d301      	bcc.n	80076be <dir_sdi+0x3e>
		return FR_INT_ERR;
 80076ba:	2302      	movs	r3, #2
 80076bc:	e0aa      	b.n	8007814 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d110      	bne.n	80076e6 <dir_sdi+0x66>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d107      	bne.n	80076e6 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e4:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d115      	bne.n	8007718 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076f8:	891b      	ldrh	r3, [r3, #8]
 80076fa:	461a      	mov	r2, r3
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	4293      	cmp	r3, r2
 8007700:	d301      	bcc.n	8007706 <dir_sdi+0x86>
			return FR_INT_ERR;
 8007702:	2302      	movs	r3, #2
 8007704:	e086      	b.n	8007814 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007714:	613b      	str	r3, [r7, #16]
 8007716:	e043      	b.n	80077a0 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007724:	895b      	ldrh	r3, [r3, #10]
 8007726:	095b      	lsrs	r3, r3, #5
 8007728:	b29b      	uxth	r3, r3
 800772a:	461a      	mov	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007738:	789b      	ldrb	r3, [r3, #2]
 800773a:	fb02 f303 	mul.w	r3, r2, r3
 800773e:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8007740:	e021      	b.n	8007786 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6979      	ldr	r1, [r7, #20]
 800774c:	4618      	mov	r0, r3
 800774e:	f7ff fc00 	bl	8006f52 <get_fat>
 8007752:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775a:	d101      	bne.n	8007760 <dir_sdi+0xe0>
 800775c:	2301      	movs	r3, #1
 800775e:	e059      	b.n	8007814 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d909      	bls.n	800777a <dir_sdi+0xfa>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	429a      	cmp	r2, r3
 8007778:	d301      	bcc.n	800777e <dir_sdi+0xfe>
				return FR_INT_ERR;
 800777a:	2302      	movs	r3, #2
 800777c:	e04a      	b.n	8007814 <dir_sdi+0x194>
			idx -= ic;
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	429a      	cmp	r2, r3
 800778c:	d2d9      	bcs.n	8007742 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6979      	ldr	r1, [r7, #20]
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff fbb6 	bl	8006f0a <clust2sect>
 800779e:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077a6:	461a      	mov	r2, r3
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <dir_sdi+0x136>
 80077b2:	2302      	movs	r3, #2
 80077b4:	e02e      	b.n	8007814 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077c2:	895b      	ldrh	r3, [r3, #10]
 80077c4:	095b      	lsrs	r3, r3, #5
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	461a      	mov	r2, r3
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	4413      	add	r3, r2
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80077da:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4618      	mov	r0, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077f2:	895b      	ldrh	r3, [r3, #10]
 80077f4:	095b      	lsrs	r3, r3, #5
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	461a      	mov	r2, r3
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007800:	fb01 f202 	mul.w	r2, r1, r2
 8007804:	1a9b      	subs	r3, r3, r2
 8007806:	015b      	lsls	r3, r3, #5
 8007808:	4403      	add	r3, r0
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007810:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800781c:	b590      	push	{r4, r7, lr}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800782c:	88db      	ldrh	r3, [r3, #6]
 800782e:	3301      	adds	r3, #1
 8007830:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	b29b      	uxth	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d005      	beq.n	8007846 <dir_next+0x2a>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <dir_next+0x2e>
		return FR_NO_FILE;
 8007846:	2304      	movs	r3, #4
 8007848:	e12e      	b.n	8007aa8 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007856:	895b      	ldrh	r3, [r3, #10]
 8007858:	095b      	lsrs	r3, r3, #5
 800785a:	b29b      	uxth	r3, r3
 800785c:	461a      	mov	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	fbb3 f1f2 	udiv	r1, r3, r2
 8007864:	fb01 f202 	mul.w	r2, r1, r2
 8007868:	1a9b      	subs	r3, r3, r2
 800786a:	2b00      	cmp	r3, #0
 800786c:	f040 80fa 	bne.w	8007a64 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	3301      	adds	r3, #1
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007880:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10d      	bne.n	80078aa <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800789a:	891b      	ldrh	r3, [r3, #8]
 800789c:	461a      	mov	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	4293      	cmp	r3, r2
 80078a2:	f0c0 80df 	bcc.w	8007a64 <dir_next+0x248>
				return FR_NO_FILE;
 80078a6:	2304      	movs	r3, #4
 80078a8:	e0fe      	b.n	8007aa8 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078b6:	895b      	ldrh	r3, [r3, #10]
 80078b8:	095b      	lsrs	r3, r3, #5
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	461a      	mov	r2, r3
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80078ca:	6812      	ldr	r2, [r2, #0]
 80078cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80078d0:	7892      	ldrb	r2, [r2, #2]
 80078d2:	3a01      	subs	r2, #1
 80078d4:	4013      	ands	r3, r2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f040 80c4 	bne.w	8007a64 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	4619      	mov	r1, r3
 80078ee:	4610      	mov	r0, r2
 80078f0:	f7ff fb2f 	bl	8006f52 <get_fat>
 80078f4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d801      	bhi.n	8007900 <dir_next+0xe4>
 80078fc:	2302      	movs	r3, #2
 80078fe:	e0d3      	b.n	8007aa8 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007906:	d101      	bne.n	800790c <dir_next+0xf0>
 8007908:	2301      	movs	r3, #1
 800790a:	e0cd      	b.n	8007aa8 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	429a      	cmp	r2, r3
 800791e:	f0c0 808e 	bcc.w	8007a3e <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <dir_next+0x110>
 8007928:	2304      	movs	r3, #4
 800792a:	e0bd      	b.n	8007aa8 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	4619      	mov	r1, r3
 800793e:	4610      	mov	r0, r2
 8007940:	f7ff fdb6 	bl	80074b0 <create_chain>
 8007944:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <dir_next+0x134>
 800794c:	2307      	movs	r3, #7
 800794e:	e0ab      	b.n	8007aa8 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d101      	bne.n	800795a <dir_next+0x13e>
 8007956:	2302      	movs	r3, #2
 8007958:	e0a6      	b.n	8007aa8 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007960:	d101      	bne.n	8007966 <dir_next+0x14a>
 8007962:	2301      	movs	r3, #1
 8007964:	e0a0      	b.n	8007aa8 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff f988 	bl	8006c84 <sync_window>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <dir_next+0x162>
 800797a:	2301      	movs	r3, #1
 800797c:	e094      	b.n	8007aa8 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4618      	mov	r0, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007994:	895b      	ldrh	r3, [r3, #10]
 8007996:	461a      	mov	r2, r3
 8007998:	2100      	movs	r1, #0
 800799a:	f7fe ff5b 	bl	8006854 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079ac:	681c      	ldr	r4, [r3, #0]
 80079ae:	6979      	ldr	r1, [r7, #20]
 80079b0:	4610      	mov	r0, r2
 80079b2:	f7ff faaa 	bl	8006f0a <clust2sect>
 80079b6:	4603      	mov	r3, r0
 80079b8:	f504 5280 	add.w	r2, r4, #4096	@ 0x1000
 80079bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80079be:	2300      	movs	r3, #0
 80079c0:	613b      	str	r3, [r7, #16]
 80079c2:	e021      	b.n	8007a08 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079d0:	2201      	movs	r2, #1
 80079d2:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4618      	mov	r0, r3
 80079de:	f7ff f951 	bl	8006c84 <sync_window>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d001      	beq.n	80079ec <dir_next+0x1d0>
 80079e8:	2301      	movs	r3, #1
 80079ea:	e05d      	b.n	8007aa8 <dir_next+0x28c>
						dp->fs->winsect++;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 80079f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80079fa:	3201      	adds	r2, #1
 80079fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a00:	62da      	str	r2, [r3, #44]	@ 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	3301      	adds	r3, #1
 8007a06:	613b      	str	r3, [r7, #16]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a14:	789b      	ldrb	r3, [r3, #2]
 8007a16:	461a      	mov	r2, r3
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d3d2      	bcc.n	80079c4 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	1acb      	subs	r3, r1, r3
 8007a38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007a3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a44:	461a      	mov	r2, r3
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6979      	ldr	r1, [r7, #20]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7ff fa58 	bl	8006f0a <clust2sect>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a62:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a6e:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a86:	895b      	ldrh	r3, [r3, #10]
 8007a88:	095b      	lsrs	r3, r3, #5
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a94:	fb01 f202 	mul.w	r2, r1, r2
 8007a98:	1a9b      	subs	r3, r3, r2
 8007a9a:	015b      	lsls	r3, r3, #5
 8007a9c:	4403      	add	r3, r0
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007aa4:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	371c      	adds	r7, #28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd90      	pop	{r4, r7, pc}

08007ab0 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8007aba:	2100      	movs	r1, #0
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7ff fddf 	bl	8007680 <dir_sdi>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d135      	bne.n	8007b38 <dir_alloc+0x88>
		n = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4610      	mov	r0, r2
 8007ae4:	f7ff f920 	bl	8006d28 <move_window>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d121      	bne.n	8007b36 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	2be5      	cmp	r3, #229	@ 0xe5
 8007afe:	d006      	beq.n	8007b0e <dir_alloc+0x5e>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d107      	bne.n	8007b1e <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	3301      	adds	r3, #1
 8007b12:	60bb      	str	r3, [r7, #8]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d102      	bne.n	8007b22 <dir_alloc+0x72>
 8007b1c:	e00c      	b.n	8007b38 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007b1e:	2300      	movs	r3, #0
 8007b20:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007b22:	2101      	movs	r1, #1
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7ff fe79 	bl	800781c <dir_next>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007b2e:	7bfb      	ldrb	r3, [r7, #15]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d0cd      	beq.n	8007ad0 <dir_alloc+0x20>
 8007b34:	e000      	b.n	8007b38 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8007b36:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
 8007b3a:	2b04      	cmp	r3, #4
 8007b3c:	d101      	bne.n	8007b42 <dir_alloc+0x92>
 8007b3e:	2307      	movs	r3, #7
 8007b40:	73fb      	strb	r3, [r7, #15]
	return res;
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	331b      	adds	r3, #27
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	021b      	lsls	r3, r3, #8
 8007b5e:	b21a      	sxth	r2, r3
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	331a      	adds	r3, #26
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	b21b      	sxth	r3, r3
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	b21b      	sxth	r3, r3
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	2b03      	cmp	r3, #3
 8007b7a:	d10f      	bne.n	8007b9c <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	3315      	adds	r3, #21
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	021b      	lsls	r3, r3, #8
 8007b84:	b21a      	sxth	r2, r3
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	3314      	adds	r3, #20
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	b21b      	sxth	r3, r3
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	b21b      	sxth	r3, r3
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	041b      	lsls	r3, r3, #16
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]

	return cl;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bc80      	pop	{r7}
 8007ba6:	4770      	bx	lr

08007ba8 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	331a      	adds	r3, #26
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	b2d2      	uxtb	r2, r2
 8007bba:	701a      	strb	r2, [r3, #0]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	0a1b      	lsrs	r3, r3, #8
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	331b      	adds	r3, #27
 8007bc8:	b2d2      	uxtb	r2, r2
 8007bca:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	0c1a      	lsrs	r2, r3, #16
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	3314      	adds	r3, #20
 8007bd4:	b2d2      	uxtb	r2, r2
 8007bd6:	701a      	strb	r2, [r3, #0]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	0c1b      	lsrs	r3, r3, #16
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	0a1b      	lsrs	r3, r3, #8
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	3315      	adds	r3, #21
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	701a      	strb	r2, [r3, #0]
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bc80      	pop	{r7}
 8007bf2:	4770      	bx	lr

08007bf4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c06:	1e5a      	subs	r2, r3, #1
 8007c08:	4613      	mov	r3, r2
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8007c14:	2300      	movs	r3, #0
 8007c16:	613b      	str	r3, [r7, #16]
 8007c18:	2301      	movs	r3, #1
 8007c1a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8007c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8007ccc <cmp_lfn+0xd8>)
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	4413      	add	r3, r2
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	3301      	adds	r3, #1
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	4413      	add	r3, r2
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	b21a      	sxth	r2, r3
 8007c30:	4926      	ldr	r1, [pc, #152]	@ (8007ccc <cmp_lfn+0xd8>)
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	440b      	add	r3, r1
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	4619      	mov	r1, r3
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	440b      	add	r3, r1
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	b21b      	sxth	r3, r3
 8007c42:	4313      	orrs	r3, r2
 8007c44:	b21b      	sxth	r3, r3
 8007c46:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8007c48:	89fb      	ldrh	r3, [r7, #14]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d019      	beq.n	8007c82 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8007c4e:	89bb      	ldrh	r3, [r7, #12]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f002 fc2f 	bl	800a4b4 <ff_wtoupper>
 8007c56:	4603      	mov	r3, r0
 8007c58:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2bfe      	cmp	r3, #254	@ 0xfe
 8007c5e:	d80e      	bhi.n	8007c7e <cmp_lfn+0x8a>
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	617a      	str	r2, [r7, #20]
 8007c66:	005b      	lsls	r3, r3, #1
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f002 fc20 	bl	800a4b4 <ff_wtoupper>
 8007c74:	4603      	mov	r3, r0
 8007c76:	461a      	mov	r2, r3
 8007c78:	89fb      	ldrh	r3, [r7, #14]
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d008      	beq.n	8007c90 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e01f      	b.n	8007cc2 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8007c82:	89bb      	ldrh	r3, [r7, #12]
 8007c84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d001      	beq.n	8007c90 <cmp_lfn+0x9c>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	e018      	b.n	8007cc2 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	3301      	adds	r3, #1
 8007c94:	613b      	str	r3, [r7, #16]
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	2b0c      	cmp	r3, #12
 8007c9a:	d9bf      	bls.n	8007c1c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <cmp_lfn+0xcc>
 8007ca8:	89fb      	ldrh	r3, [r7, #14]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d008      	beq.n	8007cc0 <cmp_lfn+0xcc>
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	005b      	lsls	r3, r3, #1
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <cmp_lfn+0xcc>
		return 0;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e000      	b.n	8007cc2 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8007cc0:	2301      	movs	r3, #1
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3718      	adds	r7, #24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	0800d370 	.word	0x0800d370

08007cd0 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b089      	sub	sp, #36	@ 0x24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	4611      	mov	r1, r2
 8007cdc:	461a      	mov	r2, r3
 8007cde:	460b      	mov	r3, r1
 8007ce0:	71fb      	strb	r3, [r7, #7]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	330d      	adds	r3, #13
 8007cea:	79ba      	ldrb	r2, [r7, #6]
 8007cec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	330b      	adds	r3, #11
 8007cf2:	220f      	movs	r2, #15
 8007cf4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	330c      	adds	r3, #12
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	331a      	adds	r3, #26
 8007d02:	2200      	movs	r2, #0
 8007d04:	701a      	strb	r2, [r3, #0]
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	331b      	adds	r3, #27
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	1e5a      	subs	r2, r3, #1
 8007d12:	4613      	mov	r3, r2
 8007d14:	005b      	lsls	r3, r3, #1
 8007d16:	4413      	add	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	82fb      	strh	r3, [r7, #22]
 8007d22:	2300      	movs	r3, #0
 8007d24:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8007d26:	8afb      	ldrh	r3, [r7, #22]
 8007d28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d007      	beq.n	8007d40 <fit_lfn+0x70>
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	1c5a      	adds	r2, r3, #1
 8007d34:	61fa      	str	r2, [r7, #28]
 8007d36:	005b      	lsls	r3, r3, #1
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8007d40:	4a1c      	ldr	r2, [pc, #112]	@ (8007db4 <fit_lfn+0xe4>)
 8007d42:	69bb      	ldr	r3, [r7, #24]
 8007d44:	4413      	add	r3, r2
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	8afa      	ldrh	r2, [r7, #22]
 8007d50:	b2d2      	uxtb	r2, r2
 8007d52:	701a      	strb	r2, [r3, #0]
 8007d54:	8afb      	ldrh	r3, [r7, #22]
 8007d56:	0a1b      	lsrs	r3, r3, #8
 8007d58:	b299      	uxth	r1, r3
 8007d5a:	4a16      	ldr	r2, [pc, #88]	@ (8007db4 <fit_lfn+0xe4>)
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	4413      	add	r3, r2
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	3301      	adds	r3, #1
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	4413      	add	r3, r2
 8007d68:	b2ca      	uxtb	r2, r1
 8007d6a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8007d6c:	8afb      	ldrh	r3, [r7, #22]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d102      	bne.n	8007d78 <fit_lfn+0xa8>
 8007d72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d76:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	61bb      	str	r3, [r7, #24]
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	2b0c      	cmp	r3, #12
 8007d82:	d9d0      	bls.n	8007d26 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8007d84:	8afb      	ldrh	r3, [r7, #22]
 8007d86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d006      	beq.n	8007d9c <fit_lfn+0xcc>
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	4413      	add	r3, r2
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d103      	bne.n	8007da4 <fit_lfn+0xd4>
 8007d9c:	79fb      	ldrb	r3, [r7, #7]
 8007d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007da2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	79fa      	ldrb	r2, [r7, #7]
 8007da8:	701a      	strb	r2, [r3, #0]
}
 8007daa:	bf00      	nop
 8007dac:	3724      	adds	r7, #36	@ 0x24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc80      	pop	{r7}
 8007db2:	4770      	bx	lr
 8007db4:	0800d370 	.word	0x0800d370

08007db8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08c      	sub	sp, #48	@ 0x30
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007dc6:	220b      	movs	r2, #11
 8007dc8:	68b9      	ldr	r1, [r7, #8]
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f7fe fd24 	bl	8006818 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	2b05      	cmp	r3, #5
 8007dd4:	d92b      	bls.n	8007e2e <gen_numname+0x76>
		sr = seq;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007dda:	e022      	b.n	8007e22 <gen_numname+0x6a>
			wc = *lfn++;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	1c9a      	adds	r2, r3, #2
 8007de0:	607a      	str	r2, [r7, #4]
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8007de6:	2300      	movs	r3, #0
 8007de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dea:	e017      	b.n	8007e1c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	005a      	lsls	r2, r3, #1
 8007df0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	4413      	add	r3, r2
 8007df8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007dfa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007dfc:	085b      	lsrs	r3, r3, #1
 8007dfe:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d005      	beq.n	8007e16 <gen_numname+0x5e>
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8007e10:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8007e14:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e18:	3301      	adds	r3, #1
 8007e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e1e:	2b0f      	cmp	r3, #15
 8007e20:	d9e4      	bls.n	8007dec <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1d8      	bne.n	8007ddc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007e2e:	2307      	movs	r3, #7
 8007e30:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (seq % 16) + '0';
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	f003 030f 	and.w	r3, r3, #15
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	3330      	adds	r3, #48	@ 0x30
 8007e3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8007e42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e46:	2b39      	cmp	r3, #57	@ 0x39
 8007e48:	d904      	bls.n	8007e54 <gen_numname+0x9c>
 8007e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e4e:	3307      	adds	r3, #7
 8007e50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8007e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e56:	1e5a      	subs	r2, r3, #1
 8007e58:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007e5a:	3330      	adds	r3, #48	@ 0x30
 8007e5c:	443b      	add	r3, r7
 8007e5e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007e62:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	091b      	lsrs	r3, r3, #4
 8007e6a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1df      	bne.n	8007e32 <gen_numname+0x7a>
	ns[i] = '~';
 8007e72:	f107 0214 	add.w	r2, r7, #20
 8007e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e78:	4413      	add	r3, r2
 8007e7a:	227e      	movs	r2, #126	@ 0x7e
 8007e7c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007e7e:	2300      	movs	r3, #0
 8007e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e82:	e002      	b.n	8007e8a <gen_numname+0xd2>
 8007e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e86:	3301      	adds	r3, #1
 8007e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d205      	bcs.n	8007e9e <gen_numname+0xe6>
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e96:	4413      	add	r3, r2
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	d1f2      	bne.n	8007e84 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea0:	2b07      	cmp	r3, #7
 8007ea2:	d807      	bhi.n	8007eb4 <gen_numname+0xfc>
 8007ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007eaa:	3330      	adds	r3, #48	@ 0x30
 8007eac:	443b      	add	r3, r7
 8007eae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007eb2:	e000      	b.n	8007eb6 <gen_numname+0xfe>
 8007eb4:	2120      	movs	r1, #32
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	460a      	mov	r2, r1
 8007ec2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec6:	2b07      	cmp	r3, #7
 8007ec8:	d9e9      	bls.n	8007e9e <gen_numname+0xe6>
}
 8007eca:	bf00      	nop
 8007ecc:	bf00      	nop
 8007ece:	3730      	adds	r7, #48	@ 0x30
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007ee0:	230b      	movs	r3, #11
 8007ee2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	0852      	lsrs	r2, r2, #1
 8007eea:	01db      	lsls	r3, r3, #7
 8007eec:	4313      	orrs	r3, r2
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	1c59      	adds	r1, r3, #1
 8007ef4:	6079      	str	r1, [r7, #4]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	4413      	add	r3, r2
 8007efa:	73fb      	strb	r3, [r7, #15]
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	3b01      	subs	r3, #1
 8007f00:	60bb      	str	r3, [r7, #8]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1ed      	bne.n	8007ee4 <sum_sfn+0x10>
	return sum;
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bc80      	pop	{r7}
 8007f12:	4770      	bx	lr

08007f14 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7ff fbae 	bl	8007680 <dir_sdi>
 8007f24:	4603      	mov	r3, r0
 8007f26:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007f28:	7dfb      	ldrb	r3, [r7, #23]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <dir_find+0x1e>
 8007f2e:	7dfb      	ldrb	r3, [r7, #23]
 8007f30:	e0b8      	b.n	80080a4 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007f32:	23ff      	movs	r3, #255	@ 0xff
 8007f34:	753b      	strb	r3, [r7, #20]
 8007f36:	7d3b      	ldrb	r3, [r7, #20]
 8007f38:	757b      	strb	r3, [r7, #21]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f44:	849a      	strh	r2, [r3, #36]	@ 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	4619      	mov	r1, r3
 8007f58:	4610      	mov	r0, r2
 8007f5a:	f7fe fee5 	bl	8006d28 <move_window>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007f62:	7dfb      	ldrb	r3, [r7, #23]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f040 8097 	bne.w	8008098 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007f7a:	7dbb      	ldrb	r3, [r7, #22]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d102      	bne.n	8007f86 <dir_find+0x72>
 8007f80:	2304      	movs	r3, #4
 8007f82:	75fb      	strb	r3, [r7, #23]
 8007f84:	e08d      	b.n	80080a2 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	330b      	adds	r3, #11
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f90:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007f92:	7dbb      	ldrb	r3, [r7, #22]
 8007f94:	2be5      	cmp	r3, #229	@ 0xe5
 8007f96:	d007      	beq.n	8007fa8 <dir_find+0x94>
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
 8007f9a:	f003 0308 	and.w	r3, r3, #8
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00b      	beq.n	8007fba <dir_find+0xa6>
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
 8007fa4:	2b0f      	cmp	r3, #15
 8007fa6:	d008      	beq.n	8007fba <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007fa8:	23ff      	movs	r3, #255	@ 0xff
 8007faa:	757b      	strb	r3, [r7, #21]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007fb6:	849a      	strh	r2, [r3, #36]	@ 0x24
 8007fb8:	e063      	b.n	8008082 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007fba:	7bfb      	ldrb	r3, [r7, #15]
 8007fbc:	2b0f      	cmp	r3, #15
 8007fbe:	d137      	bne.n	8008030 <dir_find+0x11c>
				if (dp->lfn) {
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fc6:	6a1b      	ldr	r3, [r3, #32]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d05a      	beq.n	8008082 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007fcc:	7dbb      	ldrb	r3, [r7, #22]
 8007fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d010      	beq.n	8007ff8 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	7b5b      	ldrb	r3, [r3, #13]
 8007fda:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8007fdc:	7dbb      	ldrb	r3, [r7, #22]
 8007fde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fe2:	75bb      	strb	r3, [r7, #22]
 8007fe4:	7dbb      	ldrb	r3, [r7, #22]
 8007fe6:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fee:	88da      	ldrh	r2, [r3, #6]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ff6:	849a      	strh	r2, [r3, #36]	@ 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8007ff8:	7dba      	ldrb	r2, [r7, #22]
 8007ffa:	7d7b      	ldrb	r3, [r7, #21]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d114      	bne.n	800802a <dir_find+0x116>
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	330d      	adds	r3, #13
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	7d3a      	ldrb	r2, [r7, #20]
 8008008:	429a      	cmp	r2, r3
 800800a:	d10e      	bne.n	800802a <dir_find+0x116>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008012:	6a1b      	ldr	r3, [r3, #32]
 8008014:	6939      	ldr	r1, [r7, #16]
 8008016:	4618      	mov	r0, r3
 8008018:	f7ff fdec 	bl	8007bf4 <cmp_lfn>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <dir_find+0x116>
 8008022:	7d7b      	ldrb	r3, [r7, #21]
 8008024:	3b01      	subs	r3, #1
 8008026:	b2db      	uxtb	r3, r3
 8008028:	e000      	b.n	800802c <dir_find+0x118>
 800802a:	23ff      	movs	r3, #255	@ 0xff
 800802c:	757b      	strb	r3, [r7, #21]
 800802e:	e028      	b.n	8008082 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8008030:	7d7b      	ldrb	r3, [r7, #21]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d107      	bne.n	8008046 <dir_find+0x132>
 8008036:	6938      	ldr	r0, [r7, #16]
 8008038:	f7ff ff4c 	bl	8007ed4 <sum_sfn>
 800803c:	4603      	mov	r3, r0
 800803e:	461a      	mov	r2, r3
 8008040:	7d3b      	ldrb	r3, [r7, #20]
 8008042:	4293      	cmp	r3, r2
 8008044:	d02a      	beq.n	800809c <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	330b      	adds	r3, #11
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10b      	bne.n	8008072 <dir_find+0x15e>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	220b      	movs	r2, #11
 8008064:	4619      	mov	r1, r3
 8008066:	6938      	ldr	r0, [r7, #16]
 8008068:	f7fe fc0e 	bl	8006888 <mem_cmp>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d016      	beq.n	80080a0 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8008072:	23ff      	movs	r3, #255	@ 0xff
 8008074:	757b      	strb	r3, [r7, #21]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800807c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008080:	849a      	strh	r2, [r3, #36]	@ 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8008082:	2100      	movs	r1, #0
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7ff fbc9 	bl	800781c <dir_next>
 800808a:	4603      	mov	r3, r0
 800808c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800808e:	7dfb      	ldrb	r3, [r7, #23]
 8008090:	2b00      	cmp	r3, #0
 8008092:	f43f af58 	beq.w	8007f46 <dir_find+0x32>
 8008096:	e004      	b.n	80080a2 <dir_find+0x18e>
		if (res != FR_OK) break;
 8008098:	bf00      	nop
 800809a:	e002      	b.n	80080a2 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800809c:	bf00      	nop
 800809e:	e000      	b.n	80080a2 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80080a0:	bf00      	nop

	return res;
 80080a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3718      	adds	r7, #24
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b08c      	sub	sp, #48	@ 0x30
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	623b      	str	r3, [r7, #32]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80080c8:	f107 030c 	add.w	r3, r7, #12
 80080cc:	220c      	movs	r2, #12
 80080ce:	6a39      	ldr	r1, [r7, #32]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7fe fba1 	bl	8006818 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80080d6:	7dfb      	ldrb	r3, [r7, #23]
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d03b      	beq.n	8008158 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	330b      	adds	r3, #11
 80080e4:	2200      	movs	r2, #0
 80080e6:	701a      	strb	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080ee:	461a      	mov	r2, r3
 80080f0:	2300      	movs	r3, #0
 80080f2:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 80080f4:	2301      	movs	r3, #1
 80080f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080f8:	e013      	b.n	8008122 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80080fa:	f107 010c 	add.w	r1, r7, #12
 80080fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008100:	69fa      	ldr	r2, [r7, #28]
 8008102:	6a38      	ldr	r0, [r7, #32]
 8008104:	f7ff fe58 	bl	8007db8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7ff ff03 	bl	8007f14 <dir_find>
 800810e:	4603      	mov	r3, r0
 8008110:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8008114:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008118:	2b00      	cmp	r3, #0
 800811a:	d106      	bne.n	800812a <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800811c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811e:	3301      	adds	r3, #1
 8008120:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008124:	2b63      	cmp	r3, #99	@ 0x63
 8008126:	d9e8      	bls.n	80080fa <dir_register+0x4e>
 8008128:	e000      	b.n	800812c <dir_register+0x80>
			if (res != FR_OK) break;
 800812a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800812c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812e:	2b64      	cmp	r3, #100	@ 0x64
 8008130:	d101      	bne.n	8008136 <dir_register+0x8a>
 8008132:	2307      	movs	r3, #7
 8008134:	e0d8      	b.n	80082e8 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008136:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800813a:	2b04      	cmp	r3, #4
 800813c:	d002      	beq.n	8008144 <dir_register+0x98>
 800813e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008142:	e0d1      	b.n	80082e8 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	330b      	adds	r3, #11
 8008148:	7dfa      	ldrb	r2, [r7, #23]
 800814a:	701a      	strb	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008152:	461a      	mov	r2, r3
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8008158:	7dfb      	ldrb	r3, [r7, #23]
 800815a:	f003 0302 	and.w	r3, r3, #2
 800815e:	2b00      	cmp	r3, #0
 8008160:	d014      	beq.n	800818c <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8008162:	2300      	movs	r3, #0
 8008164:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008166:	e002      	b.n	800816e <dir_register+0xc2>
 8008168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800816a:	3301      	adds	r3, #1
 800816c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800816e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008170:	005b      	lsls	r3, r3, #1
 8008172:	69fa      	ldr	r2, [r7, #28]
 8008174:	4413      	add	r3, r2
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d1f5      	bne.n	8008168 <dir_register+0xbc>
		nent = (n + 25) / 13;
 800817c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817e:	3319      	adds	r3, #25
 8008180:	4a5b      	ldr	r2, [pc, #364]	@ (80082f0 <dir_register+0x244>)
 8008182:	fba2 2303 	umull	r2, r3, r2, r3
 8008186:	089b      	lsrs	r3, r3, #2
 8008188:	627b      	str	r3, [r7, #36]	@ 0x24
 800818a:	e001      	b.n	8008190 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800818c:	2301      	movs	r3, #1
 800818e:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008190:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7ff fc8c 	bl	8007ab0 <dir_alloc>
 8008198:	4603      	mov	r3, r0
 800819a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800819e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d15b      	bne.n	800825e <dir_register+0x1b2>
 80081a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a8:	3b01      	subs	r3, #1
 80081aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80081ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d055      	beq.n	800825e <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081b8:	88db      	ldrh	r3, [r3, #6]
 80081ba:	461a      	mov	r2, r3
 80081bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	4619      	mov	r1, r3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7ff fa5c 	bl	8007680 <dir_sdi>
 80081c8:	4603      	mov	r3, r0
 80081ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80081ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d143      	bne.n	800825e <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	4618      	mov	r0, r3
 80081e0:	f7ff fe78 	bl	8007ed4 <sum_sfn>
 80081e4:	4603      	mov	r3, r0
 80081e6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	4619      	mov	r1, r3
 80081fa:	4610      	mov	r0, r2
 80081fc:	f7fe fd94 	bl	8006d28 <move_window>
 8008200:	4603      	mov	r3, r0
 8008202:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8008206:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800820a:	2b00      	cmp	r3, #0
 800820c:	d126      	bne.n	800825c <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008214:	6a18      	ldr	r0, [r3, #32]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800821c:	6959      	ldr	r1, [r3, #20]
 800821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008220:	b2da      	uxtb	r2, r3
 8008222:	7efb      	ldrb	r3, [r7, #27]
 8008224:	f7ff fd54 	bl	8007cd0 <fit_lfn>
				dp->fs->wflag = 1;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008234:	2201      	movs	r2, #1
 8008236:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8008238:	2100      	movs	r1, #0
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7ff faee 	bl	800781c <dir_next>
 8008240:	4603      	mov	r3, r0
 8008242:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8008246:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800824a:	2b00      	cmp	r3, #0
 800824c:	d107      	bne.n	800825e <dir_register+0x1b2>
 800824e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008250:	3b01      	subs	r3, #1
 8008252:	627b      	str	r3, [r7, #36]	@ 0x24
 8008254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1c6      	bne.n	80081e8 <dir_register+0x13c>
 800825a:	e000      	b.n	800825e <dir_register+0x1b2>
				if (res != FR_OK) break;
 800825c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800825e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008262:	2b00      	cmp	r3, #0
 8008264:	d13e      	bne.n	80082e4 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	4619      	mov	r1, r3
 8008278:	4610      	mov	r0, r2
 800827a:	f7fe fd55 	bl	8006d28 <move_window>
 800827e:	4603      	mov	r3, r0
 8008280:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008284:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008288:	2b00      	cmp	r3, #0
 800828a:	d12b      	bne.n	80082e4 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	2220      	movs	r2, #32
 8008296:	2100      	movs	r1, #0
 8008298:	4618      	mov	r0, r3
 800829a:	f7fe fadb 	bl	8006854 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082a4:	6958      	ldr	r0, [r3, #20]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	220b      	movs	r2, #11
 80082b0:	4619      	mov	r1, r3
 80082b2:	f7fe fab1 	bl	8006818 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	330b      	adds	r3, #11
 80082c0:	781a      	ldrb	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	330c      	adds	r3, #12
 80082cc:	f002 0218 	and.w	r2, r2, #24
 80082d0:	b2d2      	uxtb	r2, r2
 80082d2:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082e0:	2201      	movs	r2, #1
 80082e2:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80082e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3730      	adds	r7, #48	@ 0x30
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	4ec4ec4f 	.word	0x4ec4ec4f

080082f4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08a      	sub	sp, #40	@ 0x28
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	613b      	str	r3, [r7, #16]
 8008304:	e002      	b.n	800830c <create_name+0x18>
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	3301      	adds	r3, #1
 800830a:	613b      	str	r3, [r7, #16]
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2b2f      	cmp	r3, #47	@ 0x2f
 8008312:	d0f8      	beq.n	8008306 <create_name+0x12>
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b5c      	cmp	r3, #92	@ 0x5c
 800831a:	d0f4      	beq.n	8008306 <create_name+0x12>
	lfn = dp->lfn;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008322:	6a1b      	ldr	r3, [r3, #32]
 8008324:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8008326:	2300      	movs	r3, #0
 8008328:	617b      	str	r3, [r7, #20]
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	1c5a      	adds	r2, r3, #1
 8008332:	61ba      	str	r2, [r7, #24]
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	4413      	add	r3, r2
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800833c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800833e:	2b1f      	cmp	r3, #31
 8008340:	d92f      	bls.n	80083a2 <create_name+0xae>
 8008342:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008344:	2b2f      	cmp	r3, #47	@ 0x2f
 8008346:	d02c      	beq.n	80083a2 <create_name+0xae>
 8008348:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800834a:	2b5c      	cmp	r3, #92	@ 0x5c
 800834c:	d029      	beq.n	80083a2 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2bfe      	cmp	r3, #254	@ 0xfe
 8008352:	d901      	bls.n	8008358 <create_name+0x64>
			return FR_INVALID_NAME;
 8008354:	2306      	movs	r3, #6
 8008356:	e186      	b.n	8008666 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008358:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800835a:	b2db      	uxtb	r3, r3
 800835c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800835e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008360:	2101      	movs	r1, #1
 8008362:	4618      	mov	r0, r3
 8008364:	f002 f86c 	bl	800a440 <ff_convert>
 8008368:	4603      	mov	r3, r0
 800836a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800836c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800836e:	2b00      	cmp	r3, #0
 8008370:	d101      	bne.n	8008376 <create_name+0x82>
 8008372:	2306      	movs	r3, #6
 8008374:	e177      	b.n	8008666 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8008376:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008378:	2b7f      	cmp	r3, #127	@ 0x7f
 800837a:	d809      	bhi.n	8008390 <create_name+0x9c>
 800837c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800837e:	4619      	mov	r1, r3
 8008380:	488e      	ldr	r0, [pc, #568]	@ (80085bc <create_name+0x2c8>)
 8008382:	f7fe faa7 	bl	80068d4 <chk_chr>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <create_name+0x9c>
			return FR_INVALID_NAME;
 800838c:	2306      	movs	r3, #6
 800838e:	e16a      	b.n	8008666 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	1c5a      	adds	r2, r3, #1
 8008394:	617a      	str	r2, [r7, #20]
 8008396:	005b      	lsls	r3, r3, #1
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	4413      	add	r3, r2
 800839c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800839e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80083a0:	e7c5      	b.n	800832e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	441a      	add	r2, r3
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80083ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083ae:	2b1f      	cmp	r3, #31
 80083b0:	d801      	bhi.n	80083b6 <create_name+0xc2>
 80083b2:	2304      	movs	r3, #4
 80083b4:	e000      	b.n	80083b8 <create_name+0xc4>
 80083b6:	2300      	movs	r3, #0
 80083b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 80083bc:	e011      	b.n	80083e2 <create_name+0xee>
		w = lfn[di - 1];
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80083c4:	3b01      	subs	r3, #1
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	4413      	add	r3, r2
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80083d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083d2:	2b20      	cmp	r3, #32
 80083d4:	d002      	beq.n	80083dc <create_name+0xe8>
 80083d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80083d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80083da:	d106      	bne.n	80083ea <create_name+0xf6>
		di--;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	3b01      	subs	r3, #1
 80083e0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1ea      	bne.n	80083be <create_name+0xca>
 80083e8:	e000      	b.n	80083ec <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 80083ea:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d101      	bne.n	80083f6 <create_name+0x102>
 80083f2:	2306      	movs	r3, #6
 80083f4:	e137      	b.n	8008666 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	4413      	add	r3, r2
 80083fe:	2200      	movs	r2, #0
 8008400:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	220b      	movs	r2, #11
 800840c:	2120      	movs	r1, #32
 800840e:	4618      	mov	r0, r3
 8008410:	f7fe fa20 	bl	8006854 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008414:	2300      	movs	r3, #0
 8008416:	61bb      	str	r3, [r7, #24]
 8008418:	e002      	b.n	8008420 <create_name+0x12c>
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	3301      	adds	r3, #1
 800841e:	61bb      	str	r3, [r7, #24]
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	4413      	add	r3, r2
 8008428:	881b      	ldrh	r3, [r3, #0]
 800842a:	2b20      	cmp	r3, #32
 800842c:	d0f5      	beq.n	800841a <create_name+0x126>
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	4413      	add	r3, r2
 8008436:	881b      	ldrh	r3, [r3, #0]
 8008438:	2b2e      	cmp	r3, #46	@ 0x2e
 800843a:	d0ee      	beq.n	800841a <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d009      	beq.n	8008456 <create_name+0x162>
 8008442:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008446:	f043 0303 	orr.w	r3, r3, #3
 800844a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800844e:	e002      	b.n	8008456 <create_name+0x162>
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	3b01      	subs	r3, #1
 8008454:	617b      	str	r3, [r7, #20]
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d009      	beq.n	8008470 <create_name+0x17c>
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008462:	3b01      	subs	r3, #1
 8008464:	005b      	lsls	r3, r3, #1
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	4413      	add	r3, r2
 800846a:	881b      	ldrh	r3, [r3, #0]
 800846c:	2b2e      	cmp	r3, #46	@ 0x2e
 800846e:	d1ef      	bne.n	8008450 <create_name+0x15c>

	b = i = 0; ni = 8;
 8008470:	2300      	movs	r3, #0
 8008472:	623b      	str	r3, [r7, #32]
 8008474:	2300      	movs	r3, #0
 8008476:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800847a:	2308      	movs	r3, #8
 800847c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	1c5a      	adds	r2, r3, #1
 8008482:	61ba      	str	r2, [r7, #24]
 8008484:	005b      	lsls	r3, r3, #1
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	4413      	add	r3, r2
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800848e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 8091 	beq.w	80085b8 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008496:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008498:	2b20      	cmp	r3, #32
 800849a:	d006      	beq.n	80084aa <create_name+0x1b6>
 800849c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800849e:	2b2e      	cmp	r3, #46	@ 0x2e
 80084a0:	d10a      	bne.n	80084b8 <create_name+0x1c4>
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d006      	beq.n	80084b8 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 80084aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084ae:	f043 0303 	orr.w	r3, r3, #3
 80084b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80084b6:	e07e      	b.n	80085b6 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80084b8:	6a3a      	ldr	r2, [r7, #32]
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d203      	bcs.n	80084c8 <create_name+0x1d4>
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d123      	bne.n	8008510 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	2b0b      	cmp	r3, #11
 80084cc:	d106      	bne.n	80084dc <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 80084ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084d2:	f043 0303 	orr.w	r3, r3, #3
 80084d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80084da:	e076      	b.n	80085ca <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d005      	beq.n	80084f0 <create_name+0x1fc>
 80084e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084e8:	f043 0303 	orr.w	r3, r3, #3
 80084ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80084f0:	69ba      	ldr	r2, [r7, #24]
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d867      	bhi.n	80085c8 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	61bb      	str	r3, [r7, #24]
 80084fc:	2308      	movs	r3, #8
 80084fe:	623b      	str	r3, [r7, #32]
 8008500:	230b      	movs	r3, #11
 8008502:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008504:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800850e:	e052      	b.n	80085b6 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008510:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008512:	2b7f      	cmp	r3, #127	@ 0x7f
 8008514:	d914      	bls.n	8008540 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008516:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008518:	2100      	movs	r1, #0
 800851a:	4618      	mov	r0, r3
 800851c:	f001 ff90 	bl	800a440 <ff_convert>
 8008520:	4603      	mov	r3, r0
 8008522:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008524:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008526:	2b00      	cmp	r3, #0
 8008528:	d004      	beq.n	8008534 <create_name+0x240>
 800852a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800852c:	3b80      	subs	r3, #128	@ 0x80
 800852e:	4a24      	ldr	r2, [pc, #144]	@ (80085c0 <create_name+0x2cc>)
 8008530:	5cd3      	ldrb	r3, [r2, r3]
 8008532:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008538:	f043 0302 	orr.w	r3, r3, #2
 800853c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008540:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008542:	2b00      	cmp	r3, #0
 8008544:	d007      	beq.n	8008556 <create_name+0x262>
 8008546:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008548:	4619      	mov	r1, r3
 800854a:	481e      	ldr	r0, [pc, #120]	@ (80085c4 <create_name+0x2d0>)
 800854c:	f7fe f9c2 	bl	80068d4 <chk_chr>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d008      	beq.n	8008568 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008556:	235f      	movs	r3, #95	@ 0x5f
 8008558:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800855a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800855e:	f043 0303 	orr.w	r3, r3, #3
 8008562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008566:	e01b      	b.n	80085a0 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008568:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800856a:	2b40      	cmp	r3, #64	@ 0x40
 800856c:	d909      	bls.n	8008582 <create_name+0x28e>
 800856e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008570:	2b5a      	cmp	r3, #90	@ 0x5a
 8008572:	d806      	bhi.n	8008582 <create_name+0x28e>
					b |= 2;
 8008574:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008578:	f043 0302 	orr.w	r3, r3, #2
 800857c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008580:	e00e      	b.n	80085a0 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008582:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008584:	2b60      	cmp	r3, #96	@ 0x60
 8008586:	d90b      	bls.n	80085a0 <create_name+0x2ac>
 8008588:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800858a:	2b7a      	cmp	r3, #122	@ 0x7a
 800858c:	d808      	bhi.n	80085a0 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800858e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008592:	f043 0301 	orr.w	r3, r3, #1
 8008596:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800859a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800859c:	3b20      	subs	r3, #32
 800859e:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085a6:	699a      	ldr	r2, [r3, #24]
 80085a8:	6a3b      	ldr	r3, [r7, #32]
 80085aa:	1c59      	adds	r1, r3, #1
 80085ac:	6239      	str	r1, [r7, #32]
 80085ae:	4413      	add	r3, r2
 80085b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80085b2:	b2d2      	uxtb	r2, r2
 80085b4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80085b6:	e762      	b.n	800847e <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 80085b8:	bf00      	nop
 80085ba:	e006      	b.n	80085ca <create_name+0x2d6>
 80085bc:	0800d27c 	.word	0x0800d27c
 80085c0:	0800d2f0 	.word	0x0800d2f0
 80085c4:	0800d288 	.word	0x0800d288
			if (si > di) break;			/* No extension */
 80085c8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	2be5      	cmp	r3, #229	@ 0xe5
 80085d6:	d105      	bne.n	80085e4 <create_name+0x2f0>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	2205      	movs	r2, #5
 80085e2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	2b08      	cmp	r3, #8
 80085e8:	d104      	bne.n	80085f4 <create_name+0x300>
 80085ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80085f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80085f8:	f003 030c 	and.w	r3, r3, #12
 80085fc:	2b0c      	cmp	r3, #12
 80085fe:	d005      	beq.n	800860c <create_name+0x318>
 8008600:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008604:	f003 0303 	and.w	r3, r3, #3
 8008608:	2b03      	cmp	r3, #3
 800860a:	d105      	bne.n	8008618 <create_name+0x324>
		cf |= NS_LFN;
 800860c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008610:	f043 0302 	orr.w	r3, r3, #2
 8008614:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800861c:	f003 0302 	and.w	r3, r3, #2
 8008620:	2b00      	cmp	r3, #0
 8008622:	d117      	bne.n	8008654 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008624:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008628:	f003 0303 	and.w	r3, r3, #3
 800862c:	2b01      	cmp	r3, #1
 800862e:	d105      	bne.n	800863c <create_name+0x348>
 8008630:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008634:	f043 0310 	orr.w	r3, r3, #16
 8008638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800863c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008640:	f003 030c 	and.w	r3, r3, #12
 8008644:	2b04      	cmp	r3, #4
 8008646:	d105      	bne.n	8008654 <create_name+0x360>
 8008648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800864c:	f043 0308 	orr.w	r3, r3, #8
 8008650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	330b      	adds	r3, #11
 800865e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008662:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008664:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8008666:	4618      	mov	r0, r3
 8008668:	3728      	adds	r7, #40	@ 0x28
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop

08008670 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	2b2f      	cmp	r3, #47	@ 0x2f
 8008680:	d003      	beq.n	800868a <follow_path+0x1a>
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	2b5c      	cmp	r3, #92	@ 0x5c
 8008688:	d102      	bne.n	8008690 <follow_path+0x20>
		path++;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	3301      	adds	r3, #1
 800868e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008696:	461a      	mov	r2, r3
 8008698:	2300      	movs	r3, #0
 800869a:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	2b1f      	cmp	r3, #31
 80086a2:	d80c      	bhi.n	80086be <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 80086a4:	2100      	movs	r1, #0
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7fe ffea 	bl	8007680 <dir_sdi>
 80086ac:	4603      	mov	r3, r0
 80086ae:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086b6:	461a      	mov	r2, r3
 80086b8:	2300      	movs	r3, #0
 80086ba:	6153      	str	r3, [r2, #20]
 80086bc:	e049      	b.n	8008752 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80086be:	463b      	mov	r3, r7
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7ff fe16 	bl	80082f4 <create_name>
 80086c8:	4603      	mov	r3, r0
 80086ca:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d13a      	bne.n	8008748 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f7ff fc1e 	bl	8007f14 <dir_find>
 80086d8:	4603      	mov	r3, r0
 80086da:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	7adb      	ldrb	r3, [r3, #11]
 80086e6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00a      	beq.n	8008704 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
 80086f0:	2b04      	cmp	r3, #4
 80086f2:	d12b      	bne.n	800874c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
 80086f6:	f003 0304 	and.w	r3, r3, #4
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d126      	bne.n	800874c <follow_path+0xdc>
 80086fe:	2305      	movs	r3, #5
 8008700:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8008702:	e023      	b.n	800874c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	f003 0304 	and.w	r3, r3, #4
 800870a:	2b00      	cmp	r3, #0
 800870c:	d120      	bne.n	8008750 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	330b      	adds	r3, #11
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	f003 0310 	and.w	r3, r3, #16
 8008722:	2b00      	cmp	r3, #0
 8008724:	d102      	bne.n	800872c <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8008726:	2305      	movs	r3, #5
 8008728:	73fb      	strb	r3, [r7, #15]
 800872a:	e012      	b.n	8008752 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68b9      	ldr	r1, [r7, #8]
 8008736:	4618      	mov	r0, r3
 8008738:	f7ff fa08 	bl	8007b4c <ld_clust>
 800873c:	4602      	mov	r2, r0
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008744:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008746:	e7ba      	b.n	80086be <follow_path+0x4e>
			if (res != FR_OK) break;
 8008748:	bf00      	nop
 800874a:	e002      	b.n	8008752 <follow_path+0xe2>
				break;
 800874c:	bf00      	nop
 800874e:	e000      	b.n	8008752 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008750:	bf00      	nop
		}
	}

	return res;
 8008752:	7bfb      	ldrb	r3, [r7, #15]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800875c:	b480      	push	{r7}
 800875e:	b087      	sub	sp, #28
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008764:	f04f 33ff 	mov.w	r3, #4294967295
 8008768:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d031      	beq.n	80087d6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	617b      	str	r3, [r7, #20]
 8008778:	e002      	b.n	8008780 <get_ldnumber+0x24>
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	3301      	adds	r3, #1
 800877e:	617b      	str	r3, [r7, #20]
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	2b1f      	cmp	r3, #31
 8008786:	d903      	bls.n	8008790 <get_ldnumber+0x34>
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b3a      	cmp	r3, #58	@ 0x3a
 800878e:	d1f4      	bne.n	800877a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b3a      	cmp	r3, #58	@ 0x3a
 8008796:	d11c      	bne.n	80087d2 <get_ldnumber+0x76>
			tp = *path;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	60fa      	str	r2, [r7, #12]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	3b30      	subs	r3, #48	@ 0x30
 80087a8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2b09      	cmp	r3, #9
 80087ae:	d80e      	bhi.n	80087ce <get_ldnumber+0x72>
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d10a      	bne.n	80087ce <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d107      	bne.n	80087ce <get_ldnumber+0x72>
					vol = (int)i;
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	3301      	adds	r3, #1
 80087c6:	617b      	str	r3, [r7, #20]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	e002      	b.n	80087d8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80087d2:	2300      	movs	r3, #0
 80087d4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80087d6:	693b      	ldr	r3, [r7, #16]
}
 80087d8:	4618      	mov	r0, r3
 80087da:	371c      	adds	r7, #28
 80087dc:	46bd      	mov	sp, r7
 80087de:	bc80      	pop	{r7}
 80087e0:	4770      	bx	lr
	...

080087e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087f4:	2200      	movs	r2, #0
 80087f6:	711a      	strb	r2, [r3, #4]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087fe:	461a      	mov	r2, r3
 8008800:	f04f 33ff 	mov.w	r3, #4294967295
 8008804:	62d3      	str	r3, [r2, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7fe fa8d 	bl	8006d28 <move_window>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <check_fs+0x34>
		return 3;
 8008814:	2303      	movs	r3, #3
 8008816:	e04a      	b.n	80088ae <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800881e:	3301      	adds	r3, #1
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	021b      	lsls	r3, r3, #8
 8008824:	b21a      	sxth	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 800882c:	b21b      	sxth	r3, r3
 800882e:	4313      	orrs	r3, r2
 8008830:	b21b      	sxth	r3, r3
 8008832:	4a21      	ldr	r2, [pc, #132]	@ (80088b8 <check_fs+0xd4>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d001      	beq.n	800883c <check_fs+0x58>
		return 2;
 8008838:	2302      	movs	r3, #2
 800883a:	e038      	b.n	80088ae <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	3336      	adds	r3, #54	@ 0x36
 8008840:	3303      	adds	r3, #3
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	061a      	lsls	r2, r3, #24
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	3336      	adds	r3, #54	@ 0x36
 800884a:	3302      	adds	r3, #2
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	041b      	lsls	r3, r3, #16
 8008850:	431a      	orrs	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	3336      	adds	r3, #54	@ 0x36
 8008856:	3301      	adds	r3, #1
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	021b      	lsls	r3, r3, #8
 800885c:	4313      	orrs	r3, r2
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8008864:	4313      	orrs	r3, r2
 8008866:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800886a:	4a14      	ldr	r2, [pc, #80]	@ (80088bc <check_fs+0xd8>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d101      	bne.n	8008874 <check_fs+0x90>
		return 0;
 8008870:	2300      	movs	r3, #0
 8008872:	e01c      	b.n	80088ae <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	3352      	adds	r3, #82	@ 0x52
 8008878:	3303      	adds	r3, #3
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	061a      	lsls	r2, r3, #24
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	3352      	adds	r3, #82	@ 0x52
 8008882:	3302      	adds	r3, #2
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	041b      	lsls	r3, r3, #16
 8008888:	431a      	orrs	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	3352      	adds	r3, #82	@ 0x52
 800888e:	3301      	adds	r3, #1
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	021b      	lsls	r3, r3, #8
 8008894:	4313      	orrs	r3, r2
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 800889c:	4313      	orrs	r3, r2
 800889e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80088a2:	4a06      	ldr	r2, [pc, #24]	@ (80088bc <check_fs+0xd8>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d101      	bne.n	80088ac <check_fs+0xc8>
		return 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	e000      	b.n	80088ae <check_fs+0xca>

	return 1;
 80088ac:	2301      	movs	r3, #1
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	ffffaa55 	.word	0xffffaa55
 80088bc:	00544146 	.word	0x00544146

080088c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b096      	sub	sp, #88	@ 0x58
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	4613      	mov	r3, r2
 80088cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80088d4:	68b8      	ldr	r0, [r7, #8]
 80088d6:	f7ff ff41 	bl	800875c <get_ldnumber>
 80088da:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80088dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088de:	2b00      	cmp	r3, #0
 80088e0:	da01      	bge.n	80088e6 <find_volume+0x26>
 80088e2:	230b      	movs	r3, #11
 80088e4:	e311      	b.n	8008f0a <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80088e6:	4a98      	ldr	r2, [pc, #608]	@ (8008b48 <find_volume+0x288>)
 80088e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ee:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80088f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <find_volume+0x3a>
 80088f6:	230c      	movs	r3, #12
 80088f8:	e307      	b.n	8008f0a <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088fe:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8008900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008902:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d01c      	beq.n	8008946 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800890c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008912:	785b      	ldrb	r3, [r3, #1]
 8008914:	4618      	mov	r0, r3
 8008916:	f7fd fee1 	bl	80066dc <disk_status>
 800891a:	4603      	mov	r3, r0
 800891c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008920:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10c      	bne.n	8008946 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800892c:	79fb      	ldrb	r3, [r7, #7]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d007      	beq.n	8008942 <find_volume+0x82>
 8008932:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008936:	f003 0304 	and.w	r3, r3, #4
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800893e:	230a      	movs	r3, #10
 8008940:	e2e3      	b.n	8008f0a <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8008942:	2300      	movs	r3, #0
 8008944:	e2e1      	b.n	8008f0a <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008948:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800894c:	2200      	movs	r2, #0
 800894e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008952:	b2da      	uxtb	r2, r3
 8008954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008956:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800895a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800895c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008962:	785b      	ldrb	r3, [r3, #1]
 8008964:	4618      	mov	r0, r3
 8008966:	f7fd fed3 	bl	8006710 <disk_initialize>
 800896a:	4603      	mov	r3, r0
 800896c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008970:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800897c:	2303      	movs	r3, #3
 800897e:	e2c4      	b.n	8008f0a <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008980:	79fb      	ldrb	r3, [r7, #7]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d007      	beq.n	8008996 <find_volume+0xd6>
 8008986:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800898a:	f003 0304 	and.w	r3, r3, #4
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8008992:	230a      	movs	r3, #10
 8008994:	e2b9      	b.n	8008f0a <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8008996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008998:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800899c:	7858      	ldrb	r0, [r3, #1]
 800899e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089a4:	330a      	adds	r3, #10
 80089a6:	461a      	mov	r2, r3
 80089a8:	2102      	movs	r1, #2
 80089aa:	f7fd ff17 	bl	80067dc <disk_ioctl>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10d      	bne.n	80089d0 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80089b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089ba:	895b      	ldrh	r3, [r3, #10]
 80089bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089c0:	d306      	bcc.n	80089d0 <find_volume+0x110>
 80089c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089c8:	895b      	ldrh	r3, [r3, #10]
 80089ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089ce:	d901      	bls.n	80089d4 <find_volume+0x114>
 80089d0:	2301      	movs	r3, #1
 80089d2:	e29a      	b.n	8008f0a <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80089d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80089da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80089dc:	f7ff ff02 	bl	80087e4 <check_fs>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80089e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d153      	bne.n	8008a96 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80089ee:	2300      	movs	r3, #0
 80089f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80089f2:	e028      	b.n	8008a46 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80089f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089f8:	011b      	lsls	r3, r3, #4
 80089fa:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80089fe:	4413      	add	r3, r2
 8008a00:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a04:	3304      	adds	r3, #4
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d012      	beq.n	8008a32 <find_volume+0x172>
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0e:	330b      	adds	r3, #11
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	061a      	lsls	r2, r3, #24
 8008a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a16:	330a      	adds	r3, #10
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	041b      	lsls	r3, r3, #16
 8008a1c:	431a      	orrs	r2, r3
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a20:	3309      	adds	r3, #9
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	021b      	lsls	r3, r3, #8
 8008a26:	4313      	orrs	r3, r2
 8008a28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a2a:	3208      	adds	r2, #8
 8008a2c:	7812      	ldrb	r2, [r2, #0]
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	e000      	b.n	8008a34 <find_volume+0x174>
 8008a32:	2200      	movs	r2, #0
 8008a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	3358      	adds	r3, #88	@ 0x58
 8008a3a:	443b      	add	r3, r7
 8008a3c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a42:	3301      	adds	r3, #1
 8008a44:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a48:	2b03      	cmp	r3, #3
 8008a4a:	d9d3      	bls.n	80089f4 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008a50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <find_volume+0x19c>
 8008a56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8008a5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	3358      	adds	r3, #88	@ 0x58
 8008a62:	443b      	add	r3, r7
 8008a64:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008a68:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008a6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d005      	beq.n	8008a7c <find_volume+0x1bc>
 8008a70:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a74:	f7ff feb6 	bl	80087e4 <check_fs>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	e000      	b.n	8008a7e <find_volume+0x1be>
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008a82:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d005      	beq.n	8008a96 <find_volume+0x1d6>
 8008a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d9e2      	bls.n	8008a5c <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008a96:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	d101      	bne.n	8008aa2 <find_volume+0x1e2>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e233      	b.n	8008f0a <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8008aa2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d001      	beq.n	8008aae <find_volume+0x1ee>
 8008aaa:	230d      	movs	r3, #13
 8008aac:	e22d      	b.n	8008f0a <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab0:	7b1b      	ldrb	r3, [r3, #12]
 8008ab2:	021b      	lsls	r3, r3, #8
 8008ab4:	b21a      	sxth	r2, r3
 8008ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab8:	7adb      	ldrb	r3, [r3, #11]
 8008aba:	b21b      	sxth	r3, r3
 8008abc:	4313      	orrs	r3, r2
 8008abe:	b21a      	sxth	r2, r3
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ac6:	895b      	ldrh	r3, [r3, #10]
 8008ac8:	b21b      	sxth	r3, r3
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d001      	beq.n	8008ad2 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 8008ace:	230d      	movs	r3, #13
 8008ad0:	e21b      	b.n	8008f0a <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad4:	7ddb      	ldrb	r3, [r3, #23]
 8008ad6:	021b      	lsls	r3, r3, #8
 8008ad8:	b21a      	sxth	r2, r3
 8008ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008adc:	7d9b      	ldrb	r3, [r3, #22]
 8008ade:	b21b      	sxth	r3, r3
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	b21b      	sxth	r3, r3
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8008ae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d112      	bne.n	8008b14 <find_volume+0x254>
 8008aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af0:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8008af4:	061a      	lsls	r2, r3, #24
 8008af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8008afc:	041b      	lsls	r3, r3, #16
 8008afe:	431a      	orrs	r2, r3
 8008b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008b06:	021b      	lsls	r3, r3, #8
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b0c:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8008b10:	4313      	orrs	r3, r2
 8008b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8008b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b1e:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b22:	7c1a      	ldrb	r2, [r3, #16]
 8008b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b2a:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b32:	78db      	ldrb	r3, [r3, #3]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d009      	beq.n	8008b4c <find_volume+0x28c>
 8008b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b3e:	78db      	ldrb	r3, [r3, #3]
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d003      	beq.n	8008b4c <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8008b44:	230d      	movs	r3, #13
 8008b46:	e1e0      	b.n	8008f0a <find_volume+0x64a>
 8008b48:	2000256c 	.word	0x2000256c
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b52:	78db      	ldrb	r3, [r3, #3]
 8008b54:	461a      	mov	r2, r3
 8008b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b58:	fb02 f303 	mul.w	r3, r2, r3
 8008b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8008b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b60:	7b5a      	ldrb	r2, [r3, #13]
 8008b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b68:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b70:	789b      	ldrb	r3, [r3, #2]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00c      	beq.n	8008b90 <find_volume+0x2d0>
 8008b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b7c:	789b      	ldrb	r3, [r3, #2]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b86:	789b      	ldrb	r3, [r3, #2]
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8008b90:	230d      	movs	r3, #13
 8008b92:	e1ba      	b.n	8008f0a <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b96:	7c9b      	ldrb	r3, [r3, #18]
 8008b98:	021b      	lsls	r3, r3, #8
 8008b9a:	b21a      	sxth	r2, r3
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9e:	7c5b      	ldrb	r3, [r3, #17]
 8008ba0:	b21b      	sxth	r3, r3
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	b21b      	sxth	r3, r3
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bae:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008bb6:	891b      	ldrh	r3, [r3, #8]
 8008bb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008bbe:	8952      	ldrh	r2, [r2, #10]
 8008bc0:	0952      	lsrs	r2, r2, #5
 8008bc2:	b292      	uxth	r2, r2
 8008bc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bc8:	fb01 f202 	mul.w	r2, r1, r2
 8008bcc:	1a9b      	subs	r3, r3, r2
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d001      	beq.n	8008bd8 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 8008bd4:	230d      	movs	r3, #13
 8008bd6:	e198      	b.n	8008f0a <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bda:	7d1b      	ldrb	r3, [r3, #20]
 8008bdc:	021b      	lsls	r3, r3, #8
 8008bde:	b21a      	sxth	r2, r3
 8008be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be2:	7cdb      	ldrb	r3, [r3, #19]
 8008be4:	b21b      	sxth	r3, r3
 8008be6:	4313      	orrs	r3, r2
 8008be8:	b21b      	sxth	r3, r3
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8008bee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d112      	bne.n	8008c1a <find_volume+0x35a>
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf6:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8008bfa:	061a      	lsls	r2, r3, #24
 8008bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfe:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008c02:	041b      	lsls	r3, r3, #16
 8008c04:	431a      	orrs	r2, r3
 8008c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c08:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008c0c:	021b      	lsls	r3, r3, #8
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c12:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1c:	7bdb      	ldrb	r3, [r3, #15]
 8008c1e:	021b      	lsls	r3, r3, #8
 8008c20:	b21a      	sxth	r2, r3
 8008c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c24:	7b9b      	ldrb	r3, [r3, #14]
 8008c26:	b21b      	sxth	r3, r3
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	b21b      	sxth	r3, r3
 8008c2c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8008c2e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <find_volume+0x378>
 8008c34:	230d      	movs	r3, #13
 8008c36:	e168      	b.n	8008f0a <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8008c38:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c3c:	4413      	add	r3, r2
 8008c3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008c44:	8911      	ldrh	r1, [r2, #8]
 8008c46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008c4c:	8952      	ldrh	r2, [r2, #10]
 8008c4e:	0952      	lsrs	r2, r2, #5
 8008c50:	b292      	uxth	r2, r2
 8008c52:	fbb1 f2f2 	udiv	r2, r1, r2
 8008c56:	b292      	uxth	r2, r2
 8008c58:	4413      	add	r3, r2
 8008c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008c5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d201      	bcs.n	8008c68 <find_volume+0x3a8>
 8008c64:	230d      	movs	r3, #13
 8008c66:	e150      	b.n	8008f0a <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008c68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008c74:	7892      	ldrb	r2, [r2, #2]
 8008c76:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c7a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <find_volume+0x3c6>
 8008c82:	230d      	movs	r3, #13
 8008c84:	e141      	b.n	8008f0a <find_volume+0x64a>
	fmt = FS_FAT12;
 8008c86:	2301      	movs	r3, #1
 8008c88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d902      	bls.n	8008c9c <find_volume+0x3dc>
 8008c96:	2302      	movs	r3, #2
 8008c98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d902      	bls.n	8008cac <find_volume+0x3ec>
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cae:	3302      	adds	r3, #2
 8008cb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008cb2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008cb6:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cc2:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008cc4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008cc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cc8:	4413      	add	r3, r2
 8008cca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ccc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008cd0:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8008cd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd6:	4413      	add	r3, r2
 8008cd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008cda:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008cde:	6293      	str	r3, [r2, #40]	@ 0x28
	if (fmt == FS_FAT32) {
 8008ce0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d124      	bne.n	8008d32 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008cee:	891b      	ldrh	r3, [r3, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <find_volume+0x438>
 8008cf4:	230d      	movs	r3, #13
 8008cf6:	e108      	b.n	8008f0a <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008cfe:	061a      	lsls	r2, r3, #24
 8008d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d02:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8008d06:	041b      	lsls	r3, r3, #16
 8008d08:	431a      	orrs	r2, r3
 8008d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008d10:	021b      	lsls	r3, r3, #8
 8008d12:	4313      	orrs	r3, r2
 8008d14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d16:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d1e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008d22:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d2a:	695b      	ldr	r3, [r3, #20]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d30:	e02b      	b.n	8008d8a <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8008d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d38:	891b      	ldrh	r3, [r3, #8]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <find_volume+0x482>
 8008d3e:	230d      	movs	r3, #13
 8008d40:	e0e3      	b.n	8008f0a <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8008d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d48:	6a1a      	ldr	r2, [r3, #32]
 8008d4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d4c:	4413      	add	r3, r2
 8008d4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008d54:	6253      	str	r3, [r2, #36]	@ 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008d56:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d105      	bne.n	8008d6a <find_volume+0x4aa>
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	005b      	lsls	r3, r3, #1
 8008d68:	e00e      	b.n	8008d88 <find_volume+0x4c8>
 8008d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d70:	695a      	ldr	r2, [r3, #20]
 8008d72:	4613      	mov	r3, r2
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	4413      	add	r3, r2
 8008d78:	085a      	lsrs	r2, r3, #1
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8008d88:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8008d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d90:	699a      	ldr	r2, [r3, #24]
 8008d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008d98:	895b      	ldrh	r3, [r3, #10]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d9e:	440b      	add	r3, r1
 8008da0:	3b01      	subs	r3, #1
 8008da2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008da4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8008da8:	8949      	ldrh	r1, [r1, #10]
 8008daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d201      	bcs.n	8008db6 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8008db2:	230d      	movs	r3, #13
 8008db4:	e0a9      	b.n	8008f0a <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc2:	6113      	str	r3, [r2, #16]
 8008dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008dce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008dd2:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008dda:	2280      	movs	r2, #128	@ 0x80
 8008ddc:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008dde:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d17a      	bne.n	8008edc <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8008de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008dec:	021b      	lsls	r3, r3, #8
 8008dee:	b21a      	sxth	r2, r3
 8008df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008df6:	b21b      	sxth	r3, r3
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	b21b      	sxth	r3, r3
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d16d      	bne.n	8008edc <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008e00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e02:	3301      	adds	r3, #1
 8008e04:	4619      	mov	r1, r3
 8008e06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008e08:	f7fd ff8e 	bl	8006d28 <move_window>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d164      	bne.n	8008edc <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 8008e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e18:	2200      	movs	r2, #0
 8008e1a:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1e:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8008e22:	021b      	lsls	r3, r3, #8
 8008e24:	b21a      	sxth	r2, r3
 8008e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e28:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8008e2c:	b21b      	sxth	r3, r3
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	b21b      	sxth	r3, r3
 8008e32:	4a38      	ldr	r2, [pc, #224]	@ (8008f14 <find_volume+0x654>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d151      	bne.n	8008edc <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8008e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3a:	78db      	ldrb	r3, [r3, #3]
 8008e3c:	061a      	lsls	r2, r3, #24
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e40:	789b      	ldrb	r3, [r3, #2]
 8008e42:	041b      	lsls	r3, r3, #16
 8008e44:	431a      	orrs	r2, r3
 8008e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e48:	785b      	ldrb	r3, [r3, #1]
 8008e4a:	021b      	lsls	r3, r3, #8
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e50:	7812      	ldrb	r2, [r2, #0]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	4a30      	ldr	r2, [pc, #192]	@ (8008f18 <find_volume+0x658>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d140      	bne.n	8008edc <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5c:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8008e60:	061a      	lsls	r2, r3, #24
 8008e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e64:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8008e68:	041b      	lsls	r3, r3, #16
 8008e6a:	431a      	orrs	r2, r3
 8008e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e6e:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 8008e72:	021b      	lsls	r3, r3, #8
 8008e74:	4313      	orrs	r3, r2
 8008e76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e78:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	4a27      	ldr	r2, [pc, #156]	@ (8008f1c <find_volume+0x65c>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d12b      	bne.n	8008edc <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e86:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8008e8a:	061a      	lsls	r2, r3, #24
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8e:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 8008e92:	041b      	lsls	r3, r3, #16
 8008e94:	431a      	orrs	r2, r3
 8008e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e98:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8008e9c:	021b      	lsls	r3, r3, #8
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ea2:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008eaa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008eae:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb2:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 8008eb6:	061a      	lsls	r2, r3, #24
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eba:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8008ebe:	041b      	lsls	r3, r3, #16
 8008ec0:	431a      	orrs	r2, r3
 8008ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec4:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 8008ec8:	021b      	lsls	r3, r3, #8
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ece:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ed6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008eda:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8008edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ee8:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8008eea:	4b0d      	ldr	r3, [pc, #52]	@ (8008f20 <find_volume+0x660>)
 8008eec:	881b      	ldrh	r3, [r3, #0]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8008f20 <find_volume+0x660>)
 8008ef4:	801a      	strh	r2, [r3, #0]
 8008ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8008f20 <find_volume+0x660>)
 8008ef8:	881a      	ldrh	r2, [r3, #0]
 8008efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008efc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f00:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8008f02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008f04:	f7fd fe94 	bl	8006c30 <clear_lock>
#endif

	return FR_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3758      	adds	r7, #88	@ 0x58
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	ffffaa55 	.word	0xffffaa55
 8008f18:	41615252 	.word	0x41615252
 8008f1c:	61417272 	.word	0x61417272
 8008f20:	20002570 	.word	0x20002570

08008f24 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d02a      	beq.n	8008f8c <validate+0x68>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d024      	beq.n	8008f8c <validate+0x68>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d01b      	beq.n	8008f8c <validate+0x68>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f60:	88da      	ldrh	r2, [r3, #6]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f68:	889b      	ldrh	r3, [r3, #4]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d10e      	bne.n	8008f8c <validate+0x68>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f7a:	785b      	ldrb	r3, [r3, #1]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fd fbad 	bl	80066dc <disk_status>
 8008f82:	4603      	mov	r3, r0
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d001      	beq.n	8008f90 <validate+0x6c>
		return FR_INVALID_OBJECT;
 8008f8c:	2309      	movs	r3, #9
 8008f8e:	e000      	b.n	8008f92 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
	...

08008f9c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b088      	sub	sp, #32
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8008fae:	f107 0310 	add.w	r3, r7, #16
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7ff fbd2 	bl	800875c <get_ldnumber>
 8008fb8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	da01      	bge.n	8008fc4 <f_mount+0x28>
 8008fc0:	230b      	movs	r3, #11
 8008fc2:	e02f      	b.n	8009024 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008fc4:	4a19      	ldr	r2, [pc, #100]	@ (800902c <f_mount+0x90>)
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fcc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d007      	beq.n	8008fe4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8008fd4:	69b8      	ldr	r0, [r7, #24]
 8008fd6:	f7fd fe2b 	bl	8006c30 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d004      	beq.n	8008ff4 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	490d      	ldr	r1, [pc, #52]	@ (800902c <f_mount+0x90>)
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d002      	beq.n	800900a <f_mount+0x6e>
 8009004:	79fb      	ldrb	r3, [r7, #7]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d001      	beq.n	800900e <f_mount+0x72>
 800900a:	2300      	movs	r3, #0
 800900c:	e00a      	b.n	8009024 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800900e:	f107 0108 	add.w	r1, r7, #8
 8009012:	f107 030c 	add.w	r3, r7, #12
 8009016:	2200      	movs	r2, #0
 8009018:	4618      	mov	r0, r3
 800901a:	f7ff fc51 	bl	80088c0 <find_volume>
 800901e:	4603      	mov	r3, r0
 8009020:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009022:	7dfb      	ldrb	r3, [r7, #23]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3720      	adds	r7, #32
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	2000256c 	.word	0x2000256c

08009030 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800903e:	f843 0c4c 	str.w	r0, [r3, #-76]
 8009042:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009046:	f843 1c50 	str.w	r1, [r3, #-80]
 800904a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800904e:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8009052:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009056:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d101      	bne.n	8009062 <f_open+0x32>
 800905e:	2309      	movs	r3, #9
 8009060:	e2f3      	b.n	800964a <f_open+0x61a>
	fp->fs = 0;			/* Clear file object */
 8009062:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009066:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800906a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800906e:	461a      	mov	r2, r3
 8009070:	2300      	movs	r3, #0
 8009072:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8009074:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009078:	461a      	mov	r2, r3
 800907a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800907e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009082:	f003 031f 	and.w	r3, r3, #31
 8009086:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800908a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800908e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009092:	f023 0301 	bic.w	r3, r3, #1
 8009096:	b2da      	uxtb	r2, r3
 8009098:	f107 0118 	add.w	r1, r7, #24
 800909c:	3910      	subs	r1, #16
 800909e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80090a2:	3b18      	subs	r3, #24
 80090a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7ff fc09 	bl	80088c0 <find_volume>
 80090ae:	4603      	mov	r3, r0
 80090b0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80090b4:	f102 0217 	add.w	r2, r2, #23
 80090b8:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 80090ba:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80090be:	f103 0317 	add.w	r3, r3, #23
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f040 82bb 	bne.w	8009640 <f_open+0x610>
		INIT_BUF(dj);
 80090ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80090ce:	461a      	mov	r2, r3
 80090d0:	f107 0318 	add.w	r3, r7, #24
 80090d4:	3b04      	subs	r3, #4
 80090d6:	f8c2 3fe0 	str.w	r3, [r2, #4064]	@ 0xfe0
 80090da:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80090de:	461a      	mov	r2, r3
 80090e0:	4bd3      	ldr	r3, [pc, #844]	@ (8009430 <f_open+0x400>)
 80090e2:	f8c2 3fe8 	str.w	r3, [r2, #4072]	@ 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 80090e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80090ea:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80090ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80090f2:	3b18      	subs	r3, #24
 80090f4:	4611      	mov	r1, r2
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7ff faba 	bl	8008670 <follow_path>
 80090fc:	4603      	mov	r3, r0
 80090fe:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009102:	f102 0217 	add.w	r2, r2, #23
 8009106:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 8009108:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800910c:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 8009110:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009114:	f102 0210 	add.w	r2, r2, #16
 8009118:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800911a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800911e:	f103 0317 	add.w	r3, r3, #23
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d124      	bne.n	8009172 <f_open+0x142>
			if (!dir)	/* Default directory itself */
 8009128:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800912c:	f103 0310 	add.w	r3, r3, #16
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d106      	bne.n	8009144 <f_open+0x114>
				res = FR_INVALID_NAME;
 8009136:	2306      	movs	r3, #6
 8009138:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800913c:	f102 0217 	add.w	r2, r2, #23
 8009140:	7013      	strb	r3, [r2, #0]
 8009142:	e016      	b.n	8009172 <f_open+0x142>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009144:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009148:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800914c:	2b01      	cmp	r3, #1
 800914e:	bf8c      	ite	hi
 8009150:	2301      	movhi	r3, #1
 8009152:	2300      	movls	r3, #0
 8009154:	b2db      	uxtb	r3, r3
 8009156:	461a      	mov	r2, r3
 8009158:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800915c:	3b18      	subs	r3, #24
 800915e:	4611      	mov	r1, r2
 8009160:	4618      	mov	r0, r3
 8009162:	f7fd fbd1 	bl	8006908 <chk_lock>
 8009166:	4603      	mov	r3, r0
 8009168:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800916c:	f102 0217 	add.w	r2, r2, #23
 8009170:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009172:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009176:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800917a:	f003 031c 	and.w	r3, r3, #28
 800917e:	2b00      	cmp	r3, #0
 8009180:	f000 813c 	beq.w	80093fc <f_open+0x3cc>
			if (res != FR_OK) {					/* No file, create new */
 8009184:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009188:	f103 0317 	add.w	r3, r3, #23
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d02e      	beq.n	80091f0 <f_open+0x1c0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8009192:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009196:	f103 0317 	add.w	r3, r3, #23
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	2b04      	cmp	r3, #4
 800919e:	d112      	bne.n	80091c6 <f_open+0x196>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80091a0:	f7fd fc22 	bl	80069e8 <enq_lock>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d007      	beq.n	80091ba <f_open+0x18a>
 80091aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80091ae:	3b18      	subs	r3, #24
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fe ff7b 	bl	80080ac <dir_register>
 80091b6:	4603      	mov	r3, r0
 80091b8:	e000      	b.n	80091bc <f_open+0x18c>
 80091ba:	2312      	movs	r3, #18
 80091bc:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80091c0:	f102 0217 	add.w	r2, r2, #23
 80091c4:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80091c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80091ca:	461a      	mov	r2, r3
 80091cc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80091d0:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80091d4:	f043 0308 	orr.w	r3, r3, #8
 80091d8:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 80091dc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80091e0:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	@ 0xfdc
 80091e4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80091e8:	f102 0210 	add.w	r2, r2, #16
 80091ec:	6013      	str	r3, [r2, #0]
 80091ee:	e01f      	b.n	8009230 <f_open+0x200>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80091f0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80091f4:	f103 0310 	add.w	r3, r3, #16
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	330b      	adds	r3, #11
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	f003 0311 	and.w	r3, r3, #17
 8009202:	2b00      	cmp	r3, #0
 8009204:	d006      	beq.n	8009214 <f_open+0x1e4>
					res = FR_DENIED;
 8009206:	2307      	movs	r3, #7
 8009208:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800920c:	f102 0217 	add.w	r2, r2, #23
 8009210:	7013      	strb	r3, [r2, #0]
 8009212:	e00d      	b.n	8009230 <f_open+0x200>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8009214:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009218:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800921c:	f003 0304 	and.w	r3, r3, #4
 8009220:	2b00      	cmp	r3, #0
 8009222:	d005      	beq.n	8009230 <f_open+0x200>
						res = FR_EXIST;
 8009224:	2308      	movs	r3, #8
 8009226:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800922a:	f102 0217 	add.w	r2, r2, #23
 800922e:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009230:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009234:	f103 0317 	add.w	r3, r3, #23
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	f040 8113 	bne.w	8009466 <f_open+0x436>
 8009240:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009244:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009248:	f003 0308 	and.w	r3, r3, #8
 800924c:	2b00      	cmp	r3, #0
 800924e:	f000 810a 	beq.w	8009466 <f_open+0x436>
				dw = GET_FATTIME();				/* Created time */
 8009252:	f7fd f9e1 	bl	8006618 <get_fattime>
 8009256:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800925a:	f103 030c 	add.w	r3, r3, #12
 800925e:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8009260:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009264:	f103 0310 	add.w	r3, r3, #16
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	330e      	adds	r3, #14
 800926c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009270:	f102 020c 	add.w	r2, r2, #12
 8009274:	6812      	ldr	r2, [r2, #0]
 8009276:	b2d2      	uxtb	r2, r2
 8009278:	701a      	strb	r2, [r3, #0]
 800927a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800927e:	f103 030c 	add.w	r3, r3, #12
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	b29b      	uxth	r3, r3
 8009286:	0a1b      	lsrs	r3, r3, #8
 8009288:	b29a      	uxth	r2, r3
 800928a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800928e:	f103 0310 	add.w	r3, r3, #16
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	330f      	adds	r3, #15
 8009296:	b2d2      	uxtb	r2, r2
 8009298:	701a      	strb	r2, [r3, #0]
 800929a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800929e:	f103 030c 	add.w	r3, r3, #12
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	0c1a      	lsrs	r2, r3, #16
 80092a6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80092aa:	f103 0310 	add.w	r3, r3, #16
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3310      	adds	r3, #16
 80092b2:	b2d2      	uxtb	r2, r2
 80092b4:	701a      	strb	r2, [r3, #0]
 80092b6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80092ba:	f103 030c 	add.w	r3, r3, #12
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	0e1a      	lsrs	r2, r3, #24
 80092c2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80092c6:	f103 0310 	add.w	r3, r3, #16
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	3311      	adds	r3, #17
 80092ce:	b2d2      	uxtb	r2, r2
 80092d0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80092d2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80092d6:	f103 0310 	add.w	r3, r3, #16
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	330b      	adds	r3, #11
 80092de:	2200      	movs	r2, #0
 80092e0:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80092e2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80092e6:	f103 0310 	add.w	r3, r3, #16
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	331c      	adds	r3, #28
 80092ee:	2200      	movs	r2, #0
 80092f0:	701a      	strb	r2, [r3, #0]
 80092f2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80092f6:	f103 0310 	add.w	r3, r3, #16
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	331d      	adds	r3, #29
 80092fe:	2200      	movs	r2, #0
 8009300:	701a      	strb	r2, [r3, #0]
 8009302:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009306:	f103 0310 	add.w	r3, r3, #16
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	331e      	adds	r3, #30
 800930e:	2200      	movs	r2, #0
 8009310:	701a      	strb	r2, [r3, #0]
 8009312:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009316:	f103 0310 	add.w	r3, r3, #16
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	331f      	adds	r3, #31
 800931e:	2200      	movs	r2, #0
 8009320:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8009322:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009326:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800932a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800932e:	f102 0210 	add.w	r2, r2, #16
 8009332:	6811      	ldr	r1, [r2, #0]
 8009334:	4618      	mov	r0, r3
 8009336:	f7fe fc09 	bl	8007b4c <ld_clust>
 800933a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800933e:	f103 0308 	add.w	r3, r3, #8
 8009342:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8009344:	2100      	movs	r1, #0
 8009346:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800934a:	f103 0310 	add.w	r3, r3, #16
 800934e:	6818      	ldr	r0, [r3, #0]
 8009350:	f7fe fc2a 	bl	8007ba8 <st_clust>
				dj.fs->wflag = 1;
 8009354:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009358:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800935c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009360:	2201      	movs	r2, #1
 8009362:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8009364:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009368:	f103 0308 	add.w	r3, r3, #8
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d079      	beq.n	8009466 <f_open+0x436>
					dw = dj.fs->winsect;
 8009372:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009376:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 800937a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800937e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009380:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009384:	f102 020c 	add.w	r2, r2, #12
 8009388:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800938a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800938e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8009392:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009396:	f102 0208 	add.w	r2, r2, #8
 800939a:	6811      	ldr	r1, [r2, #0]
 800939c:	4618      	mov	r0, r3
 800939e:	f7fe f826 	bl	80073ee <remove_chain>
 80093a2:	4603      	mov	r3, r0
 80093a4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80093a8:	f102 0217 	add.w	r2, r2, #23
 80093ac:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 80093ae:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80093b2:	f103 0317 	add.w	r3, r3, #23
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d154      	bne.n	8009466 <f_open+0x436>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80093bc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80093c0:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	@ 0xfc8
 80093c4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80093c8:	f103 0308 	add.w	r3, r3, #8
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3b01      	subs	r3, #1
 80093d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80093d4:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 80093d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80093da:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80093de:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80093e2:	f102 020c 	add.w	r2, r2, #12
 80093e6:	6811      	ldr	r1, [r2, #0]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7fd fc9d 	bl	8006d28 <move_window>
 80093ee:	4603      	mov	r3, r0
 80093f0:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80093f4:	f102 0217 	add.w	r2, r2, #23
 80093f8:	7013      	strb	r3, [r2, #0]
 80093fa:	e034      	b.n	8009466 <f_open+0x436>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80093fc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009400:	f103 0317 	add.w	r3, r3, #23
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d12d      	bne.n	8009466 <f_open+0x436>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800940a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800940e:	f103 0310 	add.w	r3, r3, #16
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	330b      	adds	r3, #11
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	f003 0310 	and.w	r3, r3, #16
 800941c:	2b00      	cmp	r3, #0
 800941e:	d009      	beq.n	8009434 <f_open+0x404>
					res = FR_NO_FILE;
 8009420:	2304      	movs	r3, #4
 8009422:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009426:	f102 0217 	add.w	r2, r2, #23
 800942a:	7013      	strb	r3, [r2, #0]
 800942c:	e01b      	b.n	8009466 <f_open+0x436>
 800942e:	bf00      	nop
 8009430:	2000258c 	.word	0x2000258c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8009434:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009438:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800943c:	f003 0302 	and.w	r3, r3, #2
 8009440:	2b00      	cmp	r3, #0
 8009442:	d010      	beq.n	8009466 <f_open+0x436>
 8009444:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009448:	f103 0310 	add.w	r3, r3, #16
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	330b      	adds	r3, #11
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	f003 0301 	and.w	r3, r3, #1
 8009456:	2b00      	cmp	r3, #0
 8009458:	d005      	beq.n	8009466 <f_open+0x436>
						res = FR_DENIED;
 800945a:	2307      	movs	r3, #7
 800945c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009460:	f102 0217 	add.w	r2, r2, #23
 8009464:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8009466:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800946a:	f103 0317 	add.w	r3, r3, #23
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d155      	bne.n	8009520 <f_open+0x4f0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009474:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009478:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800947c:	f003 0308 	and.w	r3, r3, #8
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00a      	beq.n	800949a <f_open+0x46a>
				mode |= FA__WRITTEN;
 8009484:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009488:	461a      	mov	r2, r3
 800948a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800948e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009492:	f043 0320 	orr.w	r3, r3, #32
 8009496:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800949a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800949e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 80094a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a8:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80094ac:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80094b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80094b4:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 80094b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80094ba:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80094be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094c2:	461a      	mov	r2, r3
 80094c4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80094c8:	f103 0310 	add.w	r3, r3, #16
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80094d0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80094d4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	bf8c      	ite	hi
 80094dc:	2301      	movhi	r3, #1
 80094de:	2300      	movls	r3, #0
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	461a      	mov	r2, r3
 80094e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80094e8:	3b18      	subs	r3, #24
 80094ea:	4611      	mov	r1, r2
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fd fa9f 	bl	8006a30 <inc_lock>
 80094f2:	4602      	mov	r2, r0
 80094f4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80094f8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80094fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009500:	629a      	str	r2, [r3, #40]	@ 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8009502:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009506:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800950a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800950e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009510:	2b00      	cmp	r3, #0
 8009512:	d105      	bne.n	8009520 <f_open+0x4f0>
 8009514:	2302      	movs	r3, #2
 8009516:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 800951a:	f102 0217 	add.w	r2, r2, #23
 800951e:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8009520:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009524:	f103 0317 	add.w	r3, r3, #23
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	f040 8088 	bne.w	8009640 <f_open+0x610>
			fp->flag = mode;					/* File access mode */
 8009530:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009534:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009538:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800953c:	461a      	mov	r2, r3
 800953e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009542:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8009546:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8009548:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800954c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009550:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009554:	2200      	movs	r2, #0
 8009556:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8009558:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800955c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8009560:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8009564:	f102 0210 	add.w	r2, r2, #16
 8009568:	6811      	ldr	r1, [r2, #0]
 800956a:	4618      	mov	r0, r3
 800956c:	f7fe faee 	bl	8007b4c <ld_clust>
 8009570:	4602      	mov	r2, r0
 8009572:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009576:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800957a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800957e:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8009580:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009584:	f103 0310 	add.w	r3, r3, #16
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	331f      	adds	r3, #31
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	061a      	lsls	r2, r3, #24
 8009590:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009594:	f103 0310 	add.w	r3, r3, #16
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	331e      	adds	r3, #30
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	041b      	lsls	r3, r3, #16
 80095a0:	431a      	orrs	r2, r3
 80095a2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 80095a6:	f103 0310 	add.w	r3, r3, #16
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	331d      	adds	r3, #29
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	021b      	lsls	r3, r3, #8
 80095b2:	4313      	orrs	r3, r2
 80095b4:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 80095b8:	f102 0210 	add.w	r2, r2, #16
 80095bc:	6812      	ldr	r2, [r2, #0]
 80095be:	321c      	adds	r2, #28
 80095c0:	7812      	ldrb	r2, [r2, #0]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80095c8:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80095cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80095d0:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 80095d2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80095d6:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80095da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095de:	461a      	mov	r2, r3
 80095e0:	2300      	movs	r3, #0
 80095e2:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 80095e4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80095e8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80095ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095f0:	461a      	mov	r2, r3
 80095f2:	2300      	movs	r3, #0
 80095f4:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80095f6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80095fa:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80095fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009602:	461a      	mov	r2, r3
 8009604:	2300      	movs	r3, #0
 8009606:	6253      	str	r3, [r2, #36]	@ 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8009608:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800960c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	@ 0xfc8
 8009610:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8009614:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8009618:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800961c:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800961e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009622:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8009626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009630:	88da      	ldrh	r2, [r3, #6]
 8009632:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8009636:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800963a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800963e:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8009640:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8009644:	f103 0317 	add.w	r3, r3, #23
 8009648:	781b      	ldrb	r3, [r3, #0]
}
 800964a:	4618      	mov	r0, r3
 800964c:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8009650:	3718      	adds	r7, #24
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop

08009658 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b08a      	sub	sp, #40	@ 0x28
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
 8009664:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	2200      	movs	r2, #0
 800966e:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f7ff fc57 	bl	8008f24 <validate>
 8009676:	4603      	mov	r3, r0
 8009678:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800967a:	7dfb      	ldrb	r3, [r7, #23]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <f_write+0x2c>
 8009680:	7dfb      	ldrb	r3, [r7, #23]
 8009682:	e21e      	b.n	8009ac2 <f_write+0x46a>
	if (fp->err)							/* Check error */
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800968a:	79db      	ldrb	r3, [r3, #7]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d004      	beq.n	800969a <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009696:	79db      	ldrb	r3, [r3, #7]
 8009698:	e213      	b.n	8009ac2 <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096a0:	799b      	ldrb	r3, [r3, #6]
 80096a2:	f003 0302 	and.w	r3, r3, #2
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 80096aa:	2307      	movs	r3, #7
 80096ac:	e209      	b.n	8009ac2 <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096b4:	689a      	ldr	r2, [r3, #8]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	441a      	add	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	f080 81d9 	bcs.w	8009a7a <f_write+0x422>
 80096c8:	2300      	movs	r3, #0
 80096ca:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80096cc:	e1d5      	b.n	8009a7a <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80096dc:	6812      	ldr	r2, [r2, #0]
 80096de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80096e2:	8952      	ldrh	r2, [r2, #10]
 80096e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80096e8:	fb01 f202 	mul.w	r2, r1, r2
 80096ec:	1a9b      	subs	r3, r3, r2
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f040 8169 	bne.w	80099c6 <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009702:	6812      	ldr	r2, [r2, #0]
 8009704:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009708:	8952      	ldrh	r2, [r2, #10]
 800970a:	fbb3 f3f2 	udiv	r3, r3, r2
 800970e:	b2da      	uxtb	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800971c:	789b      	ldrb	r3, [r3, #2]
 800971e:	3b01      	subs	r3, #1
 8009720:	b2db      	uxtb	r3, r3
 8009722:	4013      	ands	r3, r2
 8009724:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8009726:	7dbb      	ldrb	r3, [r7, #22]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d15f      	bne.n	80097ec <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d111      	bne.n	800975c <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	627b      	str	r3, [r7, #36]	@ 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8009742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009744:	2b00      	cmp	r3, #0
 8009746:	d126      	bne.n	8009796 <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2100      	movs	r1, #0
 8009752:	4618      	mov	r0, r3
 8009754:	f7fd feac 	bl	80074b0 <create_chain>
 8009758:	6278      	str	r0, [r7, #36]	@ 0x24
 800975a:	e01c      	b.n	8009796 <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009764:	2b00      	cmp	r3, #0
 8009766:	d009      	beq.n	800977c <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	4619      	mov	r1, r3
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f7fd ff44 	bl	8007600 <clmt_clust>
 8009778:	6278      	str	r0, [r7, #36]	@ 0x24
 800977a:	e00c      	b.n	8009796 <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800978a:	695b      	ldr	r3, [r3, #20]
 800978c:	4619      	mov	r1, r3
 800978e:	4610      	mov	r0, r2
 8009790:	f7fd fe8e 	bl	80074b0 <create_chain>
 8009794:	6278      	str	r0, [r7, #36]	@ 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 8173 	beq.w	8009a84 <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800979e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d106      	bne.n	80097b2 <f_write+0x15a>
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097aa:	2202      	movs	r2, #2
 80097ac:	71da      	strb	r2, [r3, #7]
 80097ae:	2302      	movs	r3, #2
 80097b0:	e187      	b.n	8009ac2 <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80097b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097b8:	d106      	bne.n	80097c8 <f_write+0x170>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097c0:	2201      	movs	r2, #1
 80097c2:	71da      	strb	r2, [r3, #7]
 80097c4:	2301      	movs	r3, #1
 80097c6:	e17c      	b.n	8009ac2 <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097ce:	461a      	mov	r2, r3
 80097d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d2:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d105      	bne.n	80097ec <f_write+0x194>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097e6:	461a      	mov	r2, r3
 80097e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ea:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097f2:	799b      	ldrb	r3, [r3, #6]
 80097f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d023      	beq.n	8009844 <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009808:	7858      	ldrb	r0, [r3, #1]
 800980a:	68f9      	ldr	r1, [r7, #12]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009812:	699a      	ldr	r2, [r3, #24]
 8009814:	2301      	movs	r3, #1
 8009816:	f7fc ffc1 	bl	800679c <disk_write>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d006      	beq.n	800982e <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009826:	2201      	movs	r2, #1
 8009828:	71da      	strb	r2, [r3, #7]
 800982a:	2301      	movs	r3, #1
 800982c:	e149      	b.n	8009ac2 <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009834:	799b      	ldrb	r3, [r3, #6]
 8009836:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800983a:	b2da      	uxtb	r2, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009842:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009852:	695b      	ldr	r3, [r3, #20]
 8009854:	4619      	mov	r1, r3
 8009856:	4610      	mov	r0, r2
 8009858:	f7fd fb57 	bl	8006f0a <clust2sect>
 800985c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d106      	bne.n	8009872 <f_write+0x21a>
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800986a:	2202      	movs	r2, #2
 800986c:	71da      	strb	r2, [r3, #7]
 800986e:	2302      	movs	r3, #2
 8009870:	e127      	b.n	8009ac2 <f_write+0x46a>
			sect += csect;
 8009872:	7dbb      	ldrb	r3, [r7, #22]
 8009874:	693a      	ldr	r2, [r7, #16]
 8009876:	4413      	add	r3, r2
 8009878:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009886:	895b      	ldrh	r3, [r3, #10]
 8009888:	461a      	mov	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009890:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d069      	beq.n	800996c <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009898:	7dba      	ldrb	r2, [r7, #22]
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	4413      	add	r3, r2
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80098a4:	6812      	ldr	r2, [r2, #0]
 80098a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80098aa:	7892      	ldrb	r2, [r2, #2]
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d90a      	bls.n	80098c6 <f_write+0x26e>
					cc = fp->fs->csize - csect;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098bc:	789b      	ldrb	r3, [r3, #2]
 80098be:	461a      	mov	r2, r3
 80098c0:	7dbb      	ldrb	r3, [r7, #22]
 80098c2:	1ad3      	subs	r3, r2, r3
 80098c4:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098d2:	7858      	ldrb	r0, [r3, #1]
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	69b9      	ldr	r1, [r7, #24]
 80098da:	f7fc ff5f 	bl	800679c <disk_write>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d006      	beq.n	80098f2 <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098ea:	2201      	movs	r2, #1
 80098ec:	71da      	strb	r2, [r3, #7]
 80098ee:	2301      	movs	r3, #1
 80098f0:	e0e7      	b.n	8009ac2 <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098f8:	699a      	ldr	r2, [r3, #24]
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	69fa      	ldr	r2, [r7, #28]
 8009900:	429a      	cmp	r2, r3
 8009902:	d926      	bls.n	8009952 <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800990c:	699a      	ldr	r2, [r3, #24]
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009918:	6812      	ldr	r2, [r2, #0]
 800991a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800991e:	8952      	ldrh	r2, [r2, #10]
 8009920:	fb02 f303 	mul.w	r3, r2, r3
 8009924:	69ba      	ldr	r2, [r7, #24]
 8009926:	18d1      	adds	r1, r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009934:	895b      	ldrh	r3, [r3, #10]
 8009936:	461a      	mov	r2, r3
 8009938:	f7fc ff6e 	bl	8006818 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009942:	799b      	ldrb	r3, [r3, #6]
 8009944:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009948:	b2da      	uxtb	r2, r3
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009950:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800995e:	895b      	ldrh	r3, [r3, #10]
 8009960:	461a      	mov	r2, r3
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	fb02 f303 	mul.w	r3, r2, r3
 8009968:	623b      	str	r3, [r7, #32]
				continue;
 800996a:	e06e      	b.n	8009a4a <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009972:	699b      	ldr	r3, [r3, #24]
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	429a      	cmp	r2, r3
 8009978:	d01f      	beq.n	80099ba <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009980:	689a      	ldr	r2, [r3, #8]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	429a      	cmp	r2, r3
 800998c:	d215      	bcs.n	80099ba <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800999a:	7858      	ldrb	r0, [r3, #1]
 800999c:	68f9      	ldr	r1, [r7, #12]
 800999e:	2301      	movs	r3, #1
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	f7fc fedb 	bl	800675c <disk_read>
 80099a6:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d006      	beq.n	80099ba <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099b2:	2201      	movs	r2, #1
 80099b4:	71da      	strb	r2, [r3, #7]
 80099b6:	2301      	movs	r3, #1
 80099b8:	e083      	b.n	8009ac2 <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099c0:	461a      	mov	r2, r3
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099d2:	895b      	ldrh	r3, [r3, #10]
 80099d4:	4618      	mov	r0, r3
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80099e4:	6812      	ldr	r2, [r2, #0]
 80099e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80099ea:	8952      	ldrh	r2, [r2, #10]
 80099ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80099f0:	fb01 f202 	mul.w	r2, r1, r2
 80099f4:	1a9b      	subs	r3, r3, r2
 80099f6:	1ac3      	subs	r3, r0, r3
 80099f8:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80099fa:	6a3a      	ldr	r2, [r7, #32]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d901      	bls.n	8009a06 <f_write+0x3ae>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009a14:	6812      	ldr	r2, [r2, #0]
 8009a16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009a1a:	8952      	ldrh	r2, [r2, #10]
 8009a1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a20:	fb01 f202 	mul.w	r2, r1, r2
 8009a24:	1a9b      	subs	r3, r3, r2
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	4413      	add	r3, r2
 8009a2a:	6a3a      	ldr	r2, [r7, #32]
 8009a2c:	69b9      	ldr	r1, [r7, #24]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fc fef2 	bl	8006818 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a3a:	799b      	ldrb	r3, [r3, #6]
 8009a3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a48:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8009a4a:	69ba      	ldr	r2, [r7, #24]
 8009a4c:	6a3b      	ldr	r3, [r7, #32]
 8009a4e:	4413      	add	r3, r2
 8009a50:	61bb      	str	r3, [r7, #24]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a58:	689a      	ldr	r2, [r3, #8]
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009a64:	6093      	str	r3, [r2, #8]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	441a      	add	r2, r3
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	601a      	str	r2, [r3, #0]
 8009a72:	687a      	ldr	r2, [r7, #4]
 8009a74:	6a3b      	ldr	r3, [r7, #32]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f47f ae26 	bne.w	80096ce <f_write+0x76>
 8009a82:	e000      	b.n	8009a86 <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009a84:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a8c:	689a      	ldr	r2, [r3, #8]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d907      	bls.n	8009aaa <f_write+0x452>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009aa8:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ab0:	799b      	ldrb	r3, [r3, #6]
 8009ab2:	f043 0320 	orr.w	r3, r3, #32
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009abe:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3728      	adds	r7, #40	@ 0x28
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b086      	sub	sp, #24
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f7ff fa26 	bl	8008f24 <validate>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009adc:	7dfb      	ldrb	r3, [r7, #23]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f040 80bc 	bne.w	8009c5c <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009aea:	799b      	ldrb	r3, [r3, #6]
 8009aec:	f003 0320 	and.w	r3, r3, #32
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f000 80b3 	beq.w	8009c5c <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009afc:	799b      	ldrb	r3, [r3, #6]
 8009afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d01e      	beq.n	8009b44 <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b12:	7858      	ldrb	r0, [r3, #1]
 8009b14:	6879      	ldr	r1, [r7, #4]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b1c:	699a      	ldr	r2, [r3, #24]
 8009b1e:	2301      	movs	r3, #1
 8009b20:	f7fc fe3c 	bl	800679c <disk_write>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e097      	b.n	8009c5e <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b34:	799b      	ldrb	r3, [r3, #6]
 8009b36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b3a:	b2da      	uxtb	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b42:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b52:	69db      	ldr	r3, [r3, #28]
 8009b54:	4619      	mov	r1, r3
 8009b56:	4610      	mov	r0, r2
 8009b58:	f7fd f8e6 	bl	8006d28 <move_window>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8009b60:	7dfb      	ldrb	r3, [r7, #23]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d17a      	bne.n	8009c5c <f_sync+0x192>
				dir = fp->dir_ptr;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	330b      	adds	r3, #11
 8009b74:	781a      	ldrb	r2, [r3, #0]
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	330b      	adds	r3, #11
 8009b7a:	f042 0220 	orr.w	r2, r2, #32
 8009b7e:	b2d2      	uxtb	r2, r2
 8009b80:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b88:	68da      	ldr	r2, [r3, #12]
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	331c      	adds	r3, #28
 8009b8e:	b2d2      	uxtb	r2, r2
 8009b90:	701a      	strb	r2, [r3, #0]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	0a1b      	lsrs	r3, r3, #8
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	331d      	adds	r3, #29
 8009ba4:	b2d2      	uxtb	r2, r2
 8009ba6:	701a      	strb	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	0c1a      	lsrs	r2, r3, #16
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	331e      	adds	r3, #30
 8009bb6:	b2d2      	uxtb	r2, r2
 8009bb8:	701a      	strb	r2, [r3, #0]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	0e1a      	lsrs	r2, r3, #24
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	331f      	adds	r3, #31
 8009bc8:	b2d2      	uxtb	r2, r2
 8009bca:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	6938      	ldr	r0, [r7, #16]
 8009bd8:	f7fd ffe6 	bl	8007ba8 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8009bdc:	f7fc fd1c 	bl	8006618 <get_fattime>
 8009be0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	3316      	adds	r3, #22
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	b2d2      	uxtb	r2, r2
 8009bea:	701a      	strb	r2, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	0a1b      	lsrs	r3, r3, #8
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	3317      	adds	r3, #23
 8009bf8:	b2d2      	uxtb	r2, r2
 8009bfa:	701a      	strb	r2, [r3, #0]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	0c1a      	lsrs	r2, r3, #16
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	3318      	adds	r3, #24
 8009c04:	b2d2      	uxtb	r2, r2
 8009c06:	701a      	strb	r2, [r3, #0]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	0e1a      	lsrs	r2, r3, #24
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	3319      	adds	r3, #25
 8009c10:	b2d2      	uxtb	r2, r2
 8009c12:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	3312      	adds	r3, #18
 8009c18:	2200      	movs	r2, #0
 8009c1a:	701a      	strb	r2, [r3, #0]
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	3313      	adds	r3, #19
 8009c20:	2200      	movs	r2, #0
 8009c22:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c2a:	799b      	ldrb	r3, [r3, #6]
 8009c2c:	f023 0320 	bic.w	r3, r3, #32
 8009c30:	b2da      	uxtb	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c38:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c46:	2201      	movs	r2, #1
 8009c48:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fd f89a 	bl	8006d8c <sync_fs>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8009c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3718      	adds	r7, #24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b084      	sub	sp, #16
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7ff ff2b 	bl	8009aca <f_sync>
 8009c74:	4603      	mov	r3, r0
 8009c76:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d119      	bne.n	8009cb2 <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7ff f950 	bl	8008f24 <validate>
 8009c84:	4603      	mov	r3, r0
 8009c86:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009c88:	7bfb      	ldrb	r3, [r7, #15]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d111      	bne.n	8009cb2 <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fc ff86 	bl	8006ba8 <dec_lock>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009ca0:	7bfb      	ldrb	r3, [r7, #15]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d105      	bne.n	8009cb2 <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cac:	461a      	mov	r2, r3
 8009cae:	2300      	movs	r3, #0
 8009cb0:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b090      	sub	sp, #64	@ 0x40
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7ff f92c 	bl	8008f24 <validate>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8009cd2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d002      	beq.n	8009ce0 <f_lseek+0x24>
 8009cda:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009cde:	e2da      	b.n	800a296 <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ce6:	79db      	ldrb	r3, [r3, #7]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d004      	beq.n	8009cf6 <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cf2:	79db      	ldrb	r3, [r3, #7]
 8009cf4:	e2cf      	b.n	800a296 <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f000 8124 	beq.w	8009f4c <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0a:	d16c      	bne.n	8009de6 <f_lseek+0x12a>
			tbl = fp->cltbl;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d14:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d18:	1d1a      	adds	r2, r3, #4
 8009d1a:	627a      	str	r2, [r7, #36]	@ 0x24
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	617b      	str	r3, [r7, #20]
 8009d20:	2302      	movs	r3, #2
 8009d22:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->sclust;			/* Top of the chain */
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d046      	beq.n	8009dc2 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d36:	613b      	str	r3, [r7, #16]
 8009d38:	2300      	movs	r3, #0
 8009d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3e:	3302      	adds	r3, #2
 8009d40:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8009d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d44:	60fb      	str	r3, [r7, #12]
 8009d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d48:	3301      	adds	r3, #1
 8009d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(fp->fs, cl);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fd f8fb 	bl	8006f52 <get_fat>
 8009d5c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d806      	bhi.n	8009d72 <f_lseek+0xb6>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d6a:	2202      	movs	r2, #2
 8009d6c:	71da      	strb	r2, [r3, #7]
 8009d6e:	2302      	movs	r3, #2
 8009d70:	e291      	b.n	800a296 <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d78:	d106      	bne.n	8009d88 <f_lseek+0xcc>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d80:	2201      	movs	r2, #1
 8009d82:	71da      	strb	r2, [r3, #7]
 8009d84:	2301      	movs	r3, #1
 8009d86:	e286      	b.n	800a296 <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d0d7      	beq.n	8009d42 <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009d92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d809      	bhi.n	8009dae <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9c:	1d1a      	adds	r2, r3, #4
 8009d9e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009da0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da6:	1d1a      	adds	r2, r3, #4
 8009da8:	627a      	str	r2, [r7, #36]	@ 0x24
 8009daa:	693a      	ldr	r2, [r7, #16]
 8009dac:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009dba:	695b      	ldr	r3, [r3, #20]
 8009dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d3b8      	bcc.n	8009d34 <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dcc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8009dce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d803      	bhi.n	8009dde <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd8:	2200      	movs	r2, #0
 8009dda:	601a      	str	r2, [r3, #0]
 8009ddc:	e259      	b.n	800a292 <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009dde:	2311      	movs	r3, #17
 8009de0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009de4:	e255      	b.n	800a292 <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d904      	bls.n	8009dfe <f_lseek+0x142>
				ofs = fp->fsize;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e04:	461a      	mov	r2, r3
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	6093      	str	r3, [r2, #8]
			if (ofs) {
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 8240 	beq.w	800a292 <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	3b01      	subs	r3, #1
 8009e16:	4619      	mov	r1, r3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f7fd fbf1 	bl	8007600 <clmt_clust>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e26:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e36:	695b      	ldr	r3, [r3, #20]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	4610      	mov	r0, r2
 8009e3c:	f7fd f865 	bl	8006f0a <clust2sect>
 8009e40:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d106      	bne.n	8009e56 <f_lseek+0x19a>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e4e:	2202      	movs	r2, #2
 8009e50:	71da      	strb	r2, [r3, #7]
 8009e52:	2302      	movs	r3, #2
 8009e54:	e21f      	b.n	800a296 <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e60:	6812      	ldr	r2, [r2, #0]
 8009e62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e66:	8952      	ldrh	r2, [r2, #10]
 8009e68:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e72:	6812      	ldr	r2, [r2, #0]
 8009e74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e78:	7892      	ldrb	r2, [r2, #2]
 8009e7a:	3a01      	subs	r2, #1
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	69ba      	ldr	r2, [r7, #24]
 8009e80:	4413      	add	r3, r2
 8009e82:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e92:	6812      	ldr	r2, [r2, #0]
 8009e94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009e98:	8952      	ldrh	r2, [r2, #10]
 8009e9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e9e:	fb01 f202 	mul.w	r2, r1, r2
 8009ea2:	1a9b      	subs	r3, r3, r2
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f000 81f4 	beq.w	800a292 <f_lseek+0x5d6>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	69ba      	ldr	r2, [r7, #24]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	f000 81ec 	beq.w	800a292 <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ec0:	799b      	ldrb	r3, [r3, #6]
 8009ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d023      	beq.n	8009f12 <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ed6:	7858      	ldrb	r0, [r3, #1]
 8009ed8:	6879      	ldr	r1, [r7, #4]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ee0:	699a      	ldr	r2, [r3, #24]
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	f7fc fc5a 	bl	800679c <disk_write>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d006      	beq.n	8009efc <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	71da      	strb	r2, [r3, #7]
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e1cc      	b.n	800a296 <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f02:	799b      	ldrb	r3, [r3, #6]
 8009f04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f10:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f1e:	7858      	ldrb	r0, [r3, #1]
 8009f20:	6879      	ldr	r1, [r7, #4]
 8009f22:	2301      	movs	r3, #1
 8009f24:	69ba      	ldr	r2, [r7, #24]
 8009f26:	f7fc fc19 	bl	800675c <disk_read>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d006      	beq.n	8009f3e <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f36:	2201      	movs	r2, #1
 8009f38:	71da      	strb	r2, [r3, #7]
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e1ab      	b.n	800a296 <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f44:	461a      	mov	r2, r3
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	6193      	str	r3, [r2, #24]
 8009f4a:	e1a2      	b.n	800a292 <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	683a      	ldr	r2, [r7, #0]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d90c      	bls.n	8009f74 <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f60:	799b      	ldrb	r3, [r3, #6]
 8009f62:	f003 0302 	and.w	r3, r3, #2
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d104      	bne.n	8009f74 <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f88:	461a      	mov	r2, r3
 8009f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f8c:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	f000 8100 	beq.w	800a196 <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fa2:	789b      	ldrb	r3, [r3, #2]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fb2:	895b      	ldrh	r3, [r3, #10]
 8009fb4:	fb02 f303 	mul.w	r3, r2, r3
 8009fb8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009fba:	6a3b      	ldr	r3, [r7, #32]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d021      	beq.n	800a004 <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	1e5a      	subs	r2, r3, #1
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8009fca:	6a3b      	ldr	r3, [r7, #32]
 8009fcc:	1e59      	subs	r1, r3, #1
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d315      	bcc.n	800a004 <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8009fd8:	6a3b      	ldr	r3, [r7, #32]
 8009fda:	1e5a      	subs	r2, r3, #1
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	425b      	negs	r3, r3
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009fe8:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ffe:	695b      	ldr	r3, [r3, #20]
 800a000:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a002:	e031      	b.n	800a068 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a010:	2b00      	cmp	r3, #0
 800a012:	d123      	bne.n	800a05c <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2100      	movs	r1, #0
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fd fa46 	bl	80074b0 <create_chain>
 800a024:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800a026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d106      	bne.n	800a03a <f_lseek+0x37e>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a032:	2202      	movs	r2, #2
 800a034:	71da      	strb	r2, [r3, #7]
 800a036:	2302      	movs	r3, #2
 800a038:	e12d      	b.n	800a296 <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a040:	d106      	bne.n	800a050 <f_lseek+0x394>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a048:	2201      	movs	r2, #1
 800a04a:	71da      	strb	r2, [r3, #7]
 800a04c:	2301      	movs	r3, #1
 800a04e:	e122      	b.n	800a296 <f_lseek+0x5da>
					fp->sclust = clst;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a056:	461a      	mov	r2, r3
 800a058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05a:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a062:	461a      	mov	r2, r3
 800a064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a066:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800a068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f000 8093 	beq.w	800a196 <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 800a070:	e052      	b.n	800a118 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a078:	799b      	ldrb	r3, [r3, #6]
 800a07a:	f003 0302 	and.w	r3, r3, #2
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00e      	beq.n	800a0a0 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fd fa0f 	bl	80074b0 <create_chain>
 800a092:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800a094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10b      	bne.n	800a0b2 <f_lseek+0x3f6>
							ofs = bcs; break;
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	603b      	str	r3, [r7, #0]
 800a09e:	e03f      	b.n	800a120 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fc ff51 	bl	8006f52 <get_fat>
 800a0b0:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b8:	d106      	bne.n	800a0c8 <f_lseek+0x40c>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	71da      	strb	r2, [r3, #7]
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e0e6      	b.n	800a296 <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800a0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d909      	bls.n	800a0e2 <f_lseek+0x426>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0da:	695b      	ldr	r3, [r3, #20]
 800a0dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d306      	bcc.n	800a0f0 <f_lseek+0x434>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0e8:	2202      	movs	r2, #2
 800a0ea:	71da      	strb	r2, [r3, #7]
 800a0ec:	2302      	movs	r3, #2
 800a0ee:	e0d2      	b.n	800a296 <f_lseek+0x5da>
					fp->clust = clst;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fa:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a102:	689a      	ldr	r2, [r3, #8]
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	4413      	add	r3, r2
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a10e:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	1ad3      	subs	r3, r2, r3
 800a116:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800a118:	683a      	ldr	r2, [r7, #0]
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d8a8      	bhi.n	800a072 <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a126:	689a      	ldr	r2, [r3, #8]
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	4413      	add	r3, r2
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a132:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a140:	895b      	ldrh	r3, [r3, #10]
 800a142:	461a      	mov	r2, r3
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	fbb3 f1f2 	udiv	r1, r3, r2
 800a14a:	fb01 f202 	mul.w	r2, r1, r2
 800a14e:	1a9b      	subs	r3, r3, r2
 800a150:	2b00      	cmp	r3, #0
 800a152:	d020      	beq.n	800a196 <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fc fed3 	bl	8006f0a <clust2sect>
 800a164:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800a166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d106      	bne.n	800a17a <f_lseek+0x4be>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a172:	2202      	movs	r2, #2
 800a174:	71da      	strb	r2, [r3, #7]
 800a176:	2302      	movs	r3, #2
 800a178:	e08d      	b.n	800a296 <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a186:	895b      	ldrh	r3, [r3, #10]
 800a188:	461a      	mov	r2, r3
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a190:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a192:	4413      	add	r3, r2
 800a194:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a19c:	689b      	ldr	r3, [r3, #8]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a1a4:	6812      	ldr	r2, [r2, #0]
 800a1a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a1aa:	8952      	ldrh	r2, [r2, #10]
 800a1ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1b0:	fb01 f202 	mul.w	r2, r1, r2
 800a1b4:	1a9b      	subs	r3, r3, r2
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d04e      	beq.n	800a258 <f_lseek+0x59c>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d047      	beq.n	800a258 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1ce:	799b      	ldrb	r3, [r3, #6]
 800a1d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d023      	beq.n	800a220 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1e4:	7858      	ldrb	r0, [r3, #1]
 800a1e6:	6879      	ldr	r1, [r7, #4]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1ee:	699a      	ldr	r2, [r3, #24]
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	f7fc fad3 	bl	800679c <disk_write>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d006      	beq.n	800a20a <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a202:	2201      	movs	r2, #1
 800a204:	71da      	strb	r2, [r3, #7]
 800a206:	2301      	movs	r3, #1
 800a208:	e045      	b.n	800a296 <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a210:	799b      	ldrb	r3, [r3, #6]
 800a212:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a216:	b2da      	uxtb	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a21e:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a22c:	7858      	ldrb	r0, [r3, #1]
 800a22e:	6879      	ldr	r1, [r7, #4]
 800a230:	2301      	movs	r3, #1
 800a232:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a234:	f7fc fa92 	bl	800675c <disk_read>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d006      	beq.n	800a24c <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a244:	2201      	movs	r2, #1
 800a246:	71da      	strb	r2, [r3, #7]
 800a248:	2301      	movs	r3, #1
 800a24a:	e024      	b.n	800a296 <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a252:	461a      	mov	r2, r3
 800a254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a256:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a25e:	689a      	ldr	r2, [r3, #8]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d912      	bls.n	800a292 <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a27a:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a282:	799b      	ldrb	r3, [r3, #6]
 800a284:	f043 0320 	orr.w	r3, r3, #32
 800a288:	b2da      	uxtb	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a290:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800a292:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800a296:	4618      	mov	r0, r3
 800a298:	3740      	adds	r7, #64	@ 0x40
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b084      	sub	sp, #16
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 800a2aa:	78fb      	ldrb	r3, [r7, #3]
 800a2ac:	2b0a      	cmp	r3, #10
 800a2ae:	d103      	bne.n	800a2b8 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a2b0:	210d      	movs	r1, #13
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f7ff fff3 	bl	800a29e <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	db25      	blt.n	800a310 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	1c5a      	adds	r2, r3, #1
 800a2c8:	60fa      	str	r2, [r7, #12]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	78fa      	ldrb	r2, [r7, #3]
 800a2d0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2b3c      	cmp	r3, #60	@ 0x3c
 800a2d6:	dd12      	ble.n	800a2fe <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6818      	ldr	r0, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f103 010c 	add.w	r1, r3, #12
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	f107 0308 	add.w	r3, r7, #8
 800a2e8:	f7ff f9b6 	bl	8009658 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d101      	bne.n	800a2f8 <putc_bfd+0x5a>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	e001      	b.n	800a2fc <putc_bfd+0x5e>
 800a2f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2fc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	1c5a      	adds	r2, r3, #1
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	609a      	str	r2, [r3, #8]
 800a30e:	e000      	b.n	800a312 <putc_bfd+0x74>
	if (i < 0) return;
 800a310:	bf00      	nop
}
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800a318:	b590      	push	{r4, r7, lr}
 800a31a:	b097      	sub	sp, #92	@ 0x5c
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 800a326:	2300      	movs	r3, #0
 800a328:	613b      	str	r3, [r7, #16]
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 800a32e:	e009      	b.n	800a344 <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	1c5a      	adds	r2, r3, #1
 800a334:	607a      	str	r2, [r7, #4]
 800a336:	781a      	ldrb	r2, [r3, #0]
 800a338:	f107 030c 	add.w	r3, r7, #12
 800a33c:	4611      	mov	r1, r2
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff ffad 	bl	800a29e <putc_bfd>
	while (*str)			/* Put the string */
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1f1      	bne.n	800a330 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	db15      	blt.n	800a37e <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	461c      	mov	r4, r3
 800a358:	f107 0208 	add.w	r2, r7, #8
 800a35c:	f107 030c 	add.w	r3, r7, #12
 800a360:	f103 010c 	add.w	r1, r3, #12
 800a364:	4613      	mov	r3, r2
 800a366:	4622      	mov	r2, r4
 800a368:	f7ff f976 	bl	8009658 <f_write>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d105      	bne.n	800a37e <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	4293      	cmp	r3, r2
 800a378:	d101      	bne.n	800a37e <f_puts+0x66>
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	e001      	b.n	800a382 <f_puts+0x6a>
	return EOF;
 800a37e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a382:	4618      	mov	r0, r3
 800a384:	375c      	adds	r7, #92	@ 0x5c
 800a386:	46bd      	mov	sp, r7
 800a388:	bd90      	pop	{r4, r7, pc}
	...

0800a38c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b087      	sub	sp, #28
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	4613      	mov	r3, r2
 800a398:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a39a:	2301      	movs	r3, #1
 800a39c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800a3a2:	4b1e      	ldr	r3, [pc, #120]	@ (800a41c <FATFS_LinkDriverEx+0x90>)
 800a3a4:	7a5b      	ldrb	r3, [r3, #9]
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d831      	bhi.n	800a410 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a3ac:	4b1b      	ldr	r3, [pc, #108]	@ (800a41c <FATFS_LinkDriverEx+0x90>)
 800a3ae:	7a5b      	ldrb	r3, [r3, #9]
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	4b19      	ldr	r3, [pc, #100]	@ (800a41c <FATFS_LinkDriverEx+0x90>)
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800a3ba:	4b18      	ldr	r3, [pc, #96]	@ (800a41c <FATFS_LinkDriverEx+0x90>)
 800a3bc:	7a5b      	ldrb	r3, [r3, #9]
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	4a16      	ldr	r2, [pc, #88]	@ (800a41c <FATFS_LinkDriverEx+0x90>)
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	4413      	add	r3, r2
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800a3ca:	4b14      	ldr	r3, [pc, #80]	@ (800a41c <FATFS_LinkDriverEx+0x90>)
 800a3cc:	7a5b      	ldrb	r3, [r3, #9]
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	4b12      	ldr	r3, [pc, #72]	@ (800a41c <FATFS_LinkDriverEx+0x90>)
 800a3d4:	4413      	add	r3, r2
 800a3d6:	79fa      	ldrb	r2, [r7, #7]
 800a3d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a3da:	4b10      	ldr	r3, [pc, #64]	@ (800a41c <FATFS_LinkDriverEx+0x90>)
 800a3dc:	7a5b      	ldrb	r3, [r3, #9]
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	1c5a      	adds	r2, r3, #1
 800a3e2:	b2d1      	uxtb	r1, r2
 800a3e4:	4a0d      	ldr	r2, [pc, #52]	@ (800a41c <FATFS_LinkDriverEx+0x90>)
 800a3e6:	7251      	strb	r1, [r2, #9]
 800a3e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a3ea:	7dbb      	ldrb	r3, [r7, #22]
 800a3ec:	3330      	adds	r3, #48	@ 0x30
 800a3ee:	b2da      	uxtb	r2, r3
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	223a      	movs	r2, #58	@ 0x3a
 800a3fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	3302      	adds	r3, #2
 800a400:	222f      	movs	r2, #47	@ 0x2f
 800a402:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	3303      	adds	r3, #3
 800a408:	2200      	movs	r2, #0
 800a40a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a40c:	2300      	movs	r3, #0
 800a40e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800a410:	7dfb      	ldrb	r3, [r7, #23]
}
 800a412:	4618      	mov	r0, r3
 800a414:	371c      	adds	r7, #28
 800a416:	46bd      	mov	sp, r7
 800a418:	bc80      	pop	{r7}
 800a41a:	4770      	bx	lr
 800a41c:	2000278c 	.word	0x2000278c

0800a420 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a42a:	2200      	movs	r2, #0
 800a42c:	6839      	ldr	r1, [r7, #0]
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f7ff ffac 	bl	800a38c <FATFS_LinkDriverEx>
 800a434:	4603      	mov	r3, r0
}
 800a436:	4618      	mov	r0, r3
 800a438:	3708      	adds	r7, #8
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
	...

0800a440 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	4603      	mov	r3, r0
 800a448:	6039      	str	r1, [r7, #0]
 800a44a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a44c:	88fb      	ldrh	r3, [r7, #6]
 800a44e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a450:	d802      	bhi.n	800a458 <ff_convert+0x18>
		c = chr;
 800a452:	88fb      	ldrh	r3, [r7, #6]
 800a454:	81fb      	strh	r3, [r7, #14]
 800a456:	e025      	b.n	800a4a4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00b      	beq.n	800a476 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a45e:	88fb      	ldrh	r3, [r7, #6]
 800a460:	2bff      	cmp	r3, #255	@ 0xff
 800a462:	d805      	bhi.n	800a470 <ff_convert+0x30>
 800a464:	88fb      	ldrh	r3, [r7, #6]
 800a466:	3b80      	subs	r3, #128	@ 0x80
 800a468:	4a11      	ldr	r2, [pc, #68]	@ (800a4b0 <ff_convert+0x70>)
 800a46a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a46e:	e000      	b.n	800a472 <ff_convert+0x32>
 800a470:	2300      	movs	r3, #0
 800a472:	81fb      	strh	r3, [r7, #14]
 800a474:	e016      	b.n	800a4a4 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800a476:	2300      	movs	r3, #0
 800a478:	81fb      	strh	r3, [r7, #14]
 800a47a:	e009      	b.n	800a490 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a47c:	89fb      	ldrh	r3, [r7, #14]
 800a47e:	4a0c      	ldr	r2, [pc, #48]	@ (800a4b0 <ff_convert+0x70>)
 800a480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a484:	88fa      	ldrh	r2, [r7, #6]
 800a486:	429a      	cmp	r2, r3
 800a488:	d006      	beq.n	800a498 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a48a:	89fb      	ldrh	r3, [r7, #14]
 800a48c:	3301      	adds	r3, #1
 800a48e:	81fb      	strh	r3, [r7, #14]
 800a490:	89fb      	ldrh	r3, [r7, #14]
 800a492:	2b7f      	cmp	r3, #127	@ 0x7f
 800a494:	d9f2      	bls.n	800a47c <ff_convert+0x3c>
 800a496:	e000      	b.n	800a49a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a498:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a49a:	89fb      	ldrh	r3, [r7, #14]
 800a49c:	3380      	adds	r3, #128	@ 0x80
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a4a4:	89fb      	ldrh	r3, [r7, #14]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3714      	adds	r7, #20
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bc80      	pop	{r7}
 800a4ae:	4770      	bx	lr
 800a4b0:	0800d380 	.word	0x0800d380

0800a4b4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	60fb      	str	r3, [r7, #12]
 800a4c2:	e002      	b.n	800a4ca <ff_wtoupper+0x16>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	60fb      	str	r3, [r7, #12]
 800a4ca:	4a0f      	ldr	r2, [pc, #60]	@ (800a508 <ff_wtoupper+0x54>)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d006      	beq.n	800a4e4 <ff_wtoupper+0x30>
 800a4d6:	4a0c      	ldr	r2, [pc, #48]	@ (800a508 <ff_wtoupper+0x54>)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4de:	88fa      	ldrh	r2, [r7, #6]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d1ef      	bne.n	800a4c4 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800a4e4:	4a08      	ldr	r2, [pc, #32]	@ (800a508 <ff_wtoupper+0x54>)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d004      	beq.n	800a4fa <ff_wtoupper+0x46>
 800a4f0:	4a06      	ldr	r2, [pc, #24]	@ (800a50c <ff_wtoupper+0x58>)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4f8:	e000      	b.n	800a4fc <ff_wtoupper+0x48>
 800a4fa:	88fb      	ldrh	r3, [r7, #6]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3714      	adds	r7, #20
 800a500:	46bd      	mov	sp, r7
 800a502:	bc80      	pop	{r7}
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	0800d480 	.word	0x0800d480
 800a50c:	0800d660 	.word	0x0800d660

0800a510 <__cvt>:
 800a510:	2b00      	cmp	r3, #0
 800a512:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a516:	461d      	mov	r5, r3
 800a518:	bfbb      	ittet	lt
 800a51a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a51e:	461d      	movlt	r5, r3
 800a520:	2300      	movge	r3, #0
 800a522:	232d      	movlt	r3, #45	@ 0x2d
 800a524:	b088      	sub	sp, #32
 800a526:	4614      	mov	r4, r2
 800a528:	bfb8      	it	lt
 800a52a:	4614      	movlt	r4, r2
 800a52c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a52e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a530:	7013      	strb	r3, [r2, #0]
 800a532:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a534:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a538:	f023 0820 	bic.w	r8, r3, #32
 800a53c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a540:	d005      	beq.n	800a54e <__cvt+0x3e>
 800a542:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a546:	d100      	bne.n	800a54a <__cvt+0x3a>
 800a548:	3601      	adds	r6, #1
 800a54a:	2302      	movs	r3, #2
 800a54c:	e000      	b.n	800a550 <__cvt+0x40>
 800a54e:	2303      	movs	r3, #3
 800a550:	aa07      	add	r2, sp, #28
 800a552:	9204      	str	r2, [sp, #16]
 800a554:	aa06      	add	r2, sp, #24
 800a556:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a55a:	e9cd 3600 	strd	r3, r6, [sp]
 800a55e:	4622      	mov	r2, r4
 800a560:	462b      	mov	r3, r5
 800a562:	f000 fe6d 	bl	800b240 <_dtoa_r>
 800a566:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a56a:	4607      	mov	r7, r0
 800a56c:	d119      	bne.n	800a5a2 <__cvt+0x92>
 800a56e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a570:	07db      	lsls	r3, r3, #31
 800a572:	d50e      	bpl.n	800a592 <__cvt+0x82>
 800a574:	eb00 0906 	add.w	r9, r0, r6
 800a578:	2200      	movs	r2, #0
 800a57a:	2300      	movs	r3, #0
 800a57c:	4620      	mov	r0, r4
 800a57e:	4629      	mov	r1, r5
 800a580:	f7f6 fa12 	bl	80009a8 <__aeabi_dcmpeq>
 800a584:	b108      	cbz	r0, 800a58a <__cvt+0x7a>
 800a586:	f8cd 901c 	str.w	r9, [sp, #28]
 800a58a:	2230      	movs	r2, #48	@ 0x30
 800a58c:	9b07      	ldr	r3, [sp, #28]
 800a58e:	454b      	cmp	r3, r9
 800a590:	d31e      	bcc.n	800a5d0 <__cvt+0xc0>
 800a592:	4638      	mov	r0, r7
 800a594:	9b07      	ldr	r3, [sp, #28]
 800a596:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a598:	1bdb      	subs	r3, r3, r7
 800a59a:	6013      	str	r3, [r2, #0]
 800a59c:	b008      	add	sp, #32
 800a59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a5a6:	eb00 0906 	add.w	r9, r0, r6
 800a5aa:	d1e5      	bne.n	800a578 <__cvt+0x68>
 800a5ac:	7803      	ldrb	r3, [r0, #0]
 800a5ae:	2b30      	cmp	r3, #48	@ 0x30
 800a5b0:	d10a      	bne.n	800a5c8 <__cvt+0xb8>
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	f7f6 f9f5 	bl	80009a8 <__aeabi_dcmpeq>
 800a5be:	b918      	cbnz	r0, 800a5c8 <__cvt+0xb8>
 800a5c0:	f1c6 0601 	rsb	r6, r6, #1
 800a5c4:	f8ca 6000 	str.w	r6, [sl]
 800a5c8:	f8da 3000 	ldr.w	r3, [sl]
 800a5cc:	4499      	add	r9, r3
 800a5ce:	e7d3      	b.n	800a578 <__cvt+0x68>
 800a5d0:	1c59      	adds	r1, r3, #1
 800a5d2:	9107      	str	r1, [sp, #28]
 800a5d4:	701a      	strb	r2, [r3, #0]
 800a5d6:	e7d9      	b.n	800a58c <__cvt+0x7c>

0800a5d8 <__exponent>:
 800a5d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5da:	2900      	cmp	r1, #0
 800a5dc:	bfb6      	itet	lt
 800a5de:	232d      	movlt	r3, #45	@ 0x2d
 800a5e0:	232b      	movge	r3, #43	@ 0x2b
 800a5e2:	4249      	neglt	r1, r1
 800a5e4:	2909      	cmp	r1, #9
 800a5e6:	7002      	strb	r2, [r0, #0]
 800a5e8:	7043      	strb	r3, [r0, #1]
 800a5ea:	dd29      	ble.n	800a640 <__exponent+0x68>
 800a5ec:	f10d 0307 	add.w	r3, sp, #7
 800a5f0:	461d      	mov	r5, r3
 800a5f2:	270a      	movs	r7, #10
 800a5f4:	fbb1 f6f7 	udiv	r6, r1, r7
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	fb07 1416 	mls	r4, r7, r6, r1
 800a5fe:	3430      	adds	r4, #48	@ 0x30
 800a600:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a604:	460c      	mov	r4, r1
 800a606:	2c63      	cmp	r4, #99	@ 0x63
 800a608:	4631      	mov	r1, r6
 800a60a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a60e:	dcf1      	bgt.n	800a5f4 <__exponent+0x1c>
 800a610:	3130      	adds	r1, #48	@ 0x30
 800a612:	1e94      	subs	r4, r2, #2
 800a614:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a618:	4623      	mov	r3, r4
 800a61a:	1c41      	adds	r1, r0, #1
 800a61c:	42ab      	cmp	r3, r5
 800a61e:	d30a      	bcc.n	800a636 <__exponent+0x5e>
 800a620:	f10d 0309 	add.w	r3, sp, #9
 800a624:	1a9b      	subs	r3, r3, r2
 800a626:	42ac      	cmp	r4, r5
 800a628:	bf88      	it	hi
 800a62a:	2300      	movhi	r3, #0
 800a62c:	3302      	adds	r3, #2
 800a62e:	4403      	add	r3, r0
 800a630:	1a18      	subs	r0, r3, r0
 800a632:	b003      	add	sp, #12
 800a634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a636:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a63a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a63e:	e7ed      	b.n	800a61c <__exponent+0x44>
 800a640:	2330      	movs	r3, #48	@ 0x30
 800a642:	3130      	adds	r1, #48	@ 0x30
 800a644:	7083      	strb	r3, [r0, #2]
 800a646:	70c1      	strb	r1, [r0, #3]
 800a648:	1d03      	adds	r3, r0, #4
 800a64a:	e7f1      	b.n	800a630 <__exponent+0x58>

0800a64c <_printf_float>:
 800a64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a650:	b091      	sub	sp, #68	@ 0x44
 800a652:	460c      	mov	r4, r1
 800a654:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a658:	4616      	mov	r6, r2
 800a65a:	461f      	mov	r7, r3
 800a65c:	4605      	mov	r5, r0
 800a65e:	f000 fce1 	bl	800b024 <_localeconv_r>
 800a662:	6803      	ldr	r3, [r0, #0]
 800a664:	4618      	mov	r0, r3
 800a666:	9308      	str	r3, [sp, #32]
 800a668:	f7f5 fd72 	bl	8000150 <strlen>
 800a66c:	2300      	movs	r3, #0
 800a66e:	930e      	str	r3, [sp, #56]	@ 0x38
 800a670:	f8d8 3000 	ldr.w	r3, [r8]
 800a674:	9009      	str	r0, [sp, #36]	@ 0x24
 800a676:	3307      	adds	r3, #7
 800a678:	f023 0307 	bic.w	r3, r3, #7
 800a67c:	f103 0208 	add.w	r2, r3, #8
 800a680:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a684:	f8d4 b000 	ldr.w	fp, [r4]
 800a688:	f8c8 2000 	str.w	r2, [r8]
 800a68c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a690:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a694:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a696:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a69a:	f04f 32ff 	mov.w	r2, #4294967295
 800a69e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a6a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a6a6:	4b9c      	ldr	r3, [pc, #624]	@ (800a918 <_printf_float+0x2cc>)
 800a6a8:	f7f6 f9b0 	bl	8000a0c <__aeabi_dcmpun>
 800a6ac:	bb70      	cbnz	r0, 800a70c <_printf_float+0xc0>
 800a6ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a6b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b6:	4b98      	ldr	r3, [pc, #608]	@ (800a918 <_printf_float+0x2cc>)
 800a6b8:	f7f6 f98a 	bl	80009d0 <__aeabi_dcmple>
 800a6bc:	bb30      	cbnz	r0, 800a70c <_printf_float+0xc0>
 800a6be:	2200      	movs	r2, #0
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	4640      	mov	r0, r8
 800a6c4:	4649      	mov	r1, r9
 800a6c6:	f7f6 f979 	bl	80009bc <__aeabi_dcmplt>
 800a6ca:	b110      	cbz	r0, 800a6d2 <_printf_float+0x86>
 800a6cc:	232d      	movs	r3, #45	@ 0x2d
 800a6ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6d2:	4a92      	ldr	r2, [pc, #584]	@ (800a91c <_printf_float+0x2d0>)
 800a6d4:	4b92      	ldr	r3, [pc, #584]	@ (800a920 <_printf_float+0x2d4>)
 800a6d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a6da:	bf94      	ite	ls
 800a6dc:	4690      	movls	r8, r2
 800a6de:	4698      	movhi	r8, r3
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	f04f 0900 	mov.w	r9, #0
 800a6e6:	6123      	str	r3, [r4, #16]
 800a6e8:	f02b 0304 	bic.w	r3, fp, #4
 800a6ec:	6023      	str	r3, [r4, #0]
 800a6ee:	4633      	mov	r3, r6
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	9700      	str	r7, [sp, #0]
 800a6f6:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a6f8:	f000 f9d4 	bl	800aaa4 <_printf_common>
 800a6fc:	3001      	adds	r0, #1
 800a6fe:	f040 8090 	bne.w	800a822 <_printf_float+0x1d6>
 800a702:	f04f 30ff 	mov.w	r0, #4294967295
 800a706:	b011      	add	sp, #68	@ 0x44
 800a708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a70c:	4642      	mov	r2, r8
 800a70e:	464b      	mov	r3, r9
 800a710:	4640      	mov	r0, r8
 800a712:	4649      	mov	r1, r9
 800a714:	f7f6 f97a 	bl	8000a0c <__aeabi_dcmpun>
 800a718:	b148      	cbz	r0, 800a72e <_printf_float+0xe2>
 800a71a:	464b      	mov	r3, r9
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	bfb8      	it	lt
 800a720:	232d      	movlt	r3, #45	@ 0x2d
 800a722:	4a80      	ldr	r2, [pc, #512]	@ (800a924 <_printf_float+0x2d8>)
 800a724:	bfb8      	it	lt
 800a726:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a72a:	4b7f      	ldr	r3, [pc, #508]	@ (800a928 <_printf_float+0x2dc>)
 800a72c:	e7d3      	b.n	800a6d6 <_printf_float+0x8a>
 800a72e:	6863      	ldr	r3, [r4, #4]
 800a730:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a734:	1c5a      	adds	r2, r3, #1
 800a736:	d13f      	bne.n	800a7b8 <_printf_float+0x16c>
 800a738:	2306      	movs	r3, #6
 800a73a:	6063      	str	r3, [r4, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a742:	6023      	str	r3, [r4, #0]
 800a744:	9206      	str	r2, [sp, #24]
 800a746:	aa0e      	add	r2, sp, #56	@ 0x38
 800a748:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a74c:	aa0d      	add	r2, sp, #52	@ 0x34
 800a74e:	9203      	str	r2, [sp, #12]
 800a750:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a754:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a758:	6863      	ldr	r3, [r4, #4]
 800a75a:	4642      	mov	r2, r8
 800a75c:	9300      	str	r3, [sp, #0]
 800a75e:	4628      	mov	r0, r5
 800a760:	464b      	mov	r3, r9
 800a762:	910a      	str	r1, [sp, #40]	@ 0x28
 800a764:	f7ff fed4 	bl	800a510 <__cvt>
 800a768:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a76a:	4680      	mov	r8, r0
 800a76c:	2947      	cmp	r1, #71	@ 0x47
 800a76e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a770:	d128      	bne.n	800a7c4 <_printf_float+0x178>
 800a772:	1cc8      	adds	r0, r1, #3
 800a774:	db02      	blt.n	800a77c <_printf_float+0x130>
 800a776:	6863      	ldr	r3, [r4, #4]
 800a778:	4299      	cmp	r1, r3
 800a77a:	dd40      	ble.n	800a7fe <_printf_float+0x1b2>
 800a77c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a780:	fa5f fa8a 	uxtb.w	sl, sl
 800a784:	4652      	mov	r2, sl
 800a786:	3901      	subs	r1, #1
 800a788:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a78c:	910d      	str	r1, [sp, #52]	@ 0x34
 800a78e:	f7ff ff23 	bl	800a5d8 <__exponent>
 800a792:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a794:	4681      	mov	r9, r0
 800a796:	1813      	adds	r3, r2, r0
 800a798:	2a01      	cmp	r2, #1
 800a79a:	6123      	str	r3, [r4, #16]
 800a79c:	dc02      	bgt.n	800a7a4 <_printf_float+0x158>
 800a79e:	6822      	ldr	r2, [r4, #0]
 800a7a0:	07d2      	lsls	r2, r2, #31
 800a7a2:	d501      	bpl.n	800a7a8 <_printf_float+0x15c>
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	6123      	str	r3, [r4, #16]
 800a7a8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d09e      	beq.n	800a6ee <_printf_float+0xa2>
 800a7b0:	232d      	movs	r3, #45	@ 0x2d
 800a7b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7b6:	e79a      	b.n	800a6ee <_printf_float+0xa2>
 800a7b8:	2947      	cmp	r1, #71	@ 0x47
 800a7ba:	d1bf      	bne.n	800a73c <_printf_float+0xf0>
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1bd      	bne.n	800a73c <_printf_float+0xf0>
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e7ba      	b.n	800a73a <_printf_float+0xee>
 800a7c4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a7c8:	d9dc      	bls.n	800a784 <_printf_float+0x138>
 800a7ca:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a7ce:	d118      	bne.n	800a802 <_printf_float+0x1b6>
 800a7d0:	2900      	cmp	r1, #0
 800a7d2:	6863      	ldr	r3, [r4, #4]
 800a7d4:	dd0b      	ble.n	800a7ee <_printf_float+0x1a2>
 800a7d6:	6121      	str	r1, [r4, #16]
 800a7d8:	b913      	cbnz	r3, 800a7e0 <_printf_float+0x194>
 800a7da:	6822      	ldr	r2, [r4, #0]
 800a7dc:	07d0      	lsls	r0, r2, #31
 800a7de:	d502      	bpl.n	800a7e6 <_printf_float+0x19a>
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	440b      	add	r3, r1
 800a7e4:	6123      	str	r3, [r4, #16]
 800a7e6:	f04f 0900 	mov.w	r9, #0
 800a7ea:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a7ec:	e7dc      	b.n	800a7a8 <_printf_float+0x15c>
 800a7ee:	b913      	cbnz	r3, 800a7f6 <_printf_float+0x1aa>
 800a7f0:	6822      	ldr	r2, [r4, #0]
 800a7f2:	07d2      	lsls	r2, r2, #31
 800a7f4:	d501      	bpl.n	800a7fa <_printf_float+0x1ae>
 800a7f6:	3302      	adds	r3, #2
 800a7f8:	e7f4      	b.n	800a7e4 <_printf_float+0x198>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e7f2      	b.n	800a7e4 <_printf_float+0x198>
 800a7fe:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a804:	4299      	cmp	r1, r3
 800a806:	db05      	blt.n	800a814 <_printf_float+0x1c8>
 800a808:	6823      	ldr	r3, [r4, #0]
 800a80a:	6121      	str	r1, [r4, #16]
 800a80c:	07d8      	lsls	r0, r3, #31
 800a80e:	d5ea      	bpl.n	800a7e6 <_printf_float+0x19a>
 800a810:	1c4b      	adds	r3, r1, #1
 800a812:	e7e7      	b.n	800a7e4 <_printf_float+0x198>
 800a814:	2900      	cmp	r1, #0
 800a816:	bfcc      	ite	gt
 800a818:	2201      	movgt	r2, #1
 800a81a:	f1c1 0202 	rsble	r2, r1, #2
 800a81e:	4413      	add	r3, r2
 800a820:	e7e0      	b.n	800a7e4 <_printf_float+0x198>
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	055a      	lsls	r2, r3, #21
 800a826:	d407      	bmi.n	800a838 <_printf_float+0x1ec>
 800a828:	6923      	ldr	r3, [r4, #16]
 800a82a:	4642      	mov	r2, r8
 800a82c:	4631      	mov	r1, r6
 800a82e:	4628      	mov	r0, r5
 800a830:	47b8      	blx	r7
 800a832:	3001      	adds	r0, #1
 800a834:	d12b      	bne.n	800a88e <_printf_float+0x242>
 800a836:	e764      	b.n	800a702 <_printf_float+0xb6>
 800a838:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a83c:	f240 80dc 	bls.w	800a9f8 <_printf_float+0x3ac>
 800a840:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a844:	2200      	movs	r2, #0
 800a846:	2300      	movs	r3, #0
 800a848:	f7f6 f8ae 	bl	80009a8 <__aeabi_dcmpeq>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d033      	beq.n	800a8b8 <_printf_float+0x26c>
 800a850:	2301      	movs	r3, #1
 800a852:	4631      	mov	r1, r6
 800a854:	4628      	mov	r0, r5
 800a856:	4a35      	ldr	r2, [pc, #212]	@ (800a92c <_printf_float+0x2e0>)
 800a858:	47b8      	blx	r7
 800a85a:	3001      	adds	r0, #1
 800a85c:	f43f af51 	beq.w	800a702 <_printf_float+0xb6>
 800a860:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800a864:	4543      	cmp	r3, r8
 800a866:	db02      	blt.n	800a86e <_printf_float+0x222>
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	07d8      	lsls	r0, r3, #31
 800a86c:	d50f      	bpl.n	800a88e <_printf_float+0x242>
 800a86e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a872:	4631      	mov	r1, r6
 800a874:	4628      	mov	r0, r5
 800a876:	47b8      	blx	r7
 800a878:	3001      	adds	r0, #1
 800a87a:	f43f af42 	beq.w	800a702 <_printf_float+0xb6>
 800a87e:	f04f 0900 	mov.w	r9, #0
 800a882:	f108 38ff 	add.w	r8, r8, #4294967295
 800a886:	f104 0a1a 	add.w	sl, r4, #26
 800a88a:	45c8      	cmp	r8, r9
 800a88c:	dc09      	bgt.n	800a8a2 <_printf_float+0x256>
 800a88e:	6823      	ldr	r3, [r4, #0]
 800a890:	079b      	lsls	r3, r3, #30
 800a892:	f100 8102 	bmi.w	800aa9a <_printf_float+0x44e>
 800a896:	68e0      	ldr	r0, [r4, #12]
 800a898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a89a:	4298      	cmp	r0, r3
 800a89c:	bfb8      	it	lt
 800a89e:	4618      	movlt	r0, r3
 800a8a0:	e731      	b.n	800a706 <_printf_float+0xba>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	4652      	mov	r2, sl
 800a8a6:	4631      	mov	r1, r6
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	47b8      	blx	r7
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	f43f af28 	beq.w	800a702 <_printf_float+0xb6>
 800a8b2:	f109 0901 	add.w	r9, r9, #1
 800a8b6:	e7e8      	b.n	800a88a <_printf_float+0x23e>
 800a8b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	dc38      	bgt.n	800a930 <_printf_float+0x2e4>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	4631      	mov	r1, r6
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	4a19      	ldr	r2, [pc, #100]	@ (800a92c <_printf_float+0x2e0>)
 800a8c6:	47b8      	blx	r7
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	f43f af1a 	beq.w	800a702 <_printf_float+0xb6>
 800a8ce:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a8d2:	ea59 0303 	orrs.w	r3, r9, r3
 800a8d6:	d102      	bne.n	800a8de <_printf_float+0x292>
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	07d9      	lsls	r1, r3, #31
 800a8dc:	d5d7      	bpl.n	800a88e <_printf_float+0x242>
 800a8de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a8e2:	4631      	mov	r1, r6
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	47b8      	blx	r7
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	f43f af0a 	beq.w	800a702 <_printf_float+0xb6>
 800a8ee:	f04f 0a00 	mov.w	sl, #0
 800a8f2:	f104 0b1a 	add.w	fp, r4, #26
 800a8f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a8f8:	425b      	negs	r3, r3
 800a8fa:	4553      	cmp	r3, sl
 800a8fc:	dc01      	bgt.n	800a902 <_printf_float+0x2b6>
 800a8fe:	464b      	mov	r3, r9
 800a900:	e793      	b.n	800a82a <_printf_float+0x1de>
 800a902:	2301      	movs	r3, #1
 800a904:	465a      	mov	r2, fp
 800a906:	4631      	mov	r1, r6
 800a908:	4628      	mov	r0, r5
 800a90a:	47b8      	blx	r7
 800a90c:	3001      	adds	r0, #1
 800a90e:	f43f aef8 	beq.w	800a702 <_printf_float+0xb6>
 800a912:	f10a 0a01 	add.w	sl, sl, #1
 800a916:	e7ee      	b.n	800a8f6 <_printf_float+0x2aa>
 800a918:	7fefffff 	.word	0x7fefffff
 800a91c:	0800d840 	.word	0x0800d840
 800a920:	0800d844 	.word	0x0800d844
 800a924:	0800d848 	.word	0x0800d848
 800a928:	0800d84c 	.word	0x0800d84c
 800a92c:	0800d850 	.word	0x0800d850
 800a930:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a932:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a936:	4553      	cmp	r3, sl
 800a938:	bfa8      	it	ge
 800a93a:	4653      	movge	r3, sl
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	4699      	mov	r9, r3
 800a940:	dc36      	bgt.n	800a9b0 <_printf_float+0x364>
 800a942:	f04f 0b00 	mov.w	fp, #0
 800a946:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a94a:	f104 021a 	add.w	r2, r4, #26
 800a94e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a950:	930a      	str	r3, [sp, #40]	@ 0x28
 800a952:	eba3 0309 	sub.w	r3, r3, r9
 800a956:	455b      	cmp	r3, fp
 800a958:	dc31      	bgt.n	800a9be <_printf_float+0x372>
 800a95a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a95c:	459a      	cmp	sl, r3
 800a95e:	dc3a      	bgt.n	800a9d6 <_printf_float+0x38a>
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	07da      	lsls	r2, r3, #31
 800a964:	d437      	bmi.n	800a9d6 <_printf_float+0x38a>
 800a966:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a968:	ebaa 0903 	sub.w	r9, sl, r3
 800a96c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a96e:	ebaa 0303 	sub.w	r3, sl, r3
 800a972:	4599      	cmp	r9, r3
 800a974:	bfa8      	it	ge
 800a976:	4699      	movge	r9, r3
 800a978:	f1b9 0f00 	cmp.w	r9, #0
 800a97c:	dc33      	bgt.n	800a9e6 <_printf_float+0x39a>
 800a97e:	f04f 0800 	mov.w	r8, #0
 800a982:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a986:	f104 0b1a 	add.w	fp, r4, #26
 800a98a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a98c:	ebaa 0303 	sub.w	r3, sl, r3
 800a990:	eba3 0309 	sub.w	r3, r3, r9
 800a994:	4543      	cmp	r3, r8
 800a996:	f77f af7a 	ble.w	800a88e <_printf_float+0x242>
 800a99a:	2301      	movs	r3, #1
 800a99c:	465a      	mov	r2, fp
 800a99e:	4631      	mov	r1, r6
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	47b8      	blx	r7
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	f43f aeac 	beq.w	800a702 <_printf_float+0xb6>
 800a9aa:	f108 0801 	add.w	r8, r8, #1
 800a9ae:	e7ec      	b.n	800a98a <_printf_float+0x33e>
 800a9b0:	4642      	mov	r2, r8
 800a9b2:	4631      	mov	r1, r6
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	47b8      	blx	r7
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	d1c2      	bne.n	800a942 <_printf_float+0x2f6>
 800a9bc:	e6a1      	b.n	800a702 <_printf_float+0xb6>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	4631      	mov	r1, r6
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	920a      	str	r2, [sp, #40]	@ 0x28
 800a9c6:	47b8      	blx	r7
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	f43f ae9a 	beq.w	800a702 <_printf_float+0xb6>
 800a9ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9d0:	f10b 0b01 	add.w	fp, fp, #1
 800a9d4:	e7bb      	b.n	800a94e <_printf_float+0x302>
 800a9d6:	4631      	mov	r1, r6
 800a9d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a9dc:	4628      	mov	r0, r5
 800a9de:	47b8      	blx	r7
 800a9e0:	3001      	adds	r0, #1
 800a9e2:	d1c0      	bne.n	800a966 <_printf_float+0x31a>
 800a9e4:	e68d      	b.n	800a702 <_printf_float+0xb6>
 800a9e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9e8:	464b      	mov	r3, r9
 800a9ea:	4631      	mov	r1, r6
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	4442      	add	r2, r8
 800a9f0:	47b8      	blx	r7
 800a9f2:	3001      	adds	r0, #1
 800a9f4:	d1c3      	bne.n	800a97e <_printf_float+0x332>
 800a9f6:	e684      	b.n	800a702 <_printf_float+0xb6>
 800a9f8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a9fc:	f1ba 0f01 	cmp.w	sl, #1
 800aa00:	dc01      	bgt.n	800aa06 <_printf_float+0x3ba>
 800aa02:	07db      	lsls	r3, r3, #31
 800aa04:	d536      	bpl.n	800aa74 <_printf_float+0x428>
 800aa06:	2301      	movs	r3, #1
 800aa08:	4642      	mov	r2, r8
 800aa0a:	4631      	mov	r1, r6
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	47b8      	blx	r7
 800aa10:	3001      	adds	r0, #1
 800aa12:	f43f ae76 	beq.w	800a702 <_printf_float+0xb6>
 800aa16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aa1a:	4631      	mov	r1, r6
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	47b8      	blx	r7
 800aa20:	3001      	adds	r0, #1
 800aa22:	f43f ae6e 	beq.w	800a702 <_printf_float+0xb6>
 800aa26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa32:	f7f5 ffb9 	bl	80009a8 <__aeabi_dcmpeq>
 800aa36:	b9c0      	cbnz	r0, 800aa6a <_printf_float+0x41e>
 800aa38:	4653      	mov	r3, sl
 800aa3a:	f108 0201 	add.w	r2, r8, #1
 800aa3e:	4631      	mov	r1, r6
 800aa40:	4628      	mov	r0, r5
 800aa42:	47b8      	blx	r7
 800aa44:	3001      	adds	r0, #1
 800aa46:	d10c      	bne.n	800aa62 <_printf_float+0x416>
 800aa48:	e65b      	b.n	800a702 <_printf_float+0xb6>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	465a      	mov	r2, fp
 800aa4e:	4631      	mov	r1, r6
 800aa50:	4628      	mov	r0, r5
 800aa52:	47b8      	blx	r7
 800aa54:	3001      	adds	r0, #1
 800aa56:	f43f ae54 	beq.w	800a702 <_printf_float+0xb6>
 800aa5a:	f108 0801 	add.w	r8, r8, #1
 800aa5e:	45d0      	cmp	r8, sl
 800aa60:	dbf3      	blt.n	800aa4a <_printf_float+0x3fe>
 800aa62:	464b      	mov	r3, r9
 800aa64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aa68:	e6e0      	b.n	800a82c <_printf_float+0x1e0>
 800aa6a:	f04f 0800 	mov.w	r8, #0
 800aa6e:	f104 0b1a 	add.w	fp, r4, #26
 800aa72:	e7f4      	b.n	800aa5e <_printf_float+0x412>
 800aa74:	2301      	movs	r3, #1
 800aa76:	4642      	mov	r2, r8
 800aa78:	e7e1      	b.n	800aa3e <_printf_float+0x3f2>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	464a      	mov	r2, r9
 800aa7e:	4631      	mov	r1, r6
 800aa80:	4628      	mov	r0, r5
 800aa82:	47b8      	blx	r7
 800aa84:	3001      	adds	r0, #1
 800aa86:	f43f ae3c 	beq.w	800a702 <_printf_float+0xb6>
 800aa8a:	f108 0801 	add.w	r8, r8, #1
 800aa8e:	68e3      	ldr	r3, [r4, #12]
 800aa90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800aa92:	1a5b      	subs	r3, r3, r1
 800aa94:	4543      	cmp	r3, r8
 800aa96:	dcf0      	bgt.n	800aa7a <_printf_float+0x42e>
 800aa98:	e6fd      	b.n	800a896 <_printf_float+0x24a>
 800aa9a:	f04f 0800 	mov.w	r8, #0
 800aa9e:	f104 0919 	add.w	r9, r4, #25
 800aaa2:	e7f4      	b.n	800aa8e <_printf_float+0x442>

0800aaa4 <_printf_common>:
 800aaa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa8:	4616      	mov	r6, r2
 800aaaa:	4698      	mov	r8, r3
 800aaac:	688a      	ldr	r2, [r1, #8]
 800aaae:	690b      	ldr	r3, [r1, #16]
 800aab0:	4607      	mov	r7, r0
 800aab2:	4293      	cmp	r3, r2
 800aab4:	bfb8      	it	lt
 800aab6:	4613      	movlt	r3, r2
 800aab8:	6033      	str	r3, [r6, #0]
 800aaba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aabe:	460c      	mov	r4, r1
 800aac0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aac4:	b10a      	cbz	r2, 800aaca <_printf_common+0x26>
 800aac6:	3301      	adds	r3, #1
 800aac8:	6033      	str	r3, [r6, #0]
 800aaca:	6823      	ldr	r3, [r4, #0]
 800aacc:	0699      	lsls	r1, r3, #26
 800aace:	bf42      	ittt	mi
 800aad0:	6833      	ldrmi	r3, [r6, #0]
 800aad2:	3302      	addmi	r3, #2
 800aad4:	6033      	strmi	r3, [r6, #0]
 800aad6:	6825      	ldr	r5, [r4, #0]
 800aad8:	f015 0506 	ands.w	r5, r5, #6
 800aadc:	d106      	bne.n	800aaec <_printf_common+0x48>
 800aade:	f104 0a19 	add.w	sl, r4, #25
 800aae2:	68e3      	ldr	r3, [r4, #12]
 800aae4:	6832      	ldr	r2, [r6, #0]
 800aae6:	1a9b      	subs	r3, r3, r2
 800aae8:	42ab      	cmp	r3, r5
 800aaea:	dc2b      	bgt.n	800ab44 <_printf_common+0xa0>
 800aaec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aaf0:	6822      	ldr	r2, [r4, #0]
 800aaf2:	3b00      	subs	r3, #0
 800aaf4:	bf18      	it	ne
 800aaf6:	2301      	movne	r3, #1
 800aaf8:	0692      	lsls	r2, r2, #26
 800aafa:	d430      	bmi.n	800ab5e <_printf_common+0xba>
 800aafc:	4641      	mov	r1, r8
 800aafe:	4638      	mov	r0, r7
 800ab00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab04:	47c8      	blx	r9
 800ab06:	3001      	adds	r0, #1
 800ab08:	d023      	beq.n	800ab52 <_printf_common+0xae>
 800ab0a:	6823      	ldr	r3, [r4, #0]
 800ab0c:	6922      	ldr	r2, [r4, #16]
 800ab0e:	f003 0306 	and.w	r3, r3, #6
 800ab12:	2b04      	cmp	r3, #4
 800ab14:	bf14      	ite	ne
 800ab16:	2500      	movne	r5, #0
 800ab18:	6833      	ldreq	r3, [r6, #0]
 800ab1a:	f04f 0600 	mov.w	r6, #0
 800ab1e:	bf08      	it	eq
 800ab20:	68e5      	ldreq	r5, [r4, #12]
 800ab22:	f104 041a 	add.w	r4, r4, #26
 800ab26:	bf08      	it	eq
 800ab28:	1aed      	subeq	r5, r5, r3
 800ab2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ab2e:	bf08      	it	eq
 800ab30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab34:	4293      	cmp	r3, r2
 800ab36:	bfc4      	itt	gt
 800ab38:	1a9b      	subgt	r3, r3, r2
 800ab3a:	18ed      	addgt	r5, r5, r3
 800ab3c:	42b5      	cmp	r5, r6
 800ab3e:	d11a      	bne.n	800ab76 <_printf_common+0xd2>
 800ab40:	2000      	movs	r0, #0
 800ab42:	e008      	b.n	800ab56 <_printf_common+0xb2>
 800ab44:	2301      	movs	r3, #1
 800ab46:	4652      	mov	r2, sl
 800ab48:	4641      	mov	r1, r8
 800ab4a:	4638      	mov	r0, r7
 800ab4c:	47c8      	blx	r9
 800ab4e:	3001      	adds	r0, #1
 800ab50:	d103      	bne.n	800ab5a <_printf_common+0xb6>
 800ab52:	f04f 30ff 	mov.w	r0, #4294967295
 800ab56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab5a:	3501      	adds	r5, #1
 800ab5c:	e7c1      	b.n	800aae2 <_printf_common+0x3e>
 800ab5e:	2030      	movs	r0, #48	@ 0x30
 800ab60:	18e1      	adds	r1, r4, r3
 800ab62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ab66:	1c5a      	adds	r2, r3, #1
 800ab68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ab6c:	4422      	add	r2, r4
 800ab6e:	3302      	adds	r3, #2
 800ab70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ab74:	e7c2      	b.n	800aafc <_printf_common+0x58>
 800ab76:	2301      	movs	r3, #1
 800ab78:	4622      	mov	r2, r4
 800ab7a:	4641      	mov	r1, r8
 800ab7c:	4638      	mov	r0, r7
 800ab7e:	47c8      	blx	r9
 800ab80:	3001      	adds	r0, #1
 800ab82:	d0e6      	beq.n	800ab52 <_printf_common+0xae>
 800ab84:	3601      	adds	r6, #1
 800ab86:	e7d9      	b.n	800ab3c <_printf_common+0x98>

0800ab88 <_printf_i>:
 800ab88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab8c:	7e0f      	ldrb	r7, [r1, #24]
 800ab8e:	4691      	mov	r9, r2
 800ab90:	2f78      	cmp	r7, #120	@ 0x78
 800ab92:	4680      	mov	r8, r0
 800ab94:	460c      	mov	r4, r1
 800ab96:	469a      	mov	sl, r3
 800ab98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab9e:	d807      	bhi.n	800abb0 <_printf_i+0x28>
 800aba0:	2f62      	cmp	r7, #98	@ 0x62
 800aba2:	d80a      	bhi.n	800abba <_printf_i+0x32>
 800aba4:	2f00      	cmp	r7, #0
 800aba6:	f000 80d3 	beq.w	800ad50 <_printf_i+0x1c8>
 800abaa:	2f58      	cmp	r7, #88	@ 0x58
 800abac:	f000 80ba 	beq.w	800ad24 <_printf_i+0x19c>
 800abb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800abb8:	e03a      	b.n	800ac30 <_printf_i+0xa8>
 800abba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800abbe:	2b15      	cmp	r3, #21
 800abc0:	d8f6      	bhi.n	800abb0 <_printf_i+0x28>
 800abc2:	a101      	add	r1, pc, #4	@ (adr r1, 800abc8 <_printf_i+0x40>)
 800abc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abc8:	0800ac21 	.word	0x0800ac21
 800abcc:	0800ac35 	.word	0x0800ac35
 800abd0:	0800abb1 	.word	0x0800abb1
 800abd4:	0800abb1 	.word	0x0800abb1
 800abd8:	0800abb1 	.word	0x0800abb1
 800abdc:	0800abb1 	.word	0x0800abb1
 800abe0:	0800ac35 	.word	0x0800ac35
 800abe4:	0800abb1 	.word	0x0800abb1
 800abe8:	0800abb1 	.word	0x0800abb1
 800abec:	0800abb1 	.word	0x0800abb1
 800abf0:	0800abb1 	.word	0x0800abb1
 800abf4:	0800ad37 	.word	0x0800ad37
 800abf8:	0800ac5f 	.word	0x0800ac5f
 800abfc:	0800acf1 	.word	0x0800acf1
 800ac00:	0800abb1 	.word	0x0800abb1
 800ac04:	0800abb1 	.word	0x0800abb1
 800ac08:	0800ad59 	.word	0x0800ad59
 800ac0c:	0800abb1 	.word	0x0800abb1
 800ac10:	0800ac5f 	.word	0x0800ac5f
 800ac14:	0800abb1 	.word	0x0800abb1
 800ac18:	0800abb1 	.word	0x0800abb1
 800ac1c:	0800acf9 	.word	0x0800acf9
 800ac20:	6833      	ldr	r3, [r6, #0]
 800ac22:	1d1a      	adds	r2, r3, #4
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	6032      	str	r2, [r6, #0]
 800ac28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ac30:	2301      	movs	r3, #1
 800ac32:	e09e      	b.n	800ad72 <_printf_i+0x1ea>
 800ac34:	6833      	ldr	r3, [r6, #0]
 800ac36:	6820      	ldr	r0, [r4, #0]
 800ac38:	1d19      	adds	r1, r3, #4
 800ac3a:	6031      	str	r1, [r6, #0]
 800ac3c:	0606      	lsls	r6, r0, #24
 800ac3e:	d501      	bpl.n	800ac44 <_printf_i+0xbc>
 800ac40:	681d      	ldr	r5, [r3, #0]
 800ac42:	e003      	b.n	800ac4c <_printf_i+0xc4>
 800ac44:	0645      	lsls	r5, r0, #25
 800ac46:	d5fb      	bpl.n	800ac40 <_printf_i+0xb8>
 800ac48:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ac4c:	2d00      	cmp	r5, #0
 800ac4e:	da03      	bge.n	800ac58 <_printf_i+0xd0>
 800ac50:	232d      	movs	r3, #45	@ 0x2d
 800ac52:	426d      	negs	r5, r5
 800ac54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac58:	230a      	movs	r3, #10
 800ac5a:	4859      	ldr	r0, [pc, #356]	@ (800adc0 <_printf_i+0x238>)
 800ac5c:	e011      	b.n	800ac82 <_printf_i+0xfa>
 800ac5e:	6821      	ldr	r1, [r4, #0]
 800ac60:	6833      	ldr	r3, [r6, #0]
 800ac62:	0608      	lsls	r0, r1, #24
 800ac64:	f853 5b04 	ldr.w	r5, [r3], #4
 800ac68:	d402      	bmi.n	800ac70 <_printf_i+0xe8>
 800ac6a:	0649      	lsls	r1, r1, #25
 800ac6c:	bf48      	it	mi
 800ac6e:	b2ad      	uxthmi	r5, r5
 800ac70:	2f6f      	cmp	r7, #111	@ 0x6f
 800ac72:	6033      	str	r3, [r6, #0]
 800ac74:	bf14      	ite	ne
 800ac76:	230a      	movne	r3, #10
 800ac78:	2308      	moveq	r3, #8
 800ac7a:	4851      	ldr	r0, [pc, #324]	@ (800adc0 <_printf_i+0x238>)
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ac82:	6866      	ldr	r6, [r4, #4]
 800ac84:	2e00      	cmp	r6, #0
 800ac86:	bfa8      	it	ge
 800ac88:	6821      	ldrge	r1, [r4, #0]
 800ac8a:	60a6      	str	r6, [r4, #8]
 800ac8c:	bfa4      	itt	ge
 800ac8e:	f021 0104 	bicge.w	r1, r1, #4
 800ac92:	6021      	strge	r1, [r4, #0]
 800ac94:	b90d      	cbnz	r5, 800ac9a <_printf_i+0x112>
 800ac96:	2e00      	cmp	r6, #0
 800ac98:	d04b      	beq.n	800ad32 <_printf_i+0x1aa>
 800ac9a:	4616      	mov	r6, r2
 800ac9c:	fbb5 f1f3 	udiv	r1, r5, r3
 800aca0:	fb03 5711 	mls	r7, r3, r1, r5
 800aca4:	5dc7      	ldrb	r7, [r0, r7]
 800aca6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800acaa:	462f      	mov	r7, r5
 800acac:	42bb      	cmp	r3, r7
 800acae:	460d      	mov	r5, r1
 800acb0:	d9f4      	bls.n	800ac9c <_printf_i+0x114>
 800acb2:	2b08      	cmp	r3, #8
 800acb4:	d10b      	bne.n	800acce <_printf_i+0x146>
 800acb6:	6823      	ldr	r3, [r4, #0]
 800acb8:	07df      	lsls	r7, r3, #31
 800acba:	d508      	bpl.n	800acce <_printf_i+0x146>
 800acbc:	6923      	ldr	r3, [r4, #16]
 800acbe:	6861      	ldr	r1, [r4, #4]
 800acc0:	4299      	cmp	r1, r3
 800acc2:	bfde      	ittt	le
 800acc4:	2330      	movle	r3, #48	@ 0x30
 800acc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800acca:	f106 36ff 	addle.w	r6, r6, #4294967295
 800acce:	1b92      	subs	r2, r2, r6
 800acd0:	6122      	str	r2, [r4, #16]
 800acd2:	464b      	mov	r3, r9
 800acd4:	4621      	mov	r1, r4
 800acd6:	4640      	mov	r0, r8
 800acd8:	f8cd a000 	str.w	sl, [sp]
 800acdc:	aa03      	add	r2, sp, #12
 800acde:	f7ff fee1 	bl	800aaa4 <_printf_common>
 800ace2:	3001      	adds	r0, #1
 800ace4:	d14a      	bne.n	800ad7c <_printf_i+0x1f4>
 800ace6:	f04f 30ff 	mov.w	r0, #4294967295
 800acea:	b004      	add	sp, #16
 800acec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	f043 0320 	orr.w	r3, r3, #32
 800acf6:	6023      	str	r3, [r4, #0]
 800acf8:	2778      	movs	r7, #120	@ 0x78
 800acfa:	4832      	ldr	r0, [pc, #200]	@ (800adc4 <_printf_i+0x23c>)
 800acfc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	6831      	ldr	r1, [r6, #0]
 800ad04:	061f      	lsls	r7, r3, #24
 800ad06:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad0a:	d402      	bmi.n	800ad12 <_printf_i+0x18a>
 800ad0c:	065f      	lsls	r7, r3, #25
 800ad0e:	bf48      	it	mi
 800ad10:	b2ad      	uxthmi	r5, r5
 800ad12:	6031      	str	r1, [r6, #0]
 800ad14:	07d9      	lsls	r1, r3, #31
 800ad16:	bf44      	itt	mi
 800ad18:	f043 0320 	orrmi.w	r3, r3, #32
 800ad1c:	6023      	strmi	r3, [r4, #0]
 800ad1e:	b11d      	cbz	r5, 800ad28 <_printf_i+0x1a0>
 800ad20:	2310      	movs	r3, #16
 800ad22:	e7ab      	b.n	800ac7c <_printf_i+0xf4>
 800ad24:	4826      	ldr	r0, [pc, #152]	@ (800adc0 <_printf_i+0x238>)
 800ad26:	e7e9      	b.n	800acfc <_printf_i+0x174>
 800ad28:	6823      	ldr	r3, [r4, #0]
 800ad2a:	f023 0320 	bic.w	r3, r3, #32
 800ad2e:	6023      	str	r3, [r4, #0]
 800ad30:	e7f6      	b.n	800ad20 <_printf_i+0x198>
 800ad32:	4616      	mov	r6, r2
 800ad34:	e7bd      	b.n	800acb2 <_printf_i+0x12a>
 800ad36:	6833      	ldr	r3, [r6, #0]
 800ad38:	6825      	ldr	r5, [r4, #0]
 800ad3a:	1d18      	adds	r0, r3, #4
 800ad3c:	6961      	ldr	r1, [r4, #20]
 800ad3e:	6030      	str	r0, [r6, #0]
 800ad40:	062e      	lsls	r6, r5, #24
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	d501      	bpl.n	800ad4a <_printf_i+0x1c2>
 800ad46:	6019      	str	r1, [r3, #0]
 800ad48:	e002      	b.n	800ad50 <_printf_i+0x1c8>
 800ad4a:	0668      	lsls	r0, r5, #25
 800ad4c:	d5fb      	bpl.n	800ad46 <_printf_i+0x1be>
 800ad4e:	8019      	strh	r1, [r3, #0]
 800ad50:	2300      	movs	r3, #0
 800ad52:	4616      	mov	r6, r2
 800ad54:	6123      	str	r3, [r4, #16]
 800ad56:	e7bc      	b.n	800acd2 <_printf_i+0x14a>
 800ad58:	6833      	ldr	r3, [r6, #0]
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	1d1a      	adds	r2, r3, #4
 800ad5e:	6032      	str	r2, [r6, #0]
 800ad60:	681e      	ldr	r6, [r3, #0]
 800ad62:	6862      	ldr	r2, [r4, #4]
 800ad64:	4630      	mov	r0, r6
 800ad66:	f000 f9d4 	bl	800b112 <memchr>
 800ad6a:	b108      	cbz	r0, 800ad70 <_printf_i+0x1e8>
 800ad6c:	1b80      	subs	r0, r0, r6
 800ad6e:	6060      	str	r0, [r4, #4]
 800ad70:	6863      	ldr	r3, [r4, #4]
 800ad72:	6123      	str	r3, [r4, #16]
 800ad74:	2300      	movs	r3, #0
 800ad76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad7a:	e7aa      	b.n	800acd2 <_printf_i+0x14a>
 800ad7c:	4632      	mov	r2, r6
 800ad7e:	4649      	mov	r1, r9
 800ad80:	4640      	mov	r0, r8
 800ad82:	6923      	ldr	r3, [r4, #16]
 800ad84:	47d0      	blx	sl
 800ad86:	3001      	adds	r0, #1
 800ad88:	d0ad      	beq.n	800ace6 <_printf_i+0x15e>
 800ad8a:	6823      	ldr	r3, [r4, #0]
 800ad8c:	079b      	lsls	r3, r3, #30
 800ad8e:	d413      	bmi.n	800adb8 <_printf_i+0x230>
 800ad90:	68e0      	ldr	r0, [r4, #12]
 800ad92:	9b03      	ldr	r3, [sp, #12]
 800ad94:	4298      	cmp	r0, r3
 800ad96:	bfb8      	it	lt
 800ad98:	4618      	movlt	r0, r3
 800ad9a:	e7a6      	b.n	800acea <_printf_i+0x162>
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	4632      	mov	r2, r6
 800ada0:	4649      	mov	r1, r9
 800ada2:	4640      	mov	r0, r8
 800ada4:	47d0      	blx	sl
 800ada6:	3001      	adds	r0, #1
 800ada8:	d09d      	beq.n	800ace6 <_printf_i+0x15e>
 800adaa:	3501      	adds	r5, #1
 800adac:	68e3      	ldr	r3, [r4, #12]
 800adae:	9903      	ldr	r1, [sp, #12]
 800adb0:	1a5b      	subs	r3, r3, r1
 800adb2:	42ab      	cmp	r3, r5
 800adb4:	dcf2      	bgt.n	800ad9c <_printf_i+0x214>
 800adb6:	e7eb      	b.n	800ad90 <_printf_i+0x208>
 800adb8:	2500      	movs	r5, #0
 800adba:	f104 0619 	add.w	r6, r4, #25
 800adbe:	e7f5      	b.n	800adac <_printf_i+0x224>
 800adc0:	0800d852 	.word	0x0800d852
 800adc4:	0800d863 	.word	0x0800d863

0800adc8 <std>:
 800adc8:	2300      	movs	r3, #0
 800adca:	b510      	push	{r4, lr}
 800adcc:	4604      	mov	r4, r0
 800adce:	e9c0 3300 	strd	r3, r3, [r0]
 800add2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800add6:	6083      	str	r3, [r0, #8]
 800add8:	8181      	strh	r1, [r0, #12]
 800adda:	6643      	str	r3, [r0, #100]	@ 0x64
 800addc:	81c2      	strh	r2, [r0, #14]
 800adde:	6183      	str	r3, [r0, #24]
 800ade0:	4619      	mov	r1, r3
 800ade2:	2208      	movs	r2, #8
 800ade4:	305c      	adds	r0, #92	@ 0x5c
 800ade6:	f000 f914 	bl	800b012 <memset>
 800adea:	4b0d      	ldr	r3, [pc, #52]	@ (800ae20 <std+0x58>)
 800adec:	6224      	str	r4, [r4, #32]
 800adee:	6263      	str	r3, [r4, #36]	@ 0x24
 800adf0:	4b0c      	ldr	r3, [pc, #48]	@ (800ae24 <std+0x5c>)
 800adf2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800adf4:	4b0c      	ldr	r3, [pc, #48]	@ (800ae28 <std+0x60>)
 800adf6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800adf8:	4b0c      	ldr	r3, [pc, #48]	@ (800ae2c <std+0x64>)
 800adfa:	6323      	str	r3, [r4, #48]	@ 0x30
 800adfc:	4b0c      	ldr	r3, [pc, #48]	@ (800ae30 <std+0x68>)
 800adfe:	429c      	cmp	r4, r3
 800ae00:	d006      	beq.n	800ae10 <std+0x48>
 800ae02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ae06:	4294      	cmp	r4, r2
 800ae08:	d002      	beq.n	800ae10 <std+0x48>
 800ae0a:	33d0      	adds	r3, #208	@ 0xd0
 800ae0c:	429c      	cmp	r4, r3
 800ae0e:	d105      	bne.n	800ae1c <std+0x54>
 800ae10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ae14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae18:	f000 b978 	b.w	800b10c <__retarget_lock_init_recursive>
 800ae1c:	bd10      	pop	{r4, pc}
 800ae1e:	bf00      	nop
 800ae20:	0800af8d 	.word	0x0800af8d
 800ae24:	0800afaf 	.word	0x0800afaf
 800ae28:	0800afe7 	.word	0x0800afe7
 800ae2c:	0800b00b 	.word	0x0800b00b
 800ae30:	20002798 	.word	0x20002798

0800ae34 <stdio_exit_handler>:
 800ae34:	4a02      	ldr	r2, [pc, #8]	@ (800ae40 <stdio_exit_handler+0xc>)
 800ae36:	4903      	ldr	r1, [pc, #12]	@ (800ae44 <stdio_exit_handler+0x10>)
 800ae38:	4803      	ldr	r0, [pc, #12]	@ (800ae48 <stdio_exit_handler+0x14>)
 800ae3a:	f000 b869 	b.w	800af10 <_fwalk_sglue>
 800ae3e:	bf00      	nop
 800ae40:	20000024 	.word	0x20000024
 800ae44:	0800ca7d 	.word	0x0800ca7d
 800ae48:	20000034 	.word	0x20000034

0800ae4c <cleanup_stdio>:
 800ae4c:	6841      	ldr	r1, [r0, #4]
 800ae4e:	4b0c      	ldr	r3, [pc, #48]	@ (800ae80 <cleanup_stdio+0x34>)
 800ae50:	b510      	push	{r4, lr}
 800ae52:	4299      	cmp	r1, r3
 800ae54:	4604      	mov	r4, r0
 800ae56:	d001      	beq.n	800ae5c <cleanup_stdio+0x10>
 800ae58:	f001 fe10 	bl	800ca7c <_fflush_r>
 800ae5c:	68a1      	ldr	r1, [r4, #8]
 800ae5e:	4b09      	ldr	r3, [pc, #36]	@ (800ae84 <cleanup_stdio+0x38>)
 800ae60:	4299      	cmp	r1, r3
 800ae62:	d002      	beq.n	800ae6a <cleanup_stdio+0x1e>
 800ae64:	4620      	mov	r0, r4
 800ae66:	f001 fe09 	bl	800ca7c <_fflush_r>
 800ae6a:	68e1      	ldr	r1, [r4, #12]
 800ae6c:	4b06      	ldr	r3, [pc, #24]	@ (800ae88 <cleanup_stdio+0x3c>)
 800ae6e:	4299      	cmp	r1, r3
 800ae70:	d004      	beq.n	800ae7c <cleanup_stdio+0x30>
 800ae72:	4620      	mov	r0, r4
 800ae74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae78:	f001 be00 	b.w	800ca7c <_fflush_r>
 800ae7c:	bd10      	pop	{r4, pc}
 800ae7e:	bf00      	nop
 800ae80:	20002798 	.word	0x20002798
 800ae84:	20002800 	.word	0x20002800
 800ae88:	20002868 	.word	0x20002868

0800ae8c <global_stdio_init.part.0>:
 800ae8c:	b510      	push	{r4, lr}
 800ae8e:	4b0b      	ldr	r3, [pc, #44]	@ (800aebc <global_stdio_init.part.0+0x30>)
 800ae90:	4c0b      	ldr	r4, [pc, #44]	@ (800aec0 <global_stdio_init.part.0+0x34>)
 800ae92:	4a0c      	ldr	r2, [pc, #48]	@ (800aec4 <global_stdio_init.part.0+0x38>)
 800ae94:	4620      	mov	r0, r4
 800ae96:	601a      	str	r2, [r3, #0]
 800ae98:	2104      	movs	r1, #4
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f7ff ff94 	bl	800adc8 <std>
 800aea0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aea4:	2201      	movs	r2, #1
 800aea6:	2109      	movs	r1, #9
 800aea8:	f7ff ff8e 	bl	800adc8 <std>
 800aeac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aeb0:	2202      	movs	r2, #2
 800aeb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeb6:	2112      	movs	r1, #18
 800aeb8:	f7ff bf86 	b.w	800adc8 <std>
 800aebc:	200028d0 	.word	0x200028d0
 800aec0:	20002798 	.word	0x20002798
 800aec4:	0800ae35 	.word	0x0800ae35

0800aec8 <__sfp_lock_acquire>:
 800aec8:	4801      	ldr	r0, [pc, #4]	@ (800aed0 <__sfp_lock_acquire+0x8>)
 800aeca:	f000 b920 	b.w	800b10e <__retarget_lock_acquire_recursive>
 800aece:	bf00      	nop
 800aed0:	200028d9 	.word	0x200028d9

0800aed4 <__sfp_lock_release>:
 800aed4:	4801      	ldr	r0, [pc, #4]	@ (800aedc <__sfp_lock_release+0x8>)
 800aed6:	f000 b91b 	b.w	800b110 <__retarget_lock_release_recursive>
 800aeda:	bf00      	nop
 800aedc:	200028d9 	.word	0x200028d9

0800aee0 <__sinit>:
 800aee0:	b510      	push	{r4, lr}
 800aee2:	4604      	mov	r4, r0
 800aee4:	f7ff fff0 	bl	800aec8 <__sfp_lock_acquire>
 800aee8:	6a23      	ldr	r3, [r4, #32]
 800aeea:	b11b      	cbz	r3, 800aef4 <__sinit+0x14>
 800aeec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aef0:	f7ff bff0 	b.w	800aed4 <__sfp_lock_release>
 800aef4:	4b04      	ldr	r3, [pc, #16]	@ (800af08 <__sinit+0x28>)
 800aef6:	6223      	str	r3, [r4, #32]
 800aef8:	4b04      	ldr	r3, [pc, #16]	@ (800af0c <__sinit+0x2c>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d1f5      	bne.n	800aeec <__sinit+0xc>
 800af00:	f7ff ffc4 	bl	800ae8c <global_stdio_init.part.0>
 800af04:	e7f2      	b.n	800aeec <__sinit+0xc>
 800af06:	bf00      	nop
 800af08:	0800ae4d 	.word	0x0800ae4d
 800af0c:	200028d0 	.word	0x200028d0

0800af10 <_fwalk_sglue>:
 800af10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af14:	4607      	mov	r7, r0
 800af16:	4688      	mov	r8, r1
 800af18:	4614      	mov	r4, r2
 800af1a:	2600      	movs	r6, #0
 800af1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af20:	f1b9 0901 	subs.w	r9, r9, #1
 800af24:	d505      	bpl.n	800af32 <_fwalk_sglue+0x22>
 800af26:	6824      	ldr	r4, [r4, #0]
 800af28:	2c00      	cmp	r4, #0
 800af2a:	d1f7      	bne.n	800af1c <_fwalk_sglue+0xc>
 800af2c:	4630      	mov	r0, r6
 800af2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af32:	89ab      	ldrh	r3, [r5, #12]
 800af34:	2b01      	cmp	r3, #1
 800af36:	d907      	bls.n	800af48 <_fwalk_sglue+0x38>
 800af38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af3c:	3301      	adds	r3, #1
 800af3e:	d003      	beq.n	800af48 <_fwalk_sglue+0x38>
 800af40:	4629      	mov	r1, r5
 800af42:	4638      	mov	r0, r7
 800af44:	47c0      	blx	r8
 800af46:	4306      	orrs	r6, r0
 800af48:	3568      	adds	r5, #104	@ 0x68
 800af4a:	e7e9      	b.n	800af20 <_fwalk_sglue+0x10>

0800af4c <siprintf>:
 800af4c:	b40e      	push	{r1, r2, r3}
 800af4e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800af52:	b500      	push	{lr}
 800af54:	b09c      	sub	sp, #112	@ 0x70
 800af56:	ab1d      	add	r3, sp, #116	@ 0x74
 800af58:	9002      	str	r0, [sp, #8]
 800af5a:	9006      	str	r0, [sp, #24]
 800af5c:	9107      	str	r1, [sp, #28]
 800af5e:	9104      	str	r1, [sp, #16]
 800af60:	4808      	ldr	r0, [pc, #32]	@ (800af84 <siprintf+0x38>)
 800af62:	4909      	ldr	r1, [pc, #36]	@ (800af88 <siprintf+0x3c>)
 800af64:	f853 2b04 	ldr.w	r2, [r3], #4
 800af68:	9105      	str	r1, [sp, #20]
 800af6a:	6800      	ldr	r0, [r0, #0]
 800af6c:	a902      	add	r1, sp, #8
 800af6e:	9301      	str	r3, [sp, #4]
 800af70:	f001 fc08 	bl	800c784 <_svfiprintf_r>
 800af74:	2200      	movs	r2, #0
 800af76:	9b02      	ldr	r3, [sp, #8]
 800af78:	701a      	strb	r2, [r3, #0]
 800af7a:	b01c      	add	sp, #112	@ 0x70
 800af7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800af80:	b003      	add	sp, #12
 800af82:	4770      	bx	lr
 800af84:	20000030 	.word	0x20000030
 800af88:	ffff0208 	.word	0xffff0208

0800af8c <__sread>:
 800af8c:	b510      	push	{r4, lr}
 800af8e:	460c      	mov	r4, r1
 800af90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af94:	f000 f86c 	bl	800b070 <_read_r>
 800af98:	2800      	cmp	r0, #0
 800af9a:	bfab      	itete	ge
 800af9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800af9e:	89a3      	ldrhlt	r3, [r4, #12]
 800afa0:	181b      	addge	r3, r3, r0
 800afa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800afa6:	bfac      	ite	ge
 800afa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800afaa:	81a3      	strhlt	r3, [r4, #12]
 800afac:	bd10      	pop	{r4, pc}

0800afae <__swrite>:
 800afae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afb2:	461f      	mov	r7, r3
 800afb4:	898b      	ldrh	r3, [r1, #12]
 800afb6:	4605      	mov	r5, r0
 800afb8:	05db      	lsls	r3, r3, #23
 800afba:	460c      	mov	r4, r1
 800afbc:	4616      	mov	r6, r2
 800afbe:	d505      	bpl.n	800afcc <__swrite+0x1e>
 800afc0:	2302      	movs	r3, #2
 800afc2:	2200      	movs	r2, #0
 800afc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afc8:	f000 f840 	bl	800b04c <_lseek_r>
 800afcc:	89a3      	ldrh	r3, [r4, #12]
 800afce:	4632      	mov	r2, r6
 800afd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800afd4:	81a3      	strh	r3, [r4, #12]
 800afd6:	4628      	mov	r0, r5
 800afd8:	463b      	mov	r3, r7
 800afda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afe2:	f000 b857 	b.w	800b094 <_write_r>

0800afe6 <__sseek>:
 800afe6:	b510      	push	{r4, lr}
 800afe8:	460c      	mov	r4, r1
 800afea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afee:	f000 f82d 	bl	800b04c <_lseek_r>
 800aff2:	1c43      	adds	r3, r0, #1
 800aff4:	89a3      	ldrh	r3, [r4, #12]
 800aff6:	bf15      	itete	ne
 800aff8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800affa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800affe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b002:	81a3      	strheq	r3, [r4, #12]
 800b004:	bf18      	it	ne
 800b006:	81a3      	strhne	r3, [r4, #12]
 800b008:	bd10      	pop	{r4, pc}

0800b00a <__sclose>:
 800b00a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b00e:	f000 b80d 	b.w	800b02c <_close_r>

0800b012 <memset>:
 800b012:	4603      	mov	r3, r0
 800b014:	4402      	add	r2, r0
 800b016:	4293      	cmp	r3, r2
 800b018:	d100      	bne.n	800b01c <memset+0xa>
 800b01a:	4770      	bx	lr
 800b01c:	f803 1b01 	strb.w	r1, [r3], #1
 800b020:	e7f9      	b.n	800b016 <memset+0x4>
	...

0800b024 <_localeconv_r>:
 800b024:	4800      	ldr	r0, [pc, #0]	@ (800b028 <_localeconv_r+0x4>)
 800b026:	4770      	bx	lr
 800b028:	20000170 	.word	0x20000170

0800b02c <_close_r>:
 800b02c:	b538      	push	{r3, r4, r5, lr}
 800b02e:	2300      	movs	r3, #0
 800b030:	4d05      	ldr	r5, [pc, #20]	@ (800b048 <_close_r+0x1c>)
 800b032:	4604      	mov	r4, r0
 800b034:	4608      	mov	r0, r1
 800b036:	602b      	str	r3, [r5, #0]
 800b038:	f7f7 fb4b 	bl	80026d2 <_close>
 800b03c:	1c43      	adds	r3, r0, #1
 800b03e:	d102      	bne.n	800b046 <_close_r+0x1a>
 800b040:	682b      	ldr	r3, [r5, #0]
 800b042:	b103      	cbz	r3, 800b046 <_close_r+0x1a>
 800b044:	6023      	str	r3, [r4, #0]
 800b046:	bd38      	pop	{r3, r4, r5, pc}
 800b048:	200028d4 	.word	0x200028d4

0800b04c <_lseek_r>:
 800b04c:	b538      	push	{r3, r4, r5, lr}
 800b04e:	4604      	mov	r4, r0
 800b050:	4608      	mov	r0, r1
 800b052:	4611      	mov	r1, r2
 800b054:	2200      	movs	r2, #0
 800b056:	4d05      	ldr	r5, [pc, #20]	@ (800b06c <_lseek_r+0x20>)
 800b058:	602a      	str	r2, [r5, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	f7f7 fb5d 	bl	800271a <_lseek>
 800b060:	1c43      	adds	r3, r0, #1
 800b062:	d102      	bne.n	800b06a <_lseek_r+0x1e>
 800b064:	682b      	ldr	r3, [r5, #0]
 800b066:	b103      	cbz	r3, 800b06a <_lseek_r+0x1e>
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	bd38      	pop	{r3, r4, r5, pc}
 800b06c:	200028d4 	.word	0x200028d4

0800b070 <_read_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	4604      	mov	r4, r0
 800b074:	4608      	mov	r0, r1
 800b076:	4611      	mov	r1, r2
 800b078:	2200      	movs	r2, #0
 800b07a:	4d05      	ldr	r5, [pc, #20]	@ (800b090 <_read_r+0x20>)
 800b07c:	602a      	str	r2, [r5, #0]
 800b07e:	461a      	mov	r2, r3
 800b080:	f7f7 faee 	bl	8002660 <_read>
 800b084:	1c43      	adds	r3, r0, #1
 800b086:	d102      	bne.n	800b08e <_read_r+0x1e>
 800b088:	682b      	ldr	r3, [r5, #0]
 800b08a:	b103      	cbz	r3, 800b08e <_read_r+0x1e>
 800b08c:	6023      	str	r3, [r4, #0]
 800b08e:	bd38      	pop	{r3, r4, r5, pc}
 800b090:	200028d4 	.word	0x200028d4

0800b094 <_write_r>:
 800b094:	b538      	push	{r3, r4, r5, lr}
 800b096:	4604      	mov	r4, r0
 800b098:	4608      	mov	r0, r1
 800b09a:	4611      	mov	r1, r2
 800b09c:	2200      	movs	r2, #0
 800b09e:	4d05      	ldr	r5, [pc, #20]	@ (800b0b4 <_write_r+0x20>)
 800b0a0:	602a      	str	r2, [r5, #0]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	f7f7 faf9 	bl	800269a <_write>
 800b0a8:	1c43      	adds	r3, r0, #1
 800b0aa:	d102      	bne.n	800b0b2 <_write_r+0x1e>
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	b103      	cbz	r3, 800b0b2 <_write_r+0x1e>
 800b0b0:	6023      	str	r3, [r4, #0]
 800b0b2:	bd38      	pop	{r3, r4, r5, pc}
 800b0b4:	200028d4 	.word	0x200028d4

0800b0b8 <__errno>:
 800b0b8:	4b01      	ldr	r3, [pc, #4]	@ (800b0c0 <__errno+0x8>)
 800b0ba:	6818      	ldr	r0, [r3, #0]
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	20000030 	.word	0x20000030

0800b0c4 <__libc_init_array>:
 800b0c4:	b570      	push	{r4, r5, r6, lr}
 800b0c6:	2600      	movs	r6, #0
 800b0c8:	4d0c      	ldr	r5, [pc, #48]	@ (800b0fc <__libc_init_array+0x38>)
 800b0ca:	4c0d      	ldr	r4, [pc, #52]	@ (800b100 <__libc_init_array+0x3c>)
 800b0cc:	1b64      	subs	r4, r4, r5
 800b0ce:	10a4      	asrs	r4, r4, #2
 800b0d0:	42a6      	cmp	r6, r4
 800b0d2:	d109      	bne.n	800b0e8 <__libc_init_array+0x24>
 800b0d4:	f002 f86e 	bl	800d1b4 <_init>
 800b0d8:	2600      	movs	r6, #0
 800b0da:	4d0a      	ldr	r5, [pc, #40]	@ (800b104 <__libc_init_array+0x40>)
 800b0dc:	4c0a      	ldr	r4, [pc, #40]	@ (800b108 <__libc_init_array+0x44>)
 800b0de:	1b64      	subs	r4, r4, r5
 800b0e0:	10a4      	asrs	r4, r4, #2
 800b0e2:	42a6      	cmp	r6, r4
 800b0e4:	d105      	bne.n	800b0f2 <__libc_init_array+0x2e>
 800b0e6:	bd70      	pop	{r4, r5, r6, pc}
 800b0e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0ec:	4798      	blx	r3
 800b0ee:	3601      	adds	r6, #1
 800b0f0:	e7ee      	b.n	800b0d0 <__libc_init_array+0xc>
 800b0f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0f6:	4798      	blx	r3
 800b0f8:	3601      	adds	r6, #1
 800b0fa:	e7f2      	b.n	800b0e2 <__libc_init_array+0x1e>
 800b0fc:	0800dbb8 	.word	0x0800dbb8
 800b100:	0800dbb8 	.word	0x0800dbb8
 800b104:	0800dbb8 	.word	0x0800dbb8
 800b108:	0800dbbc 	.word	0x0800dbbc

0800b10c <__retarget_lock_init_recursive>:
 800b10c:	4770      	bx	lr

0800b10e <__retarget_lock_acquire_recursive>:
 800b10e:	4770      	bx	lr

0800b110 <__retarget_lock_release_recursive>:
 800b110:	4770      	bx	lr

0800b112 <memchr>:
 800b112:	4603      	mov	r3, r0
 800b114:	b510      	push	{r4, lr}
 800b116:	b2c9      	uxtb	r1, r1
 800b118:	4402      	add	r2, r0
 800b11a:	4293      	cmp	r3, r2
 800b11c:	4618      	mov	r0, r3
 800b11e:	d101      	bne.n	800b124 <memchr+0x12>
 800b120:	2000      	movs	r0, #0
 800b122:	e003      	b.n	800b12c <memchr+0x1a>
 800b124:	7804      	ldrb	r4, [r0, #0]
 800b126:	3301      	adds	r3, #1
 800b128:	428c      	cmp	r4, r1
 800b12a:	d1f6      	bne.n	800b11a <memchr+0x8>
 800b12c:	bd10      	pop	{r4, pc}

0800b12e <quorem>:
 800b12e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b132:	6903      	ldr	r3, [r0, #16]
 800b134:	690c      	ldr	r4, [r1, #16]
 800b136:	4607      	mov	r7, r0
 800b138:	42a3      	cmp	r3, r4
 800b13a:	db7e      	blt.n	800b23a <quorem+0x10c>
 800b13c:	3c01      	subs	r4, #1
 800b13e:	00a3      	lsls	r3, r4, #2
 800b140:	f100 0514 	add.w	r5, r0, #20
 800b144:	f101 0814 	add.w	r8, r1, #20
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b14e:	9301      	str	r3, [sp, #4]
 800b150:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b154:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b158:	3301      	adds	r3, #1
 800b15a:	429a      	cmp	r2, r3
 800b15c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b160:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b164:	d32e      	bcc.n	800b1c4 <quorem+0x96>
 800b166:	f04f 0a00 	mov.w	sl, #0
 800b16a:	46c4      	mov	ip, r8
 800b16c:	46ae      	mov	lr, r5
 800b16e:	46d3      	mov	fp, sl
 800b170:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b174:	b298      	uxth	r0, r3
 800b176:	fb06 a000 	mla	r0, r6, r0, sl
 800b17a:	0c1b      	lsrs	r3, r3, #16
 800b17c:	0c02      	lsrs	r2, r0, #16
 800b17e:	fb06 2303 	mla	r3, r6, r3, r2
 800b182:	f8de 2000 	ldr.w	r2, [lr]
 800b186:	b280      	uxth	r0, r0
 800b188:	b292      	uxth	r2, r2
 800b18a:	1a12      	subs	r2, r2, r0
 800b18c:	445a      	add	r2, fp
 800b18e:	f8de 0000 	ldr.w	r0, [lr]
 800b192:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b196:	b29b      	uxth	r3, r3
 800b198:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b19c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b1a0:	b292      	uxth	r2, r2
 800b1a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b1a6:	45e1      	cmp	r9, ip
 800b1a8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b1ac:	f84e 2b04 	str.w	r2, [lr], #4
 800b1b0:	d2de      	bcs.n	800b170 <quorem+0x42>
 800b1b2:	9b00      	ldr	r3, [sp, #0]
 800b1b4:	58eb      	ldr	r3, [r5, r3]
 800b1b6:	b92b      	cbnz	r3, 800b1c4 <quorem+0x96>
 800b1b8:	9b01      	ldr	r3, [sp, #4]
 800b1ba:	3b04      	subs	r3, #4
 800b1bc:	429d      	cmp	r5, r3
 800b1be:	461a      	mov	r2, r3
 800b1c0:	d32f      	bcc.n	800b222 <quorem+0xf4>
 800b1c2:	613c      	str	r4, [r7, #16]
 800b1c4:	4638      	mov	r0, r7
 800b1c6:	f001 f979 	bl	800c4bc <__mcmp>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	db25      	blt.n	800b21a <quorem+0xec>
 800b1ce:	4629      	mov	r1, r5
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	f858 2b04 	ldr.w	r2, [r8], #4
 800b1d6:	f8d1 c000 	ldr.w	ip, [r1]
 800b1da:	fa1f fe82 	uxth.w	lr, r2
 800b1de:	fa1f f38c 	uxth.w	r3, ip
 800b1e2:	eba3 030e 	sub.w	r3, r3, lr
 800b1e6:	4403      	add	r3, r0
 800b1e8:	0c12      	lsrs	r2, r2, #16
 800b1ea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b1ee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1f8:	45c1      	cmp	r9, r8
 800b1fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b1fe:	f841 3b04 	str.w	r3, [r1], #4
 800b202:	d2e6      	bcs.n	800b1d2 <quorem+0xa4>
 800b204:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b208:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b20c:	b922      	cbnz	r2, 800b218 <quorem+0xea>
 800b20e:	3b04      	subs	r3, #4
 800b210:	429d      	cmp	r5, r3
 800b212:	461a      	mov	r2, r3
 800b214:	d30b      	bcc.n	800b22e <quorem+0x100>
 800b216:	613c      	str	r4, [r7, #16]
 800b218:	3601      	adds	r6, #1
 800b21a:	4630      	mov	r0, r6
 800b21c:	b003      	add	sp, #12
 800b21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b222:	6812      	ldr	r2, [r2, #0]
 800b224:	3b04      	subs	r3, #4
 800b226:	2a00      	cmp	r2, #0
 800b228:	d1cb      	bne.n	800b1c2 <quorem+0x94>
 800b22a:	3c01      	subs	r4, #1
 800b22c:	e7c6      	b.n	800b1bc <quorem+0x8e>
 800b22e:	6812      	ldr	r2, [r2, #0]
 800b230:	3b04      	subs	r3, #4
 800b232:	2a00      	cmp	r2, #0
 800b234:	d1ef      	bne.n	800b216 <quorem+0xe8>
 800b236:	3c01      	subs	r4, #1
 800b238:	e7ea      	b.n	800b210 <quorem+0xe2>
 800b23a:	2000      	movs	r0, #0
 800b23c:	e7ee      	b.n	800b21c <quorem+0xee>
	...

0800b240 <_dtoa_r>:
 800b240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b244:	4614      	mov	r4, r2
 800b246:	461d      	mov	r5, r3
 800b248:	69c7      	ldr	r7, [r0, #28]
 800b24a:	b097      	sub	sp, #92	@ 0x5c
 800b24c:	4683      	mov	fp, r0
 800b24e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b252:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b254:	b97f      	cbnz	r7, 800b276 <_dtoa_r+0x36>
 800b256:	2010      	movs	r0, #16
 800b258:	f000 fe02 	bl	800be60 <malloc>
 800b25c:	4602      	mov	r2, r0
 800b25e:	f8cb 001c 	str.w	r0, [fp, #28]
 800b262:	b920      	cbnz	r0, 800b26e <_dtoa_r+0x2e>
 800b264:	21ef      	movs	r1, #239	@ 0xef
 800b266:	4ba8      	ldr	r3, [pc, #672]	@ (800b508 <_dtoa_r+0x2c8>)
 800b268:	48a8      	ldr	r0, [pc, #672]	@ (800b50c <_dtoa_r+0x2cc>)
 800b26a:	f001 fc67 	bl	800cb3c <__assert_func>
 800b26e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b272:	6007      	str	r7, [r0, #0]
 800b274:	60c7      	str	r7, [r0, #12]
 800b276:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b27a:	6819      	ldr	r1, [r3, #0]
 800b27c:	b159      	cbz	r1, 800b296 <_dtoa_r+0x56>
 800b27e:	685a      	ldr	r2, [r3, #4]
 800b280:	2301      	movs	r3, #1
 800b282:	4093      	lsls	r3, r2
 800b284:	604a      	str	r2, [r1, #4]
 800b286:	608b      	str	r3, [r1, #8]
 800b288:	4658      	mov	r0, fp
 800b28a:	f000 fedf 	bl	800c04c <_Bfree>
 800b28e:	2200      	movs	r2, #0
 800b290:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b294:	601a      	str	r2, [r3, #0]
 800b296:	1e2b      	subs	r3, r5, #0
 800b298:	bfaf      	iteee	ge
 800b29a:	2300      	movge	r3, #0
 800b29c:	2201      	movlt	r2, #1
 800b29e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b2a2:	9303      	strlt	r3, [sp, #12]
 800b2a4:	bfa8      	it	ge
 800b2a6:	6033      	strge	r3, [r6, #0]
 800b2a8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b2ac:	4b98      	ldr	r3, [pc, #608]	@ (800b510 <_dtoa_r+0x2d0>)
 800b2ae:	bfb8      	it	lt
 800b2b0:	6032      	strlt	r2, [r6, #0]
 800b2b2:	ea33 0308 	bics.w	r3, r3, r8
 800b2b6:	d112      	bne.n	800b2de <_dtoa_r+0x9e>
 800b2b8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b2bc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b2be:	6013      	str	r3, [r2, #0]
 800b2c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b2c4:	4323      	orrs	r3, r4
 800b2c6:	f000 8550 	beq.w	800bd6a <_dtoa_r+0xb2a>
 800b2ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b2cc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800b514 <_dtoa_r+0x2d4>
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f000 8552 	beq.w	800bd7a <_dtoa_r+0xb3a>
 800b2d6:	f10a 0303 	add.w	r3, sl, #3
 800b2da:	f000 bd4c 	b.w	800bd76 <_dtoa_r+0xb36>
 800b2de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b2e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f7f5 fb5b 	bl	80009a8 <__aeabi_dcmpeq>
 800b2f2:	4607      	mov	r7, r0
 800b2f4:	b158      	cbz	r0, 800b30e <_dtoa_r+0xce>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b2fa:	6013      	str	r3, [r2, #0]
 800b2fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b2fe:	b113      	cbz	r3, 800b306 <_dtoa_r+0xc6>
 800b300:	4b85      	ldr	r3, [pc, #532]	@ (800b518 <_dtoa_r+0x2d8>)
 800b302:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b304:	6013      	str	r3, [r2, #0]
 800b306:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800b51c <_dtoa_r+0x2dc>
 800b30a:	f000 bd36 	b.w	800bd7a <_dtoa_r+0xb3a>
 800b30e:	ab14      	add	r3, sp, #80	@ 0x50
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	ab15      	add	r3, sp, #84	@ 0x54
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	4658      	mov	r0, fp
 800b318:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b31c:	f001 f97e 	bl	800c61c <__d2b>
 800b320:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b324:	4681      	mov	r9, r0
 800b326:	2e00      	cmp	r6, #0
 800b328:	d077      	beq.n	800b41a <_dtoa_r+0x1da>
 800b32a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b32e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b330:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b338:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b33c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b340:	9712      	str	r7, [sp, #72]	@ 0x48
 800b342:	4619      	mov	r1, r3
 800b344:	2200      	movs	r2, #0
 800b346:	4b76      	ldr	r3, [pc, #472]	@ (800b520 <_dtoa_r+0x2e0>)
 800b348:	f7f4 ff0e 	bl	8000168 <__aeabi_dsub>
 800b34c:	a368      	add	r3, pc, #416	@ (adr r3, 800b4f0 <_dtoa_r+0x2b0>)
 800b34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b352:	f7f5 f8c1 	bl	80004d8 <__aeabi_dmul>
 800b356:	a368      	add	r3, pc, #416	@ (adr r3, 800b4f8 <_dtoa_r+0x2b8>)
 800b358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35c:	f7f4 ff06 	bl	800016c <__adddf3>
 800b360:	4604      	mov	r4, r0
 800b362:	4630      	mov	r0, r6
 800b364:	460d      	mov	r5, r1
 800b366:	f7f5 f84d 	bl	8000404 <__aeabi_i2d>
 800b36a:	a365      	add	r3, pc, #404	@ (adr r3, 800b500 <_dtoa_r+0x2c0>)
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	f7f5 f8b2 	bl	80004d8 <__aeabi_dmul>
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	4620      	mov	r0, r4
 800b37a:	4629      	mov	r1, r5
 800b37c:	f7f4 fef6 	bl	800016c <__adddf3>
 800b380:	4604      	mov	r4, r0
 800b382:	460d      	mov	r5, r1
 800b384:	f7f5 fb58 	bl	8000a38 <__aeabi_d2iz>
 800b388:	2200      	movs	r2, #0
 800b38a:	4607      	mov	r7, r0
 800b38c:	2300      	movs	r3, #0
 800b38e:	4620      	mov	r0, r4
 800b390:	4629      	mov	r1, r5
 800b392:	f7f5 fb13 	bl	80009bc <__aeabi_dcmplt>
 800b396:	b140      	cbz	r0, 800b3aa <_dtoa_r+0x16a>
 800b398:	4638      	mov	r0, r7
 800b39a:	f7f5 f833 	bl	8000404 <__aeabi_i2d>
 800b39e:	4622      	mov	r2, r4
 800b3a0:	462b      	mov	r3, r5
 800b3a2:	f7f5 fb01 	bl	80009a8 <__aeabi_dcmpeq>
 800b3a6:	b900      	cbnz	r0, 800b3aa <_dtoa_r+0x16a>
 800b3a8:	3f01      	subs	r7, #1
 800b3aa:	2f16      	cmp	r7, #22
 800b3ac:	d853      	bhi.n	800b456 <_dtoa_r+0x216>
 800b3ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3b2:	4b5c      	ldr	r3, [pc, #368]	@ (800b524 <_dtoa_r+0x2e4>)
 800b3b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3bc:	f7f5 fafe 	bl	80009bc <__aeabi_dcmplt>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d04a      	beq.n	800b45a <_dtoa_r+0x21a>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	3f01      	subs	r7, #1
 800b3c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b3ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b3cc:	1b9b      	subs	r3, r3, r6
 800b3ce:	1e5a      	subs	r2, r3, #1
 800b3d0:	bf46      	itte	mi
 800b3d2:	f1c3 0801 	rsbmi	r8, r3, #1
 800b3d6:	2300      	movmi	r3, #0
 800b3d8:	f04f 0800 	movpl.w	r8, #0
 800b3dc:	9209      	str	r2, [sp, #36]	@ 0x24
 800b3de:	bf48      	it	mi
 800b3e0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b3e2:	2f00      	cmp	r7, #0
 800b3e4:	db3b      	blt.n	800b45e <_dtoa_r+0x21e>
 800b3e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3e8:	970e      	str	r7, [sp, #56]	@ 0x38
 800b3ea:	443b      	add	r3, r7
 800b3ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b3f4:	2b09      	cmp	r3, #9
 800b3f6:	d866      	bhi.n	800b4c6 <_dtoa_r+0x286>
 800b3f8:	2b05      	cmp	r3, #5
 800b3fa:	bfc4      	itt	gt
 800b3fc:	3b04      	subgt	r3, #4
 800b3fe:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b400:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b402:	bfc8      	it	gt
 800b404:	2400      	movgt	r4, #0
 800b406:	f1a3 0302 	sub.w	r3, r3, #2
 800b40a:	bfd8      	it	le
 800b40c:	2401      	movle	r4, #1
 800b40e:	2b03      	cmp	r3, #3
 800b410:	d864      	bhi.n	800b4dc <_dtoa_r+0x29c>
 800b412:	e8df f003 	tbb	[pc, r3]
 800b416:	382b      	.short	0x382b
 800b418:	5636      	.short	0x5636
 800b41a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b41e:	441e      	add	r6, r3
 800b420:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b424:	2b20      	cmp	r3, #32
 800b426:	bfc1      	itttt	gt
 800b428:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b42c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b430:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b434:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b438:	bfd6      	itet	le
 800b43a:	f1c3 0320 	rsble	r3, r3, #32
 800b43e:	ea48 0003 	orrgt.w	r0, r8, r3
 800b442:	fa04 f003 	lslle.w	r0, r4, r3
 800b446:	f7f4 ffcd 	bl	80003e4 <__aeabi_ui2d>
 800b44a:	2201      	movs	r2, #1
 800b44c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b450:	3e01      	subs	r6, #1
 800b452:	9212      	str	r2, [sp, #72]	@ 0x48
 800b454:	e775      	b.n	800b342 <_dtoa_r+0x102>
 800b456:	2301      	movs	r3, #1
 800b458:	e7b6      	b.n	800b3c8 <_dtoa_r+0x188>
 800b45a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b45c:	e7b5      	b.n	800b3ca <_dtoa_r+0x18a>
 800b45e:	427b      	negs	r3, r7
 800b460:	930a      	str	r3, [sp, #40]	@ 0x28
 800b462:	2300      	movs	r3, #0
 800b464:	eba8 0807 	sub.w	r8, r8, r7
 800b468:	930e      	str	r3, [sp, #56]	@ 0x38
 800b46a:	e7c2      	b.n	800b3f2 <_dtoa_r+0x1b2>
 800b46c:	2300      	movs	r3, #0
 800b46e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b470:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b472:	2b00      	cmp	r3, #0
 800b474:	dc35      	bgt.n	800b4e2 <_dtoa_r+0x2a2>
 800b476:	2301      	movs	r3, #1
 800b478:	461a      	mov	r2, r3
 800b47a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b47e:	9221      	str	r2, [sp, #132]	@ 0x84
 800b480:	e00b      	b.n	800b49a <_dtoa_r+0x25a>
 800b482:	2301      	movs	r3, #1
 800b484:	e7f3      	b.n	800b46e <_dtoa_r+0x22e>
 800b486:	2300      	movs	r3, #0
 800b488:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b48a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b48c:	18fb      	adds	r3, r7, r3
 800b48e:	9308      	str	r3, [sp, #32]
 800b490:	3301      	adds	r3, #1
 800b492:	2b01      	cmp	r3, #1
 800b494:	9307      	str	r3, [sp, #28]
 800b496:	bfb8      	it	lt
 800b498:	2301      	movlt	r3, #1
 800b49a:	2100      	movs	r1, #0
 800b49c:	2204      	movs	r2, #4
 800b49e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b4a2:	f102 0514 	add.w	r5, r2, #20
 800b4a6:	429d      	cmp	r5, r3
 800b4a8:	d91f      	bls.n	800b4ea <_dtoa_r+0x2aa>
 800b4aa:	6041      	str	r1, [r0, #4]
 800b4ac:	4658      	mov	r0, fp
 800b4ae:	f000 fd8d 	bl	800bfcc <_Balloc>
 800b4b2:	4682      	mov	sl, r0
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	d139      	bne.n	800b52c <_dtoa_r+0x2ec>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	f240 11af 	movw	r1, #431	@ 0x1af
 800b4be:	4b1a      	ldr	r3, [pc, #104]	@ (800b528 <_dtoa_r+0x2e8>)
 800b4c0:	e6d2      	b.n	800b268 <_dtoa_r+0x28>
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	e7e0      	b.n	800b488 <_dtoa_r+0x248>
 800b4c6:	2401      	movs	r4, #1
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b4cc:	9320      	str	r3, [sp, #128]	@ 0x80
 800b4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b4d8:	2312      	movs	r3, #18
 800b4da:	e7d0      	b.n	800b47e <_dtoa_r+0x23e>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4e0:	e7f5      	b.n	800b4ce <_dtoa_r+0x28e>
 800b4e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b4e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b4e8:	e7d7      	b.n	800b49a <_dtoa_r+0x25a>
 800b4ea:	3101      	adds	r1, #1
 800b4ec:	0052      	lsls	r2, r2, #1
 800b4ee:	e7d8      	b.n	800b4a2 <_dtoa_r+0x262>
 800b4f0:	636f4361 	.word	0x636f4361
 800b4f4:	3fd287a7 	.word	0x3fd287a7
 800b4f8:	8b60c8b3 	.word	0x8b60c8b3
 800b4fc:	3fc68a28 	.word	0x3fc68a28
 800b500:	509f79fb 	.word	0x509f79fb
 800b504:	3fd34413 	.word	0x3fd34413
 800b508:	0800d881 	.word	0x0800d881
 800b50c:	0800d898 	.word	0x0800d898
 800b510:	7ff00000 	.word	0x7ff00000
 800b514:	0800d87d 	.word	0x0800d87d
 800b518:	0800d851 	.word	0x0800d851
 800b51c:	0800d850 	.word	0x0800d850
 800b520:	3ff80000 	.word	0x3ff80000
 800b524:	0800d990 	.word	0x0800d990
 800b528:	0800d8f0 	.word	0x0800d8f0
 800b52c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b530:	6018      	str	r0, [r3, #0]
 800b532:	9b07      	ldr	r3, [sp, #28]
 800b534:	2b0e      	cmp	r3, #14
 800b536:	f200 80a4 	bhi.w	800b682 <_dtoa_r+0x442>
 800b53a:	2c00      	cmp	r4, #0
 800b53c:	f000 80a1 	beq.w	800b682 <_dtoa_r+0x442>
 800b540:	2f00      	cmp	r7, #0
 800b542:	dd33      	ble.n	800b5ac <_dtoa_r+0x36c>
 800b544:	4b86      	ldr	r3, [pc, #536]	@ (800b760 <_dtoa_r+0x520>)
 800b546:	f007 020f 	and.w	r2, r7, #15
 800b54a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b54e:	05f8      	lsls	r0, r7, #23
 800b550:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b554:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b558:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b55c:	d516      	bpl.n	800b58c <_dtoa_r+0x34c>
 800b55e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b562:	4b80      	ldr	r3, [pc, #512]	@ (800b764 <_dtoa_r+0x524>)
 800b564:	2603      	movs	r6, #3
 800b566:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b56a:	f7f5 f8df 	bl	800072c <__aeabi_ddiv>
 800b56e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b572:	f004 040f 	and.w	r4, r4, #15
 800b576:	4d7b      	ldr	r5, [pc, #492]	@ (800b764 <_dtoa_r+0x524>)
 800b578:	b954      	cbnz	r4, 800b590 <_dtoa_r+0x350>
 800b57a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b57e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b582:	f7f5 f8d3 	bl	800072c <__aeabi_ddiv>
 800b586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b58a:	e028      	b.n	800b5de <_dtoa_r+0x39e>
 800b58c:	2602      	movs	r6, #2
 800b58e:	e7f2      	b.n	800b576 <_dtoa_r+0x336>
 800b590:	07e1      	lsls	r1, r4, #31
 800b592:	d508      	bpl.n	800b5a6 <_dtoa_r+0x366>
 800b594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b598:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b59c:	f7f4 ff9c 	bl	80004d8 <__aeabi_dmul>
 800b5a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5a4:	3601      	adds	r6, #1
 800b5a6:	1064      	asrs	r4, r4, #1
 800b5a8:	3508      	adds	r5, #8
 800b5aa:	e7e5      	b.n	800b578 <_dtoa_r+0x338>
 800b5ac:	f000 80d2 	beq.w	800b754 <_dtoa_r+0x514>
 800b5b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5b4:	427c      	negs	r4, r7
 800b5b6:	4b6a      	ldr	r3, [pc, #424]	@ (800b760 <_dtoa_r+0x520>)
 800b5b8:	f004 020f 	and.w	r2, r4, #15
 800b5bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	f7f4 ff88 	bl	80004d8 <__aeabi_dmul>
 800b5c8:	2602      	movs	r6, #2
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5d0:	4d64      	ldr	r5, [pc, #400]	@ (800b764 <_dtoa_r+0x524>)
 800b5d2:	1124      	asrs	r4, r4, #4
 800b5d4:	2c00      	cmp	r4, #0
 800b5d6:	f040 80b2 	bne.w	800b73e <_dtoa_r+0x4fe>
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1d3      	bne.n	800b586 <_dtoa_r+0x346>
 800b5de:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b5e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f000 80b7 	beq.w	800b758 <_dtoa_r+0x518>
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	4b5d      	ldr	r3, [pc, #372]	@ (800b768 <_dtoa_r+0x528>)
 800b5f2:	f7f5 f9e3 	bl	80009bc <__aeabi_dcmplt>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	f000 80ae 	beq.w	800b758 <_dtoa_r+0x518>
 800b5fc:	9b07      	ldr	r3, [sp, #28]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f000 80aa 	beq.w	800b758 <_dtoa_r+0x518>
 800b604:	9b08      	ldr	r3, [sp, #32]
 800b606:	2b00      	cmp	r3, #0
 800b608:	dd37      	ble.n	800b67a <_dtoa_r+0x43a>
 800b60a:	1e7b      	subs	r3, r7, #1
 800b60c:	4620      	mov	r0, r4
 800b60e:	9304      	str	r3, [sp, #16]
 800b610:	2200      	movs	r2, #0
 800b612:	4629      	mov	r1, r5
 800b614:	4b55      	ldr	r3, [pc, #340]	@ (800b76c <_dtoa_r+0x52c>)
 800b616:	f7f4 ff5f 	bl	80004d8 <__aeabi_dmul>
 800b61a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b61e:	9c08      	ldr	r4, [sp, #32]
 800b620:	3601      	adds	r6, #1
 800b622:	4630      	mov	r0, r6
 800b624:	f7f4 feee 	bl	8000404 <__aeabi_i2d>
 800b628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b62c:	f7f4 ff54 	bl	80004d8 <__aeabi_dmul>
 800b630:	2200      	movs	r2, #0
 800b632:	4b4f      	ldr	r3, [pc, #316]	@ (800b770 <_dtoa_r+0x530>)
 800b634:	f7f4 fd9a 	bl	800016c <__adddf3>
 800b638:	4605      	mov	r5, r0
 800b63a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b63e:	2c00      	cmp	r4, #0
 800b640:	f040 809a 	bne.w	800b778 <_dtoa_r+0x538>
 800b644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b648:	2200      	movs	r2, #0
 800b64a:	4b4a      	ldr	r3, [pc, #296]	@ (800b774 <_dtoa_r+0x534>)
 800b64c:	f7f4 fd8c 	bl	8000168 <__aeabi_dsub>
 800b650:	4602      	mov	r2, r0
 800b652:	460b      	mov	r3, r1
 800b654:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b658:	462a      	mov	r2, r5
 800b65a:	4633      	mov	r3, r6
 800b65c:	f7f5 f9cc 	bl	80009f8 <__aeabi_dcmpgt>
 800b660:	2800      	cmp	r0, #0
 800b662:	f040 828e 	bne.w	800bb82 <_dtoa_r+0x942>
 800b666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b66a:	462a      	mov	r2, r5
 800b66c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b670:	f7f5 f9a4 	bl	80009bc <__aeabi_dcmplt>
 800b674:	2800      	cmp	r0, #0
 800b676:	f040 8127 	bne.w	800b8c8 <_dtoa_r+0x688>
 800b67a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b67e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b682:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b684:	2b00      	cmp	r3, #0
 800b686:	f2c0 8163 	blt.w	800b950 <_dtoa_r+0x710>
 800b68a:	2f0e      	cmp	r7, #14
 800b68c:	f300 8160 	bgt.w	800b950 <_dtoa_r+0x710>
 800b690:	4b33      	ldr	r3, [pc, #204]	@ (800b760 <_dtoa_r+0x520>)
 800b692:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b696:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b69a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b69e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	da03      	bge.n	800b6ac <_dtoa_r+0x46c>
 800b6a4:	9b07      	ldr	r3, [sp, #28]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f340 8100 	ble.w	800b8ac <_dtoa_r+0x66c>
 800b6ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b6b0:	4656      	mov	r6, sl
 800b6b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	f7f5 f837 	bl	800072c <__aeabi_ddiv>
 800b6be:	f7f5 f9bb 	bl	8000a38 <__aeabi_d2iz>
 800b6c2:	4680      	mov	r8, r0
 800b6c4:	f7f4 fe9e 	bl	8000404 <__aeabi_i2d>
 800b6c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6cc:	f7f4 ff04 	bl	80004d8 <__aeabi_dmul>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	4629      	mov	r1, r5
 800b6d8:	f7f4 fd46 	bl	8000168 <__aeabi_dsub>
 800b6dc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b6e0:	9d07      	ldr	r5, [sp, #28]
 800b6e2:	f806 4b01 	strb.w	r4, [r6], #1
 800b6e6:	eba6 040a 	sub.w	r4, r6, sl
 800b6ea:	42a5      	cmp	r5, r4
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	f040 8116 	bne.w	800b920 <_dtoa_r+0x6e0>
 800b6f4:	f7f4 fd3a 	bl	800016c <__adddf3>
 800b6f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	460d      	mov	r5, r1
 800b700:	f7f5 f97a 	bl	80009f8 <__aeabi_dcmpgt>
 800b704:	2800      	cmp	r0, #0
 800b706:	f040 80f8 	bne.w	800b8fa <_dtoa_r+0x6ba>
 800b70a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b70e:	4620      	mov	r0, r4
 800b710:	4629      	mov	r1, r5
 800b712:	f7f5 f949 	bl	80009a8 <__aeabi_dcmpeq>
 800b716:	b118      	cbz	r0, 800b720 <_dtoa_r+0x4e0>
 800b718:	f018 0f01 	tst.w	r8, #1
 800b71c:	f040 80ed 	bne.w	800b8fa <_dtoa_r+0x6ba>
 800b720:	4649      	mov	r1, r9
 800b722:	4658      	mov	r0, fp
 800b724:	f000 fc92 	bl	800c04c <_Bfree>
 800b728:	2300      	movs	r3, #0
 800b72a:	7033      	strb	r3, [r6, #0]
 800b72c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b72e:	3701      	adds	r7, #1
 800b730:	601f      	str	r7, [r3, #0]
 800b732:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b734:	2b00      	cmp	r3, #0
 800b736:	f000 8320 	beq.w	800bd7a <_dtoa_r+0xb3a>
 800b73a:	601e      	str	r6, [r3, #0]
 800b73c:	e31d      	b.n	800bd7a <_dtoa_r+0xb3a>
 800b73e:	07e2      	lsls	r2, r4, #31
 800b740:	d505      	bpl.n	800b74e <_dtoa_r+0x50e>
 800b742:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b746:	f7f4 fec7 	bl	80004d8 <__aeabi_dmul>
 800b74a:	2301      	movs	r3, #1
 800b74c:	3601      	adds	r6, #1
 800b74e:	1064      	asrs	r4, r4, #1
 800b750:	3508      	adds	r5, #8
 800b752:	e73f      	b.n	800b5d4 <_dtoa_r+0x394>
 800b754:	2602      	movs	r6, #2
 800b756:	e742      	b.n	800b5de <_dtoa_r+0x39e>
 800b758:	9c07      	ldr	r4, [sp, #28]
 800b75a:	9704      	str	r7, [sp, #16]
 800b75c:	e761      	b.n	800b622 <_dtoa_r+0x3e2>
 800b75e:	bf00      	nop
 800b760:	0800d990 	.word	0x0800d990
 800b764:	0800d968 	.word	0x0800d968
 800b768:	3ff00000 	.word	0x3ff00000
 800b76c:	40240000 	.word	0x40240000
 800b770:	401c0000 	.word	0x401c0000
 800b774:	40140000 	.word	0x40140000
 800b778:	4b70      	ldr	r3, [pc, #448]	@ (800b93c <_dtoa_r+0x6fc>)
 800b77a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b77c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b780:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b784:	4454      	add	r4, sl
 800b786:	2900      	cmp	r1, #0
 800b788:	d045      	beq.n	800b816 <_dtoa_r+0x5d6>
 800b78a:	2000      	movs	r0, #0
 800b78c:	496c      	ldr	r1, [pc, #432]	@ (800b940 <_dtoa_r+0x700>)
 800b78e:	f7f4 ffcd 	bl	800072c <__aeabi_ddiv>
 800b792:	4633      	mov	r3, r6
 800b794:	462a      	mov	r2, r5
 800b796:	f7f4 fce7 	bl	8000168 <__aeabi_dsub>
 800b79a:	4656      	mov	r6, sl
 800b79c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b7a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7a4:	f7f5 f948 	bl	8000a38 <__aeabi_d2iz>
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	f7f4 fe2b 	bl	8000404 <__aeabi_i2d>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7b6:	f7f4 fcd7 	bl	8000168 <__aeabi_dsub>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	3530      	adds	r5, #48	@ 0x30
 800b7c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b7c8:	f806 5b01 	strb.w	r5, [r6], #1
 800b7cc:	f7f5 f8f6 	bl	80009bc <__aeabi_dcmplt>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	d163      	bne.n	800b89c <_dtoa_r+0x65c>
 800b7d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7d8:	2000      	movs	r0, #0
 800b7da:	495a      	ldr	r1, [pc, #360]	@ (800b944 <_dtoa_r+0x704>)
 800b7dc:	f7f4 fcc4 	bl	8000168 <__aeabi_dsub>
 800b7e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b7e4:	f7f5 f8ea 	bl	80009bc <__aeabi_dcmplt>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	f040 8087 	bne.w	800b8fc <_dtoa_r+0x6bc>
 800b7ee:	42a6      	cmp	r6, r4
 800b7f0:	f43f af43 	beq.w	800b67a <_dtoa_r+0x43a>
 800b7f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	4b53      	ldr	r3, [pc, #332]	@ (800b948 <_dtoa_r+0x708>)
 800b7fc:	f7f4 fe6c 	bl	80004d8 <__aeabi_dmul>
 800b800:	2200      	movs	r2, #0
 800b802:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b80a:	4b4f      	ldr	r3, [pc, #316]	@ (800b948 <_dtoa_r+0x708>)
 800b80c:	f7f4 fe64 	bl	80004d8 <__aeabi_dmul>
 800b810:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b814:	e7c4      	b.n	800b7a0 <_dtoa_r+0x560>
 800b816:	4631      	mov	r1, r6
 800b818:	4628      	mov	r0, r5
 800b81a:	f7f4 fe5d 	bl	80004d8 <__aeabi_dmul>
 800b81e:	4656      	mov	r6, sl
 800b820:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b824:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b82a:	f7f5 f905 	bl	8000a38 <__aeabi_d2iz>
 800b82e:	4605      	mov	r5, r0
 800b830:	f7f4 fde8 	bl	8000404 <__aeabi_i2d>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b83c:	f7f4 fc94 	bl	8000168 <__aeabi_dsub>
 800b840:	4602      	mov	r2, r0
 800b842:	460b      	mov	r3, r1
 800b844:	3530      	adds	r5, #48	@ 0x30
 800b846:	f806 5b01 	strb.w	r5, [r6], #1
 800b84a:	42a6      	cmp	r6, r4
 800b84c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b850:	f04f 0200 	mov.w	r2, #0
 800b854:	d124      	bne.n	800b8a0 <_dtoa_r+0x660>
 800b856:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b85a:	4b39      	ldr	r3, [pc, #228]	@ (800b940 <_dtoa_r+0x700>)
 800b85c:	f7f4 fc86 	bl	800016c <__adddf3>
 800b860:	4602      	mov	r2, r0
 800b862:	460b      	mov	r3, r1
 800b864:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b868:	f7f5 f8c6 	bl	80009f8 <__aeabi_dcmpgt>
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d145      	bne.n	800b8fc <_dtoa_r+0x6bc>
 800b870:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b874:	2000      	movs	r0, #0
 800b876:	4932      	ldr	r1, [pc, #200]	@ (800b940 <_dtoa_r+0x700>)
 800b878:	f7f4 fc76 	bl	8000168 <__aeabi_dsub>
 800b87c:	4602      	mov	r2, r0
 800b87e:	460b      	mov	r3, r1
 800b880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b884:	f7f5 f89a 	bl	80009bc <__aeabi_dcmplt>
 800b888:	2800      	cmp	r0, #0
 800b88a:	f43f aef6 	beq.w	800b67a <_dtoa_r+0x43a>
 800b88e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b890:	1e73      	subs	r3, r6, #1
 800b892:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b894:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b898:	2b30      	cmp	r3, #48	@ 0x30
 800b89a:	d0f8      	beq.n	800b88e <_dtoa_r+0x64e>
 800b89c:	9f04      	ldr	r7, [sp, #16]
 800b89e:	e73f      	b.n	800b720 <_dtoa_r+0x4e0>
 800b8a0:	4b29      	ldr	r3, [pc, #164]	@ (800b948 <_dtoa_r+0x708>)
 800b8a2:	f7f4 fe19 	bl	80004d8 <__aeabi_dmul>
 800b8a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8aa:	e7bc      	b.n	800b826 <_dtoa_r+0x5e6>
 800b8ac:	d10c      	bne.n	800b8c8 <_dtoa_r+0x688>
 800b8ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	4b25      	ldr	r3, [pc, #148]	@ (800b94c <_dtoa_r+0x70c>)
 800b8b6:	f7f4 fe0f 	bl	80004d8 <__aeabi_dmul>
 800b8ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8be:	f7f5 f891 	bl	80009e4 <__aeabi_dcmpge>
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	f000 815b 	beq.w	800bb7e <_dtoa_r+0x93e>
 800b8c8:	2400      	movs	r4, #0
 800b8ca:	4625      	mov	r5, r4
 800b8cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b8ce:	4656      	mov	r6, sl
 800b8d0:	43db      	mvns	r3, r3
 800b8d2:	9304      	str	r3, [sp, #16]
 800b8d4:	2700      	movs	r7, #0
 800b8d6:	4621      	mov	r1, r4
 800b8d8:	4658      	mov	r0, fp
 800b8da:	f000 fbb7 	bl	800c04c <_Bfree>
 800b8de:	2d00      	cmp	r5, #0
 800b8e0:	d0dc      	beq.n	800b89c <_dtoa_r+0x65c>
 800b8e2:	b12f      	cbz	r7, 800b8f0 <_dtoa_r+0x6b0>
 800b8e4:	42af      	cmp	r7, r5
 800b8e6:	d003      	beq.n	800b8f0 <_dtoa_r+0x6b0>
 800b8e8:	4639      	mov	r1, r7
 800b8ea:	4658      	mov	r0, fp
 800b8ec:	f000 fbae 	bl	800c04c <_Bfree>
 800b8f0:	4629      	mov	r1, r5
 800b8f2:	4658      	mov	r0, fp
 800b8f4:	f000 fbaa 	bl	800c04c <_Bfree>
 800b8f8:	e7d0      	b.n	800b89c <_dtoa_r+0x65c>
 800b8fa:	9704      	str	r7, [sp, #16]
 800b8fc:	4633      	mov	r3, r6
 800b8fe:	461e      	mov	r6, r3
 800b900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b904:	2a39      	cmp	r2, #57	@ 0x39
 800b906:	d107      	bne.n	800b918 <_dtoa_r+0x6d8>
 800b908:	459a      	cmp	sl, r3
 800b90a:	d1f8      	bne.n	800b8fe <_dtoa_r+0x6be>
 800b90c:	9a04      	ldr	r2, [sp, #16]
 800b90e:	3201      	adds	r2, #1
 800b910:	9204      	str	r2, [sp, #16]
 800b912:	2230      	movs	r2, #48	@ 0x30
 800b914:	f88a 2000 	strb.w	r2, [sl]
 800b918:	781a      	ldrb	r2, [r3, #0]
 800b91a:	3201      	adds	r2, #1
 800b91c:	701a      	strb	r2, [r3, #0]
 800b91e:	e7bd      	b.n	800b89c <_dtoa_r+0x65c>
 800b920:	2200      	movs	r2, #0
 800b922:	4b09      	ldr	r3, [pc, #36]	@ (800b948 <_dtoa_r+0x708>)
 800b924:	f7f4 fdd8 	bl	80004d8 <__aeabi_dmul>
 800b928:	2200      	movs	r2, #0
 800b92a:	2300      	movs	r3, #0
 800b92c:	4604      	mov	r4, r0
 800b92e:	460d      	mov	r5, r1
 800b930:	f7f5 f83a 	bl	80009a8 <__aeabi_dcmpeq>
 800b934:	2800      	cmp	r0, #0
 800b936:	f43f aebc 	beq.w	800b6b2 <_dtoa_r+0x472>
 800b93a:	e6f1      	b.n	800b720 <_dtoa_r+0x4e0>
 800b93c:	0800d990 	.word	0x0800d990
 800b940:	3fe00000 	.word	0x3fe00000
 800b944:	3ff00000 	.word	0x3ff00000
 800b948:	40240000 	.word	0x40240000
 800b94c:	40140000 	.word	0x40140000
 800b950:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b952:	2a00      	cmp	r2, #0
 800b954:	f000 80db 	beq.w	800bb0e <_dtoa_r+0x8ce>
 800b958:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b95a:	2a01      	cmp	r2, #1
 800b95c:	f300 80bf 	bgt.w	800bade <_dtoa_r+0x89e>
 800b960:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b962:	2a00      	cmp	r2, #0
 800b964:	f000 80b7 	beq.w	800bad6 <_dtoa_r+0x896>
 800b968:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b96c:	4646      	mov	r6, r8
 800b96e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b970:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b972:	2101      	movs	r1, #1
 800b974:	441a      	add	r2, r3
 800b976:	4658      	mov	r0, fp
 800b978:	4498      	add	r8, r3
 800b97a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b97c:	f000 fc1a 	bl	800c1b4 <__i2b>
 800b980:	4605      	mov	r5, r0
 800b982:	b15e      	cbz	r6, 800b99c <_dtoa_r+0x75c>
 800b984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b986:	2b00      	cmp	r3, #0
 800b988:	dd08      	ble.n	800b99c <_dtoa_r+0x75c>
 800b98a:	42b3      	cmp	r3, r6
 800b98c:	bfa8      	it	ge
 800b98e:	4633      	movge	r3, r6
 800b990:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b992:	eba8 0803 	sub.w	r8, r8, r3
 800b996:	1af6      	subs	r6, r6, r3
 800b998:	1ad3      	subs	r3, r2, r3
 800b99a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b99c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b99e:	b1f3      	cbz	r3, 800b9de <_dtoa_r+0x79e>
 800b9a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f000 80b7 	beq.w	800bb16 <_dtoa_r+0x8d6>
 800b9a8:	b18c      	cbz	r4, 800b9ce <_dtoa_r+0x78e>
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	4622      	mov	r2, r4
 800b9ae:	4658      	mov	r0, fp
 800b9b0:	f000 fcbe 	bl	800c330 <__pow5mult>
 800b9b4:	464a      	mov	r2, r9
 800b9b6:	4601      	mov	r1, r0
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	4658      	mov	r0, fp
 800b9bc:	f000 fc10 	bl	800c1e0 <__multiply>
 800b9c0:	4649      	mov	r1, r9
 800b9c2:	9004      	str	r0, [sp, #16]
 800b9c4:	4658      	mov	r0, fp
 800b9c6:	f000 fb41 	bl	800c04c <_Bfree>
 800b9ca:	9b04      	ldr	r3, [sp, #16]
 800b9cc:	4699      	mov	r9, r3
 800b9ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9d0:	1b1a      	subs	r2, r3, r4
 800b9d2:	d004      	beq.n	800b9de <_dtoa_r+0x79e>
 800b9d4:	4649      	mov	r1, r9
 800b9d6:	4658      	mov	r0, fp
 800b9d8:	f000 fcaa 	bl	800c330 <__pow5mult>
 800b9dc:	4681      	mov	r9, r0
 800b9de:	2101      	movs	r1, #1
 800b9e0:	4658      	mov	r0, fp
 800b9e2:	f000 fbe7 	bl	800c1b4 <__i2b>
 800b9e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	f000 81c9 	beq.w	800bd82 <_dtoa_r+0xb42>
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	4601      	mov	r1, r0
 800b9f4:	4658      	mov	r0, fp
 800b9f6:	f000 fc9b 	bl	800c330 <__pow5mult>
 800b9fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b9fc:	4604      	mov	r4, r0
 800b9fe:	2b01      	cmp	r3, #1
 800ba00:	f300 808f 	bgt.w	800bb22 <_dtoa_r+0x8e2>
 800ba04:	9b02      	ldr	r3, [sp, #8]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f040 8087 	bne.w	800bb1a <_dtoa_r+0x8da>
 800ba0c:	9b03      	ldr	r3, [sp, #12]
 800ba0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f040 8083 	bne.w	800bb1e <_dtoa_r+0x8de>
 800ba18:	9b03      	ldr	r3, [sp, #12]
 800ba1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba1e:	0d1b      	lsrs	r3, r3, #20
 800ba20:	051b      	lsls	r3, r3, #20
 800ba22:	b12b      	cbz	r3, 800ba30 <_dtoa_r+0x7f0>
 800ba24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba26:	f108 0801 	add.w	r8, r8, #1
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba2e:	2301      	movs	r3, #1
 800ba30:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f000 81aa 	beq.w	800bd8e <_dtoa_r+0xb4e>
 800ba3a:	6923      	ldr	r3, [r4, #16]
 800ba3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ba40:	6918      	ldr	r0, [r3, #16]
 800ba42:	f000 fb6b 	bl	800c11c <__hi0bits>
 800ba46:	f1c0 0020 	rsb	r0, r0, #32
 800ba4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba4c:	4418      	add	r0, r3
 800ba4e:	f010 001f 	ands.w	r0, r0, #31
 800ba52:	d071      	beq.n	800bb38 <_dtoa_r+0x8f8>
 800ba54:	f1c0 0320 	rsb	r3, r0, #32
 800ba58:	2b04      	cmp	r3, #4
 800ba5a:	dd65      	ble.n	800bb28 <_dtoa_r+0x8e8>
 800ba5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba5e:	f1c0 001c 	rsb	r0, r0, #28
 800ba62:	4403      	add	r3, r0
 800ba64:	4480      	add	r8, r0
 800ba66:	4406      	add	r6, r0
 800ba68:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba6a:	f1b8 0f00 	cmp.w	r8, #0
 800ba6e:	dd05      	ble.n	800ba7c <_dtoa_r+0x83c>
 800ba70:	4649      	mov	r1, r9
 800ba72:	4642      	mov	r2, r8
 800ba74:	4658      	mov	r0, fp
 800ba76:	f000 fcb5 	bl	800c3e4 <__lshift>
 800ba7a:	4681      	mov	r9, r0
 800ba7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	dd05      	ble.n	800ba8e <_dtoa_r+0x84e>
 800ba82:	4621      	mov	r1, r4
 800ba84:	461a      	mov	r2, r3
 800ba86:	4658      	mov	r0, fp
 800ba88:	f000 fcac 	bl	800c3e4 <__lshift>
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d053      	beq.n	800bb3c <_dtoa_r+0x8fc>
 800ba94:	4621      	mov	r1, r4
 800ba96:	4648      	mov	r0, r9
 800ba98:	f000 fd10 	bl	800c4bc <__mcmp>
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	da4d      	bge.n	800bb3c <_dtoa_r+0x8fc>
 800baa0:	1e7b      	subs	r3, r7, #1
 800baa2:	4649      	mov	r1, r9
 800baa4:	9304      	str	r3, [sp, #16]
 800baa6:	220a      	movs	r2, #10
 800baa8:	2300      	movs	r3, #0
 800baaa:	4658      	mov	r0, fp
 800baac:	f000 faf0 	bl	800c090 <__multadd>
 800bab0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bab2:	4681      	mov	r9, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	f000 816c 	beq.w	800bd92 <_dtoa_r+0xb52>
 800baba:	2300      	movs	r3, #0
 800babc:	4629      	mov	r1, r5
 800babe:	220a      	movs	r2, #10
 800bac0:	4658      	mov	r0, fp
 800bac2:	f000 fae5 	bl	800c090 <__multadd>
 800bac6:	9b08      	ldr	r3, [sp, #32]
 800bac8:	4605      	mov	r5, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	dc61      	bgt.n	800bb92 <_dtoa_r+0x952>
 800bace:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	dc3b      	bgt.n	800bb4c <_dtoa_r+0x90c>
 800bad4:	e05d      	b.n	800bb92 <_dtoa_r+0x952>
 800bad6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bad8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800badc:	e746      	b.n	800b96c <_dtoa_r+0x72c>
 800bade:	9b07      	ldr	r3, [sp, #28]
 800bae0:	1e5c      	subs	r4, r3, #1
 800bae2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bae4:	42a3      	cmp	r3, r4
 800bae6:	bfbf      	itttt	lt
 800bae8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800baea:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800baec:	1ae3      	sublt	r3, r4, r3
 800baee:	18d2      	addlt	r2, r2, r3
 800baf0:	bfa8      	it	ge
 800baf2:	1b1c      	subge	r4, r3, r4
 800baf4:	9b07      	ldr	r3, [sp, #28]
 800baf6:	bfbe      	ittt	lt
 800baf8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bafa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800bafc:	2400      	movlt	r4, #0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	bfb5      	itete	lt
 800bb02:	eba8 0603 	sublt.w	r6, r8, r3
 800bb06:	4646      	movge	r6, r8
 800bb08:	2300      	movlt	r3, #0
 800bb0a:	9b07      	ldrge	r3, [sp, #28]
 800bb0c:	e730      	b.n	800b970 <_dtoa_r+0x730>
 800bb0e:	4646      	mov	r6, r8
 800bb10:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bb12:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bb14:	e735      	b.n	800b982 <_dtoa_r+0x742>
 800bb16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb18:	e75c      	b.n	800b9d4 <_dtoa_r+0x794>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	e788      	b.n	800ba30 <_dtoa_r+0x7f0>
 800bb1e:	9b02      	ldr	r3, [sp, #8]
 800bb20:	e786      	b.n	800ba30 <_dtoa_r+0x7f0>
 800bb22:	2300      	movs	r3, #0
 800bb24:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb26:	e788      	b.n	800ba3a <_dtoa_r+0x7fa>
 800bb28:	d09f      	beq.n	800ba6a <_dtoa_r+0x82a>
 800bb2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb2c:	331c      	adds	r3, #28
 800bb2e:	441a      	add	r2, r3
 800bb30:	4498      	add	r8, r3
 800bb32:	441e      	add	r6, r3
 800bb34:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb36:	e798      	b.n	800ba6a <_dtoa_r+0x82a>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	e7f6      	b.n	800bb2a <_dtoa_r+0x8ea>
 800bb3c:	9b07      	ldr	r3, [sp, #28]
 800bb3e:	9704      	str	r7, [sp, #16]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	dc20      	bgt.n	800bb86 <_dtoa_r+0x946>
 800bb44:	9308      	str	r3, [sp, #32]
 800bb46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bb48:	2b02      	cmp	r3, #2
 800bb4a:	dd1e      	ble.n	800bb8a <_dtoa_r+0x94a>
 800bb4c:	9b08      	ldr	r3, [sp, #32]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	f47f aebc 	bne.w	800b8cc <_dtoa_r+0x68c>
 800bb54:	4621      	mov	r1, r4
 800bb56:	2205      	movs	r2, #5
 800bb58:	4658      	mov	r0, fp
 800bb5a:	f000 fa99 	bl	800c090 <__multadd>
 800bb5e:	4601      	mov	r1, r0
 800bb60:	4604      	mov	r4, r0
 800bb62:	4648      	mov	r0, r9
 800bb64:	f000 fcaa 	bl	800c4bc <__mcmp>
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	f77f aeaf 	ble.w	800b8cc <_dtoa_r+0x68c>
 800bb6e:	2331      	movs	r3, #49	@ 0x31
 800bb70:	4656      	mov	r6, sl
 800bb72:	f806 3b01 	strb.w	r3, [r6], #1
 800bb76:	9b04      	ldr	r3, [sp, #16]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	9304      	str	r3, [sp, #16]
 800bb7c:	e6aa      	b.n	800b8d4 <_dtoa_r+0x694>
 800bb7e:	9c07      	ldr	r4, [sp, #28]
 800bb80:	9704      	str	r7, [sp, #16]
 800bb82:	4625      	mov	r5, r4
 800bb84:	e7f3      	b.n	800bb6e <_dtoa_r+0x92e>
 800bb86:	9b07      	ldr	r3, [sp, #28]
 800bb88:	9308      	str	r3, [sp, #32]
 800bb8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f000 8104 	beq.w	800bd9a <_dtoa_r+0xb5a>
 800bb92:	2e00      	cmp	r6, #0
 800bb94:	dd05      	ble.n	800bba2 <_dtoa_r+0x962>
 800bb96:	4629      	mov	r1, r5
 800bb98:	4632      	mov	r2, r6
 800bb9a:	4658      	mov	r0, fp
 800bb9c:	f000 fc22 	bl	800c3e4 <__lshift>
 800bba0:	4605      	mov	r5, r0
 800bba2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d05a      	beq.n	800bc5e <_dtoa_r+0xa1e>
 800bba8:	4658      	mov	r0, fp
 800bbaa:	6869      	ldr	r1, [r5, #4]
 800bbac:	f000 fa0e 	bl	800bfcc <_Balloc>
 800bbb0:	4606      	mov	r6, r0
 800bbb2:	b928      	cbnz	r0, 800bbc0 <_dtoa_r+0x980>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bbba:	4b83      	ldr	r3, [pc, #524]	@ (800bdc8 <_dtoa_r+0xb88>)
 800bbbc:	f7ff bb54 	b.w	800b268 <_dtoa_r+0x28>
 800bbc0:	692a      	ldr	r2, [r5, #16]
 800bbc2:	f105 010c 	add.w	r1, r5, #12
 800bbc6:	3202      	adds	r2, #2
 800bbc8:	0092      	lsls	r2, r2, #2
 800bbca:	300c      	adds	r0, #12
 800bbcc:	f000 ffa8 	bl	800cb20 <memcpy>
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	4631      	mov	r1, r6
 800bbd4:	4658      	mov	r0, fp
 800bbd6:	f000 fc05 	bl	800c3e4 <__lshift>
 800bbda:	462f      	mov	r7, r5
 800bbdc:	4605      	mov	r5, r0
 800bbde:	f10a 0301 	add.w	r3, sl, #1
 800bbe2:	9307      	str	r3, [sp, #28]
 800bbe4:	9b08      	ldr	r3, [sp, #32]
 800bbe6:	4453      	add	r3, sl
 800bbe8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bbea:	9b02      	ldr	r3, [sp, #8]
 800bbec:	f003 0301 	and.w	r3, r3, #1
 800bbf0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbf2:	9b07      	ldr	r3, [sp, #28]
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	4648      	mov	r0, r9
 800bbfa:	9302      	str	r3, [sp, #8]
 800bbfc:	f7ff fa97 	bl	800b12e <quorem>
 800bc00:	4639      	mov	r1, r7
 800bc02:	9008      	str	r0, [sp, #32]
 800bc04:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bc08:	4648      	mov	r0, r9
 800bc0a:	f000 fc57 	bl	800c4bc <__mcmp>
 800bc0e:	462a      	mov	r2, r5
 800bc10:	9009      	str	r0, [sp, #36]	@ 0x24
 800bc12:	4621      	mov	r1, r4
 800bc14:	4658      	mov	r0, fp
 800bc16:	f000 fc6d 	bl	800c4f4 <__mdiff>
 800bc1a:	68c2      	ldr	r2, [r0, #12]
 800bc1c:	4606      	mov	r6, r0
 800bc1e:	bb02      	cbnz	r2, 800bc62 <_dtoa_r+0xa22>
 800bc20:	4601      	mov	r1, r0
 800bc22:	4648      	mov	r0, r9
 800bc24:	f000 fc4a 	bl	800c4bc <__mcmp>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	4631      	mov	r1, r6
 800bc2c:	4658      	mov	r0, fp
 800bc2e:	920c      	str	r2, [sp, #48]	@ 0x30
 800bc30:	f000 fa0c 	bl	800c04c <_Bfree>
 800bc34:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bc36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bc38:	9e07      	ldr	r6, [sp, #28]
 800bc3a:	ea43 0102 	orr.w	r1, r3, r2
 800bc3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc40:	4319      	orrs	r1, r3
 800bc42:	d110      	bne.n	800bc66 <_dtoa_r+0xa26>
 800bc44:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc48:	d029      	beq.n	800bc9e <_dtoa_r+0xa5e>
 800bc4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	dd02      	ble.n	800bc56 <_dtoa_r+0xa16>
 800bc50:	9b08      	ldr	r3, [sp, #32]
 800bc52:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bc56:	9b02      	ldr	r3, [sp, #8]
 800bc58:	f883 8000 	strb.w	r8, [r3]
 800bc5c:	e63b      	b.n	800b8d6 <_dtoa_r+0x696>
 800bc5e:	4628      	mov	r0, r5
 800bc60:	e7bb      	b.n	800bbda <_dtoa_r+0x99a>
 800bc62:	2201      	movs	r2, #1
 800bc64:	e7e1      	b.n	800bc2a <_dtoa_r+0x9ea>
 800bc66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	db04      	blt.n	800bc76 <_dtoa_r+0xa36>
 800bc6c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800bc6e:	430b      	orrs	r3, r1
 800bc70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bc72:	430b      	orrs	r3, r1
 800bc74:	d120      	bne.n	800bcb8 <_dtoa_r+0xa78>
 800bc76:	2a00      	cmp	r2, #0
 800bc78:	dded      	ble.n	800bc56 <_dtoa_r+0xa16>
 800bc7a:	4649      	mov	r1, r9
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	4658      	mov	r0, fp
 800bc80:	f000 fbb0 	bl	800c3e4 <__lshift>
 800bc84:	4621      	mov	r1, r4
 800bc86:	4681      	mov	r9, r0
 800bc88:	f000 fc18 	bl	800c4bc <__mcmp>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	dc03      	bgt.n	800bc98 <_dtoa_r+0xa58>
 800bc90:	d1e1      	bne.n	800bc56 <_dtoa_r+0xa16>
 800bc92:	f018 0f01 	tst.w	r8, #1
 800bc96:	d0de      	beq.n	800bc56 <_dtoa_r+0xa16>
 800bc98:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc9c:	d1d8      	bne.n	800bc50 <_dtoa_r+0xa10>
 800bc9e:	2339      	movs	r3, #57	@ 0x39
 800bca0:	9a02      	ldr	r2, [sp, #8]
 800bca2:	7013      	strb	r3, [r2, #0]
 800bca4:	4633      	mov	r3, r6
 800bca6:	461e      	mov	r6, r3
 800bca8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bcac:	3b01      	subs	r3, #1
 800bcae:	2a39      	cmp	r2, #57	@ 0x39
 800bcb0:	d052      	beq.n	800bd58 <_dtoa_r+0xb18>
 800bcb2:	3201      	adds	r2, #1
 800bcb4:	701a      	strb	r2, [r3, #0]
 800bcb6:	e60e      	b.n	800b8d6 <_dtoa_r+0x696>
 800bcb8:	2a00      	cmp	r2, #0
 800bcba:	dd07      	ble.n	800bccc <_dtoa_r+0xa8c>
 800bcbc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bcc0:	d0ed      	beq.n	800bc9e <_dtoa_r+0xa5e>
 800bcc2:	9a02      	ldr	r2, [sp, #8]
 800bcc4:	f108 0301 	add.w	r3, r8, #1
 800bcc8:	7013      	strb	r3, [r2, #0]
 800bcca:	e604      	b.n	800b8d6 <_dtoa_r+0x696>
 800bccc:	9b07      	ldr	r3, [sp, #28]
 800bcce:	9a07      	ldr	r2, [sp, #28]
 800bcd0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bcd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d028      	beq.n	800bd2c <_dtoa_r+0xaec>
 800bcda:	4649      	mov	r1, r9
 800bcdc:	2300      	movs	r3, #0
 800bcde:	220a      	movs	r2, #10
 800bce0:	4658      	mov	r0, fp
 800bce2:	f000 f9d5 	bl	800c090 <__multadd>
 800bce6:	42af      	cmp	r7, r5
 800bce8:	4681      	mov	r9, r0
 800bcea:	f04f 0300 	mov.w	r3, #0
 800bcee:	f04f 020a 	mov.w	r2, #10
 800bcf2:	4639      	mov	r1, r7
 800bcf4:	4658      	mov	r0, fp
 800bcf6:	d107      	bne.n	800bd08 <_dtoa_r+0xac8>
 800bcf8:	f000 f9ca 	bl	800c090 <__multadd>
 800bcfc:	4607      	mov	r7, r0
 800bcfe:	4605      	mov	r5, r0
 800bd00:	9b07      	ldr	r3, [sp, #28]
 800bd02:	3301      	adds	r3, #1
 800bd04:	9307      	str	r3, [sp, #28]
 800bd06:	e774      	b.n	800bbf2 <_dtoa_r+0x9b2>
 800bd08:	f000 f9c2 	bl	800c090 <__multadd>
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	4607      	mov	r7, r0
 800bd10:	2300      	movs	r3, #0
 800bd12:	220a      	movs	r2, #10
 800bd14:	4658      	mov	r0, fp
 800bd16:	f000 f9bb 	bl	800c090 <__multadd>
 800bd1a:	4605      	mov	r5, r0
 800bd1c:	e7f0      	b.n	800bd00 <_dtoa_r+0xac0>
 800bd1e:	9b08      	ldr	r3, [sp, #32]
 800bd20:	2700      	movs	r7, #0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	bfcc      	ite	gt
 800bd26:	461e      	movgt	r6, r3
 800bd28:	2601      	movle	r6, #1
 800bd2a:	4456      	add	r6, sl
 800bd2c:	4649      	mov	r1, r9
 800bd2e:	2201      	movs	r2, #1
 800bd30:	4658      	mov	r0, fp
 800bd32:	f000 fb57 	bl	800c3e4 <__lshift>
 800bd36:	4621      	mov	r1, r4
 800bd38:	4681      	mov	r9, r0
 800bd3a:	f000 fbbf 	bl	800c4bc <__mcmp>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	dcb0      	bgt.n	800bca4 <_dtoa_r+0xa64>
 800bd42:	d102      	bne.n	800bd4a <_dtoa_r+0xb0a>
 800bd44:	f018 0f01 	tst.w	r8, #1
 800bd48:	d1ac      	bne.n	800bca4 <_dtoa_r+0xa64>
 800bd4a:	4633      	mov	r3, r6
 800bd4c:	461e      	mov	r6, r3
 800bd4e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd52:	2a30      	cmp	r2, #48	@ 0x30
 800bd54:	d0fa      	beq.n	800bd4c <_dtoa_r+0xb0c>
 800bd56:	e5be      	b.n	800b8d6 <_dtoa_r+0x696>
 800bd58:	459a      	cmp	sl, r3
 800bd5a:	d1a4      	bne.n	800bca6 <_dtoa_r+0xa66>
 800bd5c:	9b04      	ldr	r3, [sp, #16]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	9304      	str	r3, [sp, #16]
 800bd62:	2331      	movs	r3, #49	@ 0x31
 800bd64:	f88a 3000 	strb.w	r3, [sl]
 800bd68:	e5b5      	b.n	800b8d6 <_dtoa_r+0x696>
 800bd6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bd6c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bdcc <_dtoa_r+0xb8c>
 800bd70:	b11b      	cbz	r3, 800bd7a <_dtoa_r+0xb3a>
 800bd72:	f10a 0308 	add.w	r3, sl, #8
 800bd76:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bd78:	6013      	str	r3, [r2, #0]
 800bd7a:	4650      	mov	r0, sl
 800bd7c:	b017      	add	sp, #92	@ 0x5c
 800bd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	f77f ae3d 	ble.w	800ba04 <_dtoa_r+0x7c4>
 800bd8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd8e:	2001      	movs	r0, #1
 800bd90:	e65b      	b.n	800ba4a <_dtoa_r+0x80a>
 800bd92:	9b08      	ldr	r3, [sp, #32]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f77f aed6 	ble.w	800bb46 <_dtoa_r+0x906>
 800bd9a:	4656      	mov	r6, sl
 800bd9c:	4621      	mov	r1, r4
 800bd9e:	4648      	mov	r0, r9
 800bda0:	f7ff f9c5 	bl	800b12e <quorem>
 800bda4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bda8:	9b08      	ldr	r3, [sp, #32]
 800bdaa:	f806 8b01 	strb.w	r8, [r6], #1
 800bdae:	eba6 020a 	sub.w	r2, r6, sl
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	ddb3      	ble.n	800bd1e <_dtoa_r+0xade>
 800bdb6:	4649      	mov	r1, r9
 800bdb8:	2300      	movs	r3, #0
 800bdba:	220a      	movs	r2, #10
 800bdbc:	4658      	mov	r0, fp
 800bdbe:	f000 f967 	bl	800c090 <__multadd>
 800bdc2:	4681      	mov	r9, r0
 800bdc4:	e7ea      	b.n	800bd9c <_dtoa_r+0xb5c>
 800bdc6:	bf00      	nop
 800bdc8:	0800d8f0 	.word	0x0800d8f0
 800bdcc:	0800d874 	.word	0x0800d874

0800bdd0 <_free_r>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	4605      	mov	r5, r0
 800bdd4:	2900      	cmp	r1, #0
 800bdd6:	d040      	beq.n	800be5a <_free_r+0x8a>
 800bdd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bddc:	1f0c      	subs	r4, r1, #4
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	bfb8      	it	lt
 800bde2:	18e4      	addlt	r4, r4, r3
 800bde4:	f000 f8e6 	bl	800bfb4 <__malloc_lock>
 800bde8:	4a1c      	ldr	r2, [pc, #112]	@ (800be5c <_free_r+0x8c>)
 800bdea:	6813      	ldr	r3, [r2, #0]
 800bdec:	b933      	cbnz	r3, 800bdfc <_free_r+0x2c>
 800bdee:	6063      	str	r3, [r4, #4]
 800bdf0:	6014      	str	r4, [r2, #0]
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdf8:	f000 b8e2 	b.w	800bfc0 <__malloc_unlock>
 800bdfc:	42a3      	cmp	r3, r4
 800bdfe:	d908      	bls.n	800be12 <_free_r+0x42>
 800be00:	6820      	ldr	r0, [r4, #0]
 800be02:	1821      	adds	r1, r4, r0
 800be04:	428b      	cmp	r3, r1
 800be06:	bf01      	itttt	eq
 800be08:	6819      	ldreq	r1, [r3, #0]
 800be0a:	685b      	ldreq	r3, [r3, #4]
 800be0c:	1809      	addeq	r1, r1, r0
 800be0e:	6021      	streq	r1, [r4, #0]
 800be10:	e7ed      	b.n	800bdee <_free_r+0x1e>
 800be12:	461a      	mov	r2, r3
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	b10b      	cbz	r3, 800be1c <_free_r+0x4c>
 800be18:	42a3      	cmp	r3, r4
 800be1a:	d9fa      	bls.n	800be12 <_free_r+0x42>
 800be1c:	6811      	ldr	r1, [r2, #0]
 800be1e:	1850      	adds	r0, r2, r1
 800be20:	42a0      	cmp	r0, r4
 800be22:	d10b      	bne.n	800be3c <_free_r+0x6c>
 800be24:	6820      	ldr	r0, [r4, #0]
 800be26:	4401      	add	r1, r0
 800be28:	1850      	adds	r0, r2, r1
 800be2a:	4283      	cmp	r3, r0
 800be2c:	6011      	str	r1, [r2, #0]
 800be2e:	d1e0      	bne.n	800bdf2 <_free_r+0x22>
 800be30:	6818      	ldr	r0, [r3, #0]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	4408      	add	r0, r1
 800be36:	6010      	str	r0, [r2, #0]
 800be38:	6053      	str	r3, [r2, #4]
 800be3a:	e7da      	b.n	800bdf2 <_free_r+0x22>
 800be3c:	d902      	bls.n	800be44 <_free_r+0x74>
 800be3e:	230c      	movs	r3, #12
 800be40:	602b      	str	r3, [r5, #0]
 800be42:	e7d6      	b.n	800bdf2 <_free_r+0x22>
 800be44:	6820      	ldr	r0, [r4, #0]
 800be46:	1821      	adds	r1, r4, r0
 800be48:	428b      	cmp	r3, r1
 800be4a:	bf01      	itttt	eq
 800be4c:	6819      	ldreq	r1, [r3, #0]
 800be4e:	685b      	ldreq	r3, [r3, #4]
 800be50:	1809      	addeq	r1, r1, r0
 800be52:	6021      	streq	r1, [r4, #0]
 800be54:	6063      	str	r3, [r4, #4]
 800be56:	6054      	str	r4, [r2, #4]
 800be58:	e7cb      	b.n	800bdf2 <_free_r+0x22>
 800be5a:	bd38      	pop	{r3, r4, r5, pc}
 800be5c:	200028e0 	.word	0x200028e0

0800be60 <malloc>:
 800be60:	4b02      	ldr	r3, [pc, #8]	@ (800be6c <malloc+0xc>)
 800be62:	4601      	mov	r1, r0
 800be64:	6818      	ldr	r0, [r3, #0]
 800be66:	f000 b825 	b.w	800beb4 <_malloc_r>
 800be6a:	bf00      	nop
 800be6c:	20000030 	.word	0x20000030

0800be70 <sbrk_aligned>:
 800be70:	b570      	push	{r4, r5, r6, lr}
 800be72:	4e0f      	ldr	r6, [pc, #60]	@ (800beb0 <sbrk_aligned+0x40>)
 800be74:	460c      	mov	r4, r1
 800be76:	6831      	ldr	r1, [r6, #0]
 800be78:	4605      	mov	r5, r0
 800be7a:	b911      	cbnz	r1, 800be82 <sbrk_aligned+0x12>
 800be7c:	f000 fe40 	bl	800cb00 <_sbrk_r>
 800be80:	6030      	str	r0, [r6, #0]
 800be82:	4621      	mov	r1, r4
 800be84:	4628      	mov	r0, r5
 800be86:	f000 fe3b 	bl	800cb00 <_sbrk_r>
 800be8a:	1c43      	adds	r3, r0, #1
 800be8c:	d103      	bne.n	800be96 <sbrk_aligned+0x26>
 800be8e:	f04f 34ff 	mov.w	r4, #4294967295
 800be92:	4620      	mov	r0, r4
 800be94:	bd70      	pop	{r4, r5, r6, pc}
 800be96:	1cc4      	adds	r4, r0, #3
 800be98:	f024 0403 	bic.w	r4, r4, #3
 800be9c:	42a0      	cmp	r0, r4
 800be9e:	d0f8      	beq.n	800be92 <sbrk_aligned+0x22>
 800bea0:	1a21      	subs	r1, r4, r0
 800bea2:	4628      	mov	r0, r5
 800bea4:	f000 fe2c 	bl	800cb00 <_sbrk_r>
 800bea8:	3001      	adds	r0, #1
 800beaa:	d1f2      	bne.n	800be92 <sbrk_aligned+0x22>
 800beac:	e7ef      	b.n	800be8e <sbrk_aligned+0x1e>
 800beae:	bf00      	nop
 800beb0:	200028dc 	.word	0x200028dc

0800beb4 <_malloc_r>:
 800beb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800beb8:	1ccd      	adds	r5, r1, #3
 800beba:	f025 0503 	bic.w	r5, r5, #3
 800bebe:	3508      	adds	r5, #8
 800bec0:	2d0c      	cmp	r5, #12
 800bec2:	bf38      	it	cc
 800bec4:	250c      	movcc	r5, #12
 800bec6:	2d00      	cmp	r5, #0
 800bec8:	4606      	mov	r6, r0
 800beca:	db01      	blt.n	800bed0 <_malloc_r+0x1c>
 800becc:	42a9      	cmp	r1, r5
 800bece:	d904      	bls.n	800beda <_malloc_r+0x26>
 800bed0:	230c      	movs	r3, #12
 800bed2:	6033      	str	r3, [r6, #0]
 800bed4:	2000      	movs	r0, #0
 800bed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bfb0 <_malloc_r+0xfc>
 800bede:	f000 f869 	bl	800bfb4 <__malloc_lock>
 800bee2:	f8d8 3000 	ldr.w	r3, [r8]
 800bee6:	461c      	mov	r4, r3
 800bee8:	bb44      	cbnz	r4, 800bf3c <_malloc_r+0x88>
 800beea:	4629      	mov	r1, r5
 800beec:	4630      	mov	r0, r6
 800beee:	f7ff ffbf 	bl	800be70 <sbrk_aligned>
 800bef2:	1c43      	adds	r3, r0, #1
 800bef4:	4604      	mov	r4, r0
 800bef6:	d158      	bne.n	800bfaa <_malloc_r+0xf6>
 800bef8:	f8d8 4000 	ldr.w	r4, [r8]
 800befc:	4627      	mov	r7, r4
 800befe:	2f00      	cmp	r7, #0
 800bf00:	d143      	bne.n	800bf8a <_malloc_r+0xd6>
 800bf02:	2c00      	cmp	r4, #0
 800bf04:	d04b      	beq.n	800bf9e <_malloc_r+0xea>
 800bf06:	6823      	ldr	r3, [r4, #0]
 800bf08:	4639      	mov	r1, r7
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	eb04 0903 	add.w	r9, r4, r3
 800bf10:	f000 fdf6 	bl	800cb00 <_sbrk_r>
 800bf14:	4581      	cmp	r9, r0
 800bf16:	d142      	bne.n	800bf9e <_malloc_r+0xea>
 800bf18:	6821      	ldr	r1, [r4, #0]
 800bf1a:	4630      	mov	r0, r6
 800bf1c:	1a6d      	subs	r5, r5, r1
 800bf1e:	4629      	mov	r1, r5
 800bf20:	f7ff ffa6 	bl	800be70 <sbrk_aligned>
 800bf24:	3001      	adds	r0, #1
 800bf26:	d03a      	beq.n	800bf9e <_malloc_r+0xea>
 800bf28:	6823      	ldr	r3, [r4, #0]
 800bf2a:	442b      	add	r3, r5
 800bf2c:	6023      	str	r3, [r4, #0]
 800bf2e:	f8d8 3000 	ldr.w	r3, [r8]
 800bf32:	685a      	ldr	r2, [r3, #4]
 800bf34:	bb62      	cbnz	r2, 800bf90 <_malloc_r+0xdc>
 800bf36:	f8c8 7000 	str.w	r7, [r8]
 800bf3a:	e00f      	b.n	800bf5c <_malloc_r+0xa8>
 800bf3c:	6822      	ldr	r2, [r4, #0]
 800bf3e:	1b52      	subs	r2, r2, r5
 800bf40:	d420      	bmi.n	800bf84 <_malloc_r+0xd0>
 800bf42:	2a0b      	cmp	r2, #11
 800bf44:	d917      	bls.n	800bf76 <_malloc_r+0xc2>
 800bf46:	1961      	adds	r1, r4, r5
 800bf48:	42a3      	cmp	r3, r4
 800bf4a:	6025      	str	r5, [r4, #0]
 800bf4c:	bf18      	it	ne
 800bf4e:	6059      	strne	r1, [r3, #4]
 800bf50:	6863      	ldr	r3, [r4, #4]
 800bf52:	bf08      	it	eq
 800bf54:	f8c8 1000 	streq.w	r1, [r8]
 800bf58:	5162      	str	r2, [r4, r5]
 800bf5a:	604b      	str	r3, [r1, #4]
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	f000 f82f 	bl	800bfc0 <__malloc_unlock>
 800bf62:	f104 000b 	add.w	r0, r4, #11
 800bf66:	1d23      	adds	r3, r4, #4
 800bf68:	f020 0007 	bic.w	r0, r0, #7
 800bf6c:	1ac2      	subs	r2, r0, r3
 800bf6e:	bf1c      	itt	ne
 800bf70:	1a1b      	subne	r3, r3, r0
 800bf72:	50a3      	strne	r3, [r4, r2]
 800bf74:	e7af      	b.n	800bed6 <_malloc_r+0x22>
 800bf76:	6862      	ldr	r2, [r4, #4]
 800bf78:	42a3      	cmp	r3, r4
 800bf7a:	bf0c      	ite	eq
 800bf7c:	f8c8 2000 	streq.w	r2, [r8]
 800bf80:	605a      	strne	r2, [r3, #4]
 800bf82:	e7eb      	b.n	800bf5c <_malloc_r+0xa8>
 800bf84:	4623      	mov	r3, r4
 800bf86:	6864      	ldr	r4, [r4, #4]
 800bf88:	e7ae      	b.n	800bee8 <_malloc_r+0x34>
 800bf8a:	463c      	mov	r4, r7
 800bf8c:	687f      	ldr	r7, [r7, #4]
 800bf8e:	e7b6      	b.n	800befe <_malloc_r+0x4a>
 800bf90:	461a      	mov	r2, r3
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	42a3      	cmp	r3, r4
 800bf96:	d1fb      	bne.n	800bf90 <_malloc_r+0xdc>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	6053      	str	r3, [r2, #4]
 800bf9c:	e7de      	b.n	800bf5c <_malloc_r+0xa8>
 800bf9e:	230c      	movs	r3, #12
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	6033      	str	r3, [r6, #0]
 800bfa4:	f000 f80c 	bl	800bfc0 <__malloc_unlock>
 800bfa8:	e794      	b.n	800bed4 <_malloc_r+0x20>
 800bfaa:	6005      	str	r5, [r0, #0]
 800bfac:	e7d6      	b.n	800bf5c <_malloc_r+0xa8>
 800bfae:	bf00      	nop
 800bfb0:	200028e0 	.word	0x200028e0

0800bfb4 <__malloc_lock>:
 800bfb4:	4801      	ldr	r0, [pc, #4]	@ (800bfbc <__malloc_lock+0x8>)
 800bfb6:	f7ff b8aa 	b.w	800b10e <__retarget_lock_acquire_recursive>
 800bfba:	bf00      	nop
 800bfbc:	200028d8 	.word	0x200028d8

0800bfc0 <__malloc_unlock>:
 800bfc0:	4801      	ldr	r0, [pc, #4]	@ (800bfc8 <__malloc_unlock+0x8>)
 800bfc2:	f7ff b8a5 	b.w	800b110 <__retarget_lock_release_recursive>
 800bfc6:	bf00      	nop
 800bfc8:	200028d8 	.word	0x200028d8

0800bfcc <_Balloc>:
 800bfcc:	b570      	push	{r4, r5, r6, lr}
 800bfce:	69c6      	ldr	r6, [r0, #28]
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	460d      	mov	r5, r1
 800bfd4:	b976      	cbnz	r6, 800bff4 <_Balloc+0x28>
 800bfd6:	2010      	movs	r0, #16
 800bfd8:	f7ff ff42 	bl	800be60 <malloc>
 800bfdc:	4602      	mov	r2, r0
 800bfde:	61e0      	str	r0, [r4, #28]
 800bfe0:	b920      	cbnz	r0, 800bfec <_Balloc+0x20>
 800bfe2:	216b      	movs	r1, #107	@ 0x6b
 800bfe4:	4b17      	ldr	r3, [pc, #92]	@ (800c044 <_Balloc+0x78>)
 800bfe6:	4818      	ldr	r0, [pc, #96]	@ (800c048 <_Balloc+0x7c>)
 800bfe8:	f000 fda8 	bl	800cb3c <__assert_func>
 800bfec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bff0:	6006      	str	r6, [r0, #0]
 800bff2:	60c6      	str	r6, [r0, #12]
 800bff4:	69e6      	ldr	r6, [r4, #28]
 800bff6:	68f3      	ldr	r3, [r6, #12]
 800bff8:	b183      	cbz	r3, 800c01c <_Balloc+0x50>
 800bffa:	69e3      	ldr	r3, [r4, #28]
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c002:	b9b8      	cbnz	r0, 800c034 <_Balloc+0x68>
 800c004:	2101      	movs	r1, #1
 800c006:	fa01 f605 	lsl.w	r6, r1, r5
 800c00a:	1d72      	adds	r2, r6, #5
 800c00c:	4620      	mov	r0, r4
 800c00e:	0092      	lsls	r2, r2, #2
 800c010:	f000 fdb2 	bl	800cb78 <_calloc_r>
 800c014:	b160      	cbz	r0, 800c030 <_Balloc+0x64>
 800c016:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c01a:	e00e      	b.n	800c03a <_Balloc+0x6e>
 800c01c:	2221      	movs	r2, #33	@ 0x21
 800c01e:	2104      	movs	r1, #4
 800c020:	4620      	mov	r0, r4
 800c022:	f000 fda9 	bl	800cb78 <_calloc_r>
 800c026:	69e3      	ldr	r3, [r4, #28]
 800c028:	60f0      	str	r0, [r6, #12]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1e4      	bne.n	800bffa <_Balloc+0x2e>
 800c030:	2000      	movs	r0, #0
 800c032:	bd70      	pop	{r4, r5, r6, pc}
 800c034:	6802      	ldr	r2, [r0, #0]
 800c036:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c03a:	2300      	movs	r3, #0
 800c03c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c040:	e7f7      	b.n	800c032 <_Balloc+0x66>
 800c042:	bf00      	nop
 800c044:	0800d881 	.word	0x0800d881
 800c048:	0800d901 	.word	0x0800d901

0800c04c <_Bfree>:
 800c04c:	b570      	push	{r4, r5, r6, lr}
 800c04e:	69c6      	ldr	r6, [r0, #28]
 800c050:	4605      	mov	r5, r0
 800c052:	460c      	mov	r4, r1
 800c054:	b976      	cbnz	r6, 800c074 <_Bfree+0x28>
 800c056:	2010      	movs	r0, #16
 800c058:	f7ff ff02 	bl	800be60 <malloc>
 800c05c:	4602      	mov	r2, r0
 800c05e:	61e8      	str	r0, [r5, #28]
 800c060:	b920      	cbnz	r0, 800c06c <_Bfree+0x20>
 800c062:	218f      	movs	r1, #143	@ 0x8f
 800c064:	4b08      	ldr	r3, [pc, #32]	@ (800c088 <_Bfree+0x3c>)
 800c066:	4809      	ldr	r0, [pc, #36]	@ (800c08c <_Bfree+0x40>)
 800c068:	f000 fd68 	bl	800cb3c <__assert_func>
 800c06c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c070:	6006      	str	r6, [r0, #0]
 800c072:	60c6      	str	r6, [r0, #12]
 800c074:	b13c      	cbz	r4, 800c086 <_Bfree+0x3a>
 800c076:	69eb      	ldr	r3, [r5, #28]
 800c078:	6862      	ldr	r2, [r4, #4]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c080:	6021      	str	r1, [r4, #0]
 800c082:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c086:	bd70      	pop	{r4, r5, r6, pc}
 800c088:	0800d881 	.word	0x0800d881
 800c08c:	0800d901 	.word	0x0800d901

0800c090 <__multadd>:
 800c090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c094:	4607      	mov	r7, r0
 800c096:	460c      	mov	r4, r1
 800c098:	461e      	mov	r6, r3
 800c09a:	2000      	movs	r0, #0
 800c09c:	690d      	ldr	r5, [r1, #16]
 800c09e:	f101 0c14 	add.w	ip, r1, #20
 800c0a2:	f8dc 3000 	ldr.w	r3, [ip]
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	b299      	uxth	r1, r3
 800c0aa:	fb02 6101 	mla	r1, r2, r1, r6
 800c0ae:	0c1e      	lsrs	r6, r3, #16
 800c0b0:	0c0b      	lsrs	r3, r1, #16
 800c0b2:	fb02 3306 	mla	r3, r2, r6, r3
 800c0b6:	b289      	uxth	r1, r1
 800c0b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c0bc:	4285      	cmp	r5, r0
 800c0be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c0c2:	f84c 1b04 	str.w	r1, [ip], #4
 800c0c6:	dcec      	bgt.n	800c0a2 <__multadd+0x12>
 800c0c8:	b30e      	cbz	r6, 800c10e <__multadd+0x7e>
 800c0ca:	68a3      	ldr	r3, [r4, #8]
 800c0cc:	42ab      	cmp	r3, r5
 800c0ce:	dc19      	bgt.n	800c104 <__multadd+0x74>
 800c0d0:	6861      	ldr	r1, [r4, #4]
 800c0d2:	4638      	mov	r0, r7
 800c0d4:	3101      	adds	r1, #1
 800c0d6:	f7ff ff79 	bl	800bfcc <_Balloc>
 800c0da:	4680      	mov	r8, r0
 800c0dc:	b928      	cbnz	r0, 800c0ea <__multadd+0x5a>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	21ba      	movs	r1, #186	@ 0xba
 800c0e2:	4b0c      	ldr	r3, [pc, #48]	@ (800c114 <__multadd+0x84>)
 800c0e4:	480c      	ldr	r0, [pc, #48]	@ (800c118 <__multadd+0x88>)
 800c0e6:	f000 fd29 	bl	800cb3c <__assert_func>
 800c0ea:	6922      	ldr	r2, [r4, #16]
 800c0ec:	f104 010c 	add.w	r1, r4, #12
 800c0f0:	3202      	adds	r2, #2
 800c0f2:	0092      	lsls	r2, r2, #2
 800c0f4:	300c      	adds	r0, #12
 800c0f6:	f000 fd13 	bl	800cb20 <memcpy>
 800c0fa:	4621      	mov	r1, r4
 800c0fc:	4638      	mov	r0, r7
 800c0fe:	f7ff ffa5 	bl	800c04c <_Bfree>
 800c102:	4644      	mov	r4, r8
 800c104:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c108:	3501      	adds	r5, #1
 800c10a:	615e      	str	r6, [r3, #20]
 800c10c:	6125      	str	r5, [r4, #16]
 800c10e:	4620      	mov	r0, r4
 800c110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c114:	0800d8f0 	.word	0x0800d8f0
 800c118:	0800d901 	.word	0x0800d901

0800c11c <__hi0bits>:
 800c11c:	4603      	mov	r3, r0
 800c11e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c122:	bf3a      	itte	cc
 800c124:	0403      	lslcc	r3, r0, #16
 800c126:	2010      	movcc	r0, #16
 800c128:	2000      	movcs	r0, #0
 800c12a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c12e:	bf3c      	itt	cc
 800c130:	021b      	lslcc	r3, r3, #8
 800c132:	3008      	addcc	r0, #8
 800c134:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c138:	bf3c      	itt	cc
 800c13a:	011b      	lslcc	r3, r3, #4
 800c13c:	3004      	addcc	r0, #4
 800c13e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c142:	bf3c      	itt	cc
 800c144:	009b      	lslcc	r3, r3, #2
 800c146:	3002      	addcc	r0, #2
 800c148:	2b00      	cmp	r3, #0
 800c14a:	db05      	blt.n	800c158 <__hi0bits+0x3c>
 800c14c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c150:	f100 0001 	add.w	r0, r0, #1
 800c154:	bf08      	it	eq
 800c156:	2020      	moveq	r0, #32
 800c158:	4770      	bx	lr

0800c15a <__lo0bits>:
 800c15a:	6803      	ldr	r3, [r0, #0]
 800c15c:	4602      	mov	r2, r0
 800c15e:	f013 0007 	ands.w	r0, r3, #7
 800c162:	d00b      	beq.n	800c17c <__lo0bits+0x22>
 800c164:	07d9      	lsls	r1, r3, #31
 800c166:	d421      	bmi.n	800c1ac <__lo0bits+0x52>
 800c168:	0798      	lsls	r0, r3, #30
 800c16a:	bf49      	itett	mi
 800c16c:	085b      	lsrmi	r3, r3, #1
 800c16e:	089b      	lsrpl	r3, r3, #2
 800c170:	2001      	movmi	r0, #1
 800c172:	6013      	strmi	r3, [r2, #0]
 800c174:	bf5c      	itt	pl
 800c176:	2002      	movpl	r0, #2
 800c178:	6013      	strpl	r3, [r2, #0]
 800c17a:	4770      	bx	lr
 800c17c:	b299      	uxth	r1, r3
 800c17e:	b909      	cbnz	r1, 800c184 <__lo0bits+0x2a>
 800c180:	2010      	movs	r0, #16
 800c182:	0c1b      	lsrs	r3, r3, #16
 800c184:	b2d9      	uxtb	r1, r3
 800c186:	b909      	cbnz	r1, 800c18c <__lo0bits+0x32>
 800c188:	3008      	adds	r0, #8
 800c18a:	0a1b      	lsrs	r3, r3, #8
 800c18c:	0719      	lsls	r1, r3, #28
 800c18e:	bf04      	itt	eq
 800c190:	091b      	lsreq	r3, r3, #4
 800c192:	3004      	addeq	r0, #4
 800c194:	0799      	lsls	r1, r3, #30
 800c196:	bf04      	itt	eq
 800c198:	089b      	lsreq	r3, r3, #2
 800c19a:	3002      	addeq	r0, #2
 800c19c:	07d9      	lsls	r1, r3, #31
 800c19e:	d403      	bmi.n	800c1a8 <__lo0bits+0x4e>
 800c1a0:	085b      	lsrs	r3, r3, #1
 800c1a2:	f100 0001 	add.w	r0, r0, #1
 800c1a6:	d003      	beq.n	800c1b0 <__lo0bits+0x56>
 800c1a8:	6013      	str	r3, [r2, #0]
 800c1aa:	4770      	bx	lr
 800c1ac:	2000      	movs	r0, #0
 800c1ae:	4770      	bx	lr
 800c1b0:	2020      	movs	r0, #32
 800c1b2:	4770      	bx	lr

0800c1b4 <__i2b>:
 800c1b4:	b510      	push	{r4, lr}
 800c1b6:	460c      	mov	r4, r1
 800c1b8:	2101      	movs	r1, #1
 800c1ba:	f7ff ff07 	bl	800bfcc <_Balloc>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	b928      	cbnz	r0, 800c1ce <__i2b+0x1a>
 800c1c2:	f240 1145 	movw	r1, #325	@ 0x145
 800c1c6:	4b04      	ldr	r3, [pc, #16]	@ (800c1d8 <__i2b+0x24>)
 800c1c8:	4804      	ldr	r0, [pc, #16]	@ (800c1dc <__i2b+0x28>)
 800c1ca:	f000 fcb7 	bl	800cb3c <__assert_func>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	6144      	str	r4, [r0, #20]
 800c1d2:	6103      	str	r3, [r0, #16]
 800c1d4:	bd10      	pop	{r4, pc}
 800c1d6:	bf00      	nop
 800c1d8:	0800d8f0 	.word	0x0800d8f0
 800c1dc:	0800d901 	.word	0x0800d901

0800c1e0 <__multiply>:
 800c1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e4:	4614      	mov	r4, r2
 800c1e6:	690a      	ldr	r2, [r1, #16]
 800c1e8:	6923      	ldr	r3, [r4, #16]
 800c1ea:	460f      	mov	r7, r1
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	bfa2      	ittt	ge
 800c1f0:	4623      	movge	r3, r4
 800c1f2:	460c      	movge	r4, r1
 800c1f4:	461f      	movge	r7, r3
 800c1f6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c1fa:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c1fe:	68a3      	ldr	r3, [r4, #8]
 800c200:	6861      	ldr	r1, [r4, #4]
 800c202:	eb0a 0609 	add.w	r6, sl, r9
 800c206:	42b3      	cmp	r3, r6
 800c208:	b085      	sub	sp, #20
 800c20a:	bfb8      	it	lt
 800c20c:	3101      	addlt	r1, #1
 800c20e:	f7ff fedd 	bl	800bfcc <_Balloc>
 800c212:	b930      	cbnz	r0, 800c222 <__multiply+0x42>
 800c214:	4602      	mov	r2, r0
 800c216:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c21a:	4b43      	ldr	r3, [pc, #268]	@ (800c328 <__multiply+0x148>)
 800c21c:	4843      	ldr	r0, [pc, #268]	@ (800c32c <__multiply+0x14c>)
 800c21e:	f000 fc8d 	bl	800cb3c <__assert_func>
 800c222:	f100 0514 	add.w	r5, r0, #20
 800c226:	462b      	mov	r3, r5
 800c228:	2200      	movs	r2, #0
 800c22a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c22e:	4543      	cmp	r3, r8
 800c230:	d321      	bcc.n	800c276 <__multiply+0x96>
 800c232:	f107 0114 	add.w	r1, r7, #20
 800c236:	f104 0214 	add.w	r2, r4, #20
 800c23a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c23e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c242:	9302      	str	r3, [sp, #8]
 800c244:	1b13      	subs	r3, r2, r4
 800c246:	3b15      	subs	r3, #21
 800c248:	f023 0303 	bic.w	r3, r3, #3
 800c24c:	3304      	adds	r3, #4
 800c24e:	f104 0715 	add.w	r7, r4, #21
 800c252:	42ba      	cmp	r2, r7
 800c254:	bf38      	it	cc
 800c256:	2304      	movcc	r3, #4
 800c258:	9301      	str	r3, [sp, #4]
 800c25a:	9b02      	ldr	r3, [sp, #8]
 800c25c:	9103      	str	r1, [sp, #12]
 800c25e:	428b      	cmp	r3, r1
 800c260:	d80c      	bhi.n	800c27c <__multiply+0x9c>
 800c262:	2e00      	cmp	r6, #0
 800c264:	dd03      	ble.n	800c26e <__multiply+0x8e>
 800c266:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d05a      	beq.n	800c324 <__multiply+0x144>
 800c26e:	6106      	str	r6, [r0, #16]
 800c270:	b005      	add	sp, #20
 800c272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c276:	f843 2b04 	str.w	r2, [r3], #4
 800c27a:	e7d8      	b.n	800c22e <__multiply+0x4e>
 800c27c:	f8b1 a000 	ldrh.w	sl, [r1]
 800c280:	f1ba 0f00 	cmp.w	sl, #0
 800c284:	d023      	beq.n	800c2ce <__multiply+0xee>
 800c286:	46a9      	mov	r9, r5
 800c288:	f04f 0c00 	mov.w	ip, #0
 800c28c:	f104 0e14 	add.w	lr, r4, #20
 800c290:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c294:	f8d9 3000 	ldr.w	r3, [r9]
 800c298:	fa1f fb87 	uxth.w	fp, r7
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	fb0a 330b 	mla	r3, sl, fp, r3
 800c2a2:	4463      	add	r3, ip
 800c2a4:	f8d9 c000 	ldr.w	ip, [r9]
 800c2a8:	0c3f      	lsrs	r7, r7, #16
 800c2aa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c2ae:	fb0a c707 	mla	r7, sl, r7, ip
 800c2b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c2bc:	4572      	cmp	r2, lr
 800c2be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c2c2:	f849 3b04 	str.w	r3, [r9], #4
 800c2c6:	d8e3      	bhi.n	800c290 <__multiply+0xb0>
 800c2c8:	9b01      	ldr	r3, [sp, #4]
 800c2ca:	f845 c003 	str.w	ip, [r5, r3]
 800c2ce:	9b03      	ldr	r3, [sp, #12]
 800c2d0:	3104      	adds	r1, #4
 800c2d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c2d6:	f1b9 0f00 	cmp.w	r9, #0
 800c2da:	d021      	beq.n	800c320 <__multiply+0x140>
 800c2dc:	46ae      	mov	lr, r5
 800c2de:	f04f 0a00 	mov.w	sl, #0
 800c2e2:	682b      	ldr	r3, [r5, #0]
 800c2e4:	f104 0c14 	add.w	ip, r4, #20
 800c2e8:	f8bc b000 	ldrh.w	fp, [ip]
 800c2ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	fb09 770b 	mla	r7, r9, fp, r7
 800c2f6:	4457      	add	r7, sl
 800c2f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c2fc:	f84e 3b04 	str.w	r3, [lr], #4
 800c300:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c304:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c308:	f8be 3000 	ldrh.w	r3, [lr]
 800c30c:	4562      	cmp	r2, ip
 800c30e:	fb09 330a 	mla	r3, r9, sl, r3
 800c312:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c316:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c31a:	d8e5      	bhi.n	800c2e8 <__multiply+0x108>
 800c31c:	9f01      	ldr	r7, [sp, #4]
 800c31e:	51eb      	str	r3, [r5, r7]
 800c320:	3504      	adds	r5, #4
 800c322:	e79a      	b.n	800c25a <__multiply+0x7a>
 800c324:	3e01      	subs	r6, #1
 800c326:	e79c      	b.n	800c262 <__multiply+0x82>
 800c328:	0800d8f0 	.word	0x0800d8f0
 800c32c:	0800d901 	.word	0x0800d901

0800c330 <__pow5mult>:
 800c330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c334:	4615      	mov	r5, r2
 800c336:	f012 0203 	ands.w	r2, r2, #3
 800c33a:	4607      	mov	r7, r0
 800c33c:	460e      	mov	r6, r1
 800c33e:	d007      	beq.n	800c350 <__pow5mult+0x20>
 800c340:	4c25      	ldr	r4, [pc, #148]	@ (800c3d8 <__pow5mult+0xa8>)
 800c342:	3a01      	subs	r2, #1
 800c344:	2300      	movs	r3, #0
 800c346:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c34a:	f7ff fea1 	bl	800c090 <__multadd>
 800c34e:	4606      	mov	r6, r0
 800c350:	10ad      	asrs	r5, r5, #2
 800c352:	d03d      	beq.n	800c3d0 <__pow5mult+0xa0>
 800c354:	69fc      	ldr	r4, [r7, #28]
 800c356:	b97c      	cbnz	r4, 800c378 <__pow5mult+0x48>
 800c358:	2010      	movs	r0, #16
 800c35a:	f7ff fd81 	bl	800be60 <malloc>
 800c35e:	4602      	mov	r2, r0
 800c360:	61f8      	str	r0, [r7, #28]
 800c362:	b928      	cbnz	r0, 800c370 <__pow5mult+0x40>
 800c364:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c368:	4b1c      	ldr	r3, [pc, #112]	@ (800c3dc <__pow5mult+0xac>)
 800c36a:	481d      	ldr	r0, [pc, #116]	@ (800c3e0 <__pow5mult+0xb0>)
 800c36c:	f000 fbe6 	bl	800cb3c <__assert_func>
 800c370:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c374:	6004      	str	r4, [r0, #0]
 800c376:	60c4      	str	r4, [r0, #12]
 800c378:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c37c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c380:	b94c      	cbnz	r4, 800c396 <__pow5mult+0x66>
 800c382:	f240 2171 	movw	r1, #625	@ 0x271
 800c386:	4638      	mov	r0, r7
 800c388:	f7ff ff14 	bl	800c1b4 <__i2b>
 800c38c:	2300      	movs	r3, #0
 800c38e:	4604      	mov	r4, r0
 800c390:	f8c8 0008 	str.w	r0, [r8, #8]
 800c394:	6003      	str	r3, [r0, #0]
 800c396:	f04f 0900 	mov.w	r9, #0
 800c39a:	07eb      	lsls	r3, r5, #31
 800c39c:	d50a      	bpl.n	800c3b4 <__pow5mult+0x84>
 800c39e:	4631      	mov	r1, r6
 800c3a0:	4622      	mov	r2, r4
 800c3a2:	4638      	mov	r0, r7
 800c3a4:	f7ff ff1c 	bl	800c1e0 <__multiply>
 800c3a8:	4680      	mov	r8, r0
 800c3aa:	4631      	mov	r1, r6
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	f7ff fe4d 	bl	800c04c <_Bfree>
 800c3b2:	4646      	mov	r6, r8
 800c3b4:	106d      	asrs	r5, r5, #1
 800c3b6:	d00b      	beq.n	800c3d0 <__pow5mult+0xa0>
 800c3b8:	6820      	ldr	r0, [r4, #0]
 800c3ba:	b938      	cbnz	r0, 800c3cc <__pow5mult+0x9c>
 800c3bc:	4622      	mov	r2, r4
 800c3be:	4621      	mov	r1, r4
 800c3c0:	4638      	mov	r0, r7
 800c3c2:	f7ff ff0d 	bl	800c1e0 <__multiply>
 800c3c6:	6020      	str	r0, [r4, #0]
 800c3c8:	f8c0 9000 	str.w	r9, [r0]
 800c3cc:	4604      	mov	r4, r0
 800c3ce:	e7e4      	b.n	800c39a <__pow5mult+0x6a>
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3d6:	bf00      	nop
 800c3d8:	0800d95c 	.word	0x0800d95c
 800c3dc:	0800d881 	.word	0x0800d881
 800c3e0:	0800d901 	.word	0x0800d901

0800c3e4 <__lshift>:
 800c3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3e8:	460c      	mov	r4, r1
 800c3ea:	4607      	mov	r7, r0
 800c3ec:	4691      	mov	r9, r2
 800c3ee:	6923      	ldr	r3, [r4, #16]
 800c3f0:	6849      	ldr	r1, [r1, #4]
 800c3f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3f6:	68a3      	ldr	r3, [r4, #8]
 800c3f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3fc:	f108 0601 	add.w	r6, r8, #1
 800c400:	42b3      	cmp	r3, r6
 800c402:	db0b      	blt.n	800c41c <__lshift+0x38>
 800c404:	4638      	mov	r0, r7
 800c406:	f7ff fde1 	bl	800bfcc <_Balloc>
 800c40a:	4605      	mov	r5, r0
 800c40c:	b948      	cbnz	r0, 800c422 <__lshift+0x3e>
 800c40e:	4602      	mov	r2, r0
 800c410:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c414:	4b27      	ldr	r3, [pc, #156]	@ (800c4b4 <__lshift+0xd0>)
 800c416:	4828      	ldr	r0, [pc, #160]	@ (800c4b8 <__lshift+0xd4>)
 800c418:	f000 fb90 	bl	800cb3c <__assert_func>
 800c41c:	3101      	adds	r1, #1
 800c41e:	005b      	lsls	r3, r3, #1
 800c420:	e7ee      	b.n	800c400 <__lshift+0x1c>
 800c422:	2300      	movs	r3, #0
 800c424:	f100 0114 	add.w	r1, r0, #20
 800c428:	f100 0210 	add.w	r2, r0, #16
 800c42c:	4618      	mov	r0, r3
 800c42e:	4553      	cmp	r3, sl
 800c430:	db33      	blt.n	800c49a <__lshift+0xb6>
 800c432:	6920      	ldr	r0, [r4, #16]
 800c434:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c438:	f104 0314 	add.w	r3, r4, #20
 800c43c:	f019 091f 	ands.w	r9, r9, #31
 800c440:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c444:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c448:	d02b      	beq.n	800c4a2 <__lshift+0xbe>
 800c44a:	468a      	mov	sl, r1
 800c44c:	2200      	movs	r2, #0
 800c44e:	f1c9 0e20 	rsb	lr, r9, #32
 800c452:	6818      	ldr	r0, [r3, #0]
 800c454:	fa00 f009 	lsl.w	r0, r0, r9
 800c458:	4310      	orrs	r0, r2
 800c45a:	f84a 0b04 	str.w	r0, [sl], #4
 800c45e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c462:	459c      	cmp	ip, r3
 800c464:	fa22 f20e 	lsr.w	r2, r2, lr
 800c468:	d8f3      	bhi.n	800c452 <__lshift+0x6e>
 800c46a:	ebac 0304 	sub.w	r3, ip, r4
 800c46e:	3b15      	subs	r3, #21
 800c470:	f023 0303 	bic.w	r3, r3, #3
 800c474:	3304      	adds	r3, #4
 800c476:	f104 0015 	add.w	r0, r4, #21
 800c47a:	4584      	cmp	ip, r0
 800c47c:	bf38      	it	cc
 800c47e:	2304      	movcc	r3, #4
 800c480:	50ca      	str	r2, [r1, r3]
 800c482:	b10a      	cbz	r2, 800c488 <__lshift+0xa4>
 800c484:	f108 0602 	add.w	r6, r8, #2
 800c488:	3e01      	subs	r6, #1
 800c48a:	4638      	mov	r0, r7
 800c48c:	4621      	mov	r1, r4
 800c48e:	612e      	str	r6, [r5, #16]
 800c490:	f7ff fddc 	bl	800c04c <_Bfree>
 800c494:	4628      	mov	r0, r5
 800c496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c49a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c49e:	3301      	adds	r3, #1
 800c4a0:	e7c5      	b.n	800c42e <__lshift+0x4a>
 800c4a2:	3904      	subs	r1, #4
 800c4a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4a8:	459c      	cmp	ip, r3
 800c4aa:	f841 2f04 	str.w	r2, [r1, #4]!
 800c4ae:	d8f9      	bhi.n	800c4a4 <__lshift+0xc0>
 800c4b0:	e7ea      	b.n	800c488 <__lshift+0xa4>
 800c4b2:	bf00      	nop
 800c4b4:	0800d8f0 	.word	0x0800d8f0
 800c4b8:	0800d901 	.word	0x0800d901

0800c4bc <__mcmp>:
 800c4bc:	4603      	mov	r3, r0
 800c4be:	690a      	ldr	r2, [r1, #16]
 800c4c0:	6900      	ldr	r0, [r0, #16]
 800c4c2:	b530      	push	{r4, r5, lr}
 800c4c4:	1a80      	subs	r0, r0, r2
 800c4c6:	d10e      	bne.n	800c4e6 <__mcmp+0x2a>
 800c4c8:	3314      	adds	r3, #20
 800c4ca:	3114      	adds	r1, #20
 800c4cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c4d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c4d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c4d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c4dc:	4295      	cmp	r5, r2
 800c4de:	d003      	beq.n	800c4e8 <__mcmp+0x2c>
 800c4e0:	d205      	bcs.n	800c4ee <__mcmp+0x32>
 800c4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e6:	bd30      	pop	{r4, r5, pc}
 800c4e8:	42a3      	cmp	r3, r4
 800c4ea:	d3f3      	bcc.n	800c4d4 <__mcmp+0x18>
 800c4ec:	e7fb      	b.n	800c4e6 <__mcmp+0x2a>
 800c4ee:	2001      	movs	r0, #1
 800c4f0:	e7f9      	b.n	800c4e6 <__mcmp+0x2a>
	...

0800c4f4 <__mdiff>:
 800c4f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f8:	4689      	mov	r9, r1
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	4611      	mov	r1, r2
 800c4fe:	4648      	mov	r0, r9
 800c500:	4614      	mov	r4, r2
 800c502:	f7ff ffdb 	bl	800c4bc <__mcmp>
 800c506:	1e05      	subs	r5, r0, #0
 800c508:	d112      	bne.n	800c530 <__mdiff+0x3c>
 800c50a:	4629      	mov	r1, r5
 800c50c:	4630      	mov	r0, r6
 800c50e:	f7ff fd5d 	bl	800bfcc <_Balloc>
 800c512:	4602      	mov	r2, r0
 800c514:	b928      	cbnz	r0, 800c522 <__mdiff+0x2e>
 800c516:	f240 2137 	movw	r1, #567	@ 0x237
 800c51a:	4b3e      	ldr	r3, [pc, #248]	@ (800c614 <__mdiff+0x120>)
 800c51c:	483e      	ldr	r0, [pc, #248]	@ (800c618 <__mdiff+0x124>)
 800c51e:	f000 fb0d 	bl	800cb3c <__assert_func>
 800c522:	2301      	movs	r3, #1
 800c524:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c528:	4610      	mov	r0, r2
 800c52a:	b003      	add	sp, #12
 800c52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c530:	bfbc      	itt	lt
 800c532:	464b      	movlt	r3, r9
 800c534:	46a1      	movlt	r9, r4
 800c536:	4630      	mov	r0, r6
 800c538:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c53c:	bfba      	itte	lt
 800c53e:	461c      	movlt	r4, r3
 800c540:	2501      	movlt	r5, #1
 800c542:	2500      	movge	r5, #0
 800c544:	f7ff fd42 	bl	800bfcc <_Balloc>
 800c548:	4602      	mov	r2, r0
 800c54a:	b918      	cbnz	r0, 800c554 <__mdiff+0x60>
 800c54c:	f240 2145 	movw	r1, #581	@ 0x245
 800c550:	4b30      	ldr	r3, [pc, #192]	@ (800c614 <__mdiff+0x120>)
 800c552:	e7e3      	b.n	800c51c <__mdiff+0x28>
 800c554:	f100 0b14 	add.w	fp, r0, #20
 800c558:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c55c:	f109 0310 	add.w	r3, r9, #16
 800c560:	60c5      	str	r5, [r0, #12]
 800c562:	f04f 0c00 	mov.w	ip, #0
 800c566:	f109 0514 	add.w	r5, r9, #20
 800c56a:	46d9      	mov	r9, fp
 800c56c:	6926      	ldr	r6, [r4, #16]
 800c56e:	f104 0e14 	add.w	lr, r4, #20
 800c572:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c576:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c57a:	9301      	str	r3, [sp, #4]
 800c57c:	9b01      	ldr	r3, [sp, #4]
 800c57e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c582:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c586:	b281      	uxth	r1, r0
 800c588:	9301      	str	r3, [sp, #4]
 800c58a:	fa1f f38a 	uxth.w	r3, sl
 800c58e:	1a5b      	subs	r3, r3, r1
 800c590:	0c00      	lsrs	r0, r0, #16
 800c592:	4463      	add	r3, ip
 800c594:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c598:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c5a2:	4576      	cmp	r6, lr
 800c5a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c5a8:	f849 3b04 	str.w	r3, [r9], #4
 800c5ac:	d8e6      	bhi.n	800c57c <__mdiff+0x88>
 800c5ae:	1b33      	subs	r3, r6, r4
 800c5b0:	3b15      	subs	r3, #21
 800c5b2:	f023 0303 	bic.w	r3, r3, #3
 800c5b6:	3415      	adds	r4, #21
 800c5b8:	3304      	adds	r3, #4
 800c5ba:	42a6      	cmp	r6, r4
 800c5bc:	bf38      	it	cc
 800c5be:	2304      	movcc	r3, #4
 800c5c0:	441d      	add	r5, r3
 800c5c2:	445b      	add	r3, fp
 800c5c4:	461e      	mov	r6, r3
 800c5c6:	462c      	mov	r4, r5
 800c5c8:	4544      	cmp	r4, r8
 800c5ca:	d30e      	bcc.n	800c5ea <__mdiff+0xf6>
 800c5cc:	f108 0103 	add.w	r1, r8, #3
 800c5d0:	1b49      	subs	r1, r1, r5
 800c5d2:	f021 0103 	bic.w	r1, r1, #3
 800c5d6:	3d03      	subs	r5, #3
 800c5d8:	45a8      	cmp	r8, r5
 800c5da:	bf38      	it	cc
 800c5dc:	2100      	movcc	r1, #0
 800c5de:	440b      	add	r3, r1
 800c5e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c5e4:	b199      	cbz	r1, 800c60e <__mdiff+0x11a>
 800c5e6:	6117      	str	r7, [r2, #16]
 800c5e8:	e79e      	b.n	800c528 <__mdiff+0x34>
 800c5ea:	46e6      	mov	lr, ip
 800c5ec:	f854 1b04 	ldr.w	r1, [r4], #4
 800c5f0:	fa1f fc81 	uxth.w	ip, r1
 800c5f4:	44f4      	add	ip, lr
 800c5f6:	0c08      	lsrs	r0, r1, #16
 800c5f8:	4471      	add	r1, lr
 800c5fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c5fe:	b289      	uxth	r1, r1
 800c600:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c604:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c608:	f846 1b04 	str.w	r1, [r6], #4
 800c60c:	e7dc      	b.n	800c5c8 <__mdiff+0xd4>
 800c60e:	3f01      	subs	r7, #1
 800c610:	e7e6      	b.n	800c5e0 <__mdiff+0xec>
 800c612:	bf00      	nop
 800c614:	0800d8f0 	.word	0x0800d8f0
 800c618:	0800d901 	.word	0x0800d901

0800c61c <__d2b>:
 800c61c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c620:	2101      	movs	r1, #1
 800c622:	4690      	mov	r8, r2
 800c624:	4699      	mov	r9, r3
 800c626:	9e08      	ldr	r6, [sp, #32]
 800c628:	f7ff fcd0 	bl	800bfcc <_Balloc>
 800c62c:	4604      	mov	r4, r0
 800c62e:	b930      	cbnz	r0, 800c63e <__d2b+0x22>
 800c630:	4602      	mov	r2, r0
 800c632:	f240 310f 	movw	r1, #783	@ 0x30f
 800c636:	4b23      	ldr	r3, [pc, #140]	@ (800c6c4 <__d2b+0xa8>)
 800c638:	4823      	ldr	r0, [pc, #140]	@ (800c6c8 <__d2b+0xac>)
 800c63a:	f000 fa7f 	bl	800cb3c <__assert_func>
 800c63e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c642:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c646:	b10d      	cbz	r5, 800c64c <__d2b+0x30>
 800c648:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c64c:	9301      	str	r3, [sp, #4]
 800c64e:	f1b8 0300 	subs.w	r3, r8, #0
 800c652:	d024      	beq.n	800c69e <__d2b+0x82>
 800c654:	4668      	mov	r0, sp
 800c656:	9300      	str	r3, [sp, #0]
 800c658:	f7ff fd7f 	bl	800c15a <__lo0bits>
 800c65c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c660:	b1d8      	cbz	r0, 800c69a <__d2b+0x7e>
 800c662:	f1c0 0320 	rsb	r3, r0, #32
 800c666:	fa02 f303 	lsl.w	r3, r2, r3
 800c66a:	430b      	orrs	r3, r1
 800c66c:	40c2      	lsrs	r2, r0
 800c66e:	6163      	str	r3, [r4, #20]
 800c670:	9201      	str	r2, [sp, #4]
 800c672:	9b01      	ldr	r3, [sp, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	bf0c      	ite	eq
 800c678:	2201      	moveq	r2, #1
 800c67a:	2202      	movne	r2, #2
 800c67c:	61a3      	str	r3, [r4, #24]
 800c67e:	6122      	str	r2, [r4, #16]
 800c680:	b1ad      	cbz	r5, 800c6ae <__d2b+0x92>
 800c682:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c686:	4405      	add	r5, r0
 800c688:	6035      	str	r5, [r6, #0]
 800c68a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c68e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c690:	6018      	str	r0, [r3, #0]
 800c692:	4620      	mov	r0, r4
 800c694:	b002      	add	sp, #8
 800c696:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c69a:	6161      	str	r1, [r4, #20]
 800c69c:	e7e9      	b.n	800c672 <__d2b+0x56>
 800c69e:	a801      	add	r0, sp, #4
 800c6a0:	f7ff fd5b 	bl	800c15a <__lo0bits>
 800c6a4:	9b01      	ldr	r3, [sp, #4]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	6163      	str	r3, [r4, #20]
 800c6aa:	3020      	adds	r0, #32
 800c6ac:	e7e7      	b.n	800c67e <__d2b+0x62>
 800c6ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c6b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6b6:	6030      	str	r0, [r6, #0]
 800c6b8:	6918      	ldr	r0, [r3, #16]
 800c6ba:	f7ff fd2f 	bl	800c11c <__hi0bits>
 800c6be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c6c2:	e7e4      	b.n	800c68e <__d2b+0x72>
 800c6c4:	0800d8f0 	.word	0x0800d8f0
 800c6c8:	0800d901 	.word	0x0800d901

0800c6cc <__ssputs_r>:
 800c6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6d0:	461f      	mov	r7, r3
 800c6d2:	688e      	ldr	r6, [r1, #8]
 800c6d4:	4682      	mov	sl, r0
 800c6d6:	42be      	cmp	r6, r7
 800c6d8:	460c      	mov	r4, r1
 800c6da:	4690      	mov	r8, r2
 800c6dc:	680b      	ldr	r3, [r1, #0]
 800c6de:	d82d      	bhi.n	800c73c <__ssputs_r+0x70>
 800c6e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c6e8:	d026      	beq.n	800c738 <__ssputs_r+0x6c>
 800c6ea:	6965      	ldr	r5, [r4, #20]
 800c6ec:	6909      	ldr	r1, [r1, #16]
 800c6ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6f2:	eba3 0901 	sub.w	r9, r3, r1
 800c6f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6fa:	1c7b      	adds	r3, r7, #1
 800c6fc:	444b      	add	r3, r9
 800c6fe:	106d      	asrs	r5, r5, #1
 800c700:	429d      	cmp	r5, r3
 800c702:	bf38      	it	cc
 800c704:	461d      	movcc	r5, r3
 800c706:	0553      	lsls	r3, r2, #21
 800c708:	d527      	bpl.n	800c75a <__ssputs_r+0x8e>
 800c70a:	4629      	mov	r1, r5
 800c70c:	f7ff fbd2 	bl	800beb4 <_malloc_r>
 800c710:	4606      	mov	r6, r0
 800c712:	b360      	cbz	r0, 800c76e <__ssputs_r+0xa2>
 800c714:	464a      	mov	r2, r9
 800c716:	6921      	ldr	r1, [r4, #16]
 800c718:	f000 fa02 	bl	800cb20 <memcpy>
 800c71c:	89a3      	ldrh	r3, [r4, #12]
 800c71e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c726:	81a3      	strh	r3, [r4, #12]
 800c728:	6126      	str	r6, [r4, #16]
 800c72a:	444e      	add	r6, r9
 800c72c:	6026      	str	r6, [r4, #0]
 800c72e:	463e      	mov	r6, r7
 800c730:	6165      	str	r5, [r4, #20]
 800c732:	eba5 0509 	sub.w	r5, r5, r9
 800c736:	60a5      	str	r5, [r4, #8]
 800c738:	42be      	cmp	r6, r7
 800c73a:	d900      	bls.n	800c73e <__ssputs_r+0x72>
 800c73c:	463e      	mov	r6, r7
 800c73e:	4632      	mov	r2, r6
 800c740:	4641      	mov	r1, r8
 800c742:	6820      	ldr	r0, [r4, #0]
 800c744:	f000 f9c2 	bl	800cacc <memmove>
 800c748:	2000      	movs	r0, #0
 800c74a:	68a3      	ldr	r3, [r4, #8]
 800c74c:	1b9b      	subs	r3, r3, r6
 800c74e:	60a3      	str	r3, [r4, #8]
 800c750:	6823      	ldr	r3, [r4, #0]
 800c752:	4433      	add	r3, r6
 800c754:	6023      	str	r3, [r4, #0]
 800c756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c75a:	462a      	mov	r2, r5
 800c75c:	f000 fa32 	bl	800cbc4 <_realloc_r>
 800c760:	4606      	mov	r6, r0
 800c762:	2800      	cmp	r0, #0
 800c764:	d1e0      	bne.n	800c728 <__ssputs_r+0x5c>
 800c766:	4650      	mov	r0, sl
 800c768:	6921      	ldr	r1, [r4, #16]
 800c76a:	f7ff fb31 	bl	800bdd0 <_free_r>
 800c76e:	230c      	movs	r3, #12
 800c770:	f8ca 3000 	str.w	r3, [sl]
 800c774:	89a3      	ldrh	r3, [r4, #12]
 800c776:	f04f 30ff 	mov.w	r0, #4294967295
 800c77a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c77e:	81a3      	strh	r3, [r4, #12]
 800c780:	e7e9      	b.n	800c756 <__ssputs_r+0x8a>
	...

0800c784 <_svfiprintf_r>:
 800c784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c788:	4698      	mov	r8, r3
 800c78a:	898b      	ldrh	r3, [r1, #12]
 800c78c:	4607      	mov	r7, r0
 800c78e:	061b      	lsls	r3, r3, #24
 800c790:	460d      	mov	r5, r1
 800c792:	4614      	mov	r4, r2
 800c794:	b09d      	sub	sp, #116	@ 0x74
 800c796:	d510      	bpl.n	800c7ba <_svfiprintf_r+0x36>
 800c798:	690b      	ldr	r3, [r1, #16]
 800c79a:	b973      	cbnz	r3, 800c7ba <_svfiprintf_r+0x36>
 800c79c:	2140      	movs	r1, #64	@ 0x40
 800c79e:	f7ff fb89 	bl	800beb4 <_malloc_r>
 800c7a2:	6028      	str	r0, [r5, #0]
 800c7a4:	6128      	str	r0, [r5, #16]
 800c7a6:	b930      	cbnz	r0, 800c7b6 <_svfiprintf_r+0x32>
 800c7a8:	230c      	movs	r3, #12
 800c7aa:	603b      	str	r3, [r7, #0]
 800c7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b0:	b01d      	add	sp, #116	@ 0x74
 800c7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b6:	2340      	movs	r3, #64	@ 0x40
 800c7b8:	616b      	str	r3, [r5, #20]
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7be:	2320      	movs	r3, #32
 800c7c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c7c4:	2330      	movs	r3, #48	@ 0x30
 800c7c6:	f04f 0901 	mov.w	r9, #1
 800c7ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7ce:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c968 <_svfiprintf_r+0x1e4>
 800c7d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c7d6:	4623      	mov	r3, r4
 800c7d8:	469a      	mov	sl, r3
 800c7da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7de:	b10a      	cbz	r2, 800c7e4 <_svfiprintf_r+0x60>
 800c7e0:	2a25      	cmp	r2, #37	@ 0x25
 800c7e2:	d1f9      	bne.n	800c7d8 <_svfiprintf_r+0x54>
 800c7e4:	ebba 0b04 	subs.w	fp, sl, r4
 800c7e8:	d00b      	beq.n	800c802 <_svfiprintf_r+0x7e>
 800c7ea:	465b      	mov	r3, fp
 800c7ec:	4622      	mov	r2, r4
 800c7ee:	4629      	mov	r1, r5
 800c7f0:	4638      	mov	r0, r7
 800c7f2:	f7ff ff6b 	bl	800c6cc <__ssputs_r>
 800c7f6:	3001      	adds	r0, #1
 800c7f8:	f000 80a7 	beq.w	800c94a <_svfiprintf_r+0x1c6>
 800c7fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7fe:	445a      	add	r2, fp
 800c800:	9209      	str	r2, [sp, #36]	@ 0x24
 800c802:	f89a 3000 	ldrb.w	r3, [sl]
 800c806:	2b00      	cmp	r3, #0
 800c808:	f000 809f 	beq.w	800c94a <_svfiprintf_r+0x1c6>
 800c80c:	2300      	movs	r3, #0
 800c80e:	f04f 32ff 	mov.w	r2, #4294967295
 800c812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c816:	f10a 0a01 	add.w	sl, sl, #1
 800c81a:	9304      	str	r3, [sp, #16]
 800c81c:	9307      	str	r3, [sp, #28]
 800c81e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c822:	931a      	str	r3, [sp, #104]	@ 0x68
 800c824:	4654      	mov	r4, sl
 800c826:	2205      	movs	r2, #5
 800c828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c82c:	484e      	ldr	r0, [pc, #312]	@ (800c968 <_svfiprintf_r+0x1e4>)
 800c82e:	f7fe fc70 	bl	800b112 <memchr>
 800c832:	9a04      	ldr	r2, [sp, #16]
 800c834:	b9d8      	cbnz	r0, 800c86e <_svfiprintf_r+0xea>
 800c836:	06d0      	lsls	r0, r2, #27
 800c838:	bf44      	itt	mi
 800c83a:	2320      	movmi	r3, #32
 800c83c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c840:	0711      	lsls	r1, r2, #28
 800c842:	bf44      	itt	mi
 800c844:	232b      	movmi	r3, #43	@ 0x2b
 800c846:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c84a:	f89a 3000 	ldrb.w	r3, [sl]
 800c84e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c850:	d015      	beq.n	800c87e <_svfiprintf_r+0xfa>
 800c852:	4654      	mov	r4, sl
 800c854:	2000      	movs	r0, #0
 800c856:	f04f 0c0a 	mov.w	ip, #10
 800c85a:	9a07      	ldr	r2, [sp, #28]
 800c85c:	4621      	mov	r1, r4
 800c85e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c862:	3b30      	subs	r3, #48	@ 0x30
 800c864:	2b09      	cmp	r3, #9
 800c866:	d94b      	bls.n	800c900 <_svfiprintf_r+0x17c>
 800c868:	b1b0      	cbz	r0, 800c898 <_svfiprintf_r+0x114>
 800c86a:	9207      	str	r2, [sp, #28]
 800c86c:	e014      	b.n	800c898 <_svfiprintf_r+0x114>
 800c86e:	eba0 0308 	sub.w	r3, r0, r8
 800c872:	fa09 f303 	lsl.w	r3, r9, r3
 800c876:	4313      	orrs	r3, r2
 800c878:	46a2      	mov	sl, r4
 800c87a:	9304      	str	r3, [sp, #16]
 800c87c:	e7d2      	b.n	800c824 <_svfiprintf_r+0xa0>
 800c87e:	9b03      	ldr	r3, [sp, #12]
 800c880:	1d19      	adds	r1, r3, #4
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	9103      	str	r1, [sp, #12]
 800c886:	2b00      	cmp	r3, #0
 800c888:	bfbb      	ittet	lt
 800c88a:	425b      	neglt	r3, r3
 800c88c:	f042 0202 	orrlt.w	r2, r2, #2
 800c890:	9307      	strge	r3, [sp, #28]
 800c892:	9307      	strlt	r3, [sp, #28]
 800c894:	bfb8      	it	lt
 800c896:	9204      	strlt	r2, [sp, #16]
 800c898:	7823      	ldrb	r3, [r4, #0]
 800c89a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c89c:	d10a      	bne.n	800c8b4 <_svfiprintf_r+0x130>
 800c89e:	7863      	ldrb	r3, [r4, #1]
 800c8a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8a2:	d132      	bne.n	800c90a <_svfiprintf_r+0x186>
 800c8a4:	9b03      	ldr	r3, [sp, #12]
 800c8a6:	3402      	adds	r4, #2
 800c8a8:	1d1a      	adds	r2, r3, #4
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	9203      	str	r2, [sp, #12]
 800c8ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c8b2:	9305      	str	r3, [sp, #20]
 800c8b4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c96c <_svfiprintf_r+0x1e8>
 800c8b8:	2203      	movs	r2, #3
 800c8ba:	4650      	mov	r0, sl
 800c8bc:	7821      	ldrb	r1, [r4, #0]
 800c8be:	f7fe fc28 	bl	800b112 <memchr>
 800c8c2:	b138      	cbz	r0, 800c8d4 <_svfiprintf_r+0x150>
 800c8c4:	2240      	movs	r2, #64	@ 0x40
 800c8c6:	9b04      	ldr	r3, [sp, #16]
 800c8c8:	eba0 000a 	sub.w	r0, r0, sl
 800c8cc:	4082      	lsls	r2, r0
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	3401      	adds	r4, #1
 800c8d2:	9304      	str	r3, [sp, #16]
 800c8d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8d8:	2206      	movs	r2, #6
 800c8da:	4825      	ldr	r0, [pc, #148]	@ (800c970 <_svfiprintf_r+0x1ec>)
 800c8dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c8e0:	f7fe fc17 	bl	800b112 <memchr>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	d036      	beq.n	800c956 <_svfiprintf_r+0x1d2>
 800c8e8:	4b22      	ldr	r3, [pc, #136]	@ (800c974 <_svfiprintf_r+0x1f0>)
 800c8ea:	bb1b      	cbnz	r3, 800c934 <_svfiprintf_r+0x1b0>
 800c8ec:	9b03      	ldr	r3, [sp, #12]
 800c8ee:	3307      	adds	r3, #7
 800c8f0:	f023 0307 	bic.w	r3, r3, #7
 800c8f4:	3308      	adds	r3, #8
 800c8f6:	9303      	str	r3, [sp, #12]
 800c8f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8fa:	4433      	add	r3, r6
 800c8fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8fe:	e76a      	b.n	800c7d6 <_svfiprintf_r+0x52>
 800c900:	460c      	mov	r4, r1
 800c902:	2001      	movs	r0, #1
 800c904:	fb0c 3202 	mla	r2, ip, r2, r3
 800c908:	e7a8      	b.n	800c85c <_svfiprintf_r+0xd8>
 800c90a:	2300      	movs	r3, #0
 800c90c:	f04f 0c0a 	mov.w	ip, #10
 800c910:	4619      	mov	r1, r3
 800c912:	3401      	adds	r4, #1
 800c914:	9305      	str	r3, [sp, #20]
 800c916:	4620      	mov	r0, r4
 800c918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c91c:	3a30      	subs	r2, #48	@ 0x30
 800c91e:	2a09      	cmp	r2, #9
 800c920:	d903      	bls.n	800c92a <_svfiprintf_r+0x1a6>
 800c922:	2b00      	cmp	r3, #0
 800c924:	d0c6      	beq.n	800c8b4 <_svfiprintf_r+0x130>
 800c926:	9105      	str	r1, [sp, #20]
 800c928:	e7c4      	b.n	800c8b4 <_svfiprintf_r+0x130>
 800c92a:	4604      	mov	r4, r0
 800c92c:	2301      	movs	r3, #1
 800c92e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c932:	e7f0      	b.n	800c916 <_svfiprintf_r+0x192>
 800c934:	ab03      	add	r3, sp, #12
 800c936:	9300      	str	r3, [sp, #0]
 800c938:	462a      	mov	r2, r5
 800c93a:	4638      	mov	r0, r7
 800c93c:	4b0e      	ldr	r3, [pc, #56]	@ (800c978 <_svfiprintf_r+0x1f4>)
 800c93e:	a904      	add	r1, sp, #16
 800c940:	f7fd fe84 	bl	800a64c <_printf_float>
 800c944:	1c42      	adds	r2, r0, #1
 800c946:	4606      	mov	r6, r0
 800c948:	d1d6      	bne.n	800c8f8 <_svfiprintf_r+0x174>
 800c94a:	89ab      	ldrh	r3, [r5, #12]
 800c94c:	065b      	lsls	r3, r3, #25
 800c94e:	f53f af2d 	bmi.w	800c7ac <_svfiprintf_r+0x28>
 800c952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c954:	e72c      	b.n	800c7b0 <_svfiprintf_r+0x2c>
 800c956:	ab03      	add	r3, sp, #12
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	462a      	mov	r2, r5
 800c95c:	4638      	mov	r0, r7
 800c95e:	4b06      	ldr	r3, [pc, #24]	@ (800c978 <_svfiprintf_r+0x1f4>)
 800c960:	a904      	add	r1, sp, #16
 800c962:	f7fe f911 	bl	800ab88 <_printf_i>
 800c966:	e7ed      	b.n	800c944 <_svfiprintf_r+0x1c0>
 800c968:	0800da58 	.word	0x0800da58
 800c96c:	0800da5e 	.word	0x0800da5e
 800c970:	0800da62 	.word	0x0800da62
 800c974:	0800a64d 	.word	0x0800a64d
 800c978:	0800c6cd 	.word	0x0800c6cd

0800c97c <__sflush_r>:
 800c97c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c982:	0716      	lsls	r6, r2, #28
 800c984:	4605      	mov	r5, r0
 800c986:	460c      	mov	r4, r1
 800c988:	d454      	bmi.n	800ca34 <__sflush_r+0xb8>
 800c98a:	684b      	ldr	r3, [r1, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	dc02      	bgt.n	800c996 <__sflush_r+0x1a>
 800c990:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c992:	2b00      	cmp	r3, #0
 800c994:	dd48      	ble.n	800ca28 <__sflush_r+0xac>
 800c996:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c998:	2e00      	cmp	r6, #0
 800c99a:	d045      	beq.n	800ca28 <__sflush_r+0xac>
 800c99c:	2300      	movs	r3, #0
 800c99e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c9a2:	682f      	ldr	r7, [r5, #0]
 800c9a4:	6a21      	ldr	r1, [r4, #32]
 800c9a6:	602b      	str	r3, [r5, #0]
 800c9a8:	d030      	beq.n	800ca0c <__sflush_r+0x90>
 800c9aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c9ac:	89a3      	ldrh	r3, [r4, #12]
 800c9ae:	0759      	lsls	r1, r3, #29
 800c9b0:	d505      	bpl.n	800c9be <__sflush_r+0x42>
 800c9b2:	6863      	ldr	r3, [r4, #4]
 800c9b4:	1ad2      	subs	r2, r2, r3
 800c9b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c9b8:	b10b      	cbz	r3, 800c9be <__sflush_r+0x42>
 800c9ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c9bc:	1ad2      	subs	r2, r2, r3
 800c9be:	2300      	movs	r3, #0
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c9c4:	6a21      	ldr	r1, [r4, #32]
 800c9c6:	47b0      	blx	r6
 800c9c8:	1c43      	adds	r3, r0, #1
 800c9ca:	89a3      	ldrh	r3, [r4, #12]
 800c9cc:	d106      	bne.n	800c9dc <__sflush_r+0x60>
 800c9ce:	6829      	ldr	r1, [r5, #0]
 800c9d0:	291d      	cmp	r1, #29
 800c9d2:	d82b      	bhi.n	800ca2c <__sflush_r+0xb0>
 800c9d4:	4a28      	ldr	r2, [pc, #160]	@ (800ca78 <__sflush_r+0xfc>)
 800c9d6:	410a      	asrs	r2, r1
 800c9d8:	07d6      	lsls	r6, r2, #31
 800c9da:	d427      	bmi.n	800ca2c <__sflush_r+0xb0>
 800c9dc:	2200      	movs	r2, #0
 800c9de:	6062      	str	r2, [r4, #4]
 800c9e0:	6922      	ldr	r2, [r4, #16]
 800c9e2:	04d9      	lsls	r1, r3, #19
 800c9e4:	6022      	str	r2, [r4, #0]
 800c9e6:	d504      	bpl.n	800c9f2 <__sflush_r+0x76>
 800c9e8:	1c42      	adds	r2, r0, #1
 800c9ea:	d101      	bne.n	800c9f0 <__sflush_r+0x74>
 800c9ec:	682b      	ldr	r3, [r5, #0]
 800c9ee:	b903      	cbnz	r3, 800c9f2 <__sflush_r+0x76>
 800c9f0:	6560      	str	r0, [r4, #84]	@ 0x54
 800c9f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9f4:	602f      	str	r7, [r5, #0]
 800c9f6:	b1b9      	cbz	r1, 800ca28 <__sflush_r+0xac>
 800c9f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c9fc:	4299      	cmp	r1, r3
 800c9fe:	d002      	beq.n	800ca06 <__sflush_r+0x8a>
 800ca00:	4628      	mov	r0, r5
 800ca02:	f7ff f9e5 	bl	800bdd0 <_free_r>
 800ca06:	2300      	movs	r3, #0
 800ca08:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca0a:	e00d      	b.n	800ca28 <__sflush_r+0xac>
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	4628      	mov	r0, r5
 800ca10:	47b0      	blx	r6
 800ca12:	4602      	mov	r2, r0
 800ca14:	1c50      	adds	r0, r2, #1
 800ca16:	d1c9      	bne.n	800c9ac <__sflush_r+0x30>
 800ca18:	682b      	ldr	r3, [r5, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d0c6      	beq.n	800c9ac <__sflush_r+0x30>
 800ca1e:	2b1d      	cmp	r3, #29
 800ca20:	d001      	beq.n	800ca26 <__sflush_r+0xaa>
 800ca22:	2b16      	cmp	r3, #22
 800ca24:	d11d      	bne.n	800ca62 <__sflush_r+0xe6>
 800ca26:	602f      	str	r7, [r5, #0]
 800ca28:	2000      	movs	r0, #0
 800ca2a:	e021      	b.n	800ca70 <__sflush_r+0xf4>
 800ca2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca30:	b21b      	sxth	r3, r3
 800ca32:	e01a      	b.n	800ca6a <__sflush_r+0xee>
 800ca34:	690f      	ldr	r7, [r1, #16]
 800ca36:	2f00      	cmp	r7, #0
 800ca38:	d0f6      	beq.n	800ca28 <__sflush_r+0xac>
 800ca3a:	0793      	lsls	r3, r2, #30
 800ca3c:	bf18      	it	ne
 800ca3e:	2300      	movne	r3, #0
 800ca40:	680e      	ldr	r6, [r1, #0]
 800ca42:	bf08      	it	eq
 800ca44:	694b      	ldreq	r3, [r1, #20]
 800ca46:	1bf6      	subs	r6, r6, r7
 800ca48:	600f      	str	r7, [r1, #0]
 800ca4a:	608b      	str	r3, [r1, #8]
 800ca4c:	2e00      	cmp	r6, #0
 800ca4e:	ddeb      	ble.n	800ca28 <__sflush_r+0xac>
 800ca50:	4633      	mov	r3, r6
 800ca52:	463a      	mov	r2, r7
 800ca54:	4628      	mov	r0, r5
 800ca56:	6a21      	ldr	r1, [r4, #32]
 800ca58:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ca5c:	47e0      	blx	ip
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	dc07      	bgt.n	800ca72 <__sflush_r+0xf6>
 800ca62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca6e:	81a3      	strh	r3, [r4, #12]
 800ca70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca72:	4407      	add	r7, r0
 800ca74:	1a36      	subs	r6, r6, r0
 800ca76:	e7e9      	b.n	800ca4c <__sflush_r+0xd0>
 800ca78:	dfbffffe 	.word	0xdfbffffe

0800ca7c <_fflush_r>:
 800ca7c:	b538      	push	{r3, r4, r5, lr}
 800ca7e:	690b      	ldr	r3, [r1, #16]
 800ca80:	4605      	mov	r5, r0
 800ca82:	460c      	mov	r4, r1
 800ca84:	b913      	cbnz	r3, 800ca8c <_fflush_r+0x10>
 800ca86:	2500      	movs	r5, #0
 800ca88:	4628      	mov	r0, r5
 800ca8a:	bd38      	pop	{r3, r4, r5, pc}
 800ca8c:	b118      	cbz	r0, 800ca96 <_fflush_r+0x1a>
 800ca8e:	6a03      	ldr	r3, [r0, #32]
 800ca90:	b90b      	cbnz	r3, 800ca96 <_fflush_r+0x1a>
 800ca92:	f7fe fa25 	bl	800aee0 <__sinit>
 800ca96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d0f3      	beq.n	800ca86 <_fflush_r+0xa>
 800ca9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800caa0:	07d0      	lsls	r0, r2, #31
 800caa2:	d404      	bmi.n	800caae <_fflush_r+0x32>
 800caa4:	0599      	lsls	r1, r3, #22
 800caa6:	d402      	bmi.n	800caae <_fflush_r+0x32>
 800caa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800caaa:	f7fe fb30 	bl	800b10e <__retarget_lock_acquire_recursive>
 800caae:	4628      	mov	r0, r5
 800cab0:	4621      	mov	r1, r4
 800cab2:	f7ff ff63 	bl	800c97c <__sflush_r>
 800cab6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cab8:	4605      	mov	r5, r0
 800caba:	07da      	lsls	r2, r3, #31
 800cabc:	d4e4      	bmi.n	800ca88 <_fflush_r+0xc>
 800cabe:	89a3      	ldrh	r3, [r4, #12]
 800cac0:	059b      	lsls	r3, r3, #22
 800cac2:	d4e1      	bmi.n	800ca88 <_fflush_r+0xc>
 800cac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cac6:	f7fe fb23 	bl	800b110 <__retarget_lock_release_recursive>
 800caca:	e7dd      	b.n	800ca88 <_fflush_r+0xc>

0800cacc <memmove>:
 800cacc:	4288      	cmp	r0, r1
 800cace:	b510      	push	{r4, lr}
 800cad0:	eb01 0402 	add.w	r4, r1, r2
 800cad4:	d902      	bls.n	800cadc <memmove+0x10>
 800cad6:	4284      	cmp	r4, r0
 800cad8:	4623      	mov	r3, r4
 800cada:	d807      	bhi.n	800caec <memmove+0x20>
 800cadc:	1e43      	subs	r3, r0, #1
 800cade:	42a1      	cmp	r1, r4
 800cae0:	d008      	beq.n	800caf4 <memmove+0x28>
 800cae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cae6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800caea:	e7f8      	b.n	800cade <memmove+0x12>
 800caec:	4601      	mov	r1, r0
 800caee:	4402      	add	r2, r0
 800caf0:	428a      	cmp	r2, r1
 800caf2:	d100      	bne.n	800caf6 <memmove+0x2a>
 800caf4:	bd10      	pop	{r4, pc}
 800caf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cafa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cafe:	e7f7      	b.n	800caf0 <memmove+0x24>

0800cb00 <_sbrk_r>:
 800cb00:	b538      	push	{r3, r4, r5, lr}
 800cb02:	2300      	movs	r3, #0
 800cb04:	4d05      	ldr	r5, [pc, #20]	@ (800cb1c <_sbrk_r+0x1c>)
 800cb06:	4604      	mov	r4, r0
 800cb08:	4608      	mov	r0, r1
 800cb0a:	602b      	str	r3, [r5, #0]
 800cb0c:	f7f5 fe12 	bl	8002734 <_sbrk>
 800cb10:	1c43      	adds	r3, r0, #1
 800cb12:	d102      	bne.n	800cb1a <_sbrk_r+0x1a>
 800cb14:	682b      	ldr	r3, [r5, #0]
 800cb16:	b103      	cbz	r3, 800cb1a <_sbrk_r+0x1a>
 800cb18:	6023      	str	r3, [r4, #0]
 800cb1a:	bd38      	pop	{r3, r4, r5, pc}
 800cb1c:	200028d4 	.word	0x200028d4

0800cb20 <memcpy>:
 800cb20:	440a      	add	r2, r1
 800cb22:	4291      	cmp	r1, r2
 800cb24:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb28:	d100      	bne.n	800cb2c <memcpy+0xc>
 800cb2a:	4770      	bx	lr
 800cb2c:	b510      	push	{r4, lr}
 800cb2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb32:	4291      	cmp	r1, r2
 800cb34:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb38:	d1f9      	bne.n	800cb2e <memcpy+0xe>
 800cb3a:	bd10      	pop	{r4, pc}

0800cb3c <__assert_func>:
 800cb3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb3e:	4614      	mov	r4, r2
 800cb40:	461a      	mov	r2, r3
 800cb42:	4b09      	ldr	r3, [pc, #36]	@ (800cb68 <__assert_func+0x2c>)
 800cb44:	4605      	mov	r5, r0
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	68d8      	ldr	r0, [r3, #12]
 800cb4a:	b954      	cbnz	r4, 800cb62 <__assert_func+0x26>
 800cb4c:	4b07      	ldr	r3, [pc, #28]	@ (800cb6c <__assert_func+0x30>)
 800cb4e:	461c      	mov	r4, r3
 800cb50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb54:	9100      	str	r1, [sp, #0]
 800cb56:	462b      	mov	r3, r5
 800cb58:	4905      	ldr	r1, [pc, #20]	@ (800cb70 <__assert_func+0x34>)
 800cb5a:	f000 f86f 	bl	800cc3c <fiprintf>
 800cb5e:	f000 f87f 	bl	800cc60 <abort>
 800cb62:	4b04      	ldr	r3, [pc, #16]	@ (800cb74 <__assert_func+0x38>)
 800cb64:	e7f4      	b.n	800cb50 <__assert_func+0x14>
 800cb66:	bf00      	nop
 800cb68:	20000030 	.word	0x20000030
 800cb6c:	0800daae 	.word	0x0800daae
 800cb70:	0800da80 	.word	0x0800da80
 800cb74:	0800da73 	.word	0x0800da73

0800cb78 <_calloc_r>:
 800cb78:	b570      	push	{r4, r5, r6, lr}
 800cb7a:	fba1 5402 	umull	r5, r4, r1, r2
 800cb7e:	b93c      	cbnz	r4, 800cb90 <_calloc_r+0x18>
 800cb80:	4629      	mov	r1, r5
 800cb82:	f7ff f997 	bl	800beb4 <_malloc_r>
 800cb86:	4606      	mov	r6, r0
 800cb88:	b928      	cbnz	r0, 800cb96 <_calloc_r+0x1e>
 800cb8a:	2600      	movs	r6, #0
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	bd70      	pop	{r4, r5, r6, pc}
 800cb90:	220c      	movs	r2, #12
 800cb92:	6002      	str	r2, [r0, #0]
 800cb94:	e7f9      	b.n	800cb8a <_calloc_r+0x12>
 800cb96:	462a      	mov	r2, r5
 800cb98:	4621      	mov	r1, r4
 800cb9a:	f7fe fa3a 	bl	800b012 <memset>
 800cb9e:	e7f5      	b.n	800cb8c <_calloc_r+0x14>

0800cba0 <__ascii_mbtowc>:
 800cba0:	b082      	sub	sp, #8
 800cba2:	b901      	cbnz	r1, 800cba6 <__ascii_mbtowc+0x6>
 800cba4:	a901      	add	r1, sp, #4
 800cba6:	b142      	cbz	r2, 800cbba <__ascii_mbtowc+0x1a>
 800cba8:	b14b      	cbz	r3, 800cbbe <__ascii_mbtowc+0x1e>
 800cbaa:	7813      	ldrb	r3, [r2, #0]
 800cbac:	600b      	str	r3, [r1, #0]
 800cbae:	7812      	ldrb	r2, [r2, #0]
 800cbb0:	1e10      	subs	r0, r2, #0
 800cbb2:	bf18      	it	ne
 800cbb4:	2001      	movne	r0, #1
 800cbb6:	b002      	add	sp, #8
 800cbb8:	4770      	bx	lr
 800cbba:	4610      	mov	r0, r2
 800cbbc:	e7fb      	b.n	800cbb6 <__ascii_mbtowc+0x16>
 800cbbe:	f06f 0001 	mvn.w	r0, #1
 800cbc2:	e7f8      	b.n	800cbb6 <__ascii_mbtowc+0x16>

0800cbc4 <_realloc_r>:
 800cbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc8:	4680      	mov	r8, r0
 800cbca:	4615      	mov	r5, r2
 800cbcc:	460c      	mov	r4, r1
 800cbce:	b921      	cbnz	r1, 800cbda <_realloc_r+0x16>
 800cbd0:	4611      	mov	r1, r2
 800cbd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd6:	f7ff b96d 	b.w	800beb4 <_malloc_r>
 800cbda:	b92a      	cbnz	r2, 800cbe8 <_realloc_r+0x24>
 800cbdc:	f7ff f8f8 	bl	800bdd0 <_free_r>
 800cbe0:	2400      	movs	r4, #0
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe8:	f000 f841 	bl	800cc6e <_malloc_usable_size_r>
 800cbec:	4285      	cmp	r5, r0
 800cbee:	4606      	mov	r6, r0
 800cbf0:	d802      	bhi.n	800cbf8 <_realloc_r+0x34>
 800cbf2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cbf6:	d8f4      	bhi.n	800cbe2 <_realloc_r+0x1e>
 800cbf8:	4629      	mov	r1, r5
 800cbfa:	4640      	mov	r0, r8
 800cbfc:	f7ff f95a 	bl	800beb4 <_malloc_r>
 800cc00:	4607      	mov	r7, r0
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d0ec      	beq.n	800cbe0 <_realloc_r+0x1c>
 800cc06:	42b5      	cmp	r5, r6
 800cc08:	462a      	mov	r2, r5
 800cc0a:	4621      	mov	r1, r4
 800cc0c:	bf28      	it	cs
 800cc0e:	4632      	movcs	r2, r6
 800cc10:	f7ff ff86 	bl	800cb20 <memcpy>
 800cc14:	4621      	mov	r1, r4
 800cc16:	4640      	mov	r0, r8
 800cc18:	f7ff f8da 	bl	800bdd0 <_free_r>
 800cc1c:	463c      	mov	r4, r7
 800cc1e:	e7e0      	b.n	800cbe2 <_realloc_r+0x1e>

0800cc20 <__ascii_wctomb>:
 800cc20:	4603      	mov	r3, r0
 800cc22:	4608      	mov	r0, r1
 800cc24:	b141      	cbz	r1, 800cc38 <__ascii_wctomb+0x18>
 800cc26:	2aff      	cmp	r2, #255	@ 0xff
 800cc28:	d904      	bls.n	800cc34 <__ascii_wctomb+0x14>
 800cc2a:	228a      	movs	r2, #138	@ 0x8a
 800cc2c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc30:	601a      	str	r2, [r3, #0]
 800cc32:	4770      	bx	lr
 800cc34:	2001      	movs	r0, #1
 800cc36:	700a      	strb	r2, [r1, #0]
 800cc38:	4770      	bx	lr
	...

0800cc3c <fiprintf>:
 800cc3c:	b40e      	push	{r1, r2, r3}
 800cc3e:	b503      	push	{r0, r1, lr}
 800cc40:	4601      	mov	r1, r0
 800cc42:	ab03      	add	r3, sp, #12
 800cc44:	4805      	ldr	r0, [pc, #20]	@ (800cc5c <fiprintf+0x20>)
 800cc46:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc4a:	6800      	ldr	r0, [r0, #0]
 800cc4c:	9301      	str	r3, [sp, #4]
 800cc4e:	f000 f83d 	bl	800cccc <_vfiprintf_r>
 800cc52:	b002      	add	sp, #8
 800cc54:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc58:	b003      	add	sp, #12
 800cc5a:	4770      	bx	lr
 800cc5c:	20000030 	.word	0x20000030

0800cc60 <abort>:
 800cc60:	2006      	movs	r0, #6
 800cc62:	b508      	push	{r3, lr}
 800cc64:	f000 fa06 	bl	800d074 <raise>
 800cc68:	2001      	movs	r0, #1
 800cc6a:	f7f5 fcee 	bl	800264a <_exit>

0800cc6e <_malloc_usable_size_r>:
 800cc6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc72:	1f18      	subs	r0, r3, #4
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	bfbc      	itt	lt
 800cc78:	580b      	ldrlt	r3, [r1, r0]
 800cc7a:	18c0      	addlt	r0, r0, r3
 800cc7c:	4770      	bx	lr

0800cc7e <__sfputc_r>:
 800cc7e:	6893      	ldr	r3, [r2, #8]
 800cc80:	b410      	push	{r4}
 800cc82:	3b01      	subs	r3, #1
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	6093      	str	r3, [r2, #8]
 800cc88:	da07      	bge.n	800cc9a <__sfputc_r+0x1c>
 800cc8a:	6994      	ldr	r4, [r2, #24]
 800cc8c:	42a3      	cmp	r3, r4
 800cc8e:	db01      	blt.n	800cc94 <__sfputc_r+0x16>
 800cc90:	290a      	cmp	r1, #10
 800cc92:	d102      	bne.n	800cc9a <__sfputc_r+0x1c>
 800cc94:	bc10      	pop	{r4}
 800cc96:	f000 b931 	b.w	800cefc <__swbuf_r>
 800cc9a:	6813      	ldr	r3, [r2, #0]
 800cc9c:	1c58      	adds	r0, r3, #1
 800cc9e:	6010      	str	r0, [r2, #0]
 800cca0:	7019      	strb	r1, [r3, #0]
 800cca2:	4608      	mov	r0, r1
 800cca4:	bc10      	pop	{r4}
 800cca6:	4770      	bx	lr

0800cca8 <__sfputs_r>:
 800cca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccaa:	4606      	mov	r6, r0
 800ccac:	460f      	mov	r7, r1
 800ccae:	4614      	mov	r4, r2
 800ccb0:	18d5      	adds	r5, r2, r3
 800ccb2:	42ac      	cmp	r4, r5
 800ccb4:	d101      	bne.n	800ccba <__sfputs_r+0x12>
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	e007      	b.n	800ccca <__sfputs_r+0x22>
 800ccba:	463a      	mov	r2, r7
 800ccbc:	4630      	mov	r0, r6
 800ccbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccc2:	f7ff ffdc 	bl	800cc7e <__sfputc_r>
 800ccc6:	1c43      	adds	r3, r0, #1
 800ccc8:	d1f3      	bne.n	800ccb2 <__sfputs_r+0xa>
 800ccca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cccc <_vfiprintf_r>:
 800cccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd0:	460d      	mov	r5, r1
 800ccd2:	4614      	mov	r4, r2
 800ccd4:	4698      	mov	r8, r3
 800ccd6:	4606      	mov	r6, r0
 800ccd8:	b09d      	sub	sp, #116	@ 0x74
 800ccda:	b118      	cbz	r0, 800cce4 <_vfiprintf_r+0x18>
 800ccdc:	6a03      	ldr	r3, [r0, #32]
 800ccde:	b90b      	cbnz	r3, 800cce4 <_vfiprintf_r+0x18>
 800cce0:	f7fe f8fe 	bl	800aee0 <__sinit>
 800cce4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cce6:	07d9      	lsls	r1, r3, #31
 800cce8:	d405      	bmi.n	800ccf6 <_vfiprintf_r+0x2a>
 800ccea:	89ab      	ldrh	r3, [r5, #12]
 800ccec:	059a      	lsls	r2, r3, #22
 800ccee:	d402      	bmi.n	800ccf6 <_vfiprintf_r+0x2a>
 800ccf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccf2:	f7fe fa0c 	bl	800b10e <__retarget_lock_acquire_recursive>
 800ccf6:	89ab      	ldrh	r3, [r5, #12]
 800ccf8:	071b      	lsls	r3, r3, #28
 800ccfa:	d501      	bpl.n	800cd00 <_vfiprintf_r+0x34>
 800ccfc:	692b      	ldr	r3, [r5, #16]
 800ccfe:	b99b      	cbnz	r3, 800cd28 <_vfiprintf_r+0x5c>
 800cd00:	4629      	mov	r1, r5
 800cd02:	4630      	mov	r0, r6
 800cd04:	f000 f938 	bl	800cf78 <__swsetup_r>
 800cd08:	b170      	cbz	r0, 800cd28 <_vfiprintf_r+0x5c>
 800cd0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd0c:	07dc      	lsls	r4, r3, #31
 800cd0e:	d504      	bpl.n	800cd1a <_vfiprintf_r+0x4e>
 800cd10:	f04f 30ff 	mov.w	r0, #4294967295
 800cd14:	b01d      	add	sp, #116	@ 0x74
 800cd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd1a:	89ab      	ldrh	r3, [r5, #12]
 800cd1c:	0598      	lsls	r0, r3, #22
 800cd1e:	d4f7      	bmi.n	800cd10 <_vfiprintf_r+0x44>
 800cd20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd22:	f7fe f9f5 	bl	800b110 <__retarget_lock_release_recursive>
 800cd26:	e7f3      	b.n	800cd10 <_vfiprintf_r+0x44>
 800cd28:	2300      	movs	r3, #0
 800cd2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd2c:	2320      	movs	r3, #32
 800cd2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd32:	2330      	movs	r3, #48	@ 0x30
 800cd34:	f04f 0901 	mov.w	r9, #1
 800cd38:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd3c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cee8 <_vfiprintf_r+0x21c>
 800cd40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd44:	4623      	mov	r3, r4
 800cd46:	469a      	mov	sl, r3
 800cd48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd4c:	b10a      	cbz	r2, 800cd52 <_vfiprintf_r+0x86>
 800cd4e:	2a25      	cmp	r2, #37	@ 0x25
 800cd50:	d1f9      	bne.n	800cd46 <_vfiprintf_r+0x7a>
 800cd52:	ebba 0b04 	subs.w	fp, sl, r4
 800cd56:	d00b      	beq.n	800cd70 <_vfiprintf_r+0xa4>
 800cd58:	465b      	mov	r3, fp
 800cd5a:	4622      	mov	r2, r4
 800cd5c:	4629      	mov	r1, r5
 800cd5e:	4630      	mov	r0, r6
 800cd60:	f7ff ffa2 	bl	800cca8 <__sfputs_r>
 800cd64:	3001      	adds	r0, #1
 800cd66:	f000 80a7 	beq.w	800ceb8 <_vfiprintf_r+0x1ec>
 800cd6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd6c:	445a      	add	r2, fp
 800cd6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd70:	f89a 3000 	ldrb.w	r3, [sl]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f000 809f 	beq.w	800ceb8 <_vfiprintf_r+0x1ec>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd84:	f10a 0a01 	add.w	sl, sl, #1
 800cd88:	9304      	str	r3, [sp, #16]
 800cd8a:	9307      	str	r3, [sp, #28]
 800cd8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd90:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd92:	4654      	mov	r4, sl
 800cd94:	2205      	movs	r2, #5
 800cd96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd9a:	4853      	ldr	r0, [pc, #332]	@ (800cee8 <_vfiprintf_r+0x21c>)
 800cd9c:	f7fe f9b9 	bl	800b112 <memchr>
 800cda0:	9a04      	ldr	r2, [sp, #16]
 800cda2:	b9d8      	cbnz	r0, 800cddc <_vfiprintf_r+0x110>
 800cda4:	06d1      	lsls	r1, r2, #27
 800cda6:	bf44      	itt	mi
 800cda8:	2320      	movmi	r3, #32
 800cdaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdae:	0713      	lsls	r3, r2, #28
 800cdb0:	bf44      	itt	mi
 800cdb2:	232b      	movmi	r3, #43	@ 0x2b
 800cdb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdb8:	f89a 3000 	ldrb.w	r3, [sl]
 800cdbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdbe:	d015      	beq.n	800cdec <_vfiprintf_r+0x120>
 800cdc0:	4654      	mov	r4, sl
 800cdc2:	2000      	movs	r0, #0
 800cdc4:	f04f 0c0a 	mov.w	ip, #10
 800cdc8:	9a07      	ldr	r2, [sp, #28]
 800cdca:	4621      	mov	r1, r4
 800cdcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdd0:	3b30      	subs	r3, #48	@ 0x30
 800cdd2:	2b09      	cmp	r3, #9
 800cdd4:	d94b      	bls.n	800ce6e <_vfiprintf_r+0x1a2>
 800cdd6:	b1b0      	cbz	r0, 800ce06 <_vfiprintf_r+0x13a>
 800cdd8:	9207      	str	r2, [sp, #28]
 800cdda:	e014      	b.n	800ce06 <_vfiprintf_r+0x13a>
 800cddc:	eba0 0308 	sub.w	r3, r0, r8
 800cde0:	fa09 f303 	lsl.w	r3, r9, r3
 800cde4:	4313      	orrs	r3, r2
 800cde6:	46a2      	mov	sl, r4
 800cde8:	9304      	str	r3, [sp, #16]
 800cdea:	e7d2      	b.n	800cd92 <_vfiprintf_r+0xc6>
 800cdec:	9b03      	ldr	r3, [sp, #12]
 800cdee:	1d19      	adds	r1, r3, #4
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	9103      	str	r1, [sp, #12]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	bfbb      	ittet	lt
 800cdf8:	425b      	neglt	r3, r3
 800cdfa:	f042 0202 	orrlt.w	r2, r2, #2
 800cdfe:	9307      	strge	r3, [sp, #28]
 800ce00:	9307      	strlt	r3, [sp, #28]
 800ce02:	bfb8      	it	lt
 800ce04:	9204      	strlt	r2, [sp, #16]
 800ce06:	7823      	ldrb	r3, [r4, #0]
 800ce08:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce0a:	d10a      	bne.n	800ce22 <_vfiprintf_r+0x156>
 800ce0c:	7863      	ldrb	r3, [r4, #1]
 800ce0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce10:	d132      	bne.n	800ce78 <_vfiprintf_r+0x1ac>
 800ce12:	9b03      	ldr	r3, [sp, #12]
 800ce14:	3402      	adds	r4, #2
 800ce16:	1d1a      	adds	r2, r3, #4
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	9203      	str	r2, [sp, #12]
 800ce1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce20:	9305      	str	r3, [sp, #20]
 800ce22:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ceec <_vfiprintf_r+0x220>
 800ce26:	2203      	movs	r2, #3
 800ce28:	4650      	mov	r0, sl
 800ce2a:	7821      	ldrb	r1, [r4, #0]
 800ce2c:	f7fe f971 	bl	800b112 <memchr>
 800ce30:	b138      	cbz	r0, 800ce42 <_vfiprintf_r+0x176>
 800ce32:	2240      	movs	r2, #64	@ 0x40
 800ce34:	9b04      	ldr	r3, [sp, #16]
 800ce36:	eba0 000a 	sub.w	r0, r0, sl
 800ce3a:	4082      	lsls	r2, r0
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	3401      	adds	r4, #1
 800ce40:	9304      	str	r3, [sp, #16]
 800ce42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce46:	2206      	movs	r2, #6
 800ce48:	4829      	ldr	r0, [pc, #164]	@ (800cef0 <_vfiprintf_r+0x224>)
 800ce4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce4e:	f7fe f960 	bl	800b112 <memchr>
 800ce52:	2800      	cmp	r0, #0
 800ce54:	d03f      	beq.n	800ced6 <_vfiprintf_r+0x20a>
 800ce56:	4b27      	ldr	r3, [pc, #156]	@ (800cef4 <_vfiprintf_r+0x228>)
 800ce58:	bb1b      	cbnz	r3, 800cea2 <_vfiprintf_r+0x1d6>
 800ce5a:	9b03      	ldr	r3, [sp, #12]
 800ce5c:	3307      	adds	r3, #7
 800ce5e:	f023 0307 	bic.w	r3, r3, #7
 800ce62:	3308      	adds	r3, #8
 800ce64:	9303      	str	r3, [sp, #12]
 800ce66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce68:	443b      	add	r3, r7
 800ce6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce6c:	e76a      	b.n	800cd44 <_vfiprintf_r+0x78>
 800ce6e:	460c      	mov	r4, r1
 800ce70:	2001      	movs	r0, #1
 800ce72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce76:	e7a8      	b.n	800cdca <_vfiprintf_r+0xfe>
 800ce78:	2300      	movs	r3, #0
 800ce7a:	f04f 0c0a 	mov.w	ip, #10
 800ce7e:	4619      	mov	r1, r3
 800ce80:	3401      	adds	r4, #1
 800ce82:	9305      	str	r3, [sp, #20]
 800ce84:	4620      	mov	r0, r4
 800ce86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce8a:	3a30      	subs	r2, #48	@ 0x30
 800ce8c:	2a09      	cmp	r2, #9
 800ce8e:	d903      	bls.n	800ce98 <_vfiprintf_r+0x1cc>
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d0c6      	beq.n	800ce22 <_vfiprintf_r+0x156>
 800ce94:	9105      	str	r1, [sp, #20]
 800ce96:	e7c4      	b.n	800ce22 <_vfiprintf_r+0x156>
 800ce98:	4604      	mov	r4, r0
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cea0:	e7f0      	b.n	800ce84 <_vfiprintf_r+0x1b8>
 800cea2:	ab03      	add	r3, sp, #12
 800cea4:	9300      	str	r3, [sp, #0]
 800cea6:	462a      	mov	r2, r5
 800cea8:	4630      	mov	r0, r6
 800ceaa:	4b13      	ldr	r3, [pc, #76]	@ (800cef8 <_vfiprintf_r+0x22c>)
 800ceac:	a904      	add	r1, sp, #16
 800ceae:	f7fd fbcd 	bl	800a64c <_printf_float>
 800ceb2:	4607      	mov	r7, r0
 800ceb4:	1c78      	adds	r0, r7, #1
 800ceb6:	d1d6      	bne.n	800ce66 <_vfiprintf_r+0x19a>
 800ceb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ceba:	07d9      	lsls	r1, r3, #31
 800cebc:	d405      	bmi.n	800ceca <_vfiprintf_r+0x1fe>
 800cebe:	89ab      	ldrh	r3, [r5, #12]
 800cec0:	059a      	lsls	r2, r3, #22
 800cec2:	d402      	bmi.n	800ceca <_vfiprintf_r+0x1fe>
 800cec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cec6:	f7fe f923 	bl	800b110 <__retarget_lock_release_recursive>
 800ceca:	89ab      	ldrh	r3, [r5, #12]
 800cecc:	065b      	lsls	r3, r3, #25
 800cece:	f53f af1f 	bmi.w	800cd10 <_vfiprintf_r+0x44>
 800ced2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ced4:	e71e      	b.n	800cd14 <_vfiprintf_r+0x48>
 800ced6:	ab03      	add	r3, sp, #12
 800ced8:	9300      	str	r3, [sp, #0]
 800ceda:	462a      	mov	r2, r5
 800cedc:	4630      	mov	r0, r6
 800cede:	4b06      	ldr	r3, [pc, #24]	@ (800cef8 <_vfiprintf_r+0x22c>)
 800cee0:	a904      	add	r1, sp, #16
 800cee2:	f7fd fe51 	bl	800ab88 <_printf_i>
 800cee6:	e7e4      	b.n	800ceb2 <_vfiprintf_r+0x1e6>
 800cee8:	0800da58 	.word	0x0800da58
 800ceec:	0800da5e 	.word	0x0800da5e
 800cef0:	0800da62 	.word	0x0800da62
 800cef4:	0800a64d 	.word	0x0800a64d
 800cef8:	0800cca9 	.word	0x0800cca9

0800cefc <__swbuf_r>:
 800cefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cefe:	460e      	mov	r6, r1
 800cf00:	4614      	mov	r4, r2
 800cf02:	4605      	mov	r5, r0
 800cf04:	b118      	cbz	r0, 800cf0e <__swbuf_r+0x12>
 800cf06:	6a03      	ldr	r3, [r0, #32]
 800cf08:	b90b      	cbnz	r3, 800cf0e <__swbuf_r+0x12>
 800cf0a:	f7fd ffe9 	bl	800aee0 <__sinit>
 800cf0e:	69a3      	ldr	r3, [r4, #24]
 800cf10:	60a3      	str	r3, [r4, #8]
 800cf12:	89a3      	ldrh	r3, [r4, #12]
 800cf14:	071a      	lsls	r2, r3, #28
 800cf16:	d501      	bpl.n	800cf1c <__swbuf_r+0x20>
 800cf18:	6923      	ldr	r3, [r4, #16]
 800cf1a:	b943      	cbnz	r3, 800cf2e <__swbuf_r+0x32>
 800cf1c:	4621      	mov	r1, r4
 800cf1e:	4628      	mov	r0, r5
 800cf20:	f000 f82a 	bl	800cf78 <__swsetup_r>
 800cf24:	b118      	cbz	r0, 800cf2e <__swbuf_r+0x32>
 800cf26:	f04f 37ff 	mov.w	r7, #4294967295
 800cf2a:	4638      	mov	r0, r7
 800cf2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf2e:	6823      	ldr	r3, [r4, #0]
 800cf30:	6922      	ldr	r2, [r4, #16]
 800cf32:	b2f6      	uxtb	r6, r6
 800cf34:	1a98      	subs	r0, r3, r2
 800cf36:	6963      	ldr	r3, [r4, #20]
 800cf38:	4637      	mov	r7, r6
 800cf3a:	4283      	cmp	r3, r0
 800cf3c:	dc05      	bgt.n	800cf4a <__swbuf_r+0x4e>
 800cf3e:	4621      	mov	r1, r4
 800cf40:	4628      	mov	r0, r5
 800cf42:	f7ff fd9b 	bl	800ca7c <_fflush_r>
 800cf46:	2800      	cmp	r0, #0
 800cf48:	d1ed      	bne.n	800cf26 <__swbuf_r+0x2a>
 800cf4a:	68a3      	ldr	r3, [r4, #8]
 800cf4c:	3b01      	subs	r3, #1
 800cf4e:	60a3      	str	r3, [r4, #8]
 800cf50:	6823      	ldr	r3, [r4, #0]
 800cf52:	1c5a      	adds	r2, r3, #1
 800cf54:	6022      	str	r2, [r4, #0]
 800cf56:	701e      	strb	r6, [r3, #0]
 800cf58:	6962      	ldr	r2, [r4, #20]
 800cf5a:	1c43      	adds	r3, r0, #1
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d004      	beq.n	800cf6a <__swbuf_r+0x6e>
 800cf60:	89a3      	ldrh	r3, [r4, #12]
 800cf62:	07db      	lsls	r3, r3, #31
 800cf64:	d5e1      	bpl.n	800cf2a <__swbuf_r+0x2e>
 800cf66:	2e0a      	cmp	r6, #10
 800cf68:	d1df      	bne.n	800cf2a <__swbuf_r+0x2e>
 800cf6a:	4621      	mov	r1, r4
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	f7ff fd85 	bl	800ca7c <_fflush_r>
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d0d9      	beq.n	800cf2a <__swbuf_r+0x2e>
 800cf76:	e7d6      	b.n	800cf26 <__swbuf_r+0x2a>

0800cf78 <__swsetup_r>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4b29      	ldr	r3, [pc, #164]	@ (800d020 <__swsetup_r+0xa8>)
 800cf7c:	4605      	mov	r5, r0
 800cf7e:	6818      	ldr	r0, [r3, #0]
 800cf80:	460c      	mov	r4, r1
 800cf82:	b118      	cbz	r0, 800cf8c <__swsetup_r+0x14>
 800cf84:	6a03      	ldr	r3, [r0, #32]
 800cf86:	b90b      	cbnz	r3, 800cf8c <__swsetup_r+0x14>
 800cf88:	f7fd ffaa 	bl	800aee0 <__sinit>
 800cf8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf90:	0719      	lsls	r1, r3, #28
 800cf92:	d422      	bmi.n	800cfda <__swsetup_r+0x62>
 800cf94:	06da      	lsls	r2, r3, #27
 800cf96:	d407      	bmi.n	800cfa8 <__swsetup_r+0x30>
 800cf98:	2209      	movs	r2, #9
 800cf9a:	602a      	str	r2, [r5, #0]
 800cf9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfa0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfa4:	81a3      	strh	r3, [r4, #12]
 800cfa6:	e033      	b.n	800d010 <__swsetup_r+0x98>
 800cfa8:	0758      	lsls	r0, r3, #29
 800cfaa:	d512      	bpl.n	800cfd2 <__swsetup_r+0x5a>
 800cfac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfae:	b141      	cbz	r1, 800cfc2 <__swsetup_r+0x4a>
 800cfb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfb4:	4299      	cmp	r1, r3
 800cfb6:	d002      	beq.n	800cfbe <__swsetup_r+0x46>
 800cfb8:	4628      	mov	r0, r5
 800cfba:	f7fe ff09 	bl	800bdd0 <_free_r>
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800cfc2:	89a3      	ldrh	r3, [r4, #12]
 800cfc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cfc8:	81a3      	strh	r3, [r4, #12]
 800cfca:	2300      	movs	r3, #0
 800cfcc:	6063      	str	r3, [r4, #4]
 800cfce:	6923      	ldr	r3, [r4, #16]
 800cfd0:	6023      	str	r3, [r4, #0]
 800cfd2:	89a3      	ldrh	r3, [r4, #12]
 800cfd4:	f043 0308 	orr.w	r3, r3, #8
 800cfd8:	81a3      	strh	r3, [r4, #12]
 800cfda:	6923      	ldr	r3, [r4, #16]
 800cfdc:	b94b      	cbnz	r3, 800cff2 <__swsetup_r+0x7a>
 800cfde:	89a3      	ldrh	r3, [r4, #12]
 800cfe0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cfe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfe8:	d003      	beq.n	800cff2 <__swsetup_r+0x7a>
 800cfea:	4621      	mov	r1, r4
 800cfec:	4628      	mov	r0, r5
 800cfee:	f000 f882 	bl	800d0f6 <__smakebuf_r>
 800cff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cff6:	f013 0201 	ands.w	r2, r3, #1
 800cffa:	d00a      	beq.n	800d012 <__swsetup_r+0x9a>
 800cffc:	2200      	movs	r2, #0
 800cffe:	60a2      	str	r2, [r4, #8]
 800d000:	6962      	ldr	r2, [r4, #20]
 800d002:	4252      	negs	r2, r2
 800d004:	61a2      	str	r2, [r4, #24]
 800d006:	6922      	ldr	r2, [r4, #16]
 800d008:	b942      	cbnz	r2, 800d01c <__swsetup_r+0xa4>
 800d00a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d00e:	d1c5      	bne.n	800cf9c <__swsetup_r+0x24>
 800d010:	bd38      	pop	{r3, r4, r5, pc}
 800d012:	0799      	lsls	r1, r3, #30
 800d014:	bf58      	it	pl
 800d016:	6962      	ldrpl	r2, [r4, #20]
 800d018:	60a2      	str	r2, [r4, #8]
 800d01a:	e7f4      	b.n	800d006 <__swsetup_r+0x8e>
 800d01c:	2000      	movs	r0, #0
 800d01e:	e7f7      	b.n	800d010 <__swsetup_r+0x98>
 800d020:	20000030 	.word	0x20000030

0800d024 <_raise_r>:
 800d024:	291f      	cmp	r1, #31
 800d026:	b538      	push	{r3, r4, r5, lr}
 800d028:	4605      	mov	r5, r0
 800d02a:	460c      	mov	r4, r1
 800d02c:	d904      	bls.n	800d038 <_raise_r+0x14>
 800d02e:	2316      	movs	r3, #22
 800d030:	6003      	str	r3, [r0, #0]
 800d032:	f04f 30ff 	mov.w	r0, #4294967295
 800d036:	bd38      	pop	{r3, r4, r5, pc}
 800d038:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d03a:	b112      	cbz	r2, 800d042 <_raise_r+0x1e>
 800d03c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d040:	b94b      	cbnz	r3, 800d056 <_raise_r+0x32>
 800d042:	4628      	mov	r0, r5
 800d044:	f000 f830 	bl	800d0a8 <_getpid_r>
 800d048:	4622      	mov	r2, r4
 800d04a:	4601      	mov	r1, r0
 800d04c:	4628      	mov	r0, r5
 800d04e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d052:	f000 b817 	b.w	800d084 <_kill_r>
 800d056:	2b01      	cmp	r3, #1
 800d058:	d00a      	beq.n	800d070 <_raise_r+0x4c>
 800d05a:	1c59      	adds	r1, r3, #1
 800d05c:	d103      	bne.n	800d066 <_raise_r+0x42>
 800d05e:	2316      	movs	r3, #22
 800d060:	6003      	str	r3, [r0, #0]
 800d062:	2001      	movs	r0, #1
 800d064:	e7e7      	b.n	800d036 <_raise_r+0x12>
 800d066:	2100      	movs	r1, #0
 800d068:	4620      	mov	r0, r4
 800d06a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d06e:	4798      	blx	r3
 800d070:	2000      	movs	r0, #0
 800d072:	e7e0      	b.n	800d036 <_raise_r+0x12>

0800d074 <raise>:
 800d074:	4b02      	ldr	r3, [pc, #8]	@ (800d080 <raise+0xc>)
 800d076:	4601      	mov	r1, r0
 800d078:	6818      	ldr	r0, [r3, #0]
 800d07a:	f7ff bfd3 	b.w	800d024 <_raise_r>
 800d07e:	bf00      	nop
 800d080:	20000030 	.word	0x20000030

0800d084 <_kill_r>:
 800d084:	b538      	push	{r3, r4, r5, lr}
 800d086:	2300      	movs	r3, #0
 800d088:	4d06      	ldr	r5, [pc, #24]	@ (800d0a4 <_kill_r+0x20>)
 800d08a:	4604      	mov	r4, r0
 800d08c:	4608      	mov	r0, r1
 800d08e:	4611      	mov	r1, r2
 800d090:	602b      	str	r3, [r5, #0]
 800d092:	f7f5 faca 	bl	800262a <_kill>
 800d096:	1c43      	adds	r3, r0, #1
 800d098:	d102      	bne.n	800d0a0 <_kill_r+0x1c>
 800d09a:	682b      	ldr	r3, [r5, #0]
 800d09c:	b103      	cbz	r3, 800d0a0 <_kill_r+0x1c>
 800d09e:	6023      	str	r3, [r4, #0]
 800d0a0:	bd38      	pop	{r3, r4, r5, pc}
 800d0a2:	bf00      	nop
 800d0a4:	200028d4 	.word	0x200028d4

0800d0a8 <_getpid_r>:
 800d0a8:	f7f5 bab8 	b.w	800261c <_getpid>

0800d0ac <__swhatbuf_r>:
 800d0ac:	b570      	push	{r4, r5, r6, lr}
 800d0ae:	460c      	mov	r4, r1
 800d0b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0b4:	4615      	mov	r5, r2
 800d0b6:	2900      	cmp	r1, #0
 800d0b8:	461e      	mov	r6, r3
 800d0ba:	b096      	sub	sp, #88	@ 0x58
 800d0bc:	da0c      	bge.n	800d0d8 <__swhatbuf_r+0x2c>
 800d0be:	89a3      	ldrh	r3, [r4, #12]
 800d0c0:	2100      	movs	r1, #0
 800d0c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d0c6:	bf14      	ite	ne
 800d0c8:	2340      	movne	r3, #64	@ 0x40
 800d0ca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	6031      	str	r1, [r6, #0]
 800d0d2:	602b      	str	r3, [r5, #0]
 800d0d4:	b016      	add	sp, #88	@ 0x58
 800d0d6:	bd70      	pop	{r4, r5, r6, pc}
 800d0d8:	466a      	mov	r2, sp
 800d0da:	f000 f849 	bl	800d170 <_fstat_r>
 800d0de:	2800      	cmp	r0, #0
 800d0e0:	dbed      	blt.n	800d0be <__swhatbuf_r+0x12>
 800d0e2:	9901      	ldr	r1, [sp, #4]
 800d0e4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d0e8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d0ec:	4259      	negs	r1, r3
 800d0ee:	4159      	adcs	r1, r3
 800d0f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0f4:	e7eb      	b.n	800d0ce <__swhatbuf_r+0x22>

0800d0f6 <__smakebuf_r>:
 800d0f6:	898b      	ldrh	r3, [r1, #12]
 800d0f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0fa:	079d      	lsls	r5, r3, #30
 800d0fc:	4606      	mov	r6, r0
 800d0fe:	460c      	mov	r4, r1
 800d100:	d507      	bpl.n	800d112 <__smakebuf_r+0x1c>
 800d102:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d106:	6023      	str	r3, [r4, #0]
 800d108:	6123      	str	r3, [r4, #16]
 800d10a:	2301      	movs	r3, #1
 800d10c:	6163      	str	r3, [r4, #20]
 800d10e:	b003      	add	sp, #12
 800d110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d112:	466a      	mov	r2, sp
 800d114:	ab01      	add	r3, sp, #4
 800d116:	f7ff ffc9 	bl	800d0ac <__swhatbuf_r>
 800d11a:	9f00      	ldr	r7, [sp, #0]
 800d11c:	4605      	mov	r5, r0
 800d11e:	4639      	mov	r1, r7
 800d120:	4630      	mov	r0, r6
 800d122:	f7fe fec7 	bl	800beb4 <_malloc_r>
 800d126:	b948      	cbnz	r0, 800d13c <__smakebuf_r+0x46>
 800d128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d12c:	059a      	lsls	r2, r3, #22
 800d12e:	d4ee      	bmi.n	800d10e <__smakebuf_r+0x18>
 800d130:	f023 0303 	bic.w	r3, r3, #3
 800d134:	f043 0302 	orr.w	r3, r3, #2
 800d138:	81a3      	strh	r3, [r4, #12]
 800d13a:	e7e2      	b.n	800d102 <__smakebuf_r+0xc>
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d146:	81a3      	strh	r3, [r4, #12]
 800d148:	9b01      	ldr	r3, [sp, #4]
 800d14a:	6020      	str	r0, [r4, #0]
 800d14c:	b15b      	cbz	r3, 800d166 <__smakebuf_r+0x70>
 800d14e:	4630      	mov	r0, r6
 800d150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d154:	f000 f81e 	bl	800d194 <_isatty_r>
 800d158:	b128      	cbz	r0, 800d166 <__smakebuf_r+0x70>
 800d15a:	89a3      	ldrh	r3, [r4, #12]
 800d15c:	f023 0303 	bic.w	r3, r3, #3
 800d160:	f043 0301 	orr.w	r3, r3, #1
 800d164:	81a3      	strh	r3, [r4, #12]
 800d166:	89a3      	ldrh	r3, [r4, #12]
 800d168:	431d      	orrs	r5, r3
 800d16a:	81a5      	strh	r5, [r4, #12]
 800d16c:	e7cf      	b.n	800d10e <__smakebuf_r+0x18>
	...

0800d170 <_fstat_r>:
 800d170:	b538      	push	{r3, r4, r5, lr}
 800d172:	2300      	movs	r3, #0
 800d174:	4d06      	ldr	r5, [pc, #24]	@ (800d190 <_fstat_r+0x20>)
 800d176:	4604      	mov	r4, r0
 800d178:	4608      	mov	r0, r1
 800d17a:	4611      	mov	r1, r2
 800d17c:	602b      	str	r3, [r5, #0]
 800d17e:	f7f5 fab3 	bl	80026e8 <_fstat>
 800d182:	1c43      	adds	r3, r0, #1
 800d184:	d102      	bne.n	800d18c <_fstat_r+0x1c>
 800d186:	682b      	ldr	r3, [r5, #0]
 800d188:	b103      	cbz	r3, 800d18c <_fstat_r+0x1c>
 800d18a:	6023      	str	r3, [r4, #0]
 800d18c:	bd38      	pop	{r3, r4, r5, pc}
 800d18e:	bf00      	nop
 800d190:	200028d4 	.word	0x200028d4

0800d194 <_isatty_r>:
 800d194:	b538      	push	{r3, r4, r5, lr}
 800d196:	2300      	movs	r3, #0
 800d198:	4d05      	ldr	r5, [pc, #20]	@ (800d1b0 <_isatty_r+0x1c>)
 800d19a:	4604      	mov	r4, r0
 800d19c:	4608      	mov	r0, r1
 800d19e:	602b      	str	r3, [r5, #0]
 800d1a0:	f7f5 fab1 	bl	8002706 <_isatty>
 800d1a4:	1c43      	adds	r3, r0, #1
 800d1a6:	d102      	bne.n	800d1ae <_isatty_r+0x1a>
 800d1a8:	682b      	ldr	r3, [r5, #0]
 800d1aa:	b103      	cbz	r3, 800d1ae <_isatty_r+0x1a>
 800d1ac:	6023      	str	r3, [r4, #0]
 800d1ae:	bd38      	pop	{r3, r4, r5, pc}
 800d1b0:	200028d4 	.word	0x200028d4

0800d1b4 <_init>:
 800d1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1b6:	bf00      	nop
 800d1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1ba:	bc08      	pop	{r3}
 800d1bc:	469e      	mov	lr, r3
 800d1be:	4770      	bx	lr

0800d1c0 <_fini>:
 800d1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1c2:	bf00      	nop
 800d1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1c6:	bc08      	pop	{r3}
 800d1c8:	469e      	mov	lr, r3
 800d1ca:	4770      	bx	lr
